cscope 15 $HOME/PROJECTS/lib/clockwork               0002464333
	@src/glsl/deferred.fs

3 
unif‹m
 
ßm∂î2D
 
	gcﬁ‹Tex
;

4 
unif‹m
 
ßm∂î2D
 
	gn‹mÆTex
;

5 
unif‹m
 
ßm∂î2D
 
	gdïthTex
;

7 
smoŸh
 
ö
 
vec2
 
	g·exCo‹d
;

9 
out
 
vec4
 
	goutCﬁ‹
;

12 
vec4
 
	gn‹mÆ
;

13 
vec4
 
	gcﬁ‹
;

15 
	$™tiAlüs
()

18 
	}
}

20 
	$ønd
(
vec2
 
co
)

22  
	`‰a˘
(
	`sö
(
	`dŸ
(
co
.
xy
, 
	`vec2
(12.9898, 78.233))) * 43758.5453);

23 
	}
}

25 
	$ønd2
(
vec2
 
co
)

27  
	`‰a˘
(
	`cos
(
	`dŸ
(
co
.
yx
, 
	`vec2
(32.4324, 47.1324))) * 24396.9887);

28 
	}
}

30 
	$ÀΩ
(
t
, 
a
, 
b
)

32  (
a
+
t
*(
b
-a));

33 
	}
}

35 
	$s_curve
(
t
)

37  (
t
*t*t*(10+t*(-15+(6*t))));

38 
	}
}

40 
	$≥æö2
(
vec2
 
co
)

43 
vec2
 
Êco
 = 
	`Êo‹
(
co
);

44 
vec2
 
‰co
 = 
	`‰a˘
(
co
);

45 
vec2
 
v0
 = 
	`n‹mÆize
(
	`vec2
(
	`ønd
(
Êco
), 
	`ønd2
(flco)));

46 
vec2
 
off£t
 = 
	`vec2
(1.0, 0.0);

47 
vec2
 
v1
 = 
	`n‹mÆize
(
	`vec2
(
	`ønd
(
Êco
 + 
off£t
), 
	`ønd2
(flco + offset)));

48 
off£t
 = 
	`vec2
(1.0, 1.0);

49 
vec2
 
v2
 = 
	`n‹mÆize
(
	`vec2
(
	`ønd
(
Êco
 + 
off£t
), 
	`ønd2
(flco + offset)));

50 
off£t
 = 
	`vec2
(0.0, 1.0);

51 
vec2
 
v3
 = 
	`n‹mÆize
(
	`vec2
(
	`ønd
(
Êco
 + 
off£t
), 
	`ønd2
(flco + offset)));

53 
s
 = 
	`dŸ
(
v0
, 
‰co
);

54 
off£t
 = 
	`vec2
(-1.0, 0.0);

55 
t
 = 
	`dŸ
(
v1
, 
‰co
 + 
off£t
);

56 
off£t
 = 
	`vec2
(-1.0, -1.0);

57 
u
 = 
	`dŸ
(
v2
, 
‰co
 + 
off£t
);

58 
off£t
 = 
	`vec2
(0.0, -1.0);

59 
v
 = 
	`dŸ
(
v3
, 
‰co
 + 
off£t
);

61 
px0
 = 
	`ÀΩ
(
	`s_curve
(
‰co
.
x
), 
s
, 
t
);

62 
px1
 = 
	`ÀΩ
(
	`s_curve
(
‰co
.
x
), 
v
, 
u
);

64  
	`ÀΩ
(
	`s_curve
(
‰co
.
y
), 
px0
, 
px1
);

66 
	}
}

68 
	$sobñ
(
ßm∂î2D
 
ãx
)

70 
vec4
 
cﬁ‹L
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(-1,0));

71 
vec4
 
cﬁ‹R
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(1,0));

72 
vec4
 
cﬁ‹U
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(0,1));

73 
vec4
 
cﬁ‹D
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(0,-1));

74 
vec4
 
cﬁ‹UL
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(-1,1));

75 
vec4
 
cﬁ‹UR
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(1,1));

76 
vec4
 
cﬁ‹DL
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(-1,-1));

77 
vec4
 
cﬁ‹DR
 = 
	`ãxtuªOff£t
(
ãx
, 
·exCo‹d
, 
	`ivec2
(1,-1));

79 
vec4
 
gx
 = 
cﬁ‹R
 * 2 + 
cﬁ‹UR
 + 
cﬁ‹DR
 - 
cﬁ‹DL
 - cﬁ‹UR - 
cﬁ‹L
 * 2;

80 
vec4
 
gy
 = 
cﬁ‹D
 * 2 + 
cﬁ‹DL
 + 
cﬁ‹DR
 - 
cﬁ‹UL
 - 
cﬁ‹UR
 - 
cﬁ‹U
 * 2;

81 
g
 = 
	`Àngth
(
	`abs
(
	`sqπ
(
gx
 * gx + 
gy
 * gy)));

83  
g
;

84 
	}
}

86 
vec4
 
	$≠∂yLightög
(
vec4
 
cﬁ‹VÆ
)

88 
SPECULARITY
 = 0.5;

89 
AMBIENT
 = 0.25;

91 
ambõ¡
;

92 
difu£
;

93 
•ecuœr
;

94 
tŸÆ
;

97 
vec3
 
lightPos
 = 
	`n‹mÆize
(
	`vec3
(100, 100, 0));

98 
vec3
 
h
 = 
	`n‹mÆize
(
lightPos
 + 
	`vec3
(0,0,1));

100 
ambõ¡
 = 
AMBIENT
;

102 
difu£
 = 
	`˛amp
(
	`dŸ
(
lightPos
, 
n‹mÆ
.
xyz
), 0.0f, 1.0f);

103 
•ecuœr
 = 
	`˛amp
(
SPECULARITY
 * 
	`pow
(
	`dŸ
(
n‹mÆ
.
xyz
, 
h
), 32.0f), 0.0f, 1.0f)

104 / 
	`Àngth
(
	`ãxtuª
(
dïthTex
, 
·exCo‹d
));

106 
tŸÆ
 = 
	`max
(
ambõ¡
, 
difu£
);

108  
	`vec4
(
tŸÆ
 * 
cﬁ‹VÆ
.
rgb
 + 
	`vec3
(
•ecuœr
), 1);

109 
	}
}

111 
	$maö
()

113 
cﬁ‹
 = 
	`ãxtuª
(
cﬁ‹Tex
, 
·exCo‹d
);

114 
n‹mÆ
 = 
	`ãxtuª
(
n‹mÆTex
, 
·exCo‹d
);

115 
cﬁ‹
 = 
	`≠∂yLightög
(color);

116 
outCﬁ‹
 = 
cﬁ‹
 - 
	`sobñ
(
cﬁ‹Tex
Ë/ (
	`ãxtuª
(
dïthTex
, 
·exCo‹d
).
x
 * 50.0);

117 
	}
}

	@src/io/file.c

8 
	~<uni°d.h
>

9 
	~<î∫o.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	~"fûe.h
"

21 *
	$fûe_toSåög
(*
fûíame
)

23 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

24 if(!
fûe
)  0;

26 
	`f£ek
(
fûe
, 0, 
SEEK_END
);

27 
size_t
 
fûe_sz
 = 
	`·ñl
(
fûe
);

28 
	`f£ek
(
fûe
, 0, 
SEEK_SET
);

29 *
°r
 = 
	`mÆloc
((
fûe_sz
) + 1);

30 
	`mem£t
(
°r
, 0, 
fûe_sz
 + 1);

31 
	`‰ód
(
°r
, 
fûe_sz
, (), 
fûe
);

32 
	`f˛o£
(
fûe
);

33  
°r
;

34 
	}
}

43 
	$fûe_ªadLöe
(
FILE
 *
f
, *
buf
, 
size_t
 
˙t
)

45 
tmp
;

46 
max
 = 
˙t
;

47 if(
	`„of
(
f
))  -1;

48 (
tmp
 = 
	`fgëc
(
f
)Ë!'\n' && !
	`„of
(fË&& 
˙t
){

49 *
buf
++ = 
tmp
;

50 
˙t
--;

52  
max
 - 
˙t
;

53 
	}
}

59 
size_t
 
	$fûe_size
(
FILE
 *
Â
)

61 
cur
 = 
	`·ñl
(
Â
);

62 
size
;

63 
	`f£ek
(
Â
, 0, 
SEEK_END
);

64 
size
 = 
	`·ñl
(
Â
);

65 
	`f£ek
(
Â
, 
cur
, 
SEEK_SET
);

66  
size
;

67 
	}
}

69 *
	$fûe_ext
(*
fûíame
)

71 *
p
;

72 i‡((
p
=
	`°rchr
(
fûíame
, '.')))

73  
p
+1;

75 
	}
}

77 
boﬁ
 
	$fûe_exi°s
(*
fûím
)

79 
ío
 = 
î∫o
;

80 
boﬁ
 
ªt
 = 
	`ac˚ss
(
fûím
, 
F_OK
);

81 
î∫o
 = 
ío
;

82  
ªt
;

83 
	}
}

	@src/io/file.h

8 #i‚de‡
_FILE_H


9 
	#_FILE_H


	)

11 
	~<°dio.h
>

12 
	~<°dboﬁ.h
>

14 *
fûe_toSåög
(*
fûíame
);

15 
fûe_ªadLöe
(
FILE
 *
Â
, *
buf
, 
size_t
 
˙t
);

16 
size_t
 
fûe_size
(
FILE
 *
Â
);

17 *
fûe_ext
(*
fûíame
);

18 
boﬁ
 
fûe_exi°s
(*
fûím
);

	@src/io/gl/color.h

8 #i‚de‡
_COLOR_H


9 
	#_COLOR_H


	)

11 
	~<°döt.h
>

13 
uöt32_t
 
	trgba_t
;

14 
uöt32_t
 
	trgb_t
;

	@src/io/gl/cubemap.c

8 
	~<GL/gÀw.h
>

9 
	~<GL/gl.h
>

11 
	~"gl.h
"

12 
	~"cubem≠.h
"

14 
	$cubem≠_öô
(
Cubem≠
 *
c
, 
›ti⁄s
)

16 
c
->
w
 = 0;

17 
c
->
h
 = 0;

18 
c
->
›ti⁄s
 = options;

19 
c
->
f‹m©
 = 0;

20 
c
->
glid
 = 0;

22 
i
;

23 
i
 = 0; i < 6; i++)

27 
	}
}

29 
	$cubem≠_lﬂd
(
Cubem≠
 *
c
, 
Cubem≠_image
 
i
, c⁄° *
fûím
)

32 
	}
}

34 
	$cubem≠_föÆize
(
Cubem≠
 *
c
)

37 
	}
}

	@src/io/gl/cubemap.h

8 #i‚de‡
_CUBEMAP_H


9 
	#_CUBEMAP_H


	)

11 
	~<GL/gÀw.h
>

12 
	~<GL/gl.h
>

14 
	~<°döt.h
>

16 
	sCubem≠


18 
uöt16_t
 
	mw
;

19 
uöt16_t
 
	mh
;

20 
uöt8_t
 
	m›ti⁄s
;

21 
uöt16_t
 
	mf‹m©
;

22 
GLuöt
 
	mglid
;

23 *
	mbôs
;

24 } 
	tCubem≠
;

26 
	eCubem≠_image


28 
	mCUBEMAP_POSITIVE_X
,

29 
	mCUBEMAP_POSITIVE_Y
,

30 
	mCUBEMAP_POSITIVE_Z
,

31 
	mCUBEMAP_NEGATIVE_X
,

32 
	mCUBEMAP_NEGATIVE_Y
,

33 
	mCUBEMAP_NEGATIVE_Z


36 
cubem≠_öô
(
Cubem≠
 *
c
, 
›ti⁄s
);

37 
cubem≠_lﬂd
(
Cubem≠
 *
c
, 
Cubem≠_image
 
i
, c⁄° *
fûím
);

38 
cubem≠_föÆize
(
Cubem≠
 *
c
);

	@src/io/gl/framebuffer.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

11 
	~<GL/gÀw.h
>

12 
	~<GL/gl.h
>

14 
	~"io/gl/ãxtuª.h
"

15 
	~"io/gl/shadî.h
"

17 
	~"‰amebuf„r.h
"

19 
	#NTEXTURES
 16

	)

22 c⁄° 
uöt8_t
 
	gfb_vîts
[] = {

31 
	$‰amebuf„r_addTextuª
(
Fømebuf„r
 *
f
, *
nm
, 
ãxtuª_ty≥
)

33 
f
->
ãxtuªT¨gës
[f->
¡extuªs
] = 
	`glGëUnif‹mLoˇti⁄
(f->
shadî
->
¥ogøm
, 
nm
);

34 
	`glBödFømebuf„r
(
GL_FRAMEBUFFER
, 
f
->
fbo
);

36 
f
->
g…extuªs
[f->
¡extuªs
] = 
	`mÆloc
((
Textuª
));

38 
	`ãxtuª_öô
(
f
->
g…extuªs
[f->
¡extuªs
], f->
w
, f->
h
, 
TEXTURE_HARDWARE
, 
ãxtuª_ty≥
);

40 
GLíum
 
©èchmít
;

41 if(
ãxtuª_ty≥
 =
TEXTURE_DEPTH
)

43 
©èchmít
 = 
GL_DEPTH_ATTACHMENT
;

46 
©èchmít
 = 
GL_COLOR_ATTACHMENT0
 + 
f
->
ncﬁ‹ãxtuªs
;

47 
f
->
ncﬁ‹ãxtuªs
++;

50 
	`glFømebuf„rTextuª2D
(
GL_FRAMEBUFFER
, 
©èchmít
,

51 
GL_TEXTURE_2D
, 
f
->
g…extuªs
[f->
¡extuªs
]->
glid
, 0);

53 
f
->
¡extuªs
++;

54 
	`glBödFømebuf„r
(
GL_FRAMEBUFFER
, 0);

55 
	`glBödTextuª
(
GL_TEXTURE_2D
, 0);

56 
	}
}

61 
	$‰amebuf„r_öô
(
Fømebuf„r
 *
f
, 
w
, 
h
, 
shadî_t
 *
s
)

63 
f
->
w
 = w;

64 
f
->
h
 = h;

65 
f
->
shadî
 = 
s
;

67 
	`glGíFømebuf„rs
(1, &
f
->
fbo
);

70 
	`glGíBuf„rs
(1, &
f
->
vbo
);

71 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
f
->
vbo
);

72 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
fb_vîts
), fb_vîts, 
GL_STATIC_DRAW
);

73 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 0);

77 
f
->
¡extuªs
 = 0;

78 
f
->
ncﬁ‹ãxtuªs
 = 0;

79 
f
->
ãxtuªs
 = 
	`mÆloc
((
GLuöt
Ë* 
NTEXTURES
);

80 
f
->
ãxtuªT¨gës
 = 
	`mÆloc
((
GLuöt
Ë* 
NTEXTURES
);

81 
	`glGíTextuªs
(
NTEXTURES
, 
f
->
ãxtuªs
);

83 
f
->
g…extuªs
 = 
	`mÆloc
((
ãxtuª_t
*Ë* 
NTEXTURES
);

85 #ifde‡
DEBUG


86 if(
	`glCheckFømebuf„rSètus
(
GL_DRAW_FRAMEBUFFER
Ë!
GL_FRAMEBUFFER_COMPLETE
){

87 
	`¥ötf
("ERROR, INCOMPLETE FRAMEBUFFER: %d\n",

88 
	`glCheckFømebuf„rSètus
(
GL_DRAW_FRAMEBUFFER
));

89 
	`¥ötf
("FBSTATUS: %d\n", 
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
);

90 
	`exô
(-1);

94 
	}
}

96 
	$‰amebuf„r_föÆize
(
Fømebuf„r
 *
fb
)

98 
	`glDñëeTextuªs
(
fb
->
¡extuªs
, fb->
ãxtuªs
);

99 
	`glDñëeFømebuf„rs
(1, &
fb
->
fbo
);

100 
	`glDñëeBuf„rs
(1, &
fb
->
vbo
);

101 
	`‰ì
(
fb
->
ãxtuªs
);

102 
	`‰ì
(
fb
->
ãxtuªT¨gës
);

103 
	}
}

105 
	$‰amebuf„r_£tshadî
(
Fømebuf„r
 *
f
, 
Shadî
 *
s
)

107 
f
->
shadî
 = 
s
;

109 
	}
}

111 
Textuª
 **
	$‰amebuf„r_ãxtuªs
(
Fømebuf„r
 *
f
)

113  
f
->
g…extuªs
;

114 
	}
}

116 
	$‰amebuf„r_¡extuªs
(
Fømebuf„r
 *
f
)

118  
f
->
¡extuªs
;

119 
	}
}

125 
	$‰amebuf„r_©èch_§c
(
Fømebuf„r
 *
f
)

127 
GLuöt
 
po¶oc
 = 
	`glGëAâribLoˇti⁄
(
f
->
shadî
->
¥ogøm
, "position");

129 
	`glU£Progøm
(
f
->
shadî
->
¥ogøm
);

131 
i
;

132 
övÆids
 = 0;

133 
i
 = 0; i < 
f
->
¡extuªs
; i++)

135 if(
f
->
ãxtuªT¨gës
[
i
] !
GL_INVALID_VALUE
)

137 
	`glA˘iveTextuª
(
GL_TEXTURE0
 + 
i
 - 
övÆids
);

138 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
f
->
g…extuªs
[
i
]->
glid
);

139 
	`glUnif‹m1i
(
f
->
ãxtuªT¨gës
[
i
], i - 
övÆids
);

141 
övÆids
++;

145 
	`glE«bÀVîãxAâribAºay
(
po¶oc
);

147 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
f
->
vbo
);

149 
	`glVîãxAâribPoöãr
(
po¶oc
, 3, 
GL_UNSIGNED_BYTE
, 
GL_TRUE
, 2 * (
uöt8_t
),

151 
	}
}

153 
	$‰amebuf„r_íd_§c
(
Fømebuf„r
 *
f
)

155 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

156 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 0);

157 
	`glDißbÀVîãxAâribAºay
(
	`glGëAâribLoˇti⁄
(
f
->
shadî
->
¥ogøm
,

159 
i
;

160 
i
 = 0; i < 
f
->
¡extuªs
; i++)

162 
	`glA˘iveTextuª
(
GL_TEXTURE0
 + 
i
);

163 
	`glBödTextuª
(
GL_TEXTURE_2D
, 0);

166 
	`glU£Progøm
(0);

167 
	}
}

	@src/io/gl/framebuffer.h

8 #i‚de‡
_FRAMEBUFFER_H


9 
	#_FRAMEBUFFER_H


	)

11 
	~<GL/gÀw.h
>

12 
	~<GL/gl.h
>

14 
	#FRAMEBUFFER_DEPTH
 1

	)

15 
	#FRAMEBUFFER_STENCIL
 2

	)

16 
	#FRAMEBUFFER_DEPTH_STENCIL
 3

	)

17 
	#FRAMEBUFFER_RGBA
 4

	)

18 
	#FRAMEBUFFER_INT
 5

	)

20 
	gShadî
;

21 
	gTextuª
;

23 
	sFømebuf„r
 {

24 
uöt16_t
 
	mw
;

25 
uöt16_t
 
	mh
;

26 
GLuöt
 
	mvbo
;

27 
GLuöt
 
	mfbo
;

28 
uöt16_t
 
	m¡extuªs
;

29 
uöt16_t
 
	mncﬁ‹ãxtuªs
;

30 
Textuª
 **
	mg…extuªs
;

31 
GLuöt
 *
	mãxtuªs
;

32 
GLuöt
 *
	mãxtuªT¨gës
;

33 
Shadî
 *
	mshadî
;

34 } 
	tFømebuf„r
;

36 
‰amebuf„r_öô
(
Fømebuf„r
 *
f
, 
w
, 
h
, 
Shadî
 *
s
);

37 
‰amebuf„r_ªsize
(
Fømebuf„r
 *
f
, 
w
, 
h
);

38 
‰amebuf„r_£tshadî
(
Fømebuf„r
 *
f
, 
Shadî
 *
s
);

39 
‰amebuf„r_addTextuª
(
Fømebuf„r
 *
f
, *
nm
, 
ty≥
);

40 
‰amebuf„r_föÆize
(
Fømebuf„r
 *
f
);

41 
Textuª
 **
‰amebuf„r_ãxtuªs
(
Fømebuf„r
 *
f
);

42 
‰amebuf„r_¡extuªs
(
Fømebuf„r
 *
f
);

44 
‰amebuf„r_©èch_§c
(
Fømebuf„r
 *
f
);

45 
‰amebuf„r_íd_§c
(
Fømebuf„r
 *
f
);

	@src/io/gl/fvmesh.c

9 
	~<as£π.h
>

10 
	~<î∫o.h
>

11 
	~<°dlib.h
>

12 
	~<°dboﬁ.h
>

13 
	~<°rög.h
>

15 
	~<f˙é.h
>

16 
	~<uni°d.h
>

17 
	~<sys/°©.h
>

19 
	~"utû/m©h/geom/åi.h
"

20 
	~"utû/m©h/vec.h
"

22 
	~"fvmesh.h
"

36 
	sfvmesh_hódî
 {

37 
uöt8_t
 
	mmagic
[3];

38 
uöt8_t
 
	mvîsi⁄
;

39 
uöt32_t
 
	mnvîts
;

40 
uöt32_t
 
	mnÁ˚s
;

41 
uöt32_t
 
	m√dges
;

42 
uöt32_t
 
	mnuvs
;

43 
uöt32_t
 
	mn£ams
;

44 
uöt16_t
 
	mf‹m©
;

45 
uöt8_t
 
	mPADDING
[6];

46 
	mvﬁume
;

47 } 
	tmesh_hódî
;

49 
	sfvmesh_vît
 {

50 
vec3
 
	mposôi⁄
;

51 
vec3
 
	mn‹mÆ
;

52 
uhvec2
 
	muv
;

53 
uöt8_t
 
	m∑ddög
[4];

54 } 
	tfvmesh_vît
;

56 
	sfvmesh_Á˚
 {

57 
uöt16_t
 
	muvs
[3];

58 } 
	tfvmesh_Á˚
;

60 
	sfvmesh_uv
 {

61 
uöt16_t
 
	mvît
;

62 
uöt16_t
 
	mm©îül
;

63 
uhvec2
 
	mco
;

64 } 
	tfvmesh_uv
;

72 #i‚de‡
O_BINARY


73 
	#O_BINARY
 0

	)

75 #i‚de‡
S_IRGRP


76 
	#S_IRGRP
 0

	)

78 #i‚de‡
S_IROTH


79 
	#S_IROTH
 0

	)

82 
	#EXT_UKN
 -1

	)

83 
	#EXT_MDL
 1

	)

85 
	#DEFAULT_DIR
 "ªs/"

	)

86 
	#DEFAULT_EXT
 ".mdl"

	)

89 
fvmesh_glBuf„rD©a
(
fvmesh_t
 *
m
);

96 
	$fvmesh_vît_add
(
fvmesh_t
 *
m
, *
v
)

98 if(
m
->
vîts
)

100 
	`v¨øy_add
(
m
->
vîts
, 
v
);

102 
	}
}

104 
	$fvmesh_vît_addÆl
(
fvmesh_t
 *
m
, 
n
, *
v
)

106 if(
m
->
vîts
)

111 
	}
}

117 
	$fvmesh_Á˚_add
(
fvmesh_t
 *
m
, *
f
)

119 if(
m
->
Á˚s
)

121 
	`v¨øy_add
(
m
->
Á˚s
, 
f
);

123 
	}
}

125 
	$fvmesh_Á˚_addÆl
(
fvmesh_t
 *
m
, 
n
, *
f
)

127 if(
m
->
Á˚s
)

132 
	}
}

138 
	$fvmesh_glBuf„rD©a
(
fvmesh_t
 *
m
)

140 
	`glGíBuf„rs
(1, &
m
->
vbo
);

141 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
m
->
vbo
);

142 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, 
	`v¨øy_d©asize
(
m
->
vîts
), 
	`v¨øy_d©≠å
(m->vîts), 
GL_STATIC_DRAW
);

143 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 0);

145 
	`glGíBuf„rs
(1, &
m
->
ibo
);

146 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
m
->
ibo
);

147 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, 
	`v¨øy_d©asize
(
m
->
Á˚s
), 
	`v¨øy_d©≠å
(m->Á˚s), 
GL_STATIC_DRAW
);

148 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

149 
	}
}

151 
	$fvmesh_öô
(
fvmesh_t
 *
m
, 
uöt16_t
 
f‹m©
)

153 
m
->
nvîts
 = 0;

154 
m
->
√dges
 = 0;

155 
m
->
nÁ˚s
 = 0;

156 
m
->
nuvs
 = 0;

157 
m
->
n£ams
 = 0;

158 
m
->
f‹m©
 = format;

160 
m
->
vîts
 = 
	`mÆloc
((
V¨øy
));

161 
m
->
edges
 = 
	`mÆloc
((
V¨øy
));

162 
m
->
Á˚s
 = 
	`mÆloc
((
V¨øy
));

163 
m
->
uvs
 = 
	`mÆloc
((
V¨øy
));

164 
m
->
£ams
 = 
	`mÆloc
((
V¨øy
));

165 
	`v¨øy_öô
(
m
->
vîts
, 
MESHFMT_VSZ
[
f‹m©
]);

167 
	`v¨øy_öô
(
m
->
Á˚s
, 
MESHFMT_FSZ
[
f‹m©
]);

170 
m
->
vbo
 = -1;

171 
m
->
ibo
 = -1;

172 
m
->
ãx
 = -1;

173 
	}
}

178 
	$fvmesh_föÆize
(
fvmesh_t
 *
m
)

180 
	`‰ì
(
m
->
vîts
);

181 
	`‰ì
(
m
->
edges
);

182 
	`‰ì
(
m
->
Á˚s
);

183 
	`‰ì
(
m
->
uvs
);

184 
	`‰ì
(
m
->
£ams
);

186 #i‚de‡
NO_GL


187 
	`glDñëeBuf„rs
(1, &
m
->
vbo
);

188 
	`glDñëeBuf„rs
(1, &
m
->
ibo
);

190 if(
m
->
ãx
 != -1)

192 
	`glDñëeTextuªs
(1, &
m
->
ãx
);

195 
	}
}

	@src/io/gl/fvmesh.h

9 #i‚de‡
_MESH_H


10 
	#_MESH_H


	)

12 
	~<GL/gÀw.h
>

13 
	~<GL/gl.h
>

15 
	~<°döt.h
>

17 
	~"utû/m©h/vec.h
"

18 
	~"utû/°ru˘/v¨øy.h
"

20 
	#FMT_MDL
 2

	)

22 
	#MESH_FV_3
 1

	)

23 
	#MESH_FV_3_3
 2

	)

24 
	#MESH_FV_3_3_2
 3

	)

25 
	#MESH_WE
 4

	)

27 
size_t
 
	gMESHFMT_VSZ
[] = {

34 
size_t
 
	gMESHFMT_FSZ
[] = {

36 (
uöt16_t
) * 3,

37 (
uöt16_t
) * 3,

38 (
uöt16_t
) * 3

49 
	gfvmesh_hódî
;

58 
	sfvmesh_t
 {

59 
uöt32_t
 
	mnvîts
;

60 
uöt32_t
 
	m√dges
;

61 
uöt32_t
 
	mnÁ˚s
;

62 
uöt32_t
 
	mnuvs
;

63 
uöt16_t
 
	mn£ams
;

64 
uöt16_t
 
	mf‹m©
;

65 
uöt16_t
 
	mm©îül
;

66 
V¨øy
 *
	mvîts
;

67 
V¨øy
 *
	medges
;

68 
V¨øy
 *
	mÁ˚s
;

69 
V¨øy
 *
	muvs
;

70 
V¨øy
 *
	m£ams
;

71 
GLuöt
 
	mvbo
;

72 
GLuöt
 
	mibo
;

73 
GLuöt
 
	mãx
;

74 } 
	tfvmesh_t
;

76 
fvmesh_öô
(
fvmesh_t
 *
m
, 
uöt16_t
 
f‹m©
);

77 
fvmesh_föÆize
(
fvmesh_t
 *
m
);

80 
fvmesh_vît_add
(
fvmesh_t
 *
m
, *
v
);

81 
fvmesh_vît_addÆl
(
fvmesh_t
 *
m
, 
n
, * 
v
);

83 
fvmesh_Á˚_add
(
fvmesh_t
 *
m
, *
f
);

84 
fvmesh_Á˚_addÆl
(
fvmesh_t
 *
m
, 
n
, *
f
);

	@src/io/gl/gl.c

8 
	~<°dlib.h
>

9 
	~<Æloˇ.h
>

10 
	~<as£π.h
>

11 
	~<°ddef.h
>

13 
	~<GL/gÀw.h
>

14 
	~<GL/gl.h
>

16 
	~"io/gl/‰amebuf„r.h
"

17 
	~"io/gl/mesh.h
"

18 
	~"io/gl/ãxtuª.h
"

19 
	~"io/gl/shadî.h
"

21 
	~"gl.h
"

23 
	#MAX_TEX
 16

	)

25 
ãxtuª_t
 *
	gacv_ãxtuª
[
MAX_TEX
] = {
NULL
};

26 
shadî_t
 *
	gacv_shadî
 = 
NULL
;

27 
mesh_t
 *
	gacv_mesh
 = 
NULL
;

28 
Fømebuf„r
 *
	g§c_‰amebuf„r
 = 
NULL
;

29 
Fømebuf„r
 *
	gd°_‰amebuf„r
 = 
NULL
;

31 
Shadî
 *
	gshadî2d
 = 
NULL
;

33 
	gIGLVERSION
 = 30;

35 
GLuöt
 
	gUNIT_SQUARE
;

36 c⁄° 
gl_vîãx_t
 
	gUNIT_SQUARE_VERTS
[] =

72 
	$gl_öô
()

74 
	`gÀwInô
();

75 
	`glCÀ¨Cﬁ‹
(0.0f, 0.0f, 0.0f, 0.0f);

77 
	`glE«bÀ
(
GL_BLEND
);

78 
	`glE«bÀ
(
GL_CULL_FACE
);

79 
	`glE«bÀ
(
GL_DEPTH_TEST
);

80 
	`glE«bÀ
(
GL_TEXTURE_CUBE_MAP_SEAMLESS
);

82 
	`glDïthFunc
(
GL_LEQUAL
);

83 
	`glBÀndFunc
(
GL_SRC_ALPHA
, 
GL_ONE_MINUS_SRC_ALPHA
);

86 
	`glGíBuf„rs
(1, &
UNIT_SQUARE
);

87 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
UNIT_SQUARE
);

88 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
UNIT_SQUARE_VERTS
), UNIT_SQUARE_VERTS, 
GL_STATIC_DRAW
);

89 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 0);

92 
shadî2d
 = 
	`mÆloc
((
Shadî
));

93 
	`shadî_öô
(
shadî2d
, "glsl/sprite");

94 
	`shadî_add_©åib
(
shadî2d
, "posôi⁄", 2, 
GL_FLOAT
, 
Ál£
, 32, (*) 0);

95 
	`shadî_add_‰agmít_ouçut
(
shadî2d
, "fragColor");

96 
	`shadî_add_ãxtuª_èrgë
(
shadî2d
, "tex0", 0);

97 
	}
}

99 
	$gl_bödshadî©åibuãs
()

101 
	`as£π
(
acv_shadî
);

103 
i
;

104 
i
 = 0; i < 
acv_shadî
->
«âribs
; i++)

106 
shadî_©åib_t
 *
©t
 = &
acv_shadî
->
©åibs
[
i
];

107 
	`glE«bÀVîãxAâribAºay
(
©t
->
ödex
);

108 
	`glVîãxAâribPoöãr
(
©t
->
ödex
,áâ->
size
,áâ->
ty≥
,áâ->
n‹mÆized
,áâ->
°ride
,áâ->
±r
);

110 
	}
}

112 
	$gl_bödshadî
(
Shadî
 *
s
)

114 
acv_shadî
 = 
s
;

116 
	`glU£Progøm
(
s
->
¥ogøm
);

118 
GLíum
 *
døwbufs
 = 
	`Æloˇ
((GLíumË* 
s
->
nouçuts
);

119 
i
;

120 if(
s
->
nouçuts
 > 0)

122 
i
 = 0; i < 
s
->
nouçuts
; i++)

124 
døwbufs
[
i
] = 
s
->
ouçuts
[i].
©èchmít
;

126 
	`glDøwBuf„rs
(
s
->
nouçuts
, 
døwbufs
);

129 
i
 = 0; i < 
s
->
¡extuª_èrgës
; i++)

131 
shadî_ãxtuª_èrgë_t
 *
èrgë
 = &
s
->
ãxtuª_èrgës
[
i
];

132 
	`glUnif‹m1i
(
èrgë
->
loˇti⁄
,Å¨gë->
ãxtuª_unô
);

135 if(
acv_shadî
 && 
acv_mesh
)

137 
	`gl_bödshadî©åibuãs
();

139 
	}
}

141 
	$gl_bödmesh
(
mesh_t
 *
mesh
)

143 
acv_mesh
 = 
mesh
;

145 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
mesh
->
vbo
);

146 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
mesh
->
ibo
);

148 if(
acv_shadî
 && 
acv_mesh
)

150 
	`gl_bödshadî©åibuãs
();

152 
	}
}

154 
	$gl_bödãxtuª
(
Textuª
 *
ãx
, 
tunô
)

156 
	`as£π
(
tunô
 < 
MAX_TEX
);

158 
acv_ãxtuª
[
tunô
] = 
ãx
;

159 
	`glA˘iveTextuª
(
GL_TEXTURE0
 + 
tunô
);

160 
	`glBödTextuª
(
ãx
->
g…y≥
,Åex->
glid
);

162 if(
ãx
->
g…y≥
 =
GL_TEXTURE_CUBE_MAP
)

164 
	`glDißbÀ
(
GL_CULL_FACE
);

165 
	`glDißbÀ
(
GL_DEPTH_TEST
);

167 
	}
}

169 
	$gl_bödãxtuªs
(
Textuª
 **
ãx
, 
n
)

171 
i
;

172 
i
 = 0; i < 
n
; i++)

174 
	`gl_bödãxtuª
(
ãx
[
i
], i);

176 
	}
}

178 
	$gl_böd‰amebuf„r
(
Fømebuf„r
 *
f
)

180 
	`glBödFømebuf„r
(
GL_DRAW_FRAMEBUFFER
, 
f
->
fbo
);

182 
GLuöt
 
bufs
[16] =

183 {
GL_COLOR_ATTACHMENT0
, 
GL_COLOR_ATTACHMENT1
, 
GL_COLOR_ATTACHMENT2
,

184 
GL_COLOR_ATTACHMENT3
, 
GL_COLOR_ATTACHMENT4
, 
GL_COLOR_ATTACHMENT5
,

185 
GL_COLOR_ATTACHMENT6
, 
GL_COLOR_ATTACHMENT7
, 
GL_COLOR_ATTACHMENT8
,

186 
GL_COLOR_ATTACHMENT9
, 
GL_COLOR_ATTACHMENT10
, 
GL_COLOR_ATTACHMENT11
,

187 
GL_COLOR_ATTACHMENT12
, 
GL_COLOR_ATTACHMENT13
, 
GL_COLOR_ATTACHMENT14
,

188 
GL_COLOR_ATTACHMENT15
};

189 
	`glDøwBuf„rs
(
f
->
ncﬁ‹ãxtuªs
, 
bufs
);

190 
	}
}

196 
	$gl_unbödshadî
()

198 
acv_shadî
 = 
NULL
;

199 
	`glU£Progøm
(0);

200 
	}
}

202 
	$gl_unbödmesh
()

204 
acv_mesh
 = 
NULL
;

205 
	}
}

207 
	$gl_unbödãxtuª
(
tunô
)

209 
	`as£π
(
tunô
 < 
MAX_TEX
);

210 
acv_ãxtuª
[
tunô
] = 
NULL
;

211 
	}
}

213 
	$gl_unbödãxtuªs
()

215 
i
;

216 
i
 = 0; i < 
MAX_TEX
; i++)

218 
	`gl_unbödãxtuª
(
i
);

220 
	}
}

222 
	$gl_unböd‰amebuf„r
()

224 
	`glBödFømebuf„r
(
GL_DRAW_FRAMEBUFFER
, 0);

225 
	}
}

227 
	~<°dio.h
>

228 
	$gl_døw2
(
Textuª
 *
t
, 
pos
[2])

230 
öôed
 = 0;

231 
GLuöt
 
sˇÀloc
;

232 
GLuöt
 
po¶oc
;

233 if(!
öôed
)

235 
sˇÀloc
 = 
	`glGëUnif‹mLoˇti⁄
(
shadî2d
->
¥ogøm
, "scale");

236 
po¶oc
 = 
	`glGëUnif‹mLoˇti⁄
(
shadî2d
->
¥ogøm
, "offset");

237 
öôed
=1;

238 
	`¥ötf
("¶:%d\n", 
GL_INVALID_OPERATION
);

241 
	`glDißbÀ
(
GL_DEPTH_TEST
);

243 
sˇÀ
[2] = {1.0f, 1.0f};

244 
	`gl_bödshadî
(
shadî2d
);

245 
	`gl_bödãxtuª
(
t
, 0);

246 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
UNIT_SQUARE
);

247 
	`gl_bödshadî©åibuãs
();

248 
	`glUnif‹m2fv
(
sˇÀloc
, 1, 
sˇÀ
);

249 
	`glUnif‹m2fv
(
po¶oc
, 1, 
pos
);

250 
	`glDøwAºays
(
GL_TRIANGLES
, 0, 6);

251 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 0);

252 
	`gl_unbödãxtuª
(0);

253 
	`gl_unbödshadî
();

255 
	`glE«bÀ
(
GL_DEPTH_TEST
);

256 
	}
}

	@src/io/gl/gl.h

8 #i‚de‡
_CWGL_H


9 
	#_CWGL_H


	)

11 
	~<°döt.h
>

13 
	gShadî
;

14 
	gmesh_t
;

15 
	gTextuª
;

16 
	gFømebuf„r
;

18 
	sgl_vîãx


20 
	mposôi⁄
[3];

21 
	mn‹mÆ
[3];

22 
uöt16_t
 
	muv
[2];

23 
uöt8_t
 
	m∑ddög
[4];

24 } 
	tgl_vîãx_t
;

26 
	tgl_ödex_t
[3];

28 
IGLVERSION
;

30 
gl_öô
();

32 
gl_bödshadî
(
Shadî
 *
shadî
);

33 
gl_bödmesh
(
mesh_t
 *
mesh
);

34 
gl_bödãxtuª
(
Textuª
 *
ãx
, 
ãxtuª_unô
);

35 
gl_bödãxtuªs
(
Textuª
 **
ãx
, 
n
);

36 
gl_böd‰amebuf„r
(
Fømebuf„r
 *
f
);

38 
gl_unbödshadî
();

39 
gl_unbödmesh
();

40 
gl_unbödãxtuª
(
ãxtuª_unô
);

41 
gl_unbödãxtuªs
();

42 
gl_unböd‰amebuf„r
();

44 
gl_døw2
(
Textuª
 *
t
, 
pos
[2]);

	@src/io/gl/mesh.c

9 
	~<as£π.h
>

10 
	~<î∫o.h
>

11 
	~<°dlib.h
>

12 
	~<°dboﬁ.h
>

13 
	~<°rög.h
>

15 
	~<f˙é.h
>

16 
	~<uni°d.h
>

17 
	~<sys/°©.h
>

19 
	~"utû/m©h/geom/åi.h
"

20 
	~"utû/m©h/vec.h
"

22 
	~"mesh.h
"

24 
	smesh_hódî
 {

25 
uöt8_t
 
	mmagic
[3];

26 
uöt8_t
 
	mvîsi⁄
;

27 
uöt32_t
 
	mnvîts
;

28 
uöt32_t
 
	m√dges
;

29 
uöt32_t
 
	mnÁ˚s
;

30 
uöt32_t
 
	mnuvs
;

31 
uöt16_t
 
	mn£ams
;

32 
uöt8_t
 
	mPADDING
[6];

33 
	mvﬁume
;

34 } 
	tmesh_hódî
;

36 
	smesh_vît
 {

37 
uöt16_t
 
	möcidítEdge
;

38 
uöt16_t
 
	möcidítFa˚
;

39 
	mposôi⁄
[3];

40 } 
	tmesh_vît
;

42 
	smesh_edge
 {

43 
uöt16_t
 
	mvîts
[2];

44 
uöt16_t
 
	mÁ˚s
[2];

45 
uöt16_t
 
	m≠ªv
;

46 
uöt16_t
 
	m™ext
;

47 
uöt16_t
 
	mb¥ev
;

48 
uöt16_t
 
	mb√xt
;

49 } 
	tmesh_edge
;

51 
	smesh_Á˚
 {

52 
uöt16_t
 
	möcidítEdge
;

53 
uöt16_t
 
	muvs
[3];

54 
uöt8_t
 
	mdegíî©e
;

55 
uöt8_t
 
	mPADDING
[1];

56 
hvec3
 
	mn‹mÆ
;

57 } 
	tmesh_Á˚
;

59 
	smesh_uv
 {

60 
uöt16_t
 
	mvît
;

61 
uöt16_t
 
	mm©îül
;

62 
uhvec2
 
	mco
;

63 } 
	tmesh_uv
;

65 
	smesh_£am
 {

66 
uöt16_t
 
	medge
;

67 } 
	tmesh_£am
;

75 #i‚de‡
O_BINARY


76 
	#O_BINARY
 0

	)

78 #i‚de‡
S_IRGRP


79 
	#S_IRGRP
 0

	)

81 #i‚de‡
S_IROTH


82 
	#S_IROTH
 0

	)

85 
	#EXT_UKN
 -1

	)

86 
	#EXT_MDL
 1

	)

88 
	#LEFT
 0

	)

89 
	#RIGHT
 1

	)

90 
	#VERT_A
 0

	)

91 
	#VERT_B
 1

	)

93 
	#DEFAULT_DIR
 "ªs/"

	)

94 
	#DEFAULT_EXT
 ".mdl"

	)

96 
	#MAX
(
a
,
b
Ë(◊Ë> (bË?á : b)

	)

97 
	#MIN
(
a
,
b
Ë(◊Ë< (bË?á : b)

	)

99 
	sgpu_vîãx
 {

100 
vec3
 
	mposôi⁄
;

101 
vec3
 
	mn‹mÆ
;

102 
uhvec2
 
	muv
;

103 
uöt8_t
 
	m∑ddög
[4];

104 } 
	tgpu_vîãx
;

106 
	tgpu_ödex
[3];

108 
mesh_fûëy≥
(c⁄° *
fûím
);

111 
mesh_ödi˚s
(
mesh_t
 *
m
, 
gpu_ödex
 *
ödi˚s
);

112 
mesh_glBuf„rD©a
(
mesh_t
 *
m
);

115 
	$mesh_fûëy≥
(c⁄° *
fûím
)

117 *
p
;

118 
p
 = 
	`°rchr
(
fûím
, '.');

119 if(!
	`°∫cmp
(
p
, 
DEFAULT_EXT
, 4))

120  
EXT_MDL
;

121  
EXT_UKN
;

122 
	}
}

124 
boﬁ
 
	$mesh_c⁄èös_poöt
(
mesh_t
 *
m
, 
vec3
 
poöt
)

126  
Ál£
;

127 
	}
}

129 
	$mesh_vﬁume
(
mesh_t
 *
m
)

131 
sum
;

132 
i
;

133 
i
 = 0, 
sum
 = 0; i < 
m
->
nÁ˚s
; i++)

135 
åi3
 
åi
;

136 
uöt16_t
 
vîts
[3];

137 
	`mesh_Á˚_vîts
(
m
, 
i
, 
vîts
, 3);

138 
	`åi3_£t
(
åi
,

139 
m
->
vîts
[vîts[0]].
posôi⁄
,

140 
m
->
vîts
[vîts[1]].
posôi⁄
,

141 
m
->
vîts
[vîts[2]].
posôi⁄
);

142 
sum
 +
	`åi3_sig√d_vﬁume
(
åi
);

144  
	`abs
(
sum
);

145 
	}
}

147 
	$mesh_surÁ˚_¨ó
(
mesh_t
 *
m
)

149 
sum
;

150 
i
;

151 
i
 = 0, 
sum
 = 0; i < 
m
->
nÁ˚s
; i++)

153 
åi3
 
åi
;

154 
uöt16_t
 
vîts
[3];

155 
	`mesh_Á˚_vîts
(
m
, 
i
, 
vîts
, 3);

156 
	`åi3_£t
(
åi
,

157 
m
->
vîts
[vîts[0]].
posôi⁄
,

158 
m
->
vîts
[vîts[1]].
posôi⁄
,

159 
m
->
vîts
[vîts[2]].
posôi⁄
);

160 
sum
 +
	`åi3_¨ó
(
åi
);

162  
sum
;

163 
	}
}

169 
	$mesh_vît_co
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, 
vec3
 
co
)

171 
	`vec3_c›y
(
m
->
vîts
[
vît_i
].
posôi⁄
, 
co
);

172 
	}
}

174 
	$mesh_vît_n‹mÆ
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, 
vec3
 
n‹m
)

176 
	`vec3_£t
(
n‹m
, 0.0f, 0.0f, 0.0f);

178 
uöt16_t
 
Á˚buf
[64];

179 
nÁ˚s
 = 
	`mesh_vît_Á˚s
(
m
, 
vît_i
, 
Á˚buf
, 64);

180 
	`as£π
(
nÁ˚s
 < 64 && "mesh connectivityÉrror (orÅoo manyÉdges oná vert)");

182 
i
;

183 
i
 = 0; i < 
nÁ˚s
; i++)

185 
vec3
 
‚‹mÆ
;

186 
	`mesh_Á˚_n‹mÆ
(
m
, 
Á˚buf
[
i
], 
‚‹mÆ
);

187 
	`vec3_add
(
‚‹mÆ
, 
n‹m
,Çorm);

190 
	`vec3_n‹mÆize
(
n‹m
);

191 
	}
}

193 
	$mesh_vît_Á˚s
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, uöt16_à*
fbuf
, 
max
)

195 
cou¡
 = 0;

196 
uöt16_t
 
edge
 = 
m
->
vîts
[
vît_i
].
öcidítEdge
;

197 
uöt16_t
 
Á˚_fú°
 = 
m
->
edges
[
edge
].
Á˚s
[0];

198 
uöt16_t
 
Á˚_cur
 = 
Á˚_fú°
;

200 if(
max
 > 0)

204 
fbuf
[
cou¡
] = 
Á˚_cur
;

205 
edge
 = 
	`mesh_edge_cwEdge
(
m
,Édge, 
vît_i
);

206 
Á˚_cur
 = 
	`mesh_Á˚_cwFa˚
(
m
, 
edge
, 
vît_i
);

207 } ++
cou¡
 < 
max
 && 
Á˚_cur
 !
Á˚_fú°
);

210  
cou¡
;

211 
	}
}

213 
	$mesh_vît_edges
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, uöt16_à*
ebuf
, 
max
)

215 
cou¡
 = 0;

216 
uöt16_t
 
edge_fú°
 = 
m
->
vîts
[
vît_i
].
öcidítEdge
;

217 
uöt16_t
 
edge
 = 
edge_fú°
;

219 i‡(
max
 > 0)

223 
ebuf
[
cou¡
] = 
edge
;

224 
edge
 = 
	`mesh_edge_cwEdge
(
m
,Édge, 
vît_i
);

225 } ++
cou¡
 < 
max
 && 
edge
 !
edge_fú°
);

228  
cou¡
;

229 
	}
}

232 
	$mesh_vît_avg
(
mesh_t
 *
m
, 
vec3
 
avg
)

234 
	`vec3_£t
(
avg
, 0.0f, 0.0f, 0.0f);

236 
i
;

237 
i
 = 0; i < 
m
->
nvîts
; i++)

239 
	`vec3_add
(
avg
, 
m
->
vîts
[
i
].
posôi⁄
,ávg);

241 
	`vec3_sˇÀ
(
avg
, 1.0‡/ 
m
->
nvîts
);

242 
	}
}

244 
	$mesh_vît_max
(
mesh_t
 *
m
, 
vec3
 
max
)

246 
	`vec3_c›y
(
m
->
vîts
[0].
posôi⁄
, 
max
);

248 
i
;

249 
i
 = 0; i < 
m
->
nvîts
; i++)

251 
max
[
X
] = 
	`MAX
(
m
->
vîts
[
i
].
posôi⁄
[X], max[X]);

252 
max
[
Y
] = 
	`MAX
(
m
->
vîts
[
i
].
posôi⁄
[Y], max[Y]);

253 
max
[
Z
] = 
	`MAX
(
m
->
vîts
[
i
].
posôi⁄
[Z], max[Z]);

255 
	}
}

257 
	$mesh_vît_mö
(
mesh_t
 *
m
, 
vec3
 
mö
)

259 
	`vec3_c›y
(
m
->
vîts
[0].
posôi⁄
, 
mö
);

261 
i
;

262 
i
 = 0; i < 
m
->
nvîts
; i++)

264 
mö
[
X
] = 
	`MIN
(
m
->
vîts
[
i
].
posôi⁄
[X], min[X]);

265 
mö
[
Y
] = 
	`MIN
(
m
->
vîts
[
i
].
posôi⁄
[Y], min[Y]);

266 
mö
[
Z
] = 
	`MIN
(
m
->
vîts
[
i
].
posôi⁄
[Z], min[Z]);

268 
	}
}

270 
	$mesh_vît_Áπhe°
(
mesh_t
 *
m
, 
vec3
 
poöt
, vec3 
max
)

272 
vec3
 
tmp
;

273 
	`vec3_£t
(
max
, 0.0f, 0.0f, 0.0f);

274 
maxdi°sq
 = 0.0f;

276 
i
;

277 
i
 = 0; i < 
m
->
nvîts
; i++)

279 
di°_i_sq
;

280 
	`vec3_sub
(
m
->
vîts
[
i
].
posôi⁄
, 
poöt
, 
tmp
);

281 
di°_i_sq
 = 
	`vec3_Ànsq
(
tmp
);

282 if(
di°_i_sq
 > 
maxdi°sq
)

284 
	`vec3_c›y
(
tmp
, 
max
);

285 
maxdi°sq
 = 
di°_i_sq
;

288 
	}
}

291 
	$mesh_vît_˛o£°
(
mesh_t
 *
m
, 
vec3
 
poöt
, vec3 
mö
)

293 
	`as£π
(
m
->
nvîts
 > 0);

295 
vec3
 
tmp
;

296 
	`vec3_sub
(
m
->
vîts
[0].
posôi⁄
, 
poöt
, 
tmp
);

297 
	`vec3_c›y
(
tmp
, 
mö
);

298 
mödi°sq
 = 
	`vec3_Ànsq
(
tmp
);

300 
i
;

301 
i
 = 0; i < 
m
->
nvîts
; i++)

303 
di°_i_sq
;

304 
	`vec3_sub
(
m
->
vîts
[
i
].
posôi⁄
, 
poöt
, 
tmp
);

305 
di°_i_sq
 = 
	`vec3_Ànsq
(
tmp
);

306 if(
di°_i_sq
 < 
mödi°sq
)

308 
	`vec3_c›y
(
tmp
, 
mö
);

309 
mödi°sq
 = 
di°_i_sq
;

312 
	}
}

318 
uöt16_t
 
	$mesh_edge_cwEdge
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
vît_i
)

320 
mesh_edge
 *
e
 = &
m
->
edges
[
edge_i
];

321 
	`as£π
((
e
->
vîts
[
VERT_A
] =
vît_i
Ë|| (e->vîts[
VERT_B
] == vert_i));

322 
	`as£π
((
e
->
vîts
[
VERT_A
] =
vît_i
Ë^ (e->vîts[
VERT_B
] == vert_i));

323  (
e
->
vîts
[
VERT_A
] =
vît_i
Ë?É->
™ext
 :É->
b√xt
;

324 
	}
}

326 
uöt16_t
 
	$mesh_edge_ccwEdge
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
vît_i
)

328 
mesh_edge
 *
e
 = &((mesh_edge*)
m
->
edges
)[
edge_i
];

329  (
e
->
vîts
[
VERT_A
] =
vît_i
Ë?É->
≠ªv
 :É->
b¥ev
;

330 
	}
}

332 
	$mesh_edge_Á˚s
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à*
fbuf
)

334 
fbuf
[0] = 
m
->
edges
[
edge_i
].
Á˚s
[0];

335 
fbuf
[1] = 
m
->
edges
[
edge_i
].
Á˚s
[1];

336 
	}
}

338 
	$mesh_edge_n‹mÆ
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, 
vec3
 
n‹mÆbuf
)

340 
uöt16_t
 
Á˚s
[2];

341 
vec3
 
‚‹mÆ
;

342 
	`mesh_edge_Á˚s
(
m
, 
edge_i
, 
Á˚s
);

343 
	`vec3_£t
(
n‹mÆbuf
, 0.0f, 0.0f, 0.0f);

345 
	`mesh_Á˚_n‹mÆ
(
m
, 
Á˚s
[0], 
‚‹mÆ
);

346 
	`vec3_add
(
n‹mÆbuf
, 
‚‹mÆ
,Çormalbuf);

348 
	`mesh_Á˚_n‹mÆ
(
m
, 
Á˚s
[1], 
‚‹mÆ
);

349 
	`vec3_add
(
n‹mÆbuf
, 
‚‹mÆ
,Çormalbuf);

351 
	`vec3_n‹mÆize
(
n‹mÆbuf
);

352 
	}
}

354 
boﬁ
 
	$mesh_edge_öcidítToFa˚
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
Á˚_i
)

356 
mesh_edge
 *
edge
 = &
m
->
edges
[
edge_i
];

357  (
edge
->
Á˚s
[
LEFT
] =
Á˚_i
 ||Édge->Á˚s[
RIGHT
] == face_i);

358 
	}
}

360 
boﬁ
 
	$mesh_edge_öcidítToVît
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
vît_i
)

362 
mesh_edge
 *
edge
 = &
m
->
edges
[
edge_i
];

363  (
edge
->
vîts
[
VERT_A
] =
vît_i
 ||Édge->
Á˚s
[
VERT_B
] == vert_i);

364 
	}
}

371 
boﬁ
 
	$mesh_Á˚_isLe·
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
Á˚_i
)

373 
mesh_edge
 *
e
 = &
m
->
edges
[
edge_i
];

374  
e
->
Á˚s
[
LEFT
] =
Á˚_i
;

375 
	}
}

377 
uöt16_t
 
	$mesh_Á˚_cwFa˚
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
vît_i
)

379 
mesh_edge
 *
e
 = &
m
->
edges
[
edge_i
];

380 
	`as£π
((
e
->
vîts
[
VERT_A
] =
vît_i
Ë|| (e->vîts[
VERT_B
] == vert_i));

381 
	`as£π
((
e
->
vîts
[
VERT_A
] =
vît_i
Ë^ (e->vîts[
VERT_B
] == vert_i));

382  (
e
->
vîts
[
VERT_A
] !
vît_i
Ë?É->
Á˚s
[
RIGHT
] :É->Á˚s[
LEFT
];

383 
	}
}

385 
uöt16_t
 
	$mesh_Á˚_ccwFa˚
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
vît_i
)

387 
mesh_edge
 *
e
 = &
m
->
edges
[
edge_i
];

388  (
e
->
vîts
[
VERT_A
] =
vît_i
Ë?É->
Á˚s
[
LEFT
] :É->Á˚s[
RIGHT
];

389 
	}
}

391 
uöt16_t
 
	$mesh_Á˚_ccwEdge
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à
edge_i
)

393 
mesh_edge
 *
edge
 = &
m
->
edges
[
edge_i
];

394  
	`mesh_edge_öcidítToFa˚
(
m
, 
edge
->
≠ªv
, 
Á˚_i
) ?

395 
edge
->
≠ªv
 :Édge->
b¥ev
;

396 
	}
}

398 
uöt16_t
 
	$mesh_Á˚_˛o£°
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_°¨t
, 
vec3
 
poöt
)

400 
uöt16_t
 
fbuf
[4];

401 
nÁ˚s
 = 
	`mesh_Á˚_Á˚s
(
m
, 
Á˚_°¨t
, 
fbuf
, 4);

404 
	}
}

406 
	$mesh_Á˚_ödexOf_vît
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à
vît_i
)

408 
ªt
 = -1;

409 
i
;

410 
i
 = 0; i < 3; i++)

412 if(
m
->
uvs
[m->
Á˚s
[
Á˚_i
].uvs[
i
]].
vît
 =
vît_i
)

414 
ªt
 = 
i
;

418  
ªt
;

419 
	}
}

421 
	$mesh_Á˚_vîts
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à*
vbuf
, 
max
)

423 
mesh_Á˚
 *
f
 = &
m
->
Á˚s
[
Á˚_i
];

424 
i
;

425 
i
 = 0; i < 
max
 && i < 3; i++)

427 
vbuf
[
i
] = 
m
->
uvs
[
f
->uvs[i]].
vît
;

429  
i
;

430 
	}
}

432 
	$mesh_Á˚_edges
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à*
ebuf
, 
max
)

434 
mesh_Á˚
 *
Á˚
 = &
m
->
Á˚s
[
Á˚_i
];

436 
ebuf
[0] = 
Á˚
->
öcidítEdge
;

438 
i
;

439 
uöt16_t
 
√xt
;

440 
i
 = 1; i < 
max
; i++, 
√xt
 = 
	`mesh_Á˚_ccwEdge
(
m
, 
Á˚_i
, 
ebuf
[i-1]))

442 if(
√xt
 =
ebuf
[0])

446 
ebuf
[
i
] = 
√xt
;

449  
i
;

450 
	}
}

452 
	$mesh_Á˚_Á˚s
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à*
fbuf
, 
max
)

454 
uöt16_t
 
ebuf
[4];

455 
√dges
 = 
	`mesh_Á˚_edges
(
m
, 
Á˚_i
, 
ebuf
, 4);

456 
i
;

457 
i
 = 0; i < 
√dges
; i++)

459 
mesh_edge
 *
edge
 = &
m
->
edges
[
ebuf
[
i
]];

460 
fbuf
[
i
] = ((
edge
->
Á˚s
[0] =
Á˚_i
) ?Édge->faces[1] :Édge->faces[0]);

462  
√dges
;

463 
	}
}

465 
	$mesh_Á˚_n‹mÆ
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, 
vec3
 
n‹mÆbuf
)

467 
	`hvec3_to_vec3
(
m
->
Á˚s
[
Á˚_i
].
n‹mÆ
, 
n‹mÆbuf
);

468 
	}
}

475 
	$mesh_vîti˚s
(
mesh_t
 *
m
, 
gpu_vîãx
 *
vîti˚s
)

477 
uöt16_t
 
i
;

478 
i
 = 0; i < 
m
->
nuvs
; i++)

480 
mesh_uv
 *
uv
 = &
m
->
uvs
[
i
];

481 
mesh_vît
 *
vît
 = &
m
->
vîts
[
uv
->vert];

482 
vec3
 
n‹mÆ
;

483 
	`mesh_vît_n‹mÆ
(
m
, 
uv
->
vît
, 
n‹mÆ
);

484 
	`mem˝y
(
vîti˚s
[
i
].
posôi⁄
, 
vît
->posôi⁄, (
vec3
));

485 
	`mem˝y
(
vîti˚s
[
i
].
n‹mÆ
,Ç‹mÆ, (
vec3
));

486 
	`mem˝y
(
vîti˚s
[
i
].
uv
, uv->
co
, (
uhvec2
));

488 
	}
}

490 
	$mesh_ödi˚s
(
mesh_t
 *
m
, 
gpu_ödex
 *
ödi˚s
)

492 
uöt16_t
 
i
;

493  
i
 = 0; i < 
m
->
nÁ˚s
; i++)

495 
mesh_Á˚
 *
Á˚
 = &
m
->
Á˚s
[
i
];

496 
	`mem˝y
(
ödi˚s
[
i
], 
Á˚
->
uvs
, (
uhvec3
));

498 
	}
}

501 
	$mesh_glBuf„rD©a
(
mesh_t
 *
m
)

503 
	`glGíBuf„rs
(1, &
m
->
vbo
);

504 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
m
->
vbo
);

505 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, 
m
->
nuvs
 * (
gpu_vîãx
), 
NULL
, 
GL_STATIC_DRAW
);

506 
gpu_vîãx
 *
vîti˚s
 = 
	`glM≠Buf„r
(
GL_ARRAY_BUFFER
, 
GL_WRITE_ONLY
);

507 
	`mesh_vîti˚s
(
m
, 
vîti˚s
);

508 
	`glUnm≠Buf„r
(
GL_ARRAY_BUFFER
);

509 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 0);

511 
	`glGíBuf„rs
(1, &
m
->
ibo
);

512 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
m
->
ibo
);

513 
	`glBuf„rD©a
(
GL_ELEMENT_ARRAY_BUFFER
, 
m
->
nÁ˚s
 * (
gpu_ödex
), 
NULL
, 
GL_STATIC_DRAW
);

514 
gpu_ödex
 *
ödi˚s
 = 
	`glM≠Buf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
GL_WRITE_ONLY
);

515 
	`mesh_ödi˚s
(
m
, 
ödi˚s
);

516 
	`glUnm≠Buf„r
(
GL_ELEMENT_ARRAY_BUFFER
);

517 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

518 
	}
}

523 
	$mesh_öô
(
mesh_t
 *
m
, c⁄° *
fûím
)

525 
	`mem£t
(
m
, 0, (
mesh_t
));

527 
fd
 = 
	`›í
(
fûím
, 
O_RDONLY
 | 
O_BINARY
);

529 
fûëy≥
 = 
	`mesh_fûëy≥
(
fûím
);

530 
îr
 = 0;

532 if(
fûëy≥
 =
EXT_MDL
)

534 
mesh_hódî
 
h
;

535 
nbyã
 = 
	`ªad
(
fd
, &
h
, (
mesh_hódî
));

537 
îr
 = (
nbyã
 !(
mesh_hódî
Ë|| !
	`memcmp
(
h
.
magic
, "LDM", 3Ë|| h.
vîsi⁄
 !
FMT_MDL
);

539 if(!
îr
){

540 
size_t
 
v_sz
, 
e_sz
, 
f_sz
, 
uv_sz
, 
£am_sz
;

542 
m
->
nvîts
 = 
h
.nverts;

543 
m
->
√dges
 = 
h
.nedges;

544 
m
->
nÁ˚s
 = 
h
.nfaces;

545 
m
->
nuvs
 = 
h
.nuvs;

546 
m
->
f‹m©
 = 
FMT_MDL
;

547 
m
->
m©îül
 = 0;

548 
m
->
ãx
 = -1;

550 
v_sz
 = 
m
->
nvîts
 * (
mesh_vît
);

551 
e_sz
 = 
m
->
√dges
 * (
mesh_edge
);

552 
f_sz
 = 
m
->
nÁ˚s
 * (
mesh_Á˚
);

553 
uv_sz
 = 
m
->
nuvs
 * (
mesh_uv
);

554 
£am_sz
 = 
m
->
n£ams
 * (
mesh_£am
);

555 
m
->
vîts
 = 
	`mÆloc
(
v_sz
);

556 
m
->
edges
 = 
	`mÆloc
(
e_sz
);

557 
m
->
Á˚s
 = 
	`mÆloc
(
f_sz
);

558 
m
->
uvs
 = 
	`mÆloc
(
uv_sz
);

559 
m
->
£ams
 = 
	`mÆloc
(
£am_sz
);

560 
	`ªad
(
fd
, 
m
->
vîts
, 
v_sz
);

561 
	`ªad
(
fd
, 
m
->
edges
, 
e_sz
);

562 
	`ªad
(
fd
, 
m
->
Á˚s
, 
f_sz
);

563 
	`ªad
(
fd
, 
m
->
uvs
, 
uv_sz
);

564 
	`ªad
(
fd
, 
m
->
£ams
, 
£am_sz
);

566 if(
î∫o
){

567 
î∫o
 = 0;

568 
îr
 = -1;

572 
	`˛o£
(
fd
);

574 #i‚de‡
NO_GL


575 if(!
îr
)

577 
	`mesh_glBuf„rD©a
(
m
);

581  
îr
;

582 
	}
}

587 
	$mesh_föÆize
(
mesh_t
 *
m
)

589 
	`‰ì
(
m
->
vîts
);

590 
	`‰ì
(
m
->
edges
);

591 
	`‰ì
(
m
->
Á˚s
);

592 
	`‰ì
(
m
->
uvs
);

594 #i‚de‡
NO_GL


595 
	`glDñëeBuf„rs
(1, &
m
->
vbo
);

596 
	`glDñëeBuf„rs
(1, &
m
->
ibo
);

598 if(
m
->
ãx
 != -1)

600 
	`glDñëeTextuªs
(1, &
m
->
ãx
);

603 
	}
}

605 
	$mesh_subdivide_edges_£tWögs
(
mesh_t
 *
m
, 
mesh_edge
 *
sub_edge
, 
i
)

607 
sub_edge
->
≠ªv
 = ((
m
->
edges
[m->edges[
i
].≠ªv].
vîts
[
VERT_A
] == m->edges[i].verts[VERT_A]) ?

608 
m
->
edges
[
i
].
≠ªv
 :

609 
m
->
edges
[
i
].
≠ªv
 + m->
√dges
);

610 
sub_edge
->
™ext
 = ((
m
->
edges
[m->edges[
i
].™ext].
vîts
[
VERT_A
] == m->edges[i].verts[VERT_A]) ?

611 
m
->
edges
[
i
].
™ext
 :

612 
m
->
edges
[
i
].
™ext
 + m->
√dges
);

614 
sub_edge
->
b¥ev
 = ((
m
->
edges
[m->edges[
i
].
≠ªv
].
vîts
[
VERT_B
] == m->edges[i].verts[VERT_B]) ?

615 
m
->
edges
[
i
].
b¥ev
 :

616 
m
->
edges
[
i
].
b¥ev
 + m->
√dges
);

617 
sub_edge
->
b√xt
 = ((
m
->
edges
[m->edges[
i
].b√xt].
vîts
[
VERT_B
] == m->edges[i].verts[VERT_B]) ?

618 
m
->
edges
[
i
].
b√xt
 :

619 
m
->
edges
[
i
].
b√xt
 + m->
√dges
);

620 
	}
}

626 
	$mesh_subdivide_vîts
(
mesh_t
 *
m
, 
mesh_vît
 *
sub_vîts
, 
sub_nvîts
)

628 
	`mem˝y
(
sub_vîts
, 
m
->
vîts
, m->
nvîts
 * (
mesh_vît
));

630 
i
;

631 
i
 = 0; i < 
m
->
√dges
; i++)

634 
mesh_vît
 *
midpoöt
 = &
sub_vîts
[
m
->
nvîts
 + 
i
];

635 
mesh_edge
 *
edge
 = &
m
->
edges
[
i
];

636 
mesh_vît
 *
v1
 = &
m
->
vîts
[
edge
->vîts[
VERT_A
]];

637 
mesh_vît
 *
v2
 = &
m
->
vîts
[
edge
->vîts[
VERT_B
]];

638 
midpoöt
->
posôi⁄
[
X
] = (
v1
->posôi⁄[X] + 
v2
->position[X]) / 2.0f;

639 
midpoöt
->
posôi⁄
[
Y
] = (
v1
->posôi⁄[Y] + 
v2
->position[Y]) / 2.0f;

640 
midpoöt
->
posôi⁄
[
Z
] = (
v1
->posôi⁄[Z] + 
v2
->position[Z]) / 2.0f;

641 
midpoöt
->
öcidítEdge
 = 
i
;

642 
midpoöt
->
öcidítFa˚
 = 
edge
->
Á˚s
[
LEFT
];

644 
	}
}

646 
	$mesh_subdivide_edges
(
mesh_t
 *
m
, 
mesh_edge
 *
sub_edges
, 
sub_√dges
)

648 
i
;

649 
i
 = 0; i < 
m
->
√dges
; i++)

651 
mesh_edge
 *
edge_a
 = &
sub_edges
[
i
];

652 
mesh_edge
 *
edge_b
 = &
sub_edges
[
m
->
√dges
 + 
i
];

653 
mesh_edge
 *
edge_i
 = &
m
->
edges
[
i
];

655 
edge_a
->
vîts
[0] = 
edge_i
->verts[0];

656 
edge_a
->
vîts
[1] = 
m
->
nvîts
 + 
i
;

657 
edge_a
->
Á˚s
[0] = 
edge_i
->Á˚s[0] + (
m
->
nÁ˚s
 * 
	`mesh_Á˚_ödexOf_vît
(m,Édge_i->Á˚s[0],Édge_a->
vîts
[0]));

658 
edge_a
->
Á˚s
[1] = 
edge_i
->Á˚s[1] + (
m
->
nÁ˚s
 * 
	`mesh_Á˚_ödexOf_vît
(m,Édge_i->Á˚s[1],Édge_a->
vîts
[0]));

659 
	`mesh_subdivide_edges_£tWögs
(
m
, 
edge_a
, 
i
);

661 
edge_b
->
vîts
[0] = 
m
->
nvîts
 + 
i
;

662 
edge_b
->
vîts
[1] = 
edge_i
->verts[1];

663 
edge_b
->
Á˚s
[0] = 
edge_i
->Á˚s[0] + (
m
->
nÁ˚s
 * 
	`mesh_Á˚_ödexOf_vît
(m,Édge_i->Á˚s[0],Édge_b->
vîts
[1]));

664 
edge_b
->
Á˚s
[1] = 
edge_i
->Á˚s[1] + (
m
->
nÁ˚s
 * 
	`mesh_Á˚_ödexOf_vît
(m,Édge_i->Á˚s[1],Édge_b->
vîts
[1]));

665 
	`mesh_subdivide_edges_£tWögs
(
m
, 
edge_b
, 
i
);

667 
	}
}

670 
	$mesh_subdivide_Á˚s
(
mesh_t
 *
m
, 
mesh_Á˚
 *
sub_Á˚s
, 
sub_nÁ˚s
)

672 
i
;

673 
i
 = 0; i < 
m
->
nÁ˚s
; i++)

675 
mesh_Á˚
 *
Á˚_a
 = &
sub_Á˚s
[
i
];

676 
mesh_Á˚
 *
Á˚_b
 = &
sub_Á˚s
[
i
 + 
m
->
nÁ˚s
 * 1];

677 
mesh_Á˚
 *
Á˚_c
 = &
sub_Á˚s
[
i
 + 
m
->
nÁ˚s
 * 2];

678 
mesh_Á˚
 *
Á˚_d
 = &
sub_Á˚s
[
i
 + 
m
->
nÁ˚s
 * 3];

680 
	}
}

697 
	$mesh_subdivide
(
mesh_t
 *
m
)

699 
sub_nvîts
 = (
m
->
nvîts
 + m->
√dges
);

700 
sub_√dges
 = (
m
->
√dges
 * 2 + m->
nÁ˚s
 * 3);

701 
sub_nÁ˚s
 = (
m
->
nÁ˚s
 * 4);

702 
sub_nuvs
 = (
m
->
nuvs
 + m->
√dges
 + m->
n£ams
);

703 
sub_n£ams
 = (
m
->
n£ams
 * 2);

704 
NMAX
 = 0xFFFF;

706 i‡(
sub_nvîts
 > 
NMAX
 || 
sub_√dges
 > NMAX || 
sub_nÁ˚s
 > NMAX || 
sub_nuvs
 > NMAX || 
sub_n£ams
 > NMAX)

711 
mesh_vît
 *
sub_vîts
 = 
	`mÆloc
((mesh_vîtË* 
sub_nvîts
);

712 
mesh_edge
 *
sub_edges
 = 
	`mÆloc
((mesh_edgeË* 
sub_√dges
);

713 
mesh_Á˚
 *
sub_Á˚s
 = 
	`mÆloc
((mesh_Á˚Ë* 
sub_nÁ˚s
);

714 
mesh_uv
 *
sub_uvs
 = 
	`mÆloc
((mesh_uvË* 
sub_nuvs
);

716 
	`mesh_subdivide_vîts
(
m
, 
sub_vîts
, 
sub_nvîts
);

717 
	`mesh_subdivide_edges
(
m
, 
sub_edges
, 
sub_√dges
);

718 
	`mesh_subdivide_Á˚s
(
m
, 
sub_Á˚s
, 
sub_nÁ˚s
);

721 
	`‰ì
(
m
->
vîts
);

722 
	`‰ì
(
m
->
edges
);

723 
	`‰ì
(
m
->
Á˚s
);

724 
m
->
vîts
 = 
sub_vîts
;

725 
m
->
edges
 = 
sub_edges
;

726 
m
->
Á˚s
 = 
sub_Á˚s
;

727 
m
->
nvîts
 = 
sub_nvîts
;

728 
m
->
√dges
 = 
sub_√dges
;

729 
m
->
nÁ˚s
 = 
sub_nÁ˚s
;

730 
m
->
n£ams
 = 
sub_n£ams
;

731 
	}
}

736 
	$mesh_wrôe
(
mesh_t
 *
m
, *
fûím
)

738 
mode_t
 
mode
 = 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
;

739 
fd
 = 
	`›í
(
fûím
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
 | 
O_BINARY
, 
mode
);

741 
fûëy≥
 = 
	`mesh_fûëy≥
(
fûím
);

742 
îr
 = 0;

744 if(
fûëy≥
 =
EXT_MDL
)

746 
mesh_hódî
 
h
;

747 
	`mem˝y
(
h
.
magic
, "MDL", 3);

748 
h
.
vîsi⁄
 = 2;

749 
h
.
nvîts
 = 
m
->nverts;

750 
h
.
√dges
 = 
m
->nedges;

751 
h
.
nÁ˚s
 = 
m
->nfaces;

752 
h
.
nuvs
 = 
m
->nuvs;

753 
	`mem£t
(
h
.
PADDING
, 0, (
uöt8_t
) * 12);

755 
size_t
 
v_sz
, 
e_sz
, 
f_sz
, 
uv_sz
;

756 
v_sz
 = 
m
->
nvîts
 * (
mesh_vît
);

757 
e_sz
 = 
m
->
√dges
 * (
mesh_edge
);

758 
f_sz
 = 
m
->
nÁ˚s
 * (
mesh_Á˚
);

759 
uv_sz
 = 
m
->
nuvs
 * (
mesh_uv
);

761 
	`wrôe
(
fd
, &
h
, (
mesh_hódî
));

762 
	`wrôe
(
fd
, 
m
->
vîts
, 
v_sz
);

763 
	`wrôe
(
fd
, 
m
->
edges
, 
e_sz
);

764 
	`wrôe
(
fd
, 
m
->
Á˚s
, 
f_sz
);

765 
	`wrôe
(
fd
, 
m
->
uvs
, 
uv_sz
);

767 if(
î∫o
){

768 
î∫o
 = 0;

769 
îr
 = -1;

772 
	`˛o£
(
fd
);

773  
îr
;

774 
	}
}

	@src/io/gl/mesh.h

9 #i‚de‡
_MESH_H


10 
	#_MESH_H


	)

12 
	~<GL/gÀw.h
>

13 
	~<GL/gl.h
>

15 
	~<°döt.h
>

17 
	~"utû/m©h/vec.h
"

19 
	#FMT_MDL
 2

	)

29 
	gmesh_hódî
;

30 
	gmesh_vît
;

31 
	gmesh_edge
;

32 
	gmesh_Á˚
;

33 
	gmesh_uv
;

34 
	gmesh_£am
;

43 
	smesh_t
 {

44 
uöt32_t
 
	mnvîts
;

45 
uöt32_t
 
	m√dges
;

46 
uöt32_t
 
	mnÁ˚s
;

47 
uöt32_t
 
	mnuvs
;

48 
uöt16_t
 
	mn£ams
;

49 
uöt16_t
 
	mf‹m©
;

50 
uöt16_t
 
	mm©îül
;

51 
mesh_vît
 *
	mvîts
;

52 
mesh_edge
 *
	medges
;

53 
mesh_Á˚
 *
	mÁ˚s
;

54 
mesh_uv
 *
	muvs
;

55 
mesh_£am
 *
	m£ams
;

56 
GLuöt
 
	mvbo
;

57 
GLuöt
 
	mibo
;

58 
GLuöt
 
	mãx
;

59 } 
	tmesh_t
;

61 
mesh_öô
(
mesh_t
 *
m
, c⁄° *
fûím
);

62 
mesh_föÆize
(
mesh_t
 *
m
);

64 
mesh_subdivide
(
mesh_t
 *
m
);

65 
mesh_•hîeProje˘
(
mesh_t
 *
m
);

66 
mesh_vﬁume
(
mesh_t
 *
m
);

67 
mesh_surÁ˚_¨ó
(
mesh_t
 *
m
);

69 
mesh_wrôe
(
mesh_t
 *
m
, *
fûím
);

70 
boﬁ
 
mesh_c⁄èös_poöt
(
mesh_t
 *
m
, 
vec3
 
poöt
);

74 
mesh_vît_co
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, 
vec3
 
co
);

75 
mesh_vît_n‹mÆ
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, 
vec3
 
n‹m
);

76 
mesh_vît_Á˚s
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, uöt16_à*
fbuf
, 
max
);

77 
mesh_vît_edges
(
mesh_t
 *
m
, 
uöt16_t
 
vît_i
, uöt16_à*
ebuf
, 
max
);

78 
mesh_vît_avg
(
mesh_t
 *
m
, 
vec3
 
avg
);

79 
mesh_vît_max
(
mesh_t
 *
m
, 
vec3
 
max
);

80 
mesh_vît_mö
(
mesh_t
 *
m
, 
vec3
 
mö
);

81 
mesh_vît_Áπhe°
(
mesh_t
 *
m
, 
vec3
 
poöt
, vec3 
Áπhe°
);

82 
mesh_vît_˛o£°
(
mesh_t
 *
m
, 
vec3
 
poöt
, vec3 
˛o£°
);

85 
uöt16_t
 
mesh_edge_cwEdge
(
mesh_t
 *
m
, uöt16_à
edge_i
, uöt16_à
vît_i
);

86 
uöt16_t
 
mesh_edge_ccwEdge
(
mesh_t
 *
m
, uöt16_à
edge_i
, uöt16_à
vît_i
);

87 
mesh_edge_Á˚s
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à*
fbuf
);

88 
mesh_edge_n‹mÆ
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, 
vec3
 
n‹mÆbuf
);

89 
boﬁ
 
mesh_edge_öcidítToFa˚
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
Á˚_i
);

90 
boﬁ
 
mesh_edge_öcidítToVît
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
vît_i
);

93 
boﬁ
 
mesh_Á˚_isLe·
(
mesh_t
 *
m
, 
uöt16_t
 
edge_i
, uöt16_à
Á˚_i
);

94 
uöt16_t
 
mesh_Á˚_cwFa˚
(
mesh_t
 *
m
, uöt16_à
edge_i
, uöt16_à
vît_i
);

95 
uöt16_t
 
mesh_Á˚_ccwFa˚
(
mesh_t
 *
m
, uöt16_à
edge_i
, uöt16_à
vît_i
);

96 
uöt16_t
 
mesh_Á˚_ccwEdge
(
mesh_t
 *
m
, uöt16_à
Á˚_i
, uöt16_à
edge_i
);

97 
uöt16_t
 
mesh_Á˚_˛o£°
(
mesh_t
 *
m
, uöt16_à
Á˚_°¨t
, 
vec3
 
poöt
);

98 
mesh_Á˚_ödexOf_vît
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à
vît_i
);

99 
mesh_Á˚_vîts
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à*
vbuf
, 
max
);

100 
mesh_Á˚_edges
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à*
ebuf
, 
max
);

101 
mesh_Á˚_Á˚s
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, uöt16_à*
fbuf
, 
max
);

102 
mesh_Á˚_n‹mÆ
(
mesh_t
 *
m
, 
uöt16_t
 
Á˚_i
, 
vec3
 
n‹mÆbuf
);

	@src/io/gl/shader.c

8 
	~<Æloˇ.h
>

9 
	~<°dio.h
>

10 
	~<as£π.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

14 
	~<GL/gÀw.h
>

15 
	~<GL/gl.h
>

17 
	~"io/fûe.h
"

18 
	~"io/gl/ãxtuª.h
"

20 
	~"shadî.h
"

22 
	#BUF_SZ
 1024

	)

23 
	#SHADER_VERT_EXT
 ".vs"

	)

24 
	#SHADER_FRAG_EXT
 ".fs"

	)

25 
	#SHADER_DIR
 "gl¶/"

	)

27 
	gIGLVERSION
 = 30;

30 
	$shadî_add_©åib
(
shadî_t
 *
s
, c⁄° *
nm
, 
size
, 
GLíum
 
ty≥
, 
boﬁ
 
n‹mÆized
, 
°ride
, *
±r
)

32 
	`as£π
(
s
->
«âribs
 < 16);

33 
shadî_©åib_t
 *
©å
 = &
s
->
©åibs
[s->
«âribs
];

34 
©å
->
ödex
 = 
	`glGëAâribLoˇti⁄
(
s
->
¥ogøm
, 
nm
);

35 
©å
->
size
 = size;

36 
©å
->
ty≥
 =Åype;

37 
©å
->
n‹mÆized
 =Çormalized;

38 
©å
->
°ride
 = stride;

39 
©å
->
±r
 =Ötr;

40 
s
->
«âribs
++;

41 
	}
}

43 
	$shadî_add_ãxtuª_èrgë
(
shadî_t
 *
s
, c⁄° *
nm
, 
ãxtuª_unô
)

45 
shadî_ãxtuª_èrgë_t
 *
loc
 = &
s
->
ãxtuª_èrgës
[s->
¡extuª_èrgës
];

46 
loc
->
loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
s
->
¥ogøm
, 
nm
);

47 
loc
->
ãxtuª_unô
 =Åexture_unit;

48 
s
->
¡extuª_èrgës
++;

49 
	}
}

51 
	$shadî_add_unif‹m
(
shadî_t
 *
s
, 
shadî_v¨übÀ_ty≥
 
t
, *
nm
)

59 
	}
}

64 
	$shadî_add_‰agmít_ouçut
(
shadî_t
 *
s
, c⁄° *
nm
)

66 
shadî_‰agmít_ouçut_t
 *
f_out
 = &
s
->
ouçuts
[s->
nouçuts
];

67 
GLuöt
 
loc
 = 
	`glGëFøgD©aLoˇti⁄
(
s
->
¥ogøm
, 
nm
);

68 
f_out
->
©èchmít
 = 
GL_COLOR_ATTACHMENT0
 + 
loc
;

69 
s
->
nouçuts
++;

70 
	}
}

85 
GLuöt
 
	$shadî_lﬂd
(c⁄° *
shadîFûe
)

87 
v«me
[32];

88 
‚ame
[32];

91 
	`mem˝y
(
v«me
, 
shadîFûe
, 
	`°æí
(shaderFile)+1);

92 
	`mem˝y
(
‚ame
, 
shadîFûe
, 
	`°æí
(shaderFile)+1);

93 
	`°rˇt
(
v«me
, 
SHADER_VERT_EXT
);

94 
	`°rˇt
(
‚ame
, 
SHADER_FRAG_EXT
);

96 *
vshadîSour˚
 = 
	`fûe_toSåög
(
v«me
);

97 *
fshadîSour˚
 = 
	`fûe_toSåög
(
‚ame
);

98 
GLuöt
 
vshadî
 = 
	`glCª©eShadî
(
GL_VERTEX_SHADER
);

99 
GLuöt
 
fshadî
 = 
	`glCª©eShadî
(
GL_FRAGMENT_SHADER
);

100 
°©us
;

102 
	`glShadîSour˚
(
vshadî
, 1, (c⁄° 
GLch¨
**Ë&
vshadîSour˚
, 0);

103 
	`glShadîSour˚
(
fshadî
, 1, (c⁄° 
GLch¨
**Ë&
fshadîSour˚
, 0);

105 
	`glCompûeShadî
(
vshadî
);

106 
	`glCompûeShadî
(
fshadî
);

108 #ifde‡
DEBUG


109 
	`glGëShadîiv
(
vshadî
, 
GL_COMPILE_STATUS
, &
°©us
);

110 if(
°©us
 !
GL_TRUE
){

111 *
log
 = 
	`Æloˇ
(
BUF_SZ
);

112 
	`mem£t
(
log
, 0, 
BUF_SZ
);

113 
	`glGëShadîInfoLog
(
vshadî
, 
BUF_SZ
, 0, (
GLch¨
*Ë
log
);

114 
	`¥ötf
("Vîãx shadîÉº‹ (%s): %s\n", 
shadîFûe
, 
log
);

115 
	`exô
(-1);

118 
	`glGëShadîiv
(
fshadî
, 
GL_COMPILE_STATUS
, &
°©us
);

119 if(
°©us
 !
GL_TRUE
){

120 *
log
 = 
	`Æloˇ
(
BUF_SZ
);

121 
	`mem£t
(
log
, 0, 
BUF_SZ
);

122 
	`glGëShadîInfoLog
(
fshadî
, 
BUF_SZ
, 0, (
GLch¨
*Ë
log
);

123 
	`¥ötf
("FøgmíàshadîÉº‹(%s): %s\n", 
shadîFûe
, 
log
);

124 
	`exô
(-1);

129 
GLuöt
 
¥ogøm
 = 
	`glCª©eProgøm
();

130 
	`glAâachShadî
(
¥ogøm
, 
vshadî
);

131 
	`glAâachShadî
(
¥ogøm
, 
fshadî
);

132 
	`glLökProgøm
(
¥ogøm
);

134 
	`glGëProgømiv
(
¥ogøm
, 
GL_LINK_STATUS
, &
°©us
);

135 if(
°©us
 !
GL_TRUE
){

136 *
log
 = 
	`Æloˇ
(
BUF_SZ
);

137 
	`mem£t
(
log
, 0, 
BUF_SZ
);

138 
	`glGëProgømInfoLog
(
¥ogøm
, 
BUF_SZ
, 0, (
GLch¨
*)
log
);

139 
	`¥ötf
("lökÉº‹(%s): %s\n", 
shadîFûe
, 
log
);

141 #ifde‡
DEBUG


142 
	`exô
(-1);

147 
	`‰ì
(
vshadîSour˚
);

148 
	`‰ì
(
fshadîSour˚
);

149  
¥ogøm
;

150 
	}
}

152 
GLuöt
 
	$shadî_lﬂdVîsi⁄
(c⁄° *
fûím
, 
GLvî
)

154 if(
GLvî
 > 100)

156 
vî
[4] = {0,0,0,0};

157 
	`¢¥ötf
(
vî
, 4, "%d", 
GLvî
);

158 
buf
[32] = 
SHADER_DIR
;

159 
	`°rˇt
(
buf
, 
fûím
);

160  
	`shadî_lﬂd
(
buf
);

161 
	}
}

163 
	$shadî_öô
(
shadî_t
 *
s
, c⁄° *
¥ogøm
)

165 
s
->
¥ogøm
 = 
	`shadî_lﬂd
(program);

167 
s
->
«âribs
 = 0;

168 
s
->
nouçuts
 = 0;

169 
s
->
¡extuª_èrgës
 = 0;

170 
s
->
©åibs
 = 
	`mÆloc
((
shadî_©åib_t
) * 16);

171 
s
->
ouçuts
 = 
	`mÆloc
((
shadî_‰agmít_ouçut_t
) * 16);

172 
s
->
ãxtuª_èrgës
 = 
	`mÆloc
((
shadî_ãxtuª_èrgë_t
) * 16);

173 
	}
}

175 
	$shadî_föÆize
(
shadî_t
 *
s
)

177 
	`‰ì
(
s
->
©åibs
);

178 
	`‰ì
(
s
->
ouçuts
);

179 
	`‰ì
(
s
->
ãxtuª_èrgës
);

180 
	}
}

	@src/io/gl/shader.h

8 #i‚de‡
_SHADER_H


9 
	#_SHADER_H


	)

11 
	~<GL/gÀw.h
>

12 
	~<GL/gl.h
>

14 
	~"utû/m©h/m©rix.h
"

17 
	gshadî_©åib_t
;

18 
	gshadî_buf„r_obje˘_t
;

19 
	gshadî_‰agmít_ouçut_t
;

20 
	gshadî_ãxtuª_èrgë_t
;

21 
	gshadî_c⁄°™t_t
;

23 
	eshadî_v¨übÀ_ty≥


25 
	mSHADER_BYTE
,

26 
	mSHADER_UBYTE
,

27 
	mSHADER_FLOAT
,

28 
	mSHADER_INT
,

29 
	mSHADER_UINT
,

30 
	mSHADER_MAT4
,

31 
	mSHADER_VEC2
,

32 
	mSHADER_VEC3
,

33 
	mSHADER_VEC4


36 
	sshadî_buf„r_obje˘_t


38 
GLíum
 
	mèrgë
;

39 
GLuöt
 
	mödex
;

42 
	sshadî_‰agmít_ouçut_t


44 
GLíum
 
	m©èchmít
;

47 
	sshadî_ãxtuª_èrgë_t


49 
	mãxtuª_unô
;

50 
	mPADDING
[2];

51 
GLuöt
 
	mloˇti⁄
;

54 
	sshadî_unif‹m_t


56 
shadî_v¨übÀ_ty≥
 
	mty≥
;

57 
GLuöt
 
	mödex
;

58 *
	mvÆ
;

61 
	sshadî_©åib_t
 {

62 
GLuöt
 
	mödex
;

63 
GLöt
 
	msize
;

64 
GLíum
 
	mty≥
;

65 
GLboﬁón
 
	mn‹mÆized
;

66 
GLsizei
 
	m°ride
;

67 c⁄° 
GLvoid
 *
	m±r
;

70 
	sshadî_©èchmít_t


72 
	mnbuf„rs
;

73 
	m¡extuªs
;

74 
shadî_buf„r_obje˘_t
 *
	mbuf„rs
;

75 
shadî_ãxtuª_èrgë_t
 *
	mãxtuªs
;

76 } 
	tshadî_©èchmít_t
;

79 
	sShadî
 {

80 
GLuöt
 
	m¥ogøm
;

81 
	m«âribs
;

82 
	mnouçuts
;

83 
	m¡extuª_èrgës
;

84 
shadî_©åib_t
 *
	m©åibs
;

85 
shadî_‰agmít_ouçut_t
 *
	mouçuts
;

86 
shadî_ãxtuª_èrgë_t
 *
	mãxtuª_èrgës
;

87 
shadî_©èchmít_t
 *
	mbound
;

88 } 
	tShadî
;

90 
Shadî
 
	tshadî_t
;

92 
GLuöt
 
shadî_lﬂd
(c⁄° *
fûím
);

93 
GLuöt
 
shadî_lﬂdVîsi⁄
(c⁄° *
fûím
, 
glvîsi⁄
);

95 
shadî_öô
(
shadî_t
 *
s
, c⁄° *
¥ogøm
);

96 
shadî_föÆize
(
shadî_t
 *
s
);

98 
shadî_add_©åib
(
shadî_t
 *
s
, c⁄° *
nm
, 
sz
, 
GLíum
 
ty≥
,

99 
boﬁ
 
n‹m
, 
°ride
, *
±r
);

101 
shadî_add_‰agmít_ouçut
(
shadî_t
 *
s
, c⁄° *
nm
);

102 
shadî_add_ãxtuª_èrgë
(
shadî_t
 *
s
, c⁄° *
nm
, 
ãxtuª_unô
);

103 
shadî_add_unif‹m
(
shadî_t
 *
s
, 
shadî_v¨übÀ_ty≥
 
t
, *
nm
);

	@src/io/gl/texture.c

8 
	~<GL/gÀw.h
>

9 
	~<GL/gl.h
>

11 
	~<as£π.h
>

12 
	~<°dboﬁ.h
>

13 
	~<°dio.h
>

14 
	~<°döt.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<°döt.h
>

19 
	~<f˙é.h
>

20 
	~<uni°d.h
>

22 
	~"io/tga.h
"

23 
	~"utû/noi£.h
"

25 
	~"ãxtuª.h
"

31 #i‚de‡
__WIN32


32 
	#O_BINARY
 0

	)

35 
	#EXT_UKN
 -1

	)

36 
	#EXT_TGA
 1

	)

37 
	#EXT_PNG
 2

	)

39 
	#OFFSET
(
a
,
n
Ë((*)((*)◊Ë+ (n)))

	)

41 
	sTextuªF‹m©


43 
uöt8_t
 
	mdïth
;

44 
uöt16_t
 
	möã∫ÆF‹m©
;

45 
uöt16_t
 
	mf‹m©
;

46 
uöt16_t
 
	mty≥
;

49 
TextuªF‹m©
 
	gãxF‹m©
[] =

51 {4, 
GL_RGBA8
, 
GL_BGRA
, 
GL_UNSIGNED_BYTE
},

52 {3, 
GL_RGB8
, 
GL_BGR
, 
GL_UNSIGNED_BYTE
},

53 {4, 
GL_DEPTH_COMPONENT32
, 
GL_DEPTH_COMPONENT
, 
GL_FLOAT
},

54 {4, 
GL_R32UI
, 
GL_RED_INTEGER
, 
GL_UNSIGNED_INT
},

55 {4, 
GL_RG16UI
, 
GL_RG_INTEGER
, 
GL_UNSIGNED_SHORT
}

58 
ãxtuª_lﬂdfûe
(
Textuª
 *
ãxtuª
, c⁄° *
fûím
);

59 
ãxtuª_pôch
(
Textuª
 *
ãxtuª
);

60 
ãxtuª_dïth
(
Textuª
 *
ãxtuª
);

62 
	$ãxtuª_lﬂdfûe
(
Textuª
 *
ãxtuª
, c⁄° *
fûím
)

65 
îr
;

66 
fd
 = 
	`›í
(
fûím
, 
O_RDONLY
 | 
O_BINARY
);

68 
tga_hódî
 
hódî
;

69 
îr
 = 
	`tga_hódî_ªad
(
fd
, &
hódî
);

70 i‡(
îr
) {

71 
	`¥ötf
("Invalid TGA file");

74 
buf_sz
 = 
	`tga_image_sz
(&
hódî
);

75 
ãxtuª
->
bôs
 = 
	`mÆloc
(
buf_sz
);

76 
ãxtuª
->
w
 = 
hódî
.
img
.w;

77 
ãxtuª
->
h
 = 
hódî
.
img
.h;

78 
ãxtuª
->
f‹m©
 = 
hódî
.
img
.
dïth
 =32 ? 
TEXTURE_RGBA
 : 
TEXTURE_RGB
;

79 
ãxtuª
->
fmt
 = &
ãxF‹m©
[ãxtuª->
f‹m©
];

80 
ãxtuª
->
g…y≥
 = 
GL_TEXTURE_2D
;

81 
	`tga_image_ªad
(
fd
, &
hódî
, 
ãxtuª
->
bôs
);

82 
	`˛o£
(
fd
);

83 
	}
}

85 
	$ãxtuª_pôch
(
Textuª
 *
ãxtuª
)

87  
ãxtuª
->
w
 *Åextuª->
fmt
->
dïth
;

88 
	}
}

90 
	$ãxtuª_dïth
(
Textuª
 *
ãxtuª
)

92  
ãxtuª
->
fmt
->
dïth
;

93 
	}
}

95 
	$ãxtuª_öô‰omfûe
(
Textuª
 *
ãxtuª
, c⁄° *
fûím
, 
›ti⁄s
)

97 
ãxtuª
->
w
 = 0;

98 
ãxtuª
->
h
 = 0;

99 
ãxtuª
->
›ti⁄s
 = options;

100 
ãxtuª
->
f‹m©
 = 0;

101 
ãxtuª
->
fmt
 = &
ãxF‹m©
[ãxtuª->
f‹m©
];

102 
ãxtuª
->
g…y≥
 = 
GL_TEXTURE_2D
;

103 
ãxtuª
->
bôs
 = 
NULL
;

105 
	`ãxtuª_lﬂdfûe
(
ãxtuª
, 
fûím
);

108 #i‚de‡
NO_GL


109 if(
›ti⁄s
 & 
TEXTURE_HARDWARE
)

111 
	`glGíTextuªs
(1, &
ãxtuª
->
glid
);

112 
	`ãxtuª_commô
(
ãxtuª
);

116 if(!(
›ti⁄s
 & 
TEXTURE_SOFTWARE
))

118 
	`‰ì
(
ãxtuª
->
bôs
);

119 
ãxtuª
->
bôs
 = 
NULL
;

121 
	}
}

123 
	$ãxtuª_öô
(
Textuª
 *
ãx
, 
w
, 
h
, 
f‹m©
, 
›ti⁄s
)

125 
ãx
->
w
 = w;

126 
ãx
->
h
 = h;

127 
ãx
->
›ti⁄s
 = options;

128 
ãx
->
f‹m©
 = format;

129 
ãx
->
g…y≥
 = 
GL_TEXTURE_2D
;

130 
ãx
->
fmt
 = &
ãxF‹m©
[ãx->
f‹m©
];

131 
ãx
->
bôs
 = 
	`mÆloc
—ex->
fmt
->
dïth
 * 
w
 * 
h
);

133 
	`glGíTextuªs
(1, &
ãx
->
glid
);

134 
	`ãxtuª_commô
(
ãx
);

135 
	}
}

137 
	$ãxtuª_föÆize
(
Textuª
 *
ãxtuª
)

139 if((
ãxtuª
->
›ti⁄s
 & 
TEXTURE_SOFTWARE
))

141 
	`‰ì
(
ãxtuª
->
bôs
);

144 #i‚de‡
NO_GL


145 
	`glDñëeTextuªs
(1, &
ãxtuª
->
glid
);

147 
	}
}

149 
	$ãxtuª_commô
(
Textuª
 *
ãxtuª
)

152 
GLíum
 
öãΩﬁ©i⁄
 = (
ãxtuª
->
›ti⁄s
 & 
TEXTURE_NOINTERP
Ë? 
GL_NEAREST
 : 
GL_LINEAR
;

154 
	`glBödTextuª
(
ãxtuª
->
g…y≥
,Åextuª->
glid
);

155 
	`glTexP¨amëîi
(
ãxtuª
->
g…y≥
, 
GL_TEXTURE_MIN_FILTER
, 
öãΩﬁ©i⁄
);

156 
	`glTexP¨amëîi
(
ãxtuª
->
g…y≥
, 
GL_TEXTURE_MAG_FILTER
, 
öãΩﬁ©i⁄
);

157 
	`glTexP¨amëîi
(
ãxtuª
->
g…y≥
, 
GL_TEXTURE_WRAP_S
, 
GL_REPEAT
);

158 
	`glTexP¨amëîi
(
ãxtuª
->
g…y≥
, 
GL_TEXTURE_WRAP_T
, 
GL_REPEAT
);

160 
	`glPixñSt‹ei
(
GL_UNPACK_ALIGNMENT
, 1);

162 
	`glTexImage2D
(

163 
ãxtuª
->
g…y≥
,

165 
ãxtuª
->
fmt
->
öã∫ÆF‹m©
,

166 
ãxtuª
->
w
,

167 
ãxtuª
->
h
,

169 
ãxtuª
->
fmt
->
f‹m©
,

170 
ãxtuª
->
fmt
->
ty≥
,

171 
ãxtuª
->
bôs
);

172 
	}
}

174 
uöt32_t
 
	$ãxtuª_gëpixñ
(
Textuª
 *
ãxtuª
, 
x
, 
y
)

176 
uöt8_t
 *
ªt
;

177 if(
ãxtuª
->
›ti⁄s
 & 
TEXTURE_HARDWARE
)

179 
	`as£π
(
Ál£
 && "cannot getÖixel from hardwareÅexture");

183 
	`as£π
(
ãxtuª
->
›ti⁄s
 & 
TEXTURE_SOFTWARE
);

184 
ªt
 = ((
uöt8_t
*Ë
ãxtuª
->
bôs
) +

185 
	`ãxtuª_dïth
(
ãxtuª
Ë* 
x
 + 
	`ãxtuª_pôch
—extuªË* 
y
;

187  *((
uöt32_t
*Ë
ªt
);

188 
	}
}

190 
	$ãxtuª_£çixñ
(
Textuª
 *
ãxtuª
, 
x
, 
y
, 
uöt32_t
 
vÆ
)

192 if(
ãxtuª
->
›ti⁄s
 & 
TEXTURE_HARDWARE
)

194 
	`glTexSubImage2D
(

195 
ãxtuª
->
g…y≥
,

197 
x
,

198 
y
,

201 
ãxtuª
->
fmt
->
f‹m©
,

202 
ãxtuª
->
fmt
->
ty≥
,

203 
vÆ


207 
	`as£π
(
ãxtuª
->
›ti⁄s
 & 
TEXTURE_SOFTWARE
);

208 
uöt8_t
 *
pxl
 = ((uöt8_t*Ë
ãxtuª
->
bôs
) +

209 
	`ãxtuª_dïth
(
ãxtuª
Ë* 
x
 + 
	`ãxtuª_pôch
—extuªË* 
y
;

210 
	`mem˝y
(
pxl
, &
vÆ
, 
	`ãxtuª_dïth
(
ãxtuª
));

212 
	}
}

	@src/io/gl/texture.h

8 #i‚de‡
_TEXTURE_H


9 
	#_TEXTURE_H


	)

11 
	~<GL/gÀw.h
>

12 
	~<GL/gl.h
>

14 
	#TEXTURE_2D
 1

	)

15 
	#TEXTURE_NOINTERP
 2

	)

16 
	#TEXTURE_HARDWARE
 4

	)

17 
	#TEXTURE_SOFTWARE
 8

18 

	)

19 
	#TEXTURE_RGBA
 0

	)

20 
	#TEXTURE_RGB
 1

	)

21 
	#TEXTURE_DEPTH
 2

	)

22 
	#TEXTURE_INT
 3

	)

24 
	gTextuªF‹m©
;

26 
	sTextuª
 {

27 
uöt16_t
 
	m›ti⁄s
;

28 
uöt16_t
 
	mw
;

29 
uöt16_t
 
	mh
;

30 
uöt16_t
 
	mf‹m©
;

31 
GLíum
 
	mg…y≥
;

32 
GLuöt
 
	mglid
;

33 
TextuªF‹m©
 *
	mfmt
;

34 *
	mbôs
;

35 } 
	tTextuª
;

37 
Textuª
 
	tãxtuª_t
;

39 (*
	tTEXTURE_GENFUNC
)(
	tTextuª
 *
	tt
, *
	t∑øms
);

41 
	`ãxtuª_öô‰omfûe
(
Textuª
 *
ãxtuª
, c⁄° *
fûím
, 
›ti⁄s
);

42 
	`ãxtuª_öô
(
Textuª
 *
ãx
, 
w
, 
h
, 
f‹m©
, 
›ti⁄s
);

43 
	`ãxtuª_föÆize
(
Textuª
 *
ãxtuª
);

44 
	`ãxtuª_commô
(
Textuª
 *
ãxtuª
);

45 
uöt32_t
 
	`ãxtuª_gëpixñ
(
Textuª
 *
ãxtuª
, 
x
, 
y
);

46 
	`ãxtuª_£çixñ
(
Textuª
 *
ãxtuª
, 
x
, 
y
, 
uöt32_t
 
vÆ
);

	@src/io/tga.c

9 
	~<as£π.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

12 
	~<°dboﬁ.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<uni°d.h
>

17 
	~"tga.h
"

19 
	#CMAP_TRUE
 1

	)

20 
	#CMAP_FALSE
 0

	)

22 
	#ITYPE_NONE
 0

	)

23 
	#ITYPE_UCCM
 1

	)

24 
	#ITYPE_UCTC
 2

	)

25 
	#ITYPE_UCBW
 3

	)

26 
	#ITYPE_RLECM
 9

	)

27 
	#ITYPE_RLETC
 10

	)

28 
	#ITYPE_RLEBW
 11

	)

30 
	#DISCR_ALPHA_MASK
 0x0F

	)

31 
	#DISCR_DIREC_MASK
 0x40

	)

33 
	#RLE_REPEAT_MASK
 0x7F

	)

34 
	#RLE_FLAG_MASK
 0x80

	)

36 
	#BUF_SZ
 1024

	)

38 
	#IS_FULLCOLOR
(
x
Ë((x).
img_ty≥
 =2)

	)

39 
	#HAS_CMAP
(
x
Ë((x).
cm≠_ty≥
 =1)

	)

40 
	#HAS_RLE
(
x
Ë((x).
img_ty≥
 >9 && (x).img_ty≥ <11)

	)

41 
	#NALPHA_BITS
(
x
Ë((x).
img_dis¸ùt‹
 & 
DISCR_ALPHA_MASK
)

	)

43 
	#OFFSET
(
x
,
n
Ë(((*)(x)Ë+ ()“))

	)

48 
size_t
 
	$tga_pxl_sz
(
tga_hódî
 *
h
)

50  (
h
->
img
.
dïth
 /8);

51 
	}
}

56 
size_t
 
	$tga_cﬁ‹m≠_sz
(
tga_hódî
 *
h
)

58  
h
->
cm≠
.
Àn
 * 
	`tga_pxl_sz
(h);

59 
	}
}

64 
size_t
 
	$tga_image_sz
(
tga_hódî
 *
h
)

66  
h
->
img
.
w
 * h->img.h * 
	`tga_pxl_sz
(h);

67 
	}
}

72 
	$tga_hódî_is_vÆid
(
tga_hódî
 *
h
)

75 if(
h
->
cm≠_ty≥
 !
CMAP_TRUE
 && h->cm≠_ty≥ !
CMAP_FALSE
)

76  
Ál£
;

79 if(
h
->
img_ty≥
 !
ITYPE_NONE
 && h->img_ty≥ !
ITYPE_UCCM
 && h->img_ty≥ !
ITYPE_UCTC


80 && 
h
->
img_ty≥
 !
ITYPE_UCBW
 && h->img_ty≥ !
ITYPE_RLECM


81 && 
h
->
img_ty≥
 !
ITYPE_RLETC
 && h->img_ty≥ !
ITYPE_RLEBW
)

82  
Ál£
;

83  
åue
;

84 
	}
}

89 
	$tga_hódî_ªad
(
fd
, 
tga_hódî
 *
h
)

91 if(!
fd
) {

95 
	`ªad
(
fd
, &
h
->
id_Àn
, (
uöt8_t
));

96 
	`ªad
(
fd
, &
h
->
cm≠_ty≥
, (
uöt8_t
));

97 
	`ªad
(
fd
, &
h
->
img_ty≥
, (
uöt8_t
));

98 
	`ªad
(
fd
, &
h
->
cm≠
, 5);

99 
	`ªad
(
fd
, &
h
->
img
, 10);

100  !
	`tga_hódî_is_vÆid
(
h
);

101 
	}
}

103 
	sbuf„r_t
 {

104 
uöt32_t
 
	mcuºít_ödex
;

105 
uöt32_t
 
	mmax
;

106 
uöt8_t
 *
	mbuf„r
;

109 
	$buf„r_£t
(
buf„r_t
 *
b
, *
buf„r
, 
sz
)

111 
b
->
cuºít_ödex
 = 
sz
;

112 
b
->
max
 = 
sz
;

113 
b
->
buf„r
 = (
uöt8_t
 *) buffer;

114 
	}
}

117 *
	$buf„r_ªad
(
buf„r_t
 *
b
, 
fd
, 
n
, *
d°
)

119 
uöt8_t
 *
buf
 = 
b
->
buf„r
;

120 
uöt32_t
 
i
 = 
b
->
cuºít_ödex
;

121 if(
i
 + 
n
 >
b
->
max
)

123 
	`memmove
(
buf
, &buf[
i
], 
b
->
max
 - i);

124 
	`ªad
(
fd
, &
buf
[
b
->
max
 - 
i
], i);

125 
b
->
cuºít_ödex
 = 0;

127 
i
 = 
b
->
cuºít_ödex
;

128 
b
->
cuºít_ödex
 +
n
;

129 
	`mem˝y
(
d°
, &
b
->
buf„r
[
i
], 
n
);

130  &
b
->
buf„r
[
i
];

131 
	}
}

136 
	$tga_image_ªad
(
fd
, 
tga_hódî
 *
h
, *
d©a
)

138 
	`l£ek
(
fd
, 
h
->
id_Àn
, 
SEEK_CUR
);

140 if(!
	`tga_hódî_is_vÆid
(
h
)){

141 
	`as£π
(
Ál£
 && "Invalid TGA file");

147 if(
	`HAS_CMAP
(*
h
)){

148 
	`as£π
(
Ál£
 && "TGA Color mapÇot yet supported");

153 
uöt8_t
 
ƒïót
 = 0;

154 
uöt8_t
 
æe_Êag
 = 0;

155 
uöt8_t
 
Bµ
 = 
	`tga_pxl_sz
(
h
);

157 
uöt8_t
 
buf
[
BUF_SZ
];

158 
buf„r_t
 
buf„r
 = {
BUF_SZ
, BUF_SZ, 
buf
};

160 
i
, 
j
;

161 
j
 = 0; j < 
h
->
img
.h; j++){

162 
i
 = 0; i < 
h
->
img
.
w
; i++, 
d©a
 = (*)
	`OFFSET
(d©a,
Bµ
)){

164 if(
ƒïót
 =0 && 
	`HAS_RLE
(*
h
)){

165 
uöt8_t
 
æe_pkt
;

166 
	`buf„r_ªad
(&
buf„r
, 
fd
, 1, &
æe_pkt
);

167 
æe_Êag
 = 
æe_pkt
 & 
RLE_FLAG_MASK
;

168 
ƒïót
 = 
æe_pkt
 & 
RLE_REPEAT_MASK
;

170 
	`buf„r_ªad
(&
buf„r
, 
fd
, 
Bµ
, 
d©a
);

173 if(
æe_Êag
){

174 
	`mem˝y
(
d©a
, 
	`OFFSET
(d©a, -
Bµ
), Bpp);

176 
	`buf„r_ªad
(&
buf„r
, 
fd
, 
Bµ
, 
d©a
);

178 
ƒïót
--;

181  
î∫o
;

182 
	}
}

	@src/io/tga.h

8 #i‚de‡
_TGA_H


9 
	#_TGA_H


	)

11 
	~<°ddef.h
>

12 
	~<°döt.h
>

14 
	stga_hódî
 {

15 
uöt8_t
 
	mid_Àn
;

16 
uöt8_t
 
	mcm≠_ty≥
;

17 
uöt8_t
 
	mimg_ty≥
;

20 
	stga_hódî_cm≠
 {

21 
uöt16_t
 
	moff£t
;

22 
uöt16_t
 
	mÀn
;

23 
uöt8_t
 
	míåy_sz
;

24 } 
	mcm≠
;

27 
	stga_hódî_img
 {

28 
uöt16_t
 
	mx‹g
;

29 
uöt16_t
 
	my‹g
;

30 
uöt16_t
 
	mw
;

31 
uöt16_t
 
	mh
;

32 
uöt8_t
 
	mdïth
;

33 
uöt8_t
 
	mdis¸ùt‹
;

34 } 
	mimg
;

35 } 
	ttga_hódî
;

37 
size_t
 
tga_pxl_sz
(
tga_hódî
 *
h
);

38 
size_t
 
tga_cﬁ‹m≠_sz
(
tga_hódî
 *
h
);

39 
size_t
 
tga_image_sz
(
tga_hódî
 *
h
);

41 
tga_hódî_is_vÆid
(
tga_hódî
 *
h
);

43 
tga_hódî_ªad
(
fd
, 
tga_hódî
 *
h
);

44 
tga_image_ªad
(
fd
, 
tga_hódî
 *
h
, *
buf
);

	@src/util/algo/bits.c

8 
	~<as£π.h
>

10 
	~"bôs.h
"

13 c⁄° 
uöt64_t
 
	gm1
 = 0x5555555555555555;

14 c⁄° 
uöt64_t
 
	gm2
 = 0x3333333333333333;

15 c⁄° 
uöt64_t
 
	gm4
 = 0x0f0f0f0f0f0f0f0f;

17 
Á°_p›cou¡
(
uöt64_t
 
x
);

22 
	$Á°_p›cou¡
(
uöt64_t
 
x
)

24 
x
 -(x >> 1Ë& 
m1
;

25 
x
 = (x & 
m2
) + ((x >> 2) & m2);

26 
x
 = (x + (x >> 4)Ë& 
m4
;

27 
x
 += x >> 8;

28 
x
 += x >> 16;

29 
x
 += x >> 32;

30  
x
 & 0x7f;

31 
	}
}

33 
	$bôs_p›˙t
(
uöt64_t
 
n
)

35 
ªt
;

36 #i‡
	`deföed
(
__POPCNT__
Ë|| deföed(
__SSE4_2__
)

37 
ªt
 = 
	`__buûtö_p›cou¡
(
n
);

39 
ªt
 = 
	`Á°_p›cou¡
(
n
);

41  
ªt
;

42 
	}
}

48 
	$bôs_tz˙t
(
uöt64_t
 
n
)

50 
	`as£π
(
n
);

52 
ªt
;

53 
ªt
 = 
	`__buûtö_˘zl
(
n
);

54  
ªt
;

55 
	}
}

61 
	$bôs_lz˙t
(
uöt64_t
 
n
)

63 
	`as£π
(
n
);

65 
ªt
;

66 
ªt
 = 
	`__buûtö_˛zl
(
n
);

67  
ªt
;

68 
	}
}

	@src/util/algo/bits.h

8 #i‚de‡
_OBJ_BITS_H


9 
	#_OBJ_BITS_H


	)

11 
	~<°döt.h
>

14 
bôs_p›˙t
(
uöt64_t
 
n
);

17 
bôs_tz˙t
(
uöt64_t
 
n
);

20 
bôs_lz˙t
(
uöt64_t
 
n
);

	@src/util/algo/search.c

8 
	#OFFSET
(
a
,
sz
,
b
Ë((*)(((*)◊)Ë+ ((szË* (b))))

	)

10 
	$midpoöt
(
a
, 
b
)

12  
a
 + ((
b
 -á) / 2);

13 
	}
}

15 *
£¨ch_löór
(c⁄° *
key
, *
ba£
,

16 
size_t
 
n
, size_à
sz
,

17 (*
com∑r
)(const *, const *))

19 *
ªt
 = 
NULL
;

21 
i
;

22 
i
 = 0; i < 
n
; i++)

24 *
b
 = 
	`OFFSET
(
ba£
, 
sz
, 
i
);

25 if(
	`com∑r
(
key
, 
b
) == 0)

27 
ªt
 = 
b
;

31  
ªt
;

32 
	}
}

34 *
£¨ch_bö¨y
(c⁄° *
key
, *
ba£
,

35 
size_t
 
n
, size_à
sz
,

36 (*
com∑r
)(const *, const *))

38 *
ªt
 = 
NULL
;

39 
low
 = 0;

40 
high
 = 
n
 - 1;

41 
mid
;

43 
low
 < 
high
)

45 
mid
 = 
	`midpoöt
(
low
, 
high
);

46 *
b
 = 
	`OFFSET
(
ba£
, 
sz
, 
mid
);

47 
cmp
 = 
	`com∑r
(
key
, 
b
);

48 i‡(
cmp
 < 0)

50 
low
 = 
mid
 + 1;

51 } i‡(
cmp
 > 0)

53 
high
 = 
mid
 - 1;

56 
ªt
 = 
b
;

60  
ªt
;

61 
	}
}

	@src/util/algo/search.h

8 
	~<°ddef.h
>

10 *
£¨ch_löór
(c⁄° *
key
, *
ba£
,

11 
size_t
 
n
, size_à
sz
,

12 (*
com∑r
)(const *, const *));

14 *
	`£¨ch_bö¨y
(c⁄° *
key
, *
ba£
,

15 
size_t
 
n
, size_à
sz
,

16 (*
com∑r
)(const *, const *));

18 *
	`£¨ch_öãΩ
(c⁄° *
key
, *
ba£
,

19 
size_t
 
n
, size_à
sz
,

20 (*
com∑r
)(const *, const *));

	@src/util/algo/sort.c

8 
	~<Æloˇ.h
>

9 
	~<°dboﬁ.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	~"s‹t.h
"

15 
	#off£t
(
a
,
sz
,
b
Ë((*)(((*)◊)Ë+ ((szË* (b))))

	)

20 
	$s‹t_öt_asc
(c⁄° *
a
, c⁄° *
b
)

22 *
ü
 = (*Ë
a
;

23 *
ib
 = (*Ë
b
;

24  *
ü
 - *
ib
;

25 
	}
}

30 
	$s‹t_öt_desc
(c⁄° *
a
, c⁄° *
b
)

32 *
ü
 = (*Ë
a
;

33 *
ib
 = (*Ë
b
;

34  *
ib
 - *
ü
;

35 
	}
}

40 
s‹t_iss‹ãd
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *))

42 
ªt
 = 1;

44 
i
;

45 
i
 = 1; i < 
n
; i++)

47 *
a
 = 
	`off£t
(
ba£
, 
sz
, 
i
 - 1);

48 *
b
 = 
	`off£t
(
ba£
, 
sz
, 
i
);

49 if(
	`com∑r
(
a
, 
b
) > 0)

51 
ªt
 = 0;

55  
ªt
;

56 
	}
}

61 
	$s‹t_sw≠
(*
a
, *
b
, 
size_t
 
sz
)

63 *
tmp
 = 
	`Æloˇ
(
sz
);

64 
	`mem˝y
(
tmp
, 
a
, 
sz
);

65 
	`mem˝y
(
a
, 
b
, 
sz
);

66 
	`mem˝y
(
b
, 
tmp
, 
sz
);

67 
	}
}

69 
	$s‹t_psw≠
(*
a
, *
b
)

71 *
tmp
;

72 
tmp
 = 
a
;

73 
a
 = 
b
;

74 
b
 = 
tmp
;

75 
	}
}

77 
s‹t_csw≠
(*
a
, *
b
, 
size_t
 
sz
, (*
com∑r
)(const *, const *))

79 
to_sw≠
 = (
	`com∑r
(
a
,
b
) > 0);

80 if(
to_sw≠
)

82 
	`s‹t_sw≠
(
a
, 
b
, 
sz
);

84  
to_sw≠
;

85 
	}
}

100 
s‹t_bubbÀ
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *))

102 
i
,
j
,
s‹ãd
 = 
Ál£
;

103 
i
 = 
n
 - 1; i > 0 && !
s‹ãd
; i--)

105 
s‹ãd
 = 
åue
;

106 
j
 = 0; j < 
i
; j++)

108 *
a
 = 
	`off£t
(
ba£
, 
sz
, 
j
);

109 *
b
 = 
	`off£t
(
ba£
, 
sz
, 
j
 + 1);

111 if(
	`com∑r
(
a
,
b
) > 0)

113 
	`s‹t_sw≠
(
a
,
b
,
sz
);

114 
s‹ãd
 = 
Ál£
;

118 
	}
}

123 
s‹t_cockèû
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *))

125 
i
,
j
,
s‹ãd
 = 
Ál£
;

126 
i
 = 0; i < 
n
 && !
s‹ãd
; i++)

128 
s‹ãd
 = 
åue
;

129 
j
 = 
i
; j < 
n
-i-1; j++)

131 *
a
 = 
	`off£t
(
ba£
, 
sz
, 
j
);

132 *
b
 = 
	`off£t
(
ba£
, 
sz
, 
j
 + 1);

134 if(
	`com∑r
(
a
,
b
) > 0)

136 
	`s‹t_sw≠
(
a
,
b
,
sz
);

137 
s‹ãd
 = 
Ál£
;

141 
j
 = 
n
-
i
-1; j > i; j--)

143 *
a
 = 
	`off£t
(
ba£
, 
sz
, 
j
 - 1);

144 *
b
 = 
	`off£t
(
ba£
, 
sz
, 
j
);

146 if(
	`com∑r
(
a
,
b
) > 0)

148 
	`s‹t_sw≠
(
a
,
b
,
sz
);

149 
s‹ãd
 = 
Ál£
;

153 
	}
}

158 
s‹t_ö£πi⁄
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *))

160 
i
,
j
;

161 
i
 = 1; i < 
n
; i++)

163 *
a
 = 
	`off£t
(
ba£
, 
sz
, 
i
 - 1);

164 *
b
 = 
	`off£t
(
ba£
, 
sz
, 
i
);

165 
j
 = 
i
; j > 0 && 
	`com∑r
(
a
,
b
) > 0; j--)

167 
	`s‹t_sw≠
(
a
,
b
,
sz
);

168 
a
 = 
	`off£t
(
ba£
, 
sz
, 
j
 - 2);

169 
b
 = 
	`off£t
(
ba£
, 
sz
, 
j
 - 1);

172 
	}
}

177 
s‹t_£À˘i⁄
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *))

179 
i
,
j
;

180 
i
 = 0; i < 
n
; i++)

182 *
a
 = 
	`off£t
(
ba£
, 
sz
, 
i
);

183 *
Àa°
 = 
	`off£t
(
ba£
, 
sz
, 
i
);

184 
j
 = 
i
 + 1; j < 
n
; j++)

186 *
b
 = 
	`off£t
(
ba£
, 
sz
, 
j
);

187 i‡(
	`com∑r
(
Àa°
, 
b
) > 0)

189 
Àa°
 = 
b
;

192 if(
a
 !
Àa°
)

194 
	`s‹t_sw≠
(
a
, 
Àa°
, 
sz
);

197 
	}
}

	@src/util/algo/sort.h

8 
	~<°dlib.h
>

10 
s‹t_öt_asc
(c⁄° *
a
, c⁄° *
b
);

11 
s‹t_öt_desc
(c⁄° *
a
, c⁄° *
b
);

13 
s‹t_iss‹ãd
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *));

15 
	`s‹t_sw≠
(*
a
, *
b
, 
size_t
 
sz
);

16 
	`s‹t_psw≠
(*
a
, *
b
);

17 
	`s‹t_csw≠
(*
a
, *
b
, 
size_t
 
sz
, (*
com∑r
)(const *, const *));

19 
	`s‹t_bubbÀ
(*
ba£
, 
size_t
 
n
, size_à
size
, (*
com∑r
)(const *, const *));

20 
	`s‹t_cockèû
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *));

21 
	`s‹t_ö£πi⁄
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *));

22 
	`s‹t_£À˘i⁄
(*
ba£
, 
size_t
 
n
, size_à
sz
, (*
com∑r
)(const *, const *));

	@src/util/hash.c

9 
	~"hash.h
"

11 
	#MASK8
 0xff

	)

12 
	#MASK16
 0xffff

	)

13 
	#MASK24
 0xffffff

	)

14 
	#MASK32
 0xffffffff

	)

15 
	#MASK64
 0xffffffffffffffff

	)

17 
	#FNV32_PRIME
 16777619u

	)

18 
	#FNV64_PRIME
 1099511628211uŒ

	)

20 
	#FNV32_OFFSET
 2166136261u

	)

21 
	#FNV64_OFFSET
 14695981039346656037uŒ

	)

26 
	$uöt16_t
 (*
hash16_ãxt
)(c⁄° c⁄° *
a
, 
size_t
 
max
Ë
hash_‚v16_ãxt
;

27 
	$uöt16_t
 (*
hash16_d©a
)(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
Ë
hash_‚v16_d©a
;

28 
	$uöt32_t
 (*
hash32_ãxt
)(c⁄° c⁄° *
a
, 
size_t
 
max
Ë
hash_‚v32_ãxt
;

29 
	$uöt32_t
 (*
hash32_d©a
)(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
Ë
hash_‚v32_d©a
;

30 
	$uöt64_t
 (*
hash64_ãxt
)(c⁄° *
a
, 
size_t
 
max
Ë
hash_‚v64_ãxt
;

31 
	$uöt64_t
 (*
hash64_d©a
)(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
Ë
hash_‚v64_d©a
;

37 
uöt16_t
 
	$hash_‚v16_ãxt
(c⁄° *
a
, 
size_t
 
max
)

39 
uöt32_t
 
hash
 = 
	`hash_‚v32_ãxt
(
a
, 
max
);

40  (
uöt16_t
Ë((
hash
 >> 16Ë^ (hash & 
MASK16
));

41 
	}
}

47 
uöt16_t
 
	$hash_‚v16_d©a
(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
)

49 
uöt32_t
 
hash
 = 
	`hash_‚v32_d©a
(
a
, 
sz
);

50  (
uöt16_t
Ë((
hash
 >> 16Ë^ (hash & 
MASK16
));

51 
	}
}

56 
uöt32_t
 
	$hash_‚v32_ãxt
(c⁄° *
a
, 
size_t
 
max
)

58 
uöt32_t
 
hash
 = 
FNV32_OFFSET
;

59 
uöt32_t
 
√xt
;

61 (
√xt
 = (
uöt32_t
Ë*
a
++Ë&& 
max
--)

63 
hash
 = hash ^ 
√xt
;

64 
hash
 = hash * 
FNV32_PRIME
;

66  
hash
;

67 
	}
}

73 
uöt32_t
 
	$hash_‚v32_d©a
(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
)

75 
uöt32_t
 
hash
 = 
FNV32_OFFSET
;

76 
uöt32_t
 
√xt
;

78 
sz
--)

80 
√xt
 = (
uöt8_t
Ë*
a
++;

81 
hash
 = hash ^ 
√xt
;

82 
hash
 = hash * 
FNV32_PRIME
;

84  
hash
;

85 
	}
}

87 
uöt32_t
 
	$hash_‚v32_fûe
(c⁄° *
fûím
)

89 
uöt32_t
 
hash
 = 0;

90 
uöt8_t
 
buf
[1024];

91 
FILE
 *
f
 = 
	`f›í
(
fûím
, "rb");

92 
	`‰ód
(
buf
, 1, 1024, 
f
))

94 
uöt32_t
 
√xt
 = 
	`hash_‚v32_d©a
(
buf
, 1024);

95 
hash
 = hash ^ 
√xt
;

96 
hash
 = hash * 
FNV32_PRIME
;

98 
	`f˛o£
(
f
);

99  
hash
;

100 
	}
}

105 
uöt64_t
 
	$hash_‚v64_ãxt
(c⁄° *
a
, 
size_t
 
max
)

107 
uöt64_t
 
hash
 = 
FNV64_OFFSET
;

108 
uöt64_t
 
√xt
;

110 (
√xt
 = (
uöt64_t
Ë*
a
++Ë&& 
max
--)

112 
hash
 = hash ^ 
√xt
;

113 
hash
 = hash * 
FNV64_PRIME
;

115  
hash
;

116 
	}
}

121 
uöt64_t
 
	$hash_‚v64_d©a
(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
)

123 
uöt64_t
 
hash
 = 
FNV64_OFFSET
;

124 
uöt64_t
 
√xt
;

126 
sz
--)

128 
√xt
 = (
uöt8_t
Ë*
a
++;

129 
hash
 = hash ^ 
√xt
;

130 
hash
 = hash * 
FNV64_PRIME
;

132  
hash
;

133 
	}
}

	@src/util/hash.h

9 #i‚de‡
_HASH_H


10 
	#_HASH_H


	)

12 
	~<°dio.h
>

13 
	~<°ddef.h
>

14 
	~<°döt.h
>

16 
	$uöt16_t
 (*
hash16_ãxt
)(c⁄° *
a
, 
size_t
 
max
);

17 
	$uöt16_t
 (*
hash16_d©a
)(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
);

18 
	$uöt32_t
 (*
hash32_ãxt
)(c⁄° *
a
, 
size_t
 
max
);

19 
	$uöt32_t
 (*
hash32_d©a
)(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
);

20 
	$uöt64_t
 (*
hash64_ãxt
)(c⁄° *
a
, 
size_t
 
max
);

21 
	$uöt64_t
 (*
hash64_d©a
)(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
);

23 
uöt16_t
 
	`hash_‚v16_ãxt
(c⁄° *
a
, 
size_t
 
max
);

24 
uöt16_t
 
	`hash_‚v16_d©a
(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
);

25 
uöt32_t
 
	`hash_‚v32_ãxt
(c⁄° *
a
, 
size_t
 
max
);

26 
uöt32_t
 
	`hash_‚v32_d©a
(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
);

27 
uöt32_t
 
	`hash_‚v32_fûe
(c⁄° *
fûím
);

28 
uöt64_t
 
	`hash_‚v64_ãxt
(c⁄° *
a
, 
size_t
 
max
);

29 
uöt64_t
 
	`hash_‚v64_d©a
(c⁄° 
uöt8_t
 *
a
, 
size_t
 
sz
);

	@src/util/math/angles.c

8 
	~"utû/m©h/sˇœr.h
"

10 
	~"™gÀs.h
"

12 (*
™gÀs_n‹mÆize
)(
™gÀs
 
a
Ë
™gÀs_n‹mÆize360
;

14 
	$™gÀs_£t
(
™gÀs
 
a
, 
pôch
, 
yaw
, 
rﬁl
)

16 
a
[
PITCH
] = 
pôch
;

17 
a
[
YAW
] = 
yaw
;

18 
a
[
ROLL
] = 
rﬁl
;

19 
	}
}

21 
	$™gÀs_add
(
™gÀs
 
a
,ángÀ†
b
,ángÀ†
d°
)

23 
d°
[
PITCH
] = 
a
[PITCH] + 
b
[PITCH];

24 
d°
[
YAW
] = 
a
[YAW] + 
b
[YAW];

25 
d°
[
ROLL
] = 
a
[ROLL] + 
b
[ROLL];

26 
	}
}

28 
	$™gÀs_sub
(
™gÀs
 
a
,ángÀ†
b
,ángÀ†
d°
)

30 
d°
[
PITCH
] = 
a
[PITCH] - 
b
[PITCH];

31 
d°
[
YAW
] = 
a
[YAW] - 
b
[YAW];

32 
d°
[
ROLL
] = 
a
[ROLL] - 
b
[ROLL];

33 
	}
}

35 
	$™gÀs_˛amp
(
™gÀs
 
a
,ángÀ†
mö
,ángÀ†
max
)

37 
a
[
PITCH
] = 
	`f˛amp
◊[PITCH], 
mö
[PITCH], 
max
[PITCH]);

38 
a
[
YAW
] = 
	`f˛amp
◊[YAW], 
mö
[YAW], 
max
[YAW]);

39 
a
[
ROLL
] = 
	`f˛amp
◊[ROLL], 
mö
[ROLL], 
max
[ROLL]);

40 
	}
}

42 
	$™gÀs_n‹mÆize360
(
™gÀs
 
a
)

45 
	}
}

47 
	$™gÀs_n‹mÆize180
(
™gÀs
 
a
)

50 
	}
}

	@src/util/math/angles.h

8 #i‚de‡
_ANGLES_H


9 
	#_ANGLES_H


	)

11 
	t™gÀs
[3];

13 
	#PITCH
 0

	)

14 
	#YAW
 1

	)

15 
	#ROLL
 2

	)

17 
™gÀs_£t
(
™gÀs
 
a
, 
pôch
, 
yaw
, 
rﬁl
);

18 
™gÀs_add
(
™gÀs
 
a
,ángÀ†
b
,ángÀ†
d°
);

19 
™gÀs_sub
(
™gÀs
 
a
,ángÀ†
b
,ángÀ†
d°
);

20 
™gÀs_˛amp
(
™gÀs
 
a
,ángÀ†
max
,ángÀ†
mö
);

21 
™gÀs_n‹mÆize360
(
™gÀs
 
a
);

22 
™gÀs_n‹mÆize180
(
™gÀs
 
a
);

24 (*
™gÀs_n‹mÆize
)(
™gÀs
 
a
);

	@src/util/math/const.h

9 
	#PI
 3.141592653589793238462643383279502884L

10 
	#TWOPI
 6.283185307179586476925286766559005768L

11 
	#SQRT2
 1.414213562373095048801688724209698079L

12 
	#SQRT3
 1.732050807568877293527446341505872366L

13 
	#SQRT5
 2.236067977499789696409173668731276235L

14 
	#AURATIO
 1.618033988747989482045868343656381177L

15 

	)

19 
	#PITCH
 0

	)

20 
	#YAW
 1

	)

21 
	#ROLL
 2

	)

26 
	#X
 0

	)

27 
	#Y
 1

	)

28 
	#Z
 2

	)

29 
	#W
 3

	)

34 
	#DX
 2

	)

35 
	#DY
 3

	)

	@src/util/math/convert.c

8 
	~<m©h.h
>

10 
	~"c⁄vît.h
"

12 #i‚de‡
M_PI


13 
	#M_PI
 3.14159265358979323846

	)

16 
	$degªes_to_ødüns
(
d
)

18  (
d
 * 
M_PI
 / 180.0);

19 
	}
}

21 
	$ødüns_to_degªes
(
r
)

23  (
r
 * 180.0 / 
M_PI
);

24 
	}
}

29 
	$qu©îni⁄_to_m©4
(
qu©îni⁄
 
q
, 
m©4
 
m
)

31 
ww
 = 
q
[
W
] * q[W];

32 
wx2
 = 2.0‡* 
q
[
W
] * q[
X
];

33 
wy2
 = 2.0‡* 
q
[
W
] * q[
Y
];

34 
wz2
 = 2.0‡* 
q
[
W
] * q[
Z
];

35 
xx
 = 
q
[
X
] * q[X];

36 
xy2
 = 2.0‡* 
q
[
X
] * q[
Y
];

37 
xz2
 = 2.0‡* 
q
[
X
] * q[
Z
];

38 
yy
 = 
q
[
Y
] * q[Y];

39 
yz2
 = 2.0‡* 
q
[
Y
] * q[
Z
];

40 
zz
 = 
q
[
Z
] * q[Z];

42 
m
[
MAT_XX
] = 
ww
 + 
xx
 - 
yy
 - 
zz
;

43 
m
[
MAT_XY
] = 
xy2
 + 
wz2
;

44 
m
[
MAT_XZ
] = 
xz2
 - 
wy2
;

45 
m
[
MAT_XW
] = 0.0f;

47 
m
[
MAT_YX
] = 
xy2
 - 
wz2
;

48 
m
[
MAT_YY
] = 
ww
 - 
xx
 + 
yy
 - 
zz
;

49 
m
[
MAT_YZ
] = 
yz2
 + 
wx2
;

50 
m
[
MAT_YW
] = 0.0f;

52 
m
[
MAT_ZX
] = 
xz2
 + 
wy2
;

53 
m
[
MAT_ZY
] = 
yz2
 - 
wx2
;

54 
m
[
MAT_ZZ
] = 
ww
 - 
xx
 - 
yy
 + 
zz
;

55 
m
[
MAT_ZW
] = 0.0f;

57 
m
[
MAT_WX
] = 0.0f;

58 
m
[
MAT_WY
] = 0.0f;

59 
m
[
MAT_WZ
] = 0.0f;

60 
m
[
MAT_WW
] = 1.0f;

61 
	}
}

63 
	$m©4_to_qu©îni⁄
(
m©4
 
m
, 
qu©îni⁄
 
q
)

65 if(
m
[
MAT_XX
] + m[
MAT_YY
] + m[
MAT_ZZ
] > 0.0f)

67 
t
 = 
m
[
MAT_XX
] + m[
MAT_YY
] + m[
MAT_ZZ
] + 1.0f;

68 
s
 = 
	`fisqπ
(
t
) * 0.5f;

70 
q
[
W
] = 
s
 * 
t
;

71 
q
[
Z
] = (
m
[
MAT_YX
] - m[
MAT_XY
]Ë* 
s
;

72 
q
[
Y
] = (
m
[
MAT_XZ
] - m[
MAT_ZX
]Ë* 
s
;

73 
q
[
X
] = (
m
[
MAT_ZY
] - m[
MAT_YZ
]Ë* 
s
;

74 } if(
m
[
MAT_XX
] + m[
MAT_YY
] + m[MAT_XX] > m[
MAT_ZZ
])

76 
t
 = 
m
[
MAT_XX
] - m[
MAT_YY
] - m[
MAT_ZZ
] + 1.0f;

77 
s
 = 
	`fisqπ
(
t
) * 0.5f;

79 
q
[
X
] = 
s
 * 
t
;

80 
q
[
Y
] = (
m
[
MAT_YX
] + m[
MAT_XY
]Ë* 
s
;

81 
q
[
Z
] = (
m
[
MAT_XZ
] + m[
MAT_ZX
]Ë* 
s
;

82 
q
[
W
] = (
m
[
MAT_ZY
] - m[
MAT_YZ
]Ë* 
s
;

83 } i‡(
m
[
MAT_YY
] > m[
MAT_ZZ
])

85 
t
 = -
m
[
MAT_XX
] + m[
MAT_YY
] - m[
MAT_ZZ
] + 1.0f;

86 
s
 = 
	`fisqπ
(
t
) * 0.5f;

88 
q
[
Y
] = 
s
 * 
t
;

89 
q
[
X
] = (
m
[
MAT_YX
] + m[
MAT_XY
]Ë* 
s
;

90 
q
[
W
] = (
m
[
MAT_XZ
] - m[
MAT_ZX
]Ë* 
s
;

91 
q
[
Z
] = (
m
[
MAT_ZY
] + m[
MAT_YZ
]Ë* 
s
;

93 
t
 = -
m
[
MAT_XX
] - m[
MAT_YY
] + m[
MAT_ZZ
] + 1.0f;

94 
s
 = 
	`fisqπ
(
t
) * 0.5f;

96 
q
[
Z
] = 
s
 * 
t
;

97 
q
[
W
] = (
m
[
MAT_YX
] + m[
MAT_XY
]Ë* 
s
;

98 
q
[
X
] = (
m
[
MAT_XZ
] - m[
MAT_ZX
]Ë* 
s
;

99 
q
[
Y
] = (
m
[
MAT_ZY
] + m[
MAT_YZ
]Ë* 
s
;

101 
	`qu©îni⁄_n‹mÆize
(
q
);

102 
	}
}

104 
	$™gÀs_to_qu©îni⁄
(
™gÀs
 
a
, 
qu©îni⁄
 
q
)

106 
•
 = 
	`sö
(
a
[
PITCH
] / 2.0f);

107 
˝
 = 
	`cos
(
a
[
PITCH
] / 2.0f);

108 
sy
 = 
	`sö
(
a
[
YAW
] / 2.0f);

109 
cy
 = 
	`cos
(
a
[
YAW
] / 2.0f);

110 
§
 = 
	`sö
(
a
[
ROLL
] / 2.0f);

111 
¸
 = 
	`cos
(
a
[
ROLL
] / 2.0f);

113 
q
[
W
] = 
˝
 * 
cy
 * 
¸
 + 
•
 * 
sy
 * 
§
;

114 
q
[
X
] = 
•
 * 
cy
 * 
¸
 - 
˝
 * 
sy
 * 
§
;

115 
q
[
Y
] = 
˝
 * 
•
 * 
¸
 + s∞* 
cy
 * 
§
;

116 
q
[
Z
] = 
˝
 * c∞* 
§
 - 
•
 * 
sy
 * 
¸
;

117 
	}
}

119 
	$qu©îni⁄_to_™gÀs
(
qu©îni⁄
 
q
, 
™gÀs
 
a
)

121 
a
[
PITCH
] = 
	`©™2
(2.0‡* 
q
[
W
] * q[
X
] + q[
Y
] * q[
Z
],

122 1.0‡- (2.0‡* (
q
[
X
] * q[X] + q[
Y
] * q[Y])));

123 
a
[
YAW
] = 
	`asö
(2.0‡* (
q
[
W
] * q[
Y
] - q[
Z
] * q[
X
]));

124 
a
[
ROLL
] = 
	`©™2
(2.0‡* 
q
[
W
] * q[
Z
] + q[
X
] * q[
Y
],

125 1.0‡- (2.0‡* (
q
[
Y
] * q[Y] + q[
Z
] * q[Z])));

126 
	}
}

128 
	$™gÀs_to_m©4
(
™gÀs
 
a
, 
m©4
 
m
)

130 
•
 = 
	`sö
(
a
[
PITCH
]);

131 
˝
 = 
	`cos
(
a
[
PITCH
]);

132 
sy
 = 
	`sö
(
a
[
YAW
]);

133 
cy
 = 
	`cos
(
a
[
YAW
]);

134 
§
 = 
	`sö
(
a
[
ROLL
]);

135 
¸
 = 
	`cos
(
a
[
ROLL
]);

137 
m
[
MAT_XX
] = 
cy
 * 
¸
;

138 
m
[
MAT_XY
] = -
cy
 * 
§
;

139 
m
[
MAT_XZ
] = 
sy
;

140 
m
[
MAT_XW
] = 0.0f;

142 
m
[
MAT_YX
] = 
˝
 * 
¸
 + 
•
 * 
sy
 * cr;

143 
m
[
MAT_YY
] = 
˝
 * 
¸
 - 
•
 * 
sy
 * 
§
;

144 
m
[
MAT_YZ
] = -
•
 * 
sy
;

145 
m
[
MAT_YW
] = 0.0f;

147 
m
[
MAT_ZX
] = 
•
 * 
§
 - 
˝
 * 
sy
 * 
¸
;

148 
m
[
MAT_ZY
] = 
•
 * 
¸
 + 
˝
 * 
sy
 * 
§
;

149 
m
[
MAT_ZZ
] = 
˝
 * 
cy
;

150 
m
[
MAT_ZW
] = 0.0f;

152 
m
[
MAT_WX
] = 0.0f;

153 
m
[
MAT_WY
] = 0.0f;

154 
m
[
MAT_WZ
] = 0.0f;

155 
m
[
MAT_WW
] = 1.0f;

156 
	}
}

158 
	$m©4_to_™gÀs
(
m©4
 
m
, 
™gÀs
 
a
)

160 
a
[
PITCH
] = 
	`©™2
(
m
[
MAT_XZ
], m[
MAT_YZ
]);

161 
a
[
YAW
] = 
	`acos
(
m
[
MAT_ZZ
]);

162 
a
[
ROLL
] = -
	`©™2
(
m
[
MAT_ZX
], m[
MAT_ZY
]);

163 
	}
}

166 
	$Áhªnheô_to_˚lsius
(
f
)

168  (
f
 - 32.0f) * 1.8f;

169 
	}
}

171 
	$˚lsius_to_Áhªnheô
(
c
)

173  (
c
 / 1.8f) + 32.0f;

174 
	}
}

176 
	$˚lsius_to_kñvö
(
c
)

178  
c
 - 273.15f;

179 
	}
}

181 
	$kñvö_to_˚lsius
(
k
)

183  
k
 + 273.15f;

184 
	}
}

187 (*
deg_to_ød
)(
d
Ë
degªes_to_ødüns
;

188 (*
ød_to_deg
)(
r
Ë
ødüns_to_degªes
;

190 (*
m©4_to_qu©
)(
m©4
 
m
, 
qu©îni⁄
 
q
Ë
m©4_to_qu©îni⁄
;

191 (*
qu©_to_m©4
)(
qu©îni⁄
 
q
, 
m©4
 
m
Ë
qu©îni⁄_to_m©4
;

	@src/util/math/convert.h

8 #i‚de‡
_CONVERT_H


9 
	#_CONVERT_H


	)

11 
	~"sˇœr.h
"

12 
	~"vec.h
"

13 
	~"™gÀs.h
"

14 
	~"m©rix.h
"

17 
degªes_to_ødüns
(
d
);

18 
ødüns_to_degªes
(
r
);

21 
m©4_to_qu©îni⁄
(
m©4
 
m
, 
qu©îni⁄
 
q
);

22 
qu©îni⁄_to_m©4
(
qu©îni⁄
 
q
, 
m©4
 
m
);

24 
™gÀs_to_qu©îni⁄
(
™gÀs
 
a
, 
qu©îni⁄
 
q
);

25 
qu©îni⁄_to_™gÀs
(
qu©îni⁄
 
q
, 
™gÀs
 
a
);

27 
™gÀs_to_m©4
(
™gÀs
 
a
, 
m©4
 
m
);

28 
m©4_to_™gÀs
(
m©4
 
m
, 
™gÀs
 
a
);

30 
Áhªnheô_to_˚lsius
(
f
);

31 
˚lsius_to_Áhªnheô
(
f
);

32 
˚lsius_to_kñvö
(
c
);

33 
kñvö_to_˚lsius
(
k
);

	@src/util/math/geom/ball.c

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

12 
	~"utû/m©h/m©rix.h
"

13 
	~"utû/°ru˘/li°.h
"

15 
	~"bÆl.h
"

25 
	$bÆl3_öô
(
BÆl3
 *
b
, 
˚¡î
[3], 
ødius
)

27 
	`mem˝y
(
b
->
˚¡î
, center, () * 3);

28 
b
->
ødius
 =Ñadius;

29 
	}
}

31 
	$bÆl3_£t˚¡î
(
BÆl3
 *
b
, 
˚¡î
[3])

33 
	`mem˝y
(
b
->
˚¡î
, center, () * 3);

34 
	}
}

36 
	$bÆl3_£åadius
(
BÆl3
 *
b
, 
ødius
)

38 
b
->
ødius
 =Ñadius;

39 
	}
}

41 
	$bÆl3_sˇÀ
(
BÆl3
 *
b
, 
sˇÀ
)

43 
b
->
ødius
 *
sˇÀ
;

44 
	}
}

46 
	$bÆl3_move
(
BÆl3
 *
b
, 
dv
[3])

48 
b
->
˚¡î
[0] +
dv
[0];

49 
b
->
˚¡î
[1] +
dv
[1];

50 
b
->
˚¡î
[2] +
dv
[2];

51 
	}
}

53 
boﬁ
 
	$bÆl3_cﬁlides
(
BÆl3
 *
a
, BÆl3 *
b
)

55 
drsq
 = (
a
->
ødius
 - 
b
->radius) * (a->radius - b->radius);

56 
dv
 = (
a
->
˚¡î
[0] - 
b
->center[0]) * (a->center[0] - b->center[0]) +

57 (
a
->
˚¡î
[1] - 
b
->center[1]) * (a->center[1] - b->center[1]) +

58 (
a
->
˚¡î
[2] - 
b
->center[2]) * (a->center[2] - b->center[2]);

59  
drsq
 > 
dv
;

60 
	}
}

68 
	sEncbÆl3


70 
	mrsq
;

71 
	m˚¡î
[3];

74 
	$í˛osög_r
(
BÆl3
 *
ªt
, 
Li°
 *
poöts
, 
Iãøt‹
 *
suµ‹t_íd
, Iãøt‹ *
ô
)

76 
	`li°_fú°
(
poöts
, 
suµ‹t_íd
);

77 
	}
}

79 
	$bÆl3_í˛osög
(
BÆl3
 *
ªt
, *
poöts
, 
n
)

81 
Li°
 
p_li°
;

82 
Iãøt‹
 
suµ‹t_íd
;

85 
	`li°_öô
(&
p_li°
, () * 3);

86 
	`li°_ª£rve
(&
p_li°
, 
n
);

89 
i
;

90 
i
 = 0; i < 
n
; i++)

92 
	`li°_addback
(&
p_li°
, 
poöts
 + 3 * 
i
);

95 
Iãøt‹
 
ô_°¨t
;

96 
	`li°_fú°
(&
p_li°
, &
ô_°¨t
);

97 
	`li°_fú°
(&
p_li°
, &
suµ‹t_íd
);

98 
	`í˛osög_r
(
ªt
, &
p_li°
, &
suµ‹t_íd
, &
ô_°¨t
);

99 
	}
}

	@src/util/math/geom/ball.h

8 #i‚de‡
_BALL_H


9 
	#_BALL_H


	)

11 
	~<°dboﬁ.h
>

14 
	sBÆl2


16 
	mødius
;

17 
	m˚¡î
[2];

18 } 
	tBÆl2
;

21 
	sBÆl3


23 
	mødius
;

24 
	m˚¡î
[3];

25 } 
	tBÆl3
;

28 
bÆl2_öô
(
BÆl2
 *
b
, 
˚¡î
[2], 
ødius
);

29 
bÆl2_£t˚¡î
(
BÆl2
 *
b
, 
˚¡î
[2]);

30 
bÆl2_£åadius
(
BÆl2
 *
b
, 
ødius
);

31 
bÆl2_sˇÀ
(
BÆl2
 *
b
, 
sˇÀ
);

32 
bÆl2_move
(
BÆl2
 *
b
, 
dv
[2]);

33 
boﬁ
 
bÆl2_cﬁlides
(
BÆl2
 *
a
, BÆl2 *
b
);

36 
bÆl3_öô
(
BÆl3
 *
b
, 
˚¡î
[3], 
ødius
);

37 
bÆl3_£t˚¡î
(
BÆl3
 *
b
, 
˚¡î
[3]);

38 
bÆl3_£åadius
(
BÆl3
 *
b
, 
ødius
);

39 
bÆl3_sˇÀ
(
BÆl3
 *
b
, 
sˇÀ
);

40 
bÆl3_move
(
BÆl3
 *
b
, 
dv
[3]);

41 
boﬁ
 
bÆl3_cﬁlides
(
BÆl3
 *
a
, BÆl3 *
b
);

42 
bÆl3_í˛osög
(
BÆl3
 *
ªt
, *
poöts
, 
n
);

	@src/util/math/geom/box.h

10 #i‚de‡
_BOX_H


11 
	#_BOX_H


	)

13 
	~<°dboﬁ.h
>

16 
	sBox2


18 
	mpos
[2];

19 
	mdim
[2];

20 } 
	tBox2
;

23 
	sBox3


25 
	mpos
[3];

26 
	mdim
[3];

27 } 
	tBox3


30 
	tbox2_öô
(
	tBox2
 *
	tb
, 
	t˚¡î
[2], 
	tdim
[2]);

31 
box2_£t˚¡î
(
Box2
 *
b
, 
p
[2]);

32 
box2_£tdimísi⁄s
(
Box2
 *
b
, 
dims
[2]);

33 
box2_move
(
Box2
 *
b
, 
dv
[2]);

34 
box2_sˇÀ
(
Box2
 *
b
, 
sˇÀ
[2]);

35 
boﬁ
 
box2_cﬁlides
(
Box2
 *
a
, Box2 *
b
);

36 
box2_mtv
(
Box2
 *
a
, Box2 *
b
, 
dv
[2]);

40 
box3_öô
(
Box3
 *
b
, 
˚¡î
[3], 
dim
[3]);

41 
box3_£t˚¡î
(
Box3
 *
b
, 
p
[3]);

42 
box3_£tdimísi⁄s
(
Box3
 *
b
, 
dims
[3]);

43 
box3_move
(
Box3
 *
b
, 
dv
[3]);

44 
box3_sˇÀ
(
Box3
 *
b
, 
sˇÀ
[3]);

45 
boﬁ
 
box3_cﬁlides
(
Box3
 *
a
, Box3 *
b
);

46 
box3_mtv
(
Box3
 *
a
, Box3 *
b
, 
dv
[3]);

	@src/util/math/geom/line.c

8 
	~<m©h.h
>

10 
	~"löe.h
"

12 
	$löe2_Àn
(
löe2
 
l
)

14 
x
 = 
l
[
LINE2_AX
] -Ü[
LINE2_BX
];

15 
y
 = 
l
[
LINE2_AY
] -Ü[
LINE2_BY
];

16  
	`sqπ
(
x
*x + 
y
*y);

17 
	}
}

19 
	$löe3_Àn
(
löe3
 
l
)

21 
x
 = 
l
[
LINE3_AX
] -Ü[
LINE3_BX
];

22 
y
 = 
l
[
LINE3_AY
] -Ü[
LINE3_BY
];

23 
z
 = 
l
[
LINE3_AZ
] -Ü[
LINE3_BZ
];

24  
	`sqπ
(
x
*x + 
y
*y + 
z
*z);

25 
	}
}

	@src/util/math/geom/line.h

8 #i‚de‡
_LINE_H


9 
	#_LINE_H


	)

11 
	#LINE2_AX
 0

	)

12 
	#LINE2_AY
 1

	)

13 
	#LINE2_BX
 2

	)

14 
	#LINE2_BY
 3

	)

16 
	#LINE3_AX
 0

	)

17 
	#LINE3_AY
 1

	)

18 
	#LINE3_AZ
 2

	)

19 
	#LINE3_BX
 3

	)

20 
	#LINE3_BY
 4

	)

21 
	#LINE3_BZ
 5

	)

23 
	tlöe2
[4];

24 
	tlöe3
[6];

27 
löe2_Àn
(
löe2
 
l
);

29 
löe3_Àn
(
löe3
 
l
);

	@src/util/math/geom/obox.h

10 #i‚de‡
_OBOX_H


11 
	#_OBOX_H


	)

	@src/util/math/geom/spline.c

8 
	~"•löe.h
"

10 
	$•löe_c•löe2
(
t
, 
vec2
 
p0
, vec2 
p1
, vec2 
m0
, vec2 
m1
, vec2 
ªt
)

12 
vec2
 
tmp
;

13 
p0_sˇÀ
 = (1.0‡+ (2.0‡* 
t
)) * (1.0f -Å) * (1.0f -Å);

14 
p1_sˇÀ
 = 
t
 * (1.0f -Å) * (1.0f -Å);

15 
m0_sˇÀ
 = 
t
 *Å * (3.0f - (2.0f *Å));

16 
m1_sˇÀ
 = 
t
 *Å * (t - 1.0f);

17 
	`vec2_£t
(
ªt
, 0.0f, 0.0f);

19 
	`vec2_c›y
(
p0
, 
tmp
);

20 
	`vec2_sˇÀ
(
tmp
, 
p0_sˇÀ
);

21 
	`vec2_add
(
ªt
, 
tmp
,Ñet);

23 
	`vec2_c›y
(
p1
, 
tmp
);

24 
	`vec2_sˇÀ
(
tmp
, 
p1_sˇÀ
);

25 
	`vec2_add
(
ªt
, 
tmp
,Ñet);

27 
	`vec2_c›y
(
m0
, 
tmp
);

28 
	`vec2_sˇÀ
(
tmp
, 
m0_sˇÀ
);

29 
	`vec2_add
(
ªt
, 
tmp
,Ñet);

31 
	`vec2_c›y
(
m1
, 
tmp
);

32 
	`vec2_sˇÀ
(
tmp
, 
m1_sˇÀ
);

33 
	`vec2_add
(
ªt
, 
tmp
,Ñet);

34 
	}
}

36 
	$•löe_c•löe3
(
t
, 
vec3
 
p0
, vec3 
p1
, vec3 
m0
, vec3 
m1
, vec3 
ªt
)

38 
vec3
 
tmp
;

39 
p0_sˇÀ
 = (1.0‡+ (2.0‡* 
t
)) * (1.0f -Å) * (1.0f -Å);

40 
p1_sˇÀ
 = 
t
 * (1.0f -Å) * (1.0f -Å);

41 
m0_sˇÀ
 = 
t
 *Å * (3.0f - (2.0f *Å));

42 
m1_sˇÀ
 = 
t
 *Å * (t - 1.0f);

43 
	`vec3_£t
(
ªt
, 0.0f, 0.0f, 0.0f);

45 
	`vec3_c›y
(
p0
, 
tmp
);

46 
	`vec3_sˇÀ
(
tmp
, 
p0_sˇÀ
);

47 
	`vec3_add
(
ªt
, 
tmp
,Ñet);

49 
	`vec3_c›y
(
p1
, 
tmp
);

50 
	`vec3_sˇÀ
(
tmp
, 
p1_sˇÀ
);

51 
	`vec3_add
(
ªt
, 
tmp
,Ñet);

53 
	`vec3_c›y
(
m0
, 
tmp
);

54 
	`vec3_sˇÀ
(
tmp
, 
m0_sˇÀ
);

55 
	`vec3_add
(
ªt
, 
tmp
,Ñet);

57 
	`vec3_c›y
(
m1
, 
tmp
);

58 
	`vec3_sˇÀ
(
tmp
, 
m1_sˇÀ
);

59 
	`vec3_add
(
ªt
, 
tmp
,Ñet);

60 
	}
}

	@src/util/math/geom/spline.h

8 
	~"utû/m©h/vec.h
"

10 
•löe_c•löe2
(
t
, 
vec2
 
p0
, vec2 
p1
, vec2 
m0
, vec2 
m1
, vec2 
ªt
);

11 
•löe_c•löe3
(
t
, 
vec3
 
p0
, vec3 
p1
, vec3 
m0
, vec3 
m1
, vec3 
ªt
);

	@src/util/math/geom/tri.c

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<m©h.h
>

12 
	~"utû/m©h/vec.h
"

13 
	~"utû/m©h/geom/löe.h
"

15 
	~"åi.h
"

17 
åi2_sq¨ó
(
åi2
 
t
);

18 
åi3_sq¨ó
(
åi3
 
t
);

26 
	$åi2_¨ó
(
åi2
 
t
)

28  
	`sqπ
(
	`åi2_sq¨ó
(
t
));

29 
	}
}

34 
	$åi2_sq¨ó
(
åi2
 
t
)

36 
vec2
 
ab_v
, 
bc_v
, 
ˇ_v
;

37 
	`vec2_sub
(
t
[
TRI_A
],Å[
TRI_B
], 
ab_v
);

38 
	`vec2_sub
(
t
[
TRI_B
],Å[
TRI_C
], 
bc_v
);

39 
	`vec2_sub
(
t
[
TRI_C
],Å[
TRI_A
], 
ˇ_v
);

41 
ab
 = 
	`sqπ
(
	`vec2_Ànsq
(
ab_v
));

42 
bc
 = 
	`sqπ
(
	`vec2_Ànsq
(
bc_v
));

43 
ˇ
 = 
	`sqπ
(
	`vec2_Ànsq
(
ˇ_v
));

45 
s
 = (
ab
 + 
bc
 + 
ˇ
) * 0.5f;

46  (
s
 * (s-
ab
Ë* (s-
bc
Ë* (s-
ˇ
));

47 
	}
}

49 
	$åi2_sig√d_¨ó
(
åi2
 
t
)

52 (- 
t
[
TRI_B
][
X
] *Å[
TRI_A
][
Y
]

53 + 
t
[
TRI_C
][
X
] *Å[
TRI_A
][
Y
]

54 + 
t
[
TRI_A
][
X
] *Å[
TRI_B
][
Y
]

55 - 
t
[
TRI_C
][
X
] *Å[
TRI_B
][
Y
]

56 - 
t
[
TRI_A
][
X
] *Å[
TRI_C
][
Y
]

57 + 
t
[
TRI_B
][
X
] *Å[
TRI_C
][
Y
]);

58 
	}
}

79 
	$åi3_£t
(
åi3
 
t
, 
vec3
 
a
, vec3 
b
, vec3 
c
)

81 
	`mem˝y
(&
t
[
TRI_A
], 
a
, (
vec3
));

82 
	`mem˝y
(&
t
[
TRI_B
], 
b
, (
vec3
));

83 
	`mem˝y
(&
t
[
TRI_C
], 
c
, (
vec3
));

84 
	}
}

89 
	$åi3_¨ó
(
åi3
 
t
)

91  
	`sqπ
(
	`åi3_sq¨ó
(
t
));

92 
	}
}

94 
	$åi3_sq¨ó
(
åi3
 
t
)

96 
vec3
 
ab_v
, 
bc_v
, 
ˇ_v
;

97 
	`vec3_sub
(
t
[
TRI_A
],Å[
TRI_B
], 
ab_v
);

98 
	`vec3_sub
(
t
[
TRI_B
],Å[
TRI_C
], 
bc_v
);

99 
	`vec3_sub
(
t
[
TRI_C
],Å[
TRI_A
], 
ˇ_v
);

101 
ab
 = 
	`sqπ
(
	`vec3_Ànsq
(
ab_v
));

102 
bc
 = 
	`sqπ
(
	`vec3_Ànsq
(
bc_v
));

103 
ˇ
 = 
	`sqπ
(
	`vec3_Ànsq
(
ˇ_v
));

105 
s
 = (
ab
 + 
bc
 + 
ˇ
) * 0.5f;

106  (
s
 * (s-
ab
Ë* (s-
bc
Ë* (s-
ˇ
));

107 
	}
}

109 
	$åi3_sig√d_vﬁume
(
åi3
 
t
)

111 
cba
 = 
t
[
TRI_C
][
X
] *Å[
TRI_B
][
Y
] *Å[
TRI_A
][
Z
];

112 
bˇ
 = 
t
[
TRI_B
][
X
] *Å[
TRI_C
][
Y
] *Å[
TRI_A
][
Z
];

113 
ˇb
 = 
t
[
TRI_C
][
X
] *Å[
TRI_A
][
Y
] *Å[
TRI_B
][
Z
];

114 
acb
 = 
t
[
TRI_A
][
X
] *Å[
TRI_C
][
Y
] *Å[
TRI_B
][
Z
];

115 
bac
 = 
t
[
TRI_B
][
X
] *Å[
TRI_A
][
Y
] *Å[
TRI_C
][
Z
];

116 
abc
 = 
t
[
TRI_A
][
X
] *Å[
TRI_B
][
Y
] *Å[
TRI_C
][
Z
];

118  (1.0‡/ 6.0fË* (-
cba
 + 
bˇ
 + 
ˇb
 - 
acb
 - 
bac
 + 
abc
);

119 
	}
}

124 
	$åi3_öãΩ
(
åi3
 
t
, 
vec3
 
p
, vec3 
v_ªt
)

126 
åi3
 
tA
;

127 
åi3
 
tB
;

128 
åi3
 
tC
;

129 
	`åi3_£t
(
tA
, 
t
[
TRI_B
],Å[
TRI_C
], 
p
);

130 
	`åi3_£t
(
tA
, 
t
[
TRI_C
], 
p
,Å[
TRI_A
]);

131 
	`åi3_£t
(
tA
, 
p
, 
t
[
TRI_A
],Å[
TRI_B
]);

132 
aT
 = 
	`åi3_¨ó
(
t
);

133 
aA
 = 
	`åi3_¨ó
(
tA
);

134 
aB
 = 
	`åi3_¨ó
(
tB
);

135 
aC
 = 
	`åi3_¨ó
(
tC
);

136 
v_ªt
[0] = 
aA
 / 
aT
;

137 
v_ªt
[1] = 
aB
 / 
aT
;

138 
v_ªt
[2] = 
aC
 / 
aT
;

139 
	`vec3_n‹mÆize
(
v_ªt
);

140 
	}
}

	@src/util/math/geom/tri.h

8 #i‚de‡
_TRI_H


9 
	#_TRI_H


	)

11 
	~"utû/m©h/vec.h
"

13 
	#TRI_A
 0

	)

14 
	#TRI_B
 1

	)

15 
	#TRI_C
 2

	)

17 
vec2
 
	tåi2
[3];

18 
vec3
 
	tåi3
[3];

20 
åi2_¨ó
(
åi2
 
t
);

21 
åi2_sig√d_¨ó
(
åi2
 
t
);

22 
åi2_öãΩ
(
åi2
 
t
, *
p
, *
ªt
);

23 
boﬁ
 
åi2_c⁄èös
(
åi2
 
t
, *
p
);

25 
åi3_£t
(
åi3
 
t
, 
vec3
 
a
, vec3 
b
, vec3 
c
);

26 
åi3_¨ó
(
åi3
 
t
);

27 
åi3_sig√d_vﬁume
(
åi3
 
t
);

28 
åi3_öãΩ
(
åi3
 
t
, 
vec3
 
p
, vec3 
v_ªt
);

29 
boﬁ
 
åi3_c⁄èös
(
åi3
 
t
, *
p
);

	@src/util/math/matrix.c

9 
	~<as£π.h
>

10 
	~<Æloˇ.h
>

11 
	~<m©h.h
>

12 
	~<°rög.h
>

13 
	~<Êﬂt.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

17 
	~"sˇœr.h
"

18 
	~"vec.h
"

19 
	~"m©rix.h
"

22 c⁄° 
m©4
 
	gMAT4_IDENTITY
 =

33 
	$m©4_idítôy
(
m©4
 
m
)

35 
m
[
MAT_XX
] = m[
MAT_YY
] = m[
MAT_ZZ
] = m[
MAT_WW
] = 1.0f;

36 
m
[
MAT_XY
] = m[
MAT_XZ
] = m[
MAT_XW
] = 0.0f;

37 
m
[
MAT_YX
] = m[
MAT_YZ
] = m[
MAT_YW
] = 0.0f;

38 
m
[
MAT_ZX
] = m[
MAT_ZY
] = m[
MAT_ZW
] = 0.0f;

39 
m
[
MAT_WX
] = m[
MAT_WY
] = m[
MAT_WZ
] = 0.0f;

40 
	}
}

45 
	$m©4_£t
(
m©4
 
m
, 
i
, 
j
, 
vÆ
)

47 
m
[4 * 
i
 + 
j
] = 
vÆ
;

48 
	}
}

53 
	$m©4_£tv
(
m©4
 
m
, 
vec4
 
x
, vec4 
y
, vec4 
z
, vec4 
w
)

55 
m
[
MAT_XX
] = 
x
[
X
];

56 
m
[
MAT_XY
] = 
x
[
Y
];

57 
m
[
MAT_XZ
] = 
x
[
Z
];

58 
m
[
MAT_XW
] = 
x
[
W
];

60 
m
[
MAT_YX
] = 
y
[
X
];

61 
m
[
MAT_YY
] = 
y
[
Y
];

62 
m
[
MAT_YZ
] = 
y
[
Z
];

63 
m
[
MAT_YW
] = 
y
[
W
];

65 
m
[
MAT_ZX
] = 
z
[
X
];

66 
m
[
MAT_ZY
] = 
z
[
Y
];

67 
m
[
MAT_ZZ
] = 
z
[
Z
];

68 
m
[
MAT_ZW
] = 
z
[
W
];

70 
m
[
MAT_WX
] = 
w
[
X
];

71 
m
[
MAT_WY
] = 
w
[
Y
];

72 
m
[
MAT_WZ
] = 
w
[
Z
];

73 
m
[
MAT_WW
] = 
w
[
W
];

74 
	}
}

79 
	$m©4_gë
(
m©4
 
m
, 
i
, 
j
)

81  
m
[
i
 * 4 + 
j
];

82 
	}
}

87 
	$m©4_gëv
(
m©4
 
m
, 
j
, 
vec4
 
v
)

89 
i
;

90 
i
 = 0; i < 4; i++)

92 
v
[
i
] = 
m
[ò* 4 + 
j
];

94 
	}
}

99 
	$m©4_c›y
(
m©4
 
a
, m©4 
b
)

101 
	`mem˝y
(
b
, 
a
, (
m©4
));

102 
	}
}

107 
	$m©4_å™•o£
(
m©4
 
m
)

109 
m©4
 
tmp
;

110 
tmp
[
MAT_XX
] = 
m
[MAT_XX];

111 
tmp
[
MAT_XY
] = 
m
[
MAT_YX
];

112 
tmp
[
MAT_XZ
] = 
m
[
MAT_ZX
];

113 
tmp
[
MAT_XW
] = 
m
[
MAT_WX
];

115 
tmp
[
MAT_YX
] = 
m
[
MAT_XY
];

116 
tmp
[
MAT_YY
] = 
m
[MAT_YY];

117 
tmp
[
MAT_YZ
] = 
m
[
MAT_ZY
];

118 
tmp
[
MAT_YW
] = 
m
[
MAT_WY
];

120 
tmp
[
MAT_ZX
] = 
m
[
MAT_XZ
];

121 
tmp
[
MAT_ZY
] = 
m
[
MAT_YZ
];

122 
tmp
[
MAT_ZZ
] = 
m
[MAT_ZZ];

123 
tmp
[
MAT_ZW
] = 
m
[
MAT_WZ
];

125 
tmp
[
MAT_WX
] = 
m
[
MAT_XW
];

126 
tmp
[
MAT_WY
] = 
m
[
MAT_YW
];

127 
tmp
[
MAT_WZ
] = 
m
[
MAT_ZW
];

128 
tmp
[
MAT_WW
] = 
m
[MAT_WW];

130 
	`vec4_c›y
(
tmp
, 
m
);

131 
	}
}

136 
	$m©4_sˇÀ
(
m©4
 
m
, 
sx
, 
sy
, 
sz
)

138 
m©4
 
sM©
;

139 
	`m©4_idítôy
(
sM©
);

140 
sM©
[
MAT_XX
] = 
sx
;

141 
sM©
[
MAT_YY
] = 
sy
;

142 
sM©
[
MAT_ZZ
] = 
sz
;

144 
	`m©4_mu…
(
sM©
, 
m
);

145 
	}
}

150 
	$m©4_å™¶©e
(
m©4
 
m
, 
dx
, 
dy
, 
dz
)

152 
m©4
 
tM©
;

153 
	`m©4_idítôy
(
tM©
);

154 
tM©
[
MAT_WX
] = 
dx
;

155 
tM©
[
MAT_WY
] = 
dy
;

156 
tM©
[
MAT_WZ
] = 
dz
;

158 
	`m©4_mu…
(
tM©
, 
m
);

159 
	}
}

165 
	$m©4_rŸ©e
(
m©4
 
m
, 
™gÀ
, 
rx
, 
ry
, 
rz
)

167 
m©4
 
aux
;

168 if(
	`Ábs
(
™gÀ
Ë< 
FLT_EPSILON
) ;

169 
Àn
 = 
	`sqπ
(
rx
*rx + 
ry
*ry + 
rz
*rz);

170 if(
Àn
 < 
FLT_EPSILON
) ;

171 
rx
/=
Àn
, 
ry
/ˆí, 
rz
/=len;

173 
c
 = 
	`cos
(
™gÀ
);

174 
t
 = 1.0‡- 
c
;

175 
s
 = 
	`sö
(
™gÀ
);

178 
aux
[
MAT_XX
] = 
t
 * 
rx
 *Ñx + 
c
;

179 
aux
[
MAT_YX
] = 
t
 * 
rx
 * 
ry
 - 
s
 * 
rz
;

180 
aux
[
MAT_ZX
] = 
t
 * 
rx
 * 
rz
 + 
s
 * 
ry
;

181 
aux
[
MAT_WX
] =áux[
MAT_WY
] =áux[
MAT_WZ
] = 0.0f;

182 
aux
[
MAT_XY
] = 
t
 * 
rx
 * 
ry
 + 
s
 * 
rz
;

183 
aux
[
MAT_YY
] = 
t
 * 
ry
 *Ñy + 
c
;

184 
aux
[
MAT_ZY
] = 
t
 * 
ry
 * 
rz
 - 
s
 * 
rx
;

185 
aux
[
MAT_XZ
] = 
t
 * 
rx
 * 
rz
 - 
s
 * 
ry
;

186 
aux
[
MAT_YZ
] = 
t
 * 
ry
 * 
rz
 + 
s
 * 
rx
;

187 
aux
[
MAT_ZZ
] = 
t
 * 
rz
 *Ñz + 
c
;

188 
aux
 [
MAT_XW
] =áux[
MAT_YW
] =áux[
MAT_ZW
] = 0.0f;

189 
aux
[
MAT_WW
] = 1.0f;

191 
	`m©4_mu…
(
aux
, 
m
);

192 
	}
}

202 
	$m©4_axisRŸ©e
(
m©4
 
m
, 
rx
, 
ry
, 
rz
)

204 
m©4
 
auxx
;

205 
m©4
 
auxy
;

206 
m©4
 
auxz
;

207 
xc
 = 
	`cos
(
rx
);

208 
xs
 = 
	`sö
(
rx
);

209 
yc
 = 
	`cos
(
ry
);

210 
ys
 = 
	`sö
(
ry
);

211 
zc
 = 
	`cos
(
rz
);

212 
zs
 = 
	`sö
(
rz
);

214 
	`m©4_idítôy
(
auxx
);

215 
	`m©4_idítôy
(
auxy
);

216 
	`m©4_idítôy
(
auxz
);

218 
auxx
[
MAT_YY
] = 
xc
;

219 
auxx
[
MAT_ZY
] = 
xs
;

220 
auxx
[
MAT_YZ
] = -
xs
;

221 
auxx
[
MAT_ZZ
] = 
xc
;

223 
auxy
[
MAT_XX
] = 
yc
;

224 
auxy
[
MAT_ZX
] = -
ys
;

225 
auxy
[
MAT_XZ
] = 
ys
;

226 
auxy
[
MAT_ZZ
] = 
yc
;

228 
auxz
[
MAT_XX
] = 
zc
;

229 
auxz
[
MAT_YX
] = 
zs
;

230 
auxz
[
MAT_XY
] = -
zs
;

231 
auxz
[
MAT_YY
] = 
zc
;

233 
	`m©4_mu…
(
auxy
, 
auxz
);

234 
	`m©4_mu…
(
auxx
, 
auxz
);

235 
	`m©4_mu…
(
auxz
, 
m
);

236 
	}
}

241 
	$m©4_‰u°um
(
m©4
 
m
, 
l
, 
r
, 
b
, 
t
, 
n
, 
f
)

243 
m©4
 
aux
;

244 
aux
[
MAT_XX
] = 2.0‡* 
n
 / (
r
 - 
l
);

245 
aux
[
MAT_YX
] = 0.0f;

246 
aux
[
MAT_ZX
] = (
r
 + 
l
) / (r -Ü);

247 
aux
[
MAT_WX
] = 0.0f;

249 
aux
[
MAT_XY
] = 0.0f;

250 
aux
[
MAT_YY
] = (2.0‡* 
n
Ë/ (
t
 - 
b
);

251 
aux
[
MAT_ZY
] = (
t
 + 
b
) / (t - b);

252 
aux
[
MAT_WY
] = 0.0f;

254 
aux
[
MAT_XZ
] = 0.0f;

255 
aux
[
MAT_YZ
] = 0.0f;

256 
aux
[
MAT_ZZ
] = -(
f
 + 
n
)/(f -Ç);

257 
aux
[
MAT_WZ
] = -(
f
 * 
n
) / (f -Ç);

259 
aux
[
MAT_XW
] = 0.0f;

260 
aux
[
MAT_YW
] = 0.0f;

261 
aux
[
MAT_ZW
] = -1.0f;

262 
aux
[
MAT_WW
] = 0.0f;

263 
	`m©4_mu…
(
aux
, 
m
);

264 
	}
}

269 
	$m©4_mu…
(
m©4
 
l
, m©4 
r
)

271 
m©4
 
ªt
;

273 
ªt
[
MAT_XX
] = 
l
[MAT_XX] * 
r
[MAT_XX] +Ü[
MAT_YX
] *Ñ[
MAT_XY
] +

274 
l
[
MAT_ZX
] * 
r
[
MAT_XZ
] +Ü[
MAT_WX
] *Ñ[
MAT_XW
];

275 
ªt
[
MAT_XY
] = 
l
[MAT_XY] * 
r
[
MAT_XX
] +Ü[
MAT_YY
] *Ñ[MAT_XY] +

276 
l
[
MAT_ZY
] * 
r
[
MAT_XZ
] +Ü[
MAT_WY
] *Ñ[
MAT_XW
];

277 
ªt
[
MAT_XZ
] = 
l
[MAT_XZ] * 
r
[
MAT_XX
] +Ü[
MAT_YZ
] *Ñ[
MAT_XY
] +

278 
l
[
MAT_ZZ
] * 
r
[
MAT_XZ
] +Ü[
MAT_WZ
] *Ñ[
MAT_XW
];

279 
ªt
[
MAT_XW
] = 
l
[MAT_XW] * 
r
[
MAT_XX
] +Ü[
MAT_YW
] *Ñ[
MAT_XY
] +

280 
l
[
MAT_ZW
] * 
r
[
MAT_XZ
] +Ü[
MAT_WW
] *Ñ[
MAT_XW
];

282 
ªt
[
MAT_YX
] = 
l
[
MAT_XX
] * 
r
[MAT_YX] +Ü[MAT_YX] *Ñ[
MAT_YY
] +

283 
l
[
MAT_ZX
] * 
r
[
MAT_YZ
] +Ü[
MAT_WX
] *Ñ[
MAT_YW
];

284 
ªt
[
MAT_YY
] = 
l
[
MAT_XY
] * 
r
[
MAT_YX
] +Ü[MAT_YY] *Ñ[MAT_YY] +

285 
l
[
MAT_ZY
] * 
r
[
MAT_YZ
] +Ü[
MAT_WY
] *Ñ[
MAT_YW
];

286 
ªt
[
MAT_YZ
] = 
l
[
MAT_XZ
] * 
r
[
MAT_YX
] +Ü[MAT_YZ] *Ñ[
MAT_YY
] +

287 
l
[
MAT_ZZ
] * 
r
[
MAT_YZ
] +Ü[
MAT_WZ
] *Ñ[
MAT_YW
];

288 
ªt
[
MAT_YW
] = 
l
[
MAT_XW
] * 
r
[
MAT_YX
] +Ü[MAT_YW] *Ñ[
MAT_YY
] +

289 
l
[
MAT_ZW
] * 
r
[
MAT_YZ
] +Ü[
MAT_WW
] *Ñ[
MAT_YW
];

291 
ªt
[
MAT_ZX
] = 
l
[
MAT_XX
] * 
r
[MAT_ZX] +Ü[
MAT_YX
] *Ñ[
MAT_ZY
] +

292 
l
[
MAT_ZX
] * 
r
[
MAT_ZZ
] +Ü[
MAT_WX
] *Ñ[
MAT_ZW
];

293 
ªt
[
MAT_ZY
] = 
l
[
MAT_XY
] * 
r
[
MAT_ZX
] +Ü[
MAT_YY
] *Ñ[MAT_ZY] +

294 
l
[
MAT_ZY
] * 
r
[
MAT_ZZ
] +Ü[
MAT_WY
] *Ñ[
MAT_ZW
];

295 
ªt
[
MAT_ZZ
] = 
l
[
MAT_XZ
] * 
r
[
MAT_ZX
] +Ü[
MAT_YZ
] *Ñ[
MAT_ZY
] +

296 
l
[
MAT_ZZ
] * 
r
[MAT_ZZ] +Ü[
MAT_WZ
] *Ñ[
MAT_ZW
];

297 
ªt
[
MAT_ZW
] = 
l
[
MAT_XW
] * 
r
[
MAT_ZX
] +Ü[
MAT_YW
] *Ñ[
MAT_ZY
] +

298 
l
[
MAT_ZW
] * 
r
[
MAT_ZZ
] +Ü[
MAT_WW
] *Ñ[MAT_ZW];

300 
ªt
[
MAT_WX
] = 
l
[
MAT_XX
] * 
r
[MAT_WX] +Ü[
MAT_YX
] *Ñ[
MAT_WY
] +

301 
l
[
MAT_ZX
] * 
r
[
MAT_WZ
] +Ü[
MAT_WX
] *Ñ[
MAT_WW
];

302 
ªt
[
MAT_WY
] = 
l
[
MAT_XY
] * 
r
[
MAT_WX
] +Ü[
MAT_YY
] *Ñ[MAT_WY] +

303 
l
[
MAT_ZY
] * 
r
[
MAT_WZ
] +Ü[
MAT_WY
] *Ñ[
MAT_WW
];

304 
ªt
[
MAT_WZ
] = 
l
[
MAT_XZ
] * 
r
[
MAT_WX
] +Ü[
MAT_YZ
] *Ñ[
MAT_WY
] +

305 
l
[
MAT_ZZ
] * 
r
[
MAT_WZ
] +Ü[MAT_WZ] *Ñ[
MAT_WW
];

306 
ªt
[
MAT_WW
] = 
l
[
MAT_XW
] * 
r
[
MAT_WX
] +Ü[
MAT_YW
] *Ñ[
MAT_WY
] +

307 
l
[
MAT_ZW
] * 
r
[
MAT_WZ
] +Ü[
MAT_WW
] *Ñ[MAT_WW];

309 
	`mem˝y
(
r
, 
ªt
, (
m©4
));

310 
	}
}

315 
	$m©4_pow
(
m©4
 
m
, 
pow
)

317 
	`as£π
(
pow
 >= 0);

319 
m©4
 
‹ig
;

320 
	`m©4_c›y
(
m
, 
‹ig
);

321 
	`m©4_idítôy
(
m
);

322 
pow
--)

324 
	`m©4_mu…
(
m
, 
‹ig
);

326 
	}
}

331 
	$m©4_mu…Vec
(
m©4
 
m
, 
vec4
 
v
)

333 
vec4
 
ãmp
;

334 
ãmp
[
X
] = 
m
[
MAT_XX
] * 
v
[X] + m[
MAT_YX
] * v[
Y
] + m[
MAT_ZX
] * v[
Z
] + m[
MAT_WX
] * v[
W
];

335 
ãmp
[
Y
] = 
m
[
MAT_XY
] * 
v
[
X
] + m[
MAT_YY
] * v[Y] + m[
MAT_ZY
] * v[
Z
] + m[
MAT_WY
] * v[
W
];

336 
ãmp
[
Z
] = 
m
[
MAT_XZ
] * 
v
[
X
] + m[
MAT_YZ
] * v[
Y
] + m[
MAT_ZZ
] * v[Z] + m[
MAT_WZ
] * v[
W
];

337 
ãmp
[
W
] = 
m
[
MAT_XW
] * 
v
[
X
] + m[
MAT_YW
] * v[
Y
] + m[
MAT_ZW
] * v[
Z
] + m[
MAT_WW
] * v[W];

338 
	`mem˝y
(
v
, 
ãmp
, (
vec4
));

339 
	}
}

345 
	$m©4_‹õ¡
(
m©4
 
m_ö
, 
vec3
 
up
, vec3 
fwd
)

347 
vec3
 
s
;

348 
vec3
 
u
;

349 
vec3
 
f
;

350 
m©4
 
m
;

352 
	`mem˝y
(
u
, 
up
, (
vec3
));

353 
	`mem˝y
(
f
, 
fwd
, (
vec3
));

354 
	`vec3_n‹mÆize
(
u
);

355 
	`vec3_n‹mÆize
(
f
);

356 
	`vec3_¸oss
(
f
, 
u
, 
s
);

357 
	`vec3_n‹mÆize
(
s
);

358 
	`vec3_¸oss
(
s
, 
f
, 
u
);

359 
	`vec3_n‹mÆize
(
u
);

361 
m
[
MAT_XX
] = 
s
[
X
];

362 
m
[
MAT_XY
] = 
s
[
Y
];

363 
m
[
MAT_XZ
] = 
s
[
Z
];

364 
m
[
MAT_XW
] = 0;

366 
m
[
MAT_YX
] = 
u
[
X
];

367 
m
[
MAT_YY
] = 
u
[
Y
];

368 
m
[
MAT_YZ
] = 
u
[
Z
];

369 
m
[
MAT_YW
] = 0;

371 
m
[
MAT_ZX
] = -
f
[
X
];

372 
m
[
MAT_ZY
] = -
f
[
Y
];

373 
m
[
MAT_ZZ
] = -
f
[
Z
];

374 
m
[
MAT_ZW
] = 0;

376 
m
[
MAT_WX
] = 0;

377 
m
[
MAT_WY
] = 0;

378 
m
[
MAT_WZ
] = 0;

379 
m
[
MAT_WW
] = 1;

381 
	`m©4_mu…
(
m
, 
m_ö
);

383 
	}
}

388 
	$m©4_¥öt
(
m©4
 
m
)

390 
	`¥ötf
("%f, %f, %f, %f\n", 
m
[
MAT_XX
], m[
MAT_YX
], m[
MAT_ZX
], m[
MAT_WX
]);

391 
	`¥ötf
("%f, %f, %f, %f\n", 
m
[
MAT_XY
], m[
MAT_YY
], m[
MAT_ZY
], m[
MAT_WY
]);

392 
	`¥ötf
("%f, %f, %f, %f\n", 
m
[
MAT_XZ
], m[
MAT_YZ
], m[
MAT_ZZ
], m[
MAT_WZ
]);

393 
	`¥ötf
("%f, %f, %f, %f\n", 
m
[
MAT_XW
], m[
MAT_YW
], m[
MAT_ZW
], m[
MAT_WW
]);

394 
	`¥ötf
("\n");

395 
	}
}

397 
	$m©4_fwdsub°ôuã
(c⁄° 
m©4
 c⁄° 
lowî
, c⁄° 
vec
 c⁄° 
eq
, ve¯
sﬁ
)

399 
	`m©n_fwdsub°ôuã
((c⁄° 
m©n
 c⁄°Ë
lowî
, 4, (c⁄° 
vec
 c⁄°Ë
eq
, 
sﬁ
);

400 
	}
}

402 
	$m©4_bwdsub°ôuã
(c⁄° 
m©4
 c⁄° 
uµî
, c⁄° 
vec4
 c⁄° 
eq
, vec4 
sﬁ
)

404 
	`m©n_bwdsub°ôuã
((c⁄° 
m©n
 c⁄°Ë
uµî
, 4, (c⁄° 
vec
 c⁄°Ë
eq
, 
sﬁ
);

405 
	}
}

407 
	$m©4_lu
(
m©4
 
m
, m©4 
l
, m©4 
u
)

409 
	`m©n_lu
(
m
, 4, 
l
, 
u
);

410 
	}
}

412 
	$m©4_x
(
m©4
 
m
, 
vec4
 
v
)

414 
	`vec4_£t
(
v
, 
m
[
MAT_XX
], m[
MAT_XY
], m[
MAT_XZ
], m[
MAT_XW
]);

415 
	}
}

417 
	$m©4_y
(
m©4
 
m
, 
vec4
 
v
)

419 
	`vec4_£t
(
v
, 
m
[
MAT_YX
], m[
MAT_YY
], m[
MAT_YZ
], m[
MAT_YW
]);

420 
	}
}

422 
	$m©4_z
(
m©4
 
m
, 
vec4
 
v
)

424 
	`vec4_£t
(
v
, 
m
[
MAT_ZX
], m[
MAT_ZY
], m[
MAT_ZZ
], m[
MAT_ZW
]);

425 
	}
}

427 
	$m©4_w
(
m©4
 
m
, 
vec4
 
v
)

429 
	`vec4_£t
(
v
, 
m
[
MAT_WX
], m[
MAT_WY
], m[
MAT_WZ
], m[
MAT_WW
]);

430 
	}
}

441 
	$m©n_öô
(
m©
 
m
, 
n
)

443 
	`m©n_idítôy
(
m
, 
n
);

444 
	}
}

449 
	$m©n_idítôy
(
m©
 
m
, 
n
)

451 
i
, 
j
;

452 
i
 = 0; i < 
n
; i++)

454 
j
 = 0; j < 
n
; j++)

456 
m
[
i
 * 
n
 + 
j
] = (()(i == j));

459 
	}
}

465 
	$m©n_add
(
m©n
 
a
, 
n
, m©¿
b
, m©¿
ªt
)

467 
i
, 
j
;

468 
i
 = 0; i < 
n
; i++)

470 
j
 = 0; j < 
n
; j++)

472 
	`m©n_£t
(
ªt
, 
n
, 
i
, 
j
, 
	`m©n_gë
(
a
,Ç, i, jË+ m©n_gë(
b
,Ç, i, j));

475 
	}
}

480 
	$m©n_mu…
(
m©n
 
a
, 
n
, m©¿
b
, m©¿
ªt
)

482 
i
, 
j
, 
k
;

483 
i
 = 0; i < 
n
; i++)

485 
j
 = 0; j < 
n
; j++)

487 
sﬁ_ij
 = 0.0f;

488 
k
 = 0; k < 
n
; k++)

490 
sﬁ_ij
 +
	`m©n_gë
(
a
, 
n
, 
i
, 
k
Ë* m©n_gë(
b
,Ç, k, 
j
);

492 
	`m©n_£t
(
ªt
, 
n
, 
i
, 
j
, 
sﬁ_ij
);

495 
	}
}

500 
	$m©n_vmu…
(
m©n
 
m
, 
n
, 
vec
 
v
, ve¯
ªt
)

502 
i
, 
j
;

503 
j
 = 0; j < 
n
; j++)

505 
ªt
[
j
] = 0.0f;

506 
i
 = 0; i < 
n
; i++)

508 
ªt
[
j
] +
	`m©n_gë
(
m
, 
n
, 
i
, jË* 
v
[j];

511 
	}
}

516 
boﬁ
 
	$m©n_i¶owî
(
m©n
 
a
, 
n
)

518 
boﬁ
 
ªt
 = 
åue
;

519 
i
, 
j
;

520 
j
 = 0; j < 
n
; j++)

522 
i
 = 
j
; i < 
n
; i++)

524 if(!
	`„q
(
	`m©n_gë
(
a
, 
n
, 
i
, 
j
), 0.0f))

526 
ªt
 = 
Ál£
;

530  
ªt
;

531 
	}
}

536 
boﬁ
 
	$m©n_isuµî
(
m©n
 
a
, 
n
)

538 
boﬁ
 
ªt
 = 
åue
;

539 
i
, 
j
;

540 
i
 = 0; i < 
n
; i++)

542 
j
 = 0; j < 
i
; j++)

544 if(!
	`„q
(
	`m©n_gë
(
a
, 
n
, 
i
, 
j
), 0.0f))

546 
ªt
 = 
Ál£
;

550  
ªt
;

551 
	}
}

560 
	$m©n_fwdsub°ôuã
(c⁄° 
m©n
 c⁄° 
lowî
, 
n
, c⁄° 
vec
 c⁄° 
eq
, ve¯
sﬁ
)

562 
	`as£π
(
	`m©n_i¶owî
(
lowî
, 
n
));

564 
i
, 
j
;

565 
i
 = 0; i < 
n
; i++)

567 
sﬁ
[
i
] = 
eq
[i];

568 
j
 = 0; j < 
i
; j++)

570 
sﬁ
[
i
] -sﬁ[
j
] * 
lowî
[
n
 * i + j];

572 
	`as£π
(!
	`„q
(
	`m©n_gë
(
lowî
,
n
, 
i
, i), 0.0f));

573 
sﬁ
[
i
] /
	`m©n_gë
(
lowî
, 
n
, i, i);

575 
	}
}

581 
	$m©n_bwdsub°ôuã
(c⁄° 
m©n
 c⁄° 
uµî
, 
n
, c⁄° 
vec
 c⁄° 
eq
, ve¯
sﬁ
)

583 
	`as£π
(
	`m©n_isuµî
(
uµî
, 
n
));

585 
i
, 
j
;

586 
i
 = 
n
 - 1; i >= 0; i--)

588 
sﬁ
[
i
] = 
eq
[i];

589 
j
 = 
i
+1; j < 
n
; j++)

591 
sﬁ
[
i
] -sﬁ[
j
] * 
uµî
[
n
 * i + j];

593 
	`as£π
(!
	`„q
(
	`m©n_gë
(
uµî
, 
n
, 
i
, i), 0.0f));

594 
sﬁ
[
i
] /
	`m©n_gë
(
uµî
, 
n
, i, i);

596 
	}
}

602 
	$m©n_lu
(
m©n
 
a
, 
n
, m©¿
l
, m©¿
u
)

604 
	`as£π
(
a
);

605 
	`as£π
(
l
);

606 
	`as£π
(
u
);

607 
	`as£π
(
n
 > 0);

609 
	`m©n_idítôy
(
l
, 
n
);

610 
	`m©n_idítôy
(
u
, 
n
);

611 
Æpha
;

612 
i
,
j
,
k
;

613 
j
 = 0; j < 
n
; j++)

615 
i
 = 
j
; i < 
n
; i++)

617 
Æpha
 = 
	`m©n_gë
(
a
, 
n
, 
i
, 
j
);

618 
k
 = 0; k < 
j
; k++)

620 
Æpha
 -
	`m©n_gë
(
l
, 
n
, 
i
, 
k
Ë* m©n_gë(
u
,Ç, k, 
j
);

622 
	`m©n_£t
(
l
, 
n
, 
i
, 
j
, 
Æpha
);

625 
i
 = 
j
; i < 
n
; i++)

627 
Æpha
 = 
	`m©n_gë
(
a
, 
n
, 
j
, 
i
);

628 
k
 = 0; k < 
j
; k++)

630 
Æpha
 -
	`m©n_gë
(
l
, 
n
, 
j
, 
k
Ë* m©n_gë(
u
,Ç, k, 
i
);

633 
	`as£π
(
	`Ábs
(
	`m©n_gë
(
l
, 
n
, 
j
, j)Ë> 
FLT_EPSILON
 && "DET(L)Åoo closeÅo 0");

635 
	`m©n_£t
(
u
, 
n
, 
j
, 
i
, 
Æpha
 / 
	`m©n_gë
(
l
,Ç, j, j));

638 
	}
}

646 
	$m©n_sﬁvñu
(
m©n
 
a
, 
n
, c⁄° 
vec
 c⁄° 
b
, ve¯
x
)

648 
vec
 
y
 = 
	`Æloˇ
(
n
 * ());

649 
m©n
 
l
 = 
	`Æloˇ
(
n
 *Ç *());

650 
m©n
 
u
 = 
	`Æloˇ
(
n
 *Ç * ());

651 
	`m©n_lu
(
a
, 
n
, 
l
, 
u
);

652 
	`m©n_fwdsub°ôuã
(
l
, 
n
, 
b
, 
y
);

653 
	`m©n_bwdsub°ôuã
(
u
, 
n
, 
y
, 
x
);

654 
	}
}

663 
	$m©n_dë
(
m©n
 
m
, 
n
)

665 
ªt
 = 1.0f;

667 
m©n
 
l
 = 
	`Æloˇ
((Ë* 
n
 *Ç);

668 
m©n
 
u
 = 
	`Æloˇ
((Ë* 
n
 *Ç);

669 
	`m©n_lu
(
m
, 
n
, 
l
, 
u
);

671 
i
;

672 
i
 = 0; i < 
n
; i++)

674 
ªt
 *
	`m©n_gë
(
u
, 
n
, 
i
, i);

675 
ªt
 *
	`m©n_gë
(
l
, 
n
, 
i
, i);

677  
ªt
;

678 
	}
}

683 
	$m©n_gë
(
m©n
 
m
, 
n
, 
i
, 
j
)

685 
	`as£π
(
i
 < 
n
 && i >= 0);

686 
	`as£π
(
j
 < 
n
 && 
i
 >= 0);

688  
m
[
i
 * 
n
 + 
j
];

689 
	}
}

694 
	$m©n_£t
(
m©n
 
m
, 
n
, 
i
, 
j
, 
vÆ
)

696 
	`as£π
(
i
 < 
n
 && i >= 0);

697 
	`as£π
(
j
 < 
n
 && 
i
 >= 0);

699 
m
[
i
 * 
n
 + 
j
] = 
vÆ
;

700 
	}
}

705 
	$m©n_gëv
(
m©n
 
m
, 
n
, 
j
, 
vec
 
v
)

707 
	`as£π
(
j
 < 
n
 && j >= 0);

709 
i
;

710 
i
 = 0; i < 
n
; i++)

712 
v
[
i
] = 
	`m©n_gë
(
m
, 
n
, i, 
j
);

714 
	}
}

719 
	$m©n_£tv
(
m©n
 
m
, 
n
, 
j
, 
vec
 
v
)

721 
	`as£π
(
j
 < 
n
 && j >= 0);

723 
i
;

724 
i
 = 0; i < 
n
; i++)

726 
	`m©n_£t
(
m
, 
n
, 
i
, 
j
, 
v
[i]);

728 
	}
}

	@src/util/math/matrix.h

9 #i‚de‡
_MATRIX_H


10 
	#_MATRIX_H


	)

12 
	~<°dboﬁ.h
>

14 
	~"c⁄°.h
"

15 
	~"vec.h
"

17 
	#MAT_ROW_MAJOR
 1

	)

19 #i‡!
MAT_ROW_MAJOR


20 
	#MAT_XX
 0

	)

21 
	#MAT_XY
 1

	)

22 
	#MAT_XZ
 2

	)

23 
	#MAT_XW
 3

	)

25 
	#MAT_YX
 4

	)

26 
	#MAT_YY
 5

	)

27 
	#MAT_YZ
 6

	)

28 
	#MAT_YW
 7

	)

30 
	#MAT_ZX
 8

	)

31 
	#MAT_ZY
 9

	)

32 
	#MAT_ZZ
 10

	)

33 
	#MAT_ZW
 11

	)

35 
	#MAT_WX
 12

	)

36 
	#MAT_WY
 13

	)

37 
	#MAT_WZ
 14

	)

38 
	#MAT_WW
 15

	)

42 
	#MAT_XX
 0

	)

43 
	#MAT_XY
 4

	)

44 
	#MAT_XZ
 8

	)

45 
	#MAT_XW
 12

	)

47 
	#MAT_YX
 1

	)

48 
	#MAT_YY
 5

	)

49 
	#MAT_YZ
 9

	)

50 
	#MAT_YW
 13

	)

52 
	#MAT_ZX
 2

	)

53 
	#MAT_ZY
 6

	)

54 
	#MAT_ZZ
 10

	)

55 
	#MAT_ZW
 14

	)

57 
	#MAT_WX
 3

	)

58 
	#MAT_WY
 7

	)

59 
	#MAT_WZ
 11

	)

60 
	#MAT_WW
 15

	)

63 * 
	tm©
;

64 * 
	tm©n
;

65 * 
	tm©nxn
;

66 
	tm©2
[4];

67 
	tm©3
[9];

68 
	tm©4
[16];

70 c⁄° 
m©4
 c⁄° 
MAT4_IDENTITY
;

72 
m©4_idítôy
(
m©4
 
m©
);

73 
m©4_£t
(
m©4
 
m
, 
i
, 
j
, 
vÆ
);

74 
m©4_£tv
(
m©4
 
m
, 
vec4
 
x
, vec4 
y
, vec4 
z
, vec4 
w
);

75 
m©4_gë
(
m©4
 
m
, 
i
, 
j
);

76 
m©4_gëv
(
m©4
 
m
, 
i
, 
vec4
 
v
);

78 
m©4_c›y
(
m©4
 
a
, m©4 
b
);

79 
m©4_å™•o£
(
m©4
 
m
);

80 
m©4_sˇÀ
(
m©4
 
m
, 
x
, 
y
, 
z
);

81 
m©4_å™¶©e
(
m©4
 
m
, 
x
, 
y
, 
z
);

82 
m©4_rŸ©e
(
m©4
 
m
, 
™gÀ
, 
x
, 
y
, 
z
);

83 
m©4_axisRŸ©e
(
m©4
 
m
, 
rx
, 
ry
, 
rz
);

84 
m©4_‰u°um
(
m©4
 
m
, 
l
, 
r
, 
b
, 
t
, 
n
, 
f
);

85 
m©4_mu…
(
m©4
 
À·
, m©4 
right
);

86 
m©4_pow
(
m©4
 
m
, 
pow
);

87 
m©4_‹õ¡
(
m©4
 
m
, 
vec3
 
up
, vec3 
fwd
);

88 
m©4_mu…Vec
(
m©4
 
m
, 
vec4
 
v
);

89 
m©4_¥öt
(
m©4
 
m
);

91 
m©4_lu
(
m©4
 
m
, m©4 
l
, m©4 
u
);

92 
m©4_fwdsub°ôuã
(c⁄° 
m©4
 c⁄° 
lowî
, c⁄° 
vec
 c⁄° 
b
, ve¯
x
);

93 
m©4_bwdsub°ôuã
(c⁄° 
m©4
 c⁄° 
uµî
, c⁄° 
vec4
 c⁄° 
b
, vec4 
x
);

94 
m©4_ludecompo£
(
m©4
 
m
, m©4 
l
, m©4 
u
);

96 
m©4_x
(
m©4
 
m
, 
vec4
 
v
);

97 
m©4_y
(
m©4
 
m
, 
vec4
 
v
);

98 
m©4_z
(
m©4
 
m
, 
vec4
 
v
);

99 
m©4_w
(
m©4
 
m
, 
vec4
 
v
);

105 
m©n_öô
(
m©
 
m
, 
n
);

106 
m©n_idítôy
(
m©
 
m
, 
n
);

107 
m©n_add
(
m©n
 
a
, 
n
, m©¿
b
, m©¿
ªt
);

108 
m©n_mu…
(
m©n
 
a
, 
n
, m©¿
b
, m©¿
ªt
);

109 
m©n_vmu…
(
m©n
 
m
, 
n
, 
vec
 
v
, ve¯
ªt
);

110 
boﬁ
 
m©n_i¶owî
(
m©n
 
a
, 
n
);

111 
boﬁ
 
m©n_isuµî
(
m©n
 
a
, 
n
);

112 
m©n_fwdsub°ôuã
(c⁄° 
m©n
 c⁄° 
lowî
, 
n
, c⁄° 
vec
 c⁄° 
b
, ve¯
x
);

113 
m©n_bwdsub°ôuã
(c⁄° 
m©n
 c⁄° 
uµî
, 
n
, c⁄° 
vec
 c⁄° 
b
, ve¯
x
);

114 
m©n_lu
(
m©n
 
m
, 
n
, m©¿
l
, m©¿
u
);

115 
m©n_sﬁvñu
(
m©n
 
a
, 
n
, c⁄° 
vec
 c⁄° 
b
, ve¯
x
);

116 
m©n_dë
(
m©n
 
m
, 
n
);

118 
m©n_gë
(
m©n
 
m
, 
n
, 
i
, 
j
);

119 
m©n_£t
(
m©n
 
m
, 
n
, 
i
, 
j
, 
vÆ
);

120 
m©n_gëv
(
m©n
 
m
, 
n
, 
i
, 
vec
 
v
);

121 
m©n_£tv
(
m©n
 
m
, 
n
, 
j
, 
vec
 
v
);

	@src/util/math/raster.c

9 
	~<m©h.h
>

11 
	~"ø°î.h
"

	@src/util/math/raster.h

9 #i‚de‡
_RASTER_H


10 
	#_RASTER_H


	)

	@src/util/math/scalar.c

8 
	~<m©h.h
>

9 
	~<°dlib.h
>

10 
	~"sˇœr.h
"

17 
	$htof
(
öt16_t
 
h
)

19 
ªt
;

20 if(
h
 >= 0)

22 
ªt
 = (Ë
h
 / ()
INT16_MAX
;

24 
ªt
 = (Ë
h
 / ()(
INT16_MAX
 + 1);

26  
ªt
;

27 
	}
}

34 
	$uhtof
(
uöt16_t
 
uh
)

36  (Ë
uh
 / ()(
UINT16_MAX
);

37 
	}
}

44 
öt16_t
 
	$·oh
(
f
)

46 
öt16_t
 
ªt
;

47 if(
f
 >= 0.0f){

48 
ªt
 = (
öt16_t
Ë(
f
 * 
INT16_MAX
);

50 
ªt
 = (
öt16_t
Ë(
f
 * (
INT16_MAX
 + 1));

52  
ªt
;

53 
	}
}

61 
uöt16_t
 
	$·ouh
(
f
)

63  (
uöt16_t
)(
f
 * 
UINT16_MAX
);

64 
	}
}

71 
boﬁ
 
	$„q
(
a
, 
b
)

73 
ab
 = 
a
-
b
;

74  
ab
 <
EPSILON
 &&áb >= -EPSILON;

75 
	}
}

80 
	$fcmp
(
a
, 
b
)

82 
ªt
 = 0;

83 if(
	`„q
(
a
, 
b
))

85 
ªt
 = 0;

86 } if(
a
 < 
b
)

88 
ªt
 = -1;

89 } if(
a
 > 
b
)

91 
ªt
 = 1;

93  
ªt
;

94 
	}
}

100 
	$fsq
(
vÆ
)

102  
vÆ
 * val;

103 
	}
}

109 
	$fisqπ
(
vÆ
)

111 #ifde‡
HIGH_PRECISION


112 
r
 = 1.0 / 
	`sqπ
(
vÆ
);

114 
i
;

115 
y
, 
r
;

117 
y
 = 
vÆ
 * 0.5f;

118 
i
 = *(*)(&
vÆ
);

119 
i
 = 0x5f3759df - (i >> 1);

120 
r
 = *(*)(&
i
);

121 
r
 =Ñ * (1.5‡-Ñ *Ñ * 
y
);

123  
r
;

124 
	}
}

129 
	$f˛amp
(
vÆ
, 
a
, 
b
)

131 
ªt
 = 
vÆ
;

132 if(
vÆ
 < 
a
)

134 
ªt
 = 
a
;

135 } i‡(
vÆ
 > 
b
)

137 
ªt
 = 
b
;

139  
ªt
;

140 
	}
}

147 
	$fwøp
(
vÆ
, 
max
)

149 
ªt
 = 
	`fmodf
(
vÆ
, 
max
);

150 if(
ªt
 < 0)

152 
ªt
 = 
max
 +Ñet;

154  
ªt
;

155 
	}
}

157 
	$Ávg
(
n
, ...)

159 
sum
;

161 
va_li°
 
vl
;

162 
	`va_°¨t
(
vl
, 
n
);

164 
i
;

165 
i
 = 0; i < 
n
; i++)

167 
sum
 +
	`va_¨g
(
vl
, );

169 
	`va_íd
(
vl
);

170  (Ë(
sum
 / (Ë
n
);

171 
	}
}

179 
	$fwavg
(
n
, ...)

181 
sum
;

183 
va_li°
 
vl
;

184 
	`va_°¨t
(
vl
, 
n
);

186 
i
;

187 
i
 = 0; i < 
n
; i++)

189 
sum
 +
	`va_¨g
(
vl
, );

191 
	`va_íd
(
vl
);

192  (Ë(
sum
 / (Ë
n
);

193 
	}
}

195 
	$Êavg
(
n
, *
li°
)

197 
ªt
 = 0.0f;

199 
i
;

200 
i
 = 0; i < 
n
; i++)

202 
ªt
 +
li°
[
i
];

204  
ªt
 / (Ë
n
;

205 
	}
}

207 
	$Êwavg
(
n
, *
li°
, *
weights
)

209 
ªt
 = 0.0f;

211 
i
;

212 
i
 = 0; i < 
n
; i++)

214 
ªt
 +
li°
[
i
] * 
weights
[i];

216  
ªt
 / (Ë
n
;

217 
	}
}

219 
	$i˛amp
(
vÆ
, 
a
, 
b
)

221 
ªt
 = 
vÆ
;

222 if(
vÆ
 < 
a
)

224 
ªt
 = 
a
;

225 } i‡(
vÆ
 > 
b
)

227 
ªt
 = 
b
;

229  
ªt
;

230 
	}
}

232 
	$iwøp
(
vÆ
, 
max
)

234 
ªt
 = 
vÆ
;

235 if(
	`abs
(
ªt
Ë> 
max
)

237 
ªt
 = 
vÆ
 % 
max
;

238 } if(
ªt
 < 0)

240 
ªt
 = 
max
 +Ñet;

242  
ªt
;

243 
	}
}

	@src/util/math/scalar.h

8 #i‚de‡
_SCALAR_H


9 
	#_SCALAR_H


	)

11 
	~<°d¨g.h
>

12 
	~<°döt.h
>

13 
	~<°dboﬁ.h
>

14 
	~<Êﬂt.h
>

16 
	~"c⁄°.h
"

18 
	#EPSILON
 
FLT_EPSILON


	)

20 
htof
(
öt16_t
 
h
);

21 
uhtof
(
uöt16_t
 
uh
);

22 
öt16_t
 
·oh
(
f
);

23 
uöt16_t
 
·ouh
(
f
);

25 
boﬁ
 
„q
(
a
, 
b
);

26 
fcmp
(
a
, 
b
);

27 
fsq
(
vÆ
);

28 
fisqπ
(
vÆ
);

29 
f˛amp
(
vÆ
, 
a
, 
b
);

30 
fwøp
(
vÆ
, 
max
);

31 
Ávg
(
n
, ...);

32 
fwavg
(
n
, ...);

33 
Êavg
(
n
, *
li°
);

34 
Êwavg
(
n
, *
li°
, *
weights
);

36 
i˛amp
(
vÆ
, 
a
, 
b
);

37 
iwøp
(
vÆ
, 
max
);

	@src/util/math/sequence.c

10 
	~<m©h.h
>

11 
	~"c⁄°.h
"

12 
	~"£quí˚.h
"

17 
	$£quí˚_fib⁄acci
(
n
)

19  (Ë
	`round
((
	`pow
(
AURATIO
, 
n
Ë-Öow(-AURATIO, -n)Ë/ 
SQRT5
);

20 
	}
}

	@src/util/math/sequence.h

10 #i‚de‡
_SEQUENCE_H


11 
	#_SEQUENCE_H


	)

13 
£quí˚_fib⁄acci
(
n
);

	@src/util/math/stats.c

8 
	~<m©h.h
>

9 
	~"°©s.h
"

12 
uöt64_t
 
	$°©s_choo£
(
n
, 
k
)

14 
uöt64_t
 
ªt
 = 1;

15 if(
n
 < 
k
)

17 
ªt
 = 0;

20 
i
;

21 
i
 = 1; i <
k
; i++)

23 
ªt
 = (ªà* (
n
 - (
k
 - 
i
))) / i;

26  
ªt
;

27 
	}
}

32 
	$°©s_món
(
n
, *
vÆs
)

34 
sum
 = 0.0f;

35 
i
;

36 
i
 = 0; i < 
n
; i++)

38 
sum
 +
vÆs
[
i
];

40  
sum
 / (Ë
n
;

41 
	}
}

46 
	$°©s_°ddev
(
n
, *
vÆs
)

48 
món
 = 
	`°©s_món
(
n
, 
vÆs
);

49 
sum
 = 0.0f;

50 
i
;

51 
i
 = 0; i < 
n
; i++)

53 
sum
 +(
vÆs
[
i
] - 
món
) * (vals[i] - mean);

55  
	`sqπ
(
sum
 / (Ë
n
);

56 
	}
}

61 
	$°©s_pmÂoiss⁄
(
món
, 
ex≥˘ed
)

63 
≤
 = 
	`exp
(-
món
);

64 
i
;

65 
i
 = 1; i <
ex≥˘ed
; i ++)

67 
≤
 =Ö¿* (
món
 / 
ex≥˘ed
);

69  
≤
;

70 
	}
}

75 
	$°©s_cdÂoiss⁄
(
món
, 
ex≥˘ed
)

77 
≤
 = 
	`exp
(-
món
);

78 
cd
 = 
≤
;

79 
i
;

80 
i
 = 1; i <
ex≥˘ed
; i ++)

82 
≤
 =Ö¿* (
món
 / 
ex≥˘ed
);

83 
cd
 +
≤
;

85  
cd
;

86 
	}
}

	@src/util/math/stats.h

8 #i‚de‡
_STATS_H


9 
	#_STATS_H


	)

11 
	~<°döt.h
>

13 
uöt64_t
 
°©s_choo£
(
n
, 
k
);

14 
°©s_món
(
n
, *
vÆs
);

15 
°©s_°ddev
(
n
, *
vÆs
);

16 
°©s_pmÂoiss⁄
(
món
, 
ex≥˘ed
);

17 
°©s_cdÂoiss⁄
(
món
, 
ex≥˘ed
);

	@src/util/math/vec.c

9 
	~<m©h.h
>

10 
	~<Êﬂt.h
>

11 
	~<°rög.h
>

12 
	~<°dio.h
>

14 
	~"utû/øndom.h
"

15 
	~"c⁄vît.h
"

16 
	~"sˇœr.h
"

18 
	~"vec.h
"

20 c⁄° 
	gVEC4_ZERO
[] = {0.0f, 0.0f, 0.0f, 0.0f};

21 c⁄° 
	gVEC4_ONE
[] = {1.0f, 1.0f, 1.0f, 1.0f};

22 c⁄° 
	gVEC4_X
[] = {1.0f, 0.0f, 0.0f, 0.0f};

23 c⁄° 
	gVEC4_Y
[] = {0.0f, 1.0f, 0.0f, 0.0f};

24 c⁄° 
	gVEC4_Z
[] = {0.0f, 0.0f, 1.0f, 0.0f};

25 c⁄° 
	gVEC4_W
[] = {0.0f, 0.0f, 0.0f, 1.0f};

27 c⁄° *
	gVEC3_ZERO
 = 
VEC4_ZERO
;

28 c⁄° *
	gVEC3_ONE
 = 
VEC4_ONE
;

29 c⁄° *
	gVEC3_X
 = 
VEC4_X
;

30 c⁄° *
	gVEC3_Y
 = 
VEC4_Y
;

31 c⁄° *
	gVEC3_Z
 = 
VEC4_Z
;

33 c⁄° *
	gVEC2_ZERO
 = 
VEC4_ZERO
;

34 c⁄° *
	gVEC2_ONE
 = 
VEC4_ONE
;

35 c⁄° *
	gVEC2_X
 = 
VEC4_X
;

36 c⁄° *
	gVEC2_Y
 = 
VEC4_Y
;

47 
	$hvec2_to_vec2
(
hvec2
 
§c
, 
vec2
 
d°
)

49 
d°
[
X
] = 
	`htof
(
§c
[X]);

50 
d°
[
Y
] = 
	`htof
(
§c
[Y]);

51 
	}
}

56 
	$vec2_to_hvec2
(
vec2
 
§c
, 
hvec2
 
d°
)

58 
d°
[
X
] = 
	`·oh
(
§c
[X]);

59 
d°
[
Y
] = 
	`·oh
(
§c
[Y]);

60 
	}
}

65 
	$hvec2_£t
(
hvec2
 
a
, 
öt16_t
 
x
, i¡16_à
y
)

67 
a
[
X
] = 
x
;

68 
a
[
Y
] = 
y
;

69 
	}
}

74 
boﬁ
 
	$hvec2_eq
(
hvec2
 
a
, hvec2 
b
)

76  
a
[
X
] =
b
[X] &&á[
Y
] == b[Y];

77 
	}
}

88 
	$uhvec2_to_vec2
(
uhvec2
 
§c
, 
vec2
 
d°
)

90 
d°
[
X
] = 
	`uhtof
(
§c
[X]);

91 
d°
[
Y
] = 
	`uhtof
(
§c
[Y]);

92 
	}
}

97 
	$vec2_to_uhvec2
(
vec2
 
§c
, 
uhvec2
 
d°
)

99 
d°
[
X
] = 
	`·ouh
(
§c
[X]);

100 
d°
[
Y
] = 
	`·ouh
(
§c
[Y]);

101 
	}
}

106 
	$uhvec2_£t
(
uhvec2
 
a
, 
uöt16_t
 
x
, uöt16_à
y
)

108 
a
[
X
] = 
x
;

109 
a
[
Y
] = 
y
;

110 
	}
}

116 
boﬁ
 
	$uhvec2_eq
(
uhvec2
 
a
, uhvec2 
b
)

118  
a
[
X
] =
b
[X] &&á[
Y
] == b[Y];

119 
	}
}

130 
	$hvec3_to_vec3
(
hvec3
 
§c
, 
vec3
 
d°
)

132 
d°
[
X
] = 
§c
[X] / 65535.0f;

133 
d°
[
Y
] = 
§c
[Y] / 65535.0f;

134 
d°
[
Z
] = 
§c
[Z] / 65535.0f;

135 
	}
}

141 
	$vec3_to_hvec3
(
vec3
 
§c
, 
hvec3
 
d°
)

143 
d°
[
X
] = 
	`·oh
(
§c
[X]);

144 
d°
[
Y
] = 
	`·oh
(
§c
[Y]);

145 
d°
[
Z
] = 
	`·oh
(
§c
[Z]);

146 
	}
}

151 
	$hvec3_£t
(
hvec3
 
a
, 
öt16_t
 
x
, i¡16_à
y
, i¡16_à
z
)

153 
a
[
X
] = 
x
;

154 
a
[
Y
] = 
y
;

155 
a
[
Z
] = 
z
;

156 
	}
}

161 
boﬁ
 
	$hvec3_eq
(
hvec3
 
a
, hvec3 
b
)

163  
a
[
X
] =
b
[X] &&á[
Y
] =b[Y] &&á[
Z
] == b[Z];

164 
	}
}

175 
	$vec2_£t
(
vec2
 
a
, 
x
, 
y
)

177 
a
[
X
] = 
x
;

178 
a
[
Y
] = 
y
;

179 
	}
}

181 
	$vec2_sˇÀ
(
vec2
 
a
, 
sˇÀ
)

183 
a
[
X
] *
sˇÀ
;

184 
a
[
Y
] *
sˇÀ
;

185 
	}
}

190 
	$vec2_c›y
(c⁄° 
vec2
 
§c
, vec2 
d°
)

192 
d°
[
X
] = 
§c
[X];

193 
d°
[
Y
] = 
§c
[Y];

194 
	}
}

199 
	$vec2_dŸ
(c⁄° 
vec2
 
a
, c⁄° vec2 
b
)

201  
a
[
X
] * 
b
[X] +á[
Y
] * b[Y];

202 
	}
}

204 
	$vec2_add
(c⁄° 
vec2
 
a
, c⁄° vec2 
b
, vec2 
de°
)

206 
de°
[
X
] = 
a
[X] + 
b
[X];

207 
de°
[
Y
] = 
a
[Y] + 
b
[Y];

208 
	}
}

210 
	$vec2_sub
(c⁄° 
vec2
 
a
, c⁄° vec2 
b
, vec2 
de°
)

212 
de°
[
X
] = 
a
[X] - 
b
[X];

213 
de°
[
Y
] = 
a
[Y] - 
b
[Y];

214 
	}
}

219 
	$vec2_Ànsq
(c⁄° 
vec2
 
a
)

221  
	`vec2_dŸ
(
a
,á);

222 
	}
}

227 
	$vec2_n‹mÆize
(
vec2
 
a
)

229 
sqsum
 = 
	`vec2_Ànsq
(
a
);

230 
sqπsumInv
 = 1.0‡/ 
	`sqπ
(
sqsum
);

232 
a
[
X
] *
sqπsumInv
;

233 
a
[
Y
] *
sqπsumInv
;

234 
	}
}

236 
	$vec2_ønd
(
vec2
 
ªs
)

238 
ªs
[
X
] = 
	`øndom_øndom
() - 0.5f;

239 
ªs
[
Y
] = 
	`øndom_øndom
() - 0.5f;

240 
	`vec2_n‹mÆize
(
ªs
);

241 
	}
}

253 
	$vec3_£t
(
vec3
 
a
, 
x
, 
y
, 
z
)

255 
a
[
X
] = 
x
;

256 
a
[
Y
] = 
y
;

257 
a
[
Z
] = 
z
;

258 
	}
}

263 
	$vec3_c›y
(c⁄° 
vec3
 
§c
, vec3 
d°
)

265 
	`mem˝y
(
d°
, 
§c
, (
vec3
));

266 
	}
}

268 
boﬁ
 
	$vec3_eq
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
)

270  
	`„q
(
a
[
X
], 
b
[X]) &&

271 
	`„q
(
a
[
Y
], 
b
[Y]) &&

272 
	`„q
(
a
[
Z
], 
b
[Z]);

273 
	}
}

278 
	$vec3_cmp
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, 
ivec3
 
cmp
)

280 
cmp
[
X
] = 
	`fcmp
(
a
[X], 
b
[X]);

281 
cmp
[
Y
] = 
	`fcmp
(
a
[Y], 
b
[Y]);

282 
cmp
[
Z
] = 
	`fcmp
(
a
[Z], 
b
[Z]);

283 
	}
}

290 
	$vec3_dŸ
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
)

292  
a
[
X
] * 
b
[X] +á[
Y
] * b[Y] +á[
Z
] * b[Z];

293 
	}
}

299 
	$vec3_Ànsq
(c⁄° 
vec3
 
a
)

301  
	`vec3_dŸ
(
a
,á);

302 
	}
}

309 
	$vec3_Àn
(c⁄° 
vec3
 
a
)

311  
	`sqπ
(
	`vec3_Ànsq
(
a
));

312 
	}
}

314 
	$vec3_di°sq
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
)

316 
vec3
 
tmp
;

317 
	`vec3_sub
(
a
, 
b
, 
tmp
);

318  
	`vec3_Ànsq
(
tmp
);

319 
	}
}

330 
	$vec3_add
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, vec3 
de°
)

332 
de°
[
X
] = 
a
[X] + 
b
[X];

333 
de°
[
Y
] = 
a
[Y] + 
b
[Y];

334 
de°
[
Z
] = 
a
[Z] + 
b
[Z];

335 
	}
}

345 
	$vec3_sub
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, vec3 
de°
)

347 
de°
[
X
] = 
a
[X] - 
b
[X];

348 
de°
[
Y
] = 
a
[Y] - 
b
[Y];

349 
de°
[
Z
] = 
a
[Z] - 
b
[Z];

350 
	}
}

356 
	$vec3_n‹mÆize
(
vec3
 
a
)

358 
sqsum
 = 
	`vec3_Ànsq
(
a
);

359 if(!
	`„q
(
sqsum
, 0.0f))

361 
sqπsumInv
 = 1.0‡/ 
	`sqπ
(
sqsum
);

363 
a
[
X
] *
sqπsumInv
;

364 
a
[
Y
] *
sqπsumInv
;

365 
a
[
Z
] *
sqπsumInv
;

367 
	}
}

372 
	$vec3_sˇÀ
(
vec3
 
a
, 
vÆ
)

374 
a
[
X
] *
vÆ
;

375 
a
[
Y
] *
vÆ
;

376 
a
[
Z
] *
vÆ
;

377 
	}
}

385 
	$vec3_¸oss
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, vec3 
de°
)

387 
vec3
 
tmp
;

388 
tmp
[
X
] = 
a
[
Y
] * 
b
[
Z
] -á[Z] * b[Y];

389 
tmp
[
Y
] = 
a
[
Z
] * 
b
[
X
] -á[X] * b[Z];

390 
tmp
[
Z
] = 
a
[
X
] * 
b
[
Y
] -á[Y] * b[X];

391 
	`vec3_c›y
(
tmp
, 
de°
);

392 
	}
}

401 
	$vec3_¥oj
(c⁄° 
vec3
 
v
, c⁄° vec3 
ªÁxis
, vec3 
de°
)

403 
	`vec3_c›y
(
ªÁxis
, 
de°
);

404 
numî
 = 
	`vec3_dŸ
(
v
, 
ªÁxis
);

405 
díom
 = 
	`vec3_dŸ
(
ªÁxis
,Ñefaxis);

406 
	`vec3_sˇÀ
(
de°
, 
numî
 / 
díom
);

407 
	}
}

416 
	$vec3_‹th
(c⁄° 
vec3
 
v
, c⁄° vec3 
ªÁxis
, vec3 
de°
)

418 
vec3
 
tmp
;

419 
	`vec3_¥oj
(
v
, 
ªÁxis
, 
tmp
);

420 
	`vec3_sub
(
v
, 
tmp
, 
de°
);

421 
	}
}

428 
	$vec3_avg
(
vec3
 
ªsu…
, 
n
, ...)

430 
	`vec3_£t
(
ªsu…
, 0.0f, 0.0f, 0.0f);

432 
va_li°
 
vl
;

433 
	`va_°¨t
(
vl
, 
n
);

435 
i
;

436 
i
 = 0; i < 
n
; i++)

438 
	`vec3_add
(
ªsu…
, 
	`va_¨g
(
vl
, 
vec
),Ñesult);

440 
	`va_íd
(
vl
);

441 
	`vec3_sˇÀ
(
ªsu…
, 1.0f/
n
);

442 
	}
}

450 
	$vec3_wavg
(
vec3
 
ªsu…
, 
n
, ...)

452 
	`vec3_£t
(
ªsu…
, 0.0f, 0.0f, 0.0f);

454 
va_li°
 
vl
;

455 
	`va_°¨t
(
vl
, 
n
);

457 
sˇÀ
;

458 
vec
 
v
;

459 
i
;

460 
i
 = 0; i < 
n
; i+=2)

462 
sˇÀ
 = (Ë
	`va_¨g
(
vl
, );

463 
v
 = 
	`va_¨g
(
vl
, 
vec
);

464 
	`vec3_sˇÀ
(
v
, 
sˇÀ
);

465 
	`vec3_add
(
ªsu…
, 
v
,Ñesult);

467 
	`va_íd
(
vl
);

468 
	`vec3_sˇÀ
(
ªsu…
, 1.0f/
n
);

469 
	}
}

471 
	$vec3_œvg
(
vec3
 
ªsu…
, 
n
, 
vec
 *
li°
)

473 
	`vec3_£t
(
ªsu…
, 0.0f, 0.0f, 0.0f);

475 
i
;

476 
i
 = 0; i < 
n
; i++)

478 
	`vec3_add
(
ªsu…
, 
li°
[
i
],Ñesult);

480 
	`vec3_sˇÀ
(
ªsu…
, 1.0f/
n
);

481 
	}
}

483 
	$vec3_lwavg
(
vec3
 
ªsu…
, 
n
, 
vec
 *
li°
, *
weight
)

485 
	`vec3_£t
(
ªsu…
, 0.0f, 0.0f, 0.0f);

487 
vec3
 
v
;

488 
i
;

489 
i
 = 0; i < 
n
; i++)

491 
	`vec3_c›y
(
li°
[
i
], 
v
);

492 
	`vec3_sˇÀ
(
v
, 
weight
[
i
]);

493 
	`vec3_add
(
ªsu…
, 
v
,Ñesult);

495 
	`vec3_sˇÀ
(
ªsu…
, 1.0f/
n
);

496 
	}
}

498 
	$vec3_ønd
(
vec3
 
ªs
)

500 
ªs
[
X
] = 
	`øndom_øndom
() - 0.5f;

501 
ªs
[
Y
] = 
	`øndom_øndom
() - 0.5f;

502 
ªs
[
Z
] = 
	`øndom_øndom
() - 0.5f;

503 
	`vec3_n‹mÆize
(
ªs
);

504 
	}
}

511 
	$vec3_¥öt
(c⁄° 
vec3
 
a
)

513 
	`¥ötf
("%f, %f, %f\n", 
a
[
X
],á[
Y
],á[
Z
]);

514 
	}
}

525 
	$vec4_£t
(
vec4
 
a
, 
x
, 
y
, 
z
, 
w
)

527 
a
[
X
] = 
x
;

528 
a
[
Y
] = 
y
;

529 
a
[
Z
] = 
z
;

530 
a
[
W
] = 
w
;

531 
	}
}

536 
	$vec4_c›y
(c⁄° 
vec4
 
§c
, vec4 
d°
)

538 
d°
[
X
] = 
§c
[X];

539 
d°
[
Y
] = 
§c
[Y];

540 
d°
[
Z
] = 
§c
[Z];

541 
d°
[
W
] = 
§c
[W];

542 
	}
}

551 
	$vec4_add
(c⁄° 
vec4
 
a
, c⁄° vec4 
b
, vec4 
de°
)

553 
de°
[
W
] = 
a
[W] + 
b
[W];

554 
de°
[
X
] = 
a
[X] + 
b
[X];

555 
de°
[
Y
] = 
a
[Y] + 
b
[Y];

556 
de°
[
Z
] = 
a
[Z] + 
b
[Z];

557 
	}
}

566 
	$vec4_sub
(c⁄° 
vec4
 
a
, c⁄° vec4 
b
, vec4 
de°
)

568 
de°
[
W
] = 
a
[W] - 
b
[W];

569 
de°
[
X
] = 
a
[X] - 
b
[X];

570 
de°
[
Y
] = 
a
[Y] - 
b
[Y];

571 
de°
[
Z
] = 
a
[Z] - 
b
[Z];

572 
	}
}

578 
	$vec4_dŸ
(c⁄° 
vec4
 
a
, c⁄° vec4 
b
)

580  
a
[
X
] * 
b
[X] +á[
Y
] * b[Y] +á[
Z
] * b[Z] +á[
W
] * b[W];

581 
	}
}

586 
	$vec4_Ànsq
(c⁄° 
vec4
 
a
)

588  
	`vec4_dŸ
(
a
,á);

589 
	}
}

596 
	$vec4_n‹mÆize
(
vec4
 
a
)

598 
sqsum
 = 
	`vec4_Ànsq
(
a
);

599 if(!
	`„q
(
sqsum
, 0.0f))

601 
sqπsumInv
 = 1.0‡/ 
	`sqπ
(
sqsum
);

603 
a
[
W
] *
sqπsumInv
;

604 
a
[
X
] *
sqπsumInv
;

605 
a
[
Y
] *
sqπsumInv
;

606 
a
[
Z
] *
sqπsumInv
;

608 
	}
}

610 
	$vec4_sˇÀ
(
vec4
 
a
, c⁄° 
sˇÀ
)

612 
a
[
W
] *
sˇÀ
;

613 
a
[
X
] *
sˇÀ
;

614 
a
[
Y
] *
sˇÀ
;

615 
a
[
Z
] *
sˇÀ
;

616 
	}
}

625 
	$vec4_¥oj
(c⁄° 
vec4
 
v
, c⁄° vec4 
ªÁxis
, vec4 
de°
)

627 
	`vec4_c›y
(
ªÁxis
, 
de°
);

628 
numî
 = 
	`vec4_dŸ
(
v
, 
ªÁxis
);

629 
díom
 = 
	`vec4_dŸ
(
ªÁxis
,Ñefaxis);

630 
	`vec4_sˇÀ
(
de°
, 
numî
 / 
díom
);

631 
	}
}

640 
	$vec4_‹th
(c⁄° 
vec4
 
v
, c⁄° vec4 
ªÁxis
, vec4 
de°
)

642 
vec4
 
tmp
;

643 
	`vec4_¥oj
(
v
, 
ªÁxis
, 
tmp
);

644 
	`vec4_sub
(
v
, 
tmp
, 
de°
);

645 
	}
}

652 
	$vec4_avg
(
vec4
 
ªsu…
, 
n
, ...)

654 
	`vec4_£t
(
ªsu…
, 0.0f, 0.0f, 0.0f, 0.0f);

656 
va_li°
 
vl
;

657 
	`va_°¨t
(
vl
, 
n
);

659 
i
;

660 
i
 = 0; i < 
n
; i++)

662 
	`vec4_add
(
ªsu…
, 
	`va_¨g
(
vl
, 
vec4
),Ñesult);

664 
	`vec4_sˇÀ
(
ªsu…
, 1.0f/
n
);

665 
	}
}

667 
	$vec4_swizzÀ
(
vec4
 
v
, 
x
, 
y
, 
z
, 
w
)

669 
vec4
 
d°
;

670 
d°
[
X
] = 
v
[
x
];

671 
d°
[
Y
] = 
v
[
y
];

672 
d°
[
Z
] = 
v
[
z
];

673 
d°
[
W
] = 
v
[
w
];

674 
	`vec4_c›y
(
d°
, 
v
);

675 
	}
}

680 
	$vec4_¥öt
(
vec4
 
a
)

682 
	`¥ötf
("%f, %f, %f, %f\n", 
a
[
X
],á[
Y
],á[
Z
],á[
W
]);

683 
	}
}

692 (*
qu©îni⁄_c›y
)(c⁄° 
qu©îni⁄
 
§c
, qu©îni⁄ 
d°
Ë
vec4_c›y
;

693 (*
qu©îni⁄_dŸ
)(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
Ë
vec4_dŸ
;

694 (*
qu©îni⁄_add
)(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
Ë
vec4_add
;

695 (*
qu©îni⁄_sub
)(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
Ë
vec4_sub
;

696 (*
qu©îni⁄_n‹mÆize
)(
qu©îni⁄
 
a
Ë
vec4_n‹mÆize
;

697 (*
qu©îni⁄_Ànsq
)(c⁄° 
qu©îni⁄
 
a
Ë
vec4_Ànsq
;

702 
	$qu©îni⁄_£t
(
qu©îni⁄
 
a
, 
w
, 
x
, 
y
, 
z
)

704 
a
[
W
] = 
w
;

705 
a
[
X
] = 
x
;

706 
a
[
Y
] = 
y
;

707 
a
[
Z
] = 
z
;

708 
	}
}

716 
	$qu©îni⁄_£t_rŸ©i⁄
(
qu©îni⁄
 
a
, 
™gÀ
, 
vec3
 
axis
)

718 
vec3
 
«xis
;

719 
	`vec3_c›y
(
axis
, 
«xis
);

720 
	`vec3_n‹mÆize
(
«xis
);

721 
sˇÀ
 = 
	`sö
(
™gÀ
 / 2.0f);

723 
a
[
W
] = 
	`cos
(
™gÀ
 / 2.0f);

724 
a
[
X
] = 
«xis
[X] * 
sˇÀ
;

725 
a
[
Y
] = 
«xis
[Y] * 
sˇÀ
;

726 
a
[
Z
] = 
«xis
[Z] * 
sˇÀ
;

727 
	}
}

732 
	$qu©îni⁄_idítôy
(
qu©îni⁄
 
a
)

734 
	`qu©îni⁄_£t
(
a
, 1.0f, 0.0f, 0.0f, 0.0f);

735 
	}
}

746 
	$qu©îni⁄_rŸ©e
(
qu©îni⁄
 
a
, 
™gÀ
, 
vec3
 
axis
)

748 
qu©îni⁄
 
tmp
;

749 
	`qu©îni⁄_£t_rŸ©i⁄
(
tmp
, 
™gÀ
, 
axis
);

750 
	`qu©îni⁄_mu…
(
a
, 
tmp
,á);

751 
	}
}

757 
	$qu©îni⁄_n‹m
(c⁄° 
qu©îni⁄
 
a
)

759  
	`qu©îni⁄_dŸ
(
a
,á);

760 
	}
}

769 
	$qu©îni⁄_c⁄jug©e
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
)

771 
de°
[
X
] = -
a
[X];

772 
de°
[
Y
] = -
a
[Y];

773 
de°
[
Z
] = -
a
[Z];

774 
de°
[
W
] = 
a
[W];

775 
	}
}

783 
	$qu©îni⁄_övî£
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
)

785 
öv_n‹m
 = 1.0‡/ 
	`qu©îni⁄_n‹m
(
a
);

786 
	`qu©îni⁄_c⁄jug©e
(
a
, 
de°
);

787 
de°
[
W
] *
öv_n‹m
;

788 
de°
[
X
] *
öv_n‹m
;

789 
de°
[
Y
] *
öv_n‹m
;

790 
de°
[
Z
] *
öv_n‹m
;

791 
	}
}

797 
	$qu©îni⁄_ªÆ
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
)

799 
	`qu©îni⁄_£t
(
de°
, 
a
[
W
], 0.0f, 0.0f, 0.0f);

800 
	}
}

806 
	$qu©îni⁄_imagö¨y
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
)

808 
	`qu©îni⁄_£t
(
de°
, 0.0f, 
a
[
X
],á[
Y
],á[
Z
]);

809 
	}
}

818 
	$qu©îni⁄_mu…
(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
)

820 
qu©îni⁄
 
tmp
;

821 
tmp
[
W
] = 
a
[W] * 
b
[W] -á[
X
] * b[X] -á[
Y
] * b[Y] -á[
Z
] * b[Z];

822 
tmp
[
X
] = 
a
[
W
] * 
b
[X] +á[X] * b[W] +á[
Y
] * b[
Z
] -á[Z] * b[Y];

823 
tmp
[
Y
] = 
a
[
W
] * 
b
[Y] +á[Y] * b[W] +á[
Z
] * b[
X
] -á[X] * b[Z];

824 
tmp
[
Z
] = 
a
[
W
] * 
b
[Z] +á[Z] * b[W] +á[
X
] * b[
Y
] -á[Y] * b[X];

825 
	`qu©îni⁄_c›y
(
tmp
, 
de°
);

826 
	}
}

834 
	$qu©îni⁄_div
(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
)

836 
qu©îni⁄
 
öv
;

837 
	`qu©îni⁄_övî£
(
b
, 
öv
);

838 
	`qu©îni⁄_mu…
(
a
, 
öv
, 
de°
);

839 
	}
}

844 
	$qu©îni⁄_vecRŸ©e
(
qu©îni⁄
 
a
, 
vec4
 
b
)

846 
qu©îni⁄
 
c⁄
;

847 
	`qu©îni⁄_c⁄jug©e
(
a
, 
c⁄
);

848 
	`qu©îni⁄_mu…
(
a
, 
b
, b);

849 
	`qu©îni⁄_mu…
(
b
, 
c⁄
, b);

850 
	}
}

852 
	$qu©îni⁄_‹õ¡
(
qu©îni⁄
 
a
, 
vec3
 
up
, vec3 
fwd
)

854 
m©4
 
m
;

855 
	`m©4_idítôy
(
m
);

856 
	`m©4_‹õ¡
(
m
, 
fwd
, 
up
);

857 
	`m©4_to_qu©îni⁄
(
m
, 
a
);

858 
	}
}

	@src/util/math/vec.h

9 #i‚de‡
_VEC_H_


10 
	#_VEC_H_


	)

12 
	~<°d¨g.h
>

13 
	~<°dboﬁ.h
>

14 
	~<°döt.h
>

16 
	~"c⁄°.h
"

18 
	#EPSILON
 
FLT_EPSILON


	)

20 
uöt16_t
* 
	tuhvec
;

21 
uöt16_t
 
	tuhvec2
[2];

22 
uöt16_t
 
	tuhvec3
[3];

24 
öt16_t
* 
	thvec
;

25 
öt16_t
 
	thvec2
[2];

26 
öt16_t
 
	thvec3
[3];

28 
öt32_t
* 
	tivec
;

29 
öt32_t
 
	tivec2
[2];

30 
öt32_t
 
	tivec3
[3];

32 * 
	tvec
;

33 
	tvec2
[2];

34 
	tvec3
[3];

35 
	tvec4
[4];

36 
	tqu©îni⁄
[4];

38 c⁄° 
VEC4_ZERO
[];

39 c⁄° 
VEC4_ONE
[];

40 c⁄° 
VEC4_X
[];

41 c⁄° 
VEC4_Y
[];

42 c⁄° 
VEC4_Z
[];

43 c⁄° 
VEC4_W
[];

45 c⁄° *
VEC3_ZERO
;

46 c⁄° *
VEC3_ONE
;

47 c⁄° *
VEC3_X
;

48 c⁄° *
VEC3_Y
;

49 c⁄° *
VEC3_Z
;

51 c⁄° *
VEC2_ZERO
;

52 c⁄° *
VEC2_ONE
;

53 c⁄° *
VEC2_X
;

54 c⁄° *
VEC2_Y
;

57 
hvec2_to_vec2
(
hvec2
 
§c
, 
vec2
 
d°
);

58 
vec2_to_hvec2
(
vec2
 
§c
, 
hvec2
 
d°
);

59 
hvec2_£t
(
hvec2
 
a
, 
öt16_t
 
x
, i¡16_à
y
);

60 
boﬁ
 
hvec2_eq
(
hvec2
 
a
, hvec2 
b
);

63 
uhvec2_to_vec2
(
uhvec2
 
§c
, 
vec2
 
d°
);

64 
vec2_to_uhvec2
(
vec2
 
§c
, 
uhvec2
 
d°
);

65 
uhvec2_£t
(
uhvec2
 
a
, 
uöt16_t
 
x
, uöt16_à
y
);

66 
boﬁ
 
uhvec2_eq
(
uhvec2
 
a
, uhvec2 
b
);

69 
hvec3_to_vec3
(
hvec3
 
§c
, 
vec3
 
d°
);

70 
vec3_to_hvec3
(
vec3
 
§c
, 
hvec3
 
d°
);

71 
hvec3_£t
(
hvec3
 
a
, 
öt16_t
 
x
, i¡16_à
y
, i¡16_à
z
);

72 
boﬁ
 
hvec3_eq
(
hvec3
 
a
, hvec3 
b
);

75 
vec2_£t
(
vec2
 
a
, 
x
, 
y
);

76 
vec2_sˇÀ
(
vec2
 
a
, 
sˇÀ
);

77 
vec2_c›y
(c⁄° 
vec2
 
§c
, vec2 
d°
);

78 
vec2_dŸ
(c⁄° 
vec2
 
a
, c⁄° vec2 
b
);

79 
vec2_add
(c⁄° 
vec2
 
a
, c⁄° vec2 
b
, vec2 
de°
);

80 
vec2_sub
(c⁄° 
vec2
 
a
, c⁄° vec2 
b
, vec2 
de°
);

81 
vec2_Ànsq
(c⁄° 
vec2
 
a
);

82 
vec2_n‹mÆize
(
vec2
 
a
);

83 
vec2_ønd
(
vec2
 
ªs
);

86 
vec3_£t
(
vec3
 
a
, 
x
, 
y
, 
z
);

87 
vec3_c›y
(c⁄° 
vec3
 
§c
, vec3 
d°
);

88 
boﬁ
 
vec3_eq
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
);

89 
vec3_cmp
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, 
ivec3
 
cmp
);

90 
vec3_dŸ
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
);

91 
vec3_Ànsq
(c⁄° 
vec3
 
a
);

92 
vec3_Àn
(c⁄° 
vec3
 
a
);

93 
vec3_di°sq
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
);

94 
vec3_add
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, vec3 
de°
);

95 
vec3_sub
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, vec3 
de°
);

96 
vec3_n‹mÆize
(
vec3
 
a
);

97 
vec3_sˇÀ
(
vec3
 
a
, 
vÆ
);

98 
vec3_¸oss
(c⁄° 
vec3
 
a
, c⁄° vec3 
b
, vec3 
de°
);

99 
vec3_¥oj
(c⁄° 
vec3
 
v
, c⁄° vec3 
ªÁxis
, vec3 
de°
);

100 
vec3_‹th
(c⁄° 
vec3
 
v
, c⁄° vec3 
ªÁxis
, vec3 
de°
);

101 
vec3_avg
(
vec3
 
ªsu…
, 
n
, ...);

102 
vec3_wavg
(
vec3
 
ªsu…
, 
n
, ...);

103 
vec3_œvg
(
vec3
 
ªsu…
, 
n
, 
vec
 *
li°
);

104 
vec3_lwavg
(
vec3
 
ªsu…
, 
n
, 
vec
 *
li°
, *
weight
);

105 
vec3_ønd
(
vec3
 
ªs
);

106 
vec3_¥öt
(c⁄° 
vec3
 
a
);

109 
vec4_£t
(
vec4
 
a
, 
x
, 
y
, 
z
, 
w
);

110 
vec4_c›y
(c⁄° 
vec4
 
§c
, vec4 
d°
);

111 
vec4_add
(c⁄° 
vec4
 
a
, c⁄° vec4 
b
, vec4 
de°
);

112 
vec4_sub
(c⁄° 
vec4
 
a
, c⁄° vec4 
b
, vec4 
de°
);

113 
vec4_dŸ
(c⁄° 
vec4
 
a
, c⁄° vec4 
b
);

114 
vec4_Ànsq
(c⁄° 
vec4
 
a
);

115 
vec4_n‹mÆize
(
vec4
 
a
);

116 
vec4_sˇÀ
(
vec4
 
a
, c⁄° 
sˇÀ
);

117 
vec4_¥oj
(c⁄° 
vec4
 
v
, c⁄° vec4 
ªÁxis
, vec4 
de°
);

118 
vec4_avg
(
vec4
 
ªsu…
, 
n
, ...);

119 
vec4_‹th
(c⁄° 
vec4
 
v
, c⁄° vec4 
ªÁxis
, vec4 
de°
);

120 
vec4_swizzÀ
(
vec4
 
a
, 
x
, 
y
, 
z
, 
w
);

121 
vec4_¥öt
(
vec4
 
a
);

125 (*
qu©îni⁄_c›y
)(c⁄° 
qu©îni⁄
 
§c
, qu©îni⁄ 
d°
);

126 (*
qu©îni⁄_dŸ
)(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
);

127 (*
qu©îni⁄_add
)(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
);

128 (*
qu©îni⁄_sub
)(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
);

129 (*
qu©îni⁄_n‹mÆize
)(
qu©îni⁄
 
a
);

130 (*
qu©îni⁄_Ànsq
)(c⁄° 
qu©îni⁄
 
a
);

132 
	`qu©îni⁄_£t
(
qu©îni⁄
 
a
, 
w
, 
x
, 
y
, 
z
);

133 
	`qu©îni⁄_£t_rŸ©i⁄
(
qu©îni⁄
 
a
, 
™gÀ
, 
vec3
 
axis
);

134 
	`qu©îni⁄_idítôy
(
qu©îni⁄
 
a
);

135 
	`qu©îni⁄_rŸ©e
(
qu©îni⁄
 
a
, 
™gÀ
, 
vec3
 
axis
);

136 
	`qu©îni⁄_n‹m
(c⁄° 
qu©îni⁄
 
a
);

137 
	`qu©îni⁄_c⁄jug©e
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
);

138 
	`qu©îni⁄_övî£
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
);

139 
	`qu©îni⁄_ªÆ
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
);

140 
	`qu©îni⁄_imagö¨y
(c⁄° 
qu©îni⁄
 
a
, qu©îni⁄ 
de°
);

141 
	`qu©îni⁄_mu…
(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
);

142 
	`qu©îni⁄_div
(c⁄° 
qu©îni⁄
 
a
, c⁄° qu©îni⁄ 
b
, qu©îni⁄ 
de°
);

143 
	`qu©îni⁄_vecRŸ©e
(
qu©îni⁄
 
a
, 
vec4
 
b
);

144 
	`qu©îni⁄_‹õ¡
(
qu©îni⁄
 
a
, 
vec3
 
up
, vec3 
fwd
);

	@src/util/noise.c

10 
	~<°dlib.h
>

11 
	~<m©h.h
>

12 
	~<Êﬂt.h
>

14 
	~"utû/øndom.h
"

15 
	~"utû/m©h/sˇœr.h
"

17 
	~"noi£.h
"

19 
	#DOT2
(
a
,
b
,
x
,
y
Ë(◊)*(x)+(b)*(y))

	)

20 
	#DOT3
(
a
,
b
,
c
,
x
,
y
,
z
Ë(◊)*(x)+(b)*(y)+(c)*(z))

	)

22 
	gDEFAULT_GRAD
[16 * 3] =

43 
	gGRAD_MASK
 = 0x0F;

44 *
	gGRAD
 = 
DEFAULT_GRAD
;

46 
	g£ed
 = 55;

51 
	$noi£_öô
(
s
)

53 
£ed
 = 
s
;

54 
GRAD
 = 
	`mÆloc
(() * 3 *1024);

55 
GRAD_MASK
 = 0x03FF;

57 
i
;

58 
i
 = 0; i < 1024; i++)

60 
z
 = (
	`øndom_øndom
() - 0.5f) * 2.0f;

61 
r
 = 
	`sqπf
(1.0‡- 
z
*z);

62 
t
 = 4.0‡* 
PI
 * (
	`øndom_øndom
() * 0.5f);

63 
x
 = 
r
 * 
	`cosf
(
t
);

64 
y
 = 
r
 * 
	`söf
(
t
);

65 
GRAD
[
i
 * 3 + 0] = 
x
;

66 
GRAD
[
i
 * 3 + 1] = 
y
;

67 
GRAD
[
i
 * 3 + 2] = 
z
;

69 
	}
}

77 
ölöe
 
	$ÀΩ
(
t
, 
a
, 
b
)

79  (
a
+
t
*(
b
-a));

80 
	}
}

87 
ölöe
 
	$s_curve
(
t
)

89  (
t
*t*t*(10+t*(-15+(6*t))));

90 
	}
}

95 
ölöe
 
	$noi£1_øndom
(
x
)

97 
x
 +
£ed
;

98 
x
 = (x<<13) ^ x;

99 
t
 = (1.0‡- ((
x
*(x*x*15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);

100  ()
t
;

101 
	}
}

108 
	$noi£1_vÆue
(
x
)

110 
Êx
 = 
	`Êo‹
(
x
);

111 
dx0
 = 
	`noi£1_øndom
(
Êx
);

112 
dx1
 = 
	`noi£1_øndom
(
Êx
 + 1);

113  
	`ÀΩ
(
x
-
Êx
, 
dx0
, 
dx1
);

114 
	}
}

119 
	$noi£1_≥æö
(
x
)

121 
Êx
 = 
	`Êo‹
(
x
);

122 
dx0
 = 
	`noi£1_øndom
(
Êx
);

123 
dx1
 = 
	`noi£1_øndom
(
Êx
 + 1);

125 
u
 = (
x
-
Êx
Ë* 
dx0
;

126 
v
 = ((
x
-
Êx
)-1Ë* 
dx1
;

127  
	`ÀΩ
(
	`s_curve
(
x
-
Êx
),
u
,
v
);

128 
	}
}

135 
	$noi£1_‰acPîlö
(
x
, 
n
)

137 
sum
 = 0;

138 
i
;

139 
i
 = 1<<
n
; i>0; i = i>>1){

140 
sum
 +(
	`noi£1_≥æö
(
x
 * 
i
)/i);

142  
sum
;

143 
	}
}

149 
	$noi£1_ãrbuÀn˚
(
x
, 
n
)

151 
sum
 = 0;

152 
i
;

153 
i
 = 1<<
n
; i>0; i = i>>1)

154 
sum
 +
	`Ábs
(
	`noi£1_≥æö
(
x
*
i
)/i);

155  
sum
 * 2.0f - 1.0f;

156 
	}
}

169 
ölöe
 
	$noi£2_øndom
(
x
, 
y
)

171 
x
 +
£ed
;

172 
y
 +
£ed
;

173 
x
 +
y
 * 71;

174 
x
 = (x >> 13) ^ x;

175  (1.0‡- ((
x
 * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);

176 
	}
}

181 
	$noi£2_øndGød
(
x
, 
y
, *
xo
, *
yo
)

183 
x
 +
£ed
;

184 
y
 +
£ed
;

185 
x1
 = 
x
 * 17 + 
y
 * 89;

186 
y1
 = 
x
 * 31 + 
y
 * 71;

187 
x1
 = ((x1 >> 17) ^ x1) & 0x7fffffff;

188 
y1
 = ((y1 >> 17) ^ y1) & 0x7fffffff;

189 *
gød
 = &
GRAD
[(
x1
 * 3Ë& 
GRAD_MASK
];

190 *
xo
 = 
gød
[0];

191 *
yo
 = 
gød
[1];

192 
	}
}

198 
	$noi£2_vÆue
(
x
, 
y
)

200 
Êx
 = 
	`Êo‹
(
x
);

201 
Êy
 = 
	`Êo‹
(
y
);

202 
v0
 = 
	`noi£2_øndom
(
Êx
, 
Êy
);

203 
v1
 = 
	`noi£2_øndom
(
Êx
+1,
Êy
);

204 
v2
 = 
	`noi£2_øndom
(
Êx
+1,
Êy
+1);

205 
v3
 = 
	`noi£2_øndom
(
Êx
,
Êy
+1);

207 
px0
 = 
	`ÀΩ
(
	`s_curve
(
x
-
Êx
),
v0
,
v1
);

208 
px1
 = 
	`ÀΩ
(
	`s_curve
(
x
-
Êx
),
v3
,
v2
);

209  
	`ÀΩ
(
	`s_curve
(
y
-
Êy
),
px0
,
px1
);

210 
	}
}

215 
	$noi£2_≥æö
(
x
, 
y
)

217 
Êx
 = 
	`Êo‹
(
x
);

218 
Êy
 = 
	`Êo‹
(
y
);

219 
‰x
 = 
x
-
Êx
;

220 
‰y
 = 
y
-
Êy
;

223 
vx
, 
vy
;

224 
s
, 
t
, 
u
, 
v
;

225 
	`noi£2_øndGød
(
Êx
, 
Êy
, &
vx
, &
vy
);

226 
s
 = 
	`DOT2
(
vx
, 
vy
, 
‰x
, 
‰y
);

228 
	`noi£2_øndGød
(
Êx
+1, 
Êy
, &
vx
, &
vy
);

229 
t
 = 
	`DOT2
(
vx
, 
vy
, 
‰x
 - 1.0f, 
‰y
);

231 
	`noi£2_øndGød
(
Êx
+1, 
Êy
+1, &
vx
, &
vy
);

232 
u
 = 
	`DOT2
(
vx
, 
vy
, 
‰x
 - 1.0f, 
‰y
 - 1.0f);

234 
	`noi£2_øndGød
(
Êx
, 
Êy
+1, &
vx
, &
vy
);

235 
v
 = 
	`DOT2
(
vx
, 
vy
, 
‰x
, 
‰y
 - 1.0f);

237 
px0
 = 
	`ÀΩ
(
	`s_curve
(
‰x
), 
s
, 
t
);

238 
px1
 = 
	`ÀΩ
(
	`s_curve
(
‰x
), 
v
, 
u
);

240  
	`ÀΩ
(
	`s_curve
(
‰y
), 
px0
, 
px1
);

241 
	}
}

246 
	$noi£2_‰acPîlö
(
x
, 
y
, 
n
)

248 
sum
 = 0;

249 
i
;

250 
i
 = 1<<
n
; i>0; i = i>>1){

251 
sum
 +(
	`noi£2_≥æö
(
x
 * 
i
, 
y
 * i)/i);

253  
sum
;

254 
	}
}

259 
	$noi£2_ãrbuÀn˚
(
x
, 
y
, 
n
)

261 
sum
 = 0;

262 
i
;

263 
i
 = 1<<
n
; i>0; i = i>>1)

264 
sum
 +
	`Ábs
(
	`noi£2_≥æö
(
x
 * 
i
, 
y
 * i)/(()i));

265  
sum
 * 2.0f - 1.0f;

266 
	}
}

274 
	$noi£3_øndGød
(
x
, 
y
, 
z
, *
xo
, *
yo
, *
zo
)

276 
x
 +
£ed
;

277 
y
 +
£ed
;

278 
z
 +
£ed
;

279 
x1
 = 
x
 * 71 + 
y
 * 17 + 
z
 * 53;

280 
x1
 = ((x1 >> 17) ^ x1) & 0x7fffffff;

281 *
gød
 = &
GRAD
[(
x1
 * 3Ë& 
GRAD_MASK
];

282 *
xo
 = 
gød
[0];

283 *
yo
 = 
gød
[1];

284 *
zo
 = 
gød
[2];

285 
	}
}

287 
	$noi£3_≥æö
(
x
, 
y
, 
z
)

289 
Êx
 = 
	`Êo‹
(
x
);

290 
Êy
 = 
	`Êo‹
(
y
);

291 
Êz
 = 
	`Êo‹
(
z
);

292 
‰x
 = 
x
-
Êx
;

293 
‰y
 = 
y
-
Êy
;

294 
‰z
 = 
z
-
Êz
;

296 
vx
, 
vy
, 
vz
;

297 
o
, 
p
, 
q
, 
r
, 
s
, 
t
, 
u
, 
v
;

298 
	`noi£3_øndGød
(
Êx
, 
Êy
, 
Êz
, &
vx
, &
vy
, &
vz
);

299 
o
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
, 
‰y
, 
‰z
);

301 
	`noi£3_øndGød
(
Êx
+1, 
Êy
, 
Êz
, &
vx
, &
vy
, &
vz
);

302 
p
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
 - 1.0f, 
‰y
, 
‰z
);

304 
	`noi£3_øndGød
(
Êx
+1, 
Êy
+1, 
Êz
, &
vx
, &
vy
, &
vz
);

305 
q
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
 - 1.0f, 
‰y
 - 1.0f, 
‰z
);

307 
	`noi£3_øndGød
(
Êx
, 
Êy
+1, 
Êz
, &
vx
, &
vy
, &
vz
);

308 
r
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
, 
‰y
 - 1.0f, 
‰z
);

310 
	`noi£3_øndGød
(
Êx
, 
Êy
, 
Êz
+1, &
vx
, &
vy
, &
vz
);

311 
s
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
, 
‰y
, 
‰z
 - 1.0f);

313 
	`noi£3_øndGød
(
Êx
+1, 
Êy
, 
Êz
+1, &
vx
, &
vy
, &
vz
);

314 
t
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
 - 1.0f, 
‰y
, 
‰z
 - 1.0f);

316 
	`noi£3_øndGød
(
Êx
+1, 
Êy
+1, 
Êz
+1, &
vx
, &
vy
, &
vz
);

317 
u
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
 - 1.0f, 
‰y
 - 1.0f, 
‰z
 - 1.0f);

319 
	`noi£3_øndGød
(
Êx
, 
Êy
+1, 
Êz
+1, &
vx
, &
vy
, &
vz
);

320 
v
 = 
	`DOT3
(
vx
, 
vy
, 
vz
, 
‰x
, 
‰y
 - 1.0f, 
‰z
 - 1.0f);

322 
px0
 = 
	`ÀΩ
(
	`s_curve
(
‰x
), 
s
, 
t
);

323 
px1
 = 
	`ÀΩ
(
	`s_curve
(
‰x
), 
v
, 
u
);

324 
px2
 = 
	`ÀΩ
(
	`s_curve
(
‰x
), 
o
, 
p
);

325 
px3
 = 
	`ÀΩ
(
	`s_curve
(
‰x
), 
r
, 
q
);

327 
py0
 = 
	`ÀΩ
(
	`s_curve
(
‰y
), 
px0
, 
px1
);

328 
py1
 = 
	`ÀΩ
(
	`s_curve
(
‰y
), 
px2
, 
px3
);

331  
	`ÀΩ
(
	`s_curve
(
‰z
), 
py1
, 
py0
);

332 
	}
}

337 
	$noi£3_‰acPîlö
(
x
, 
y
, 
z
, 
n
)

339 
sum
 = 0;

340 
i
;

341 
i
 = 1<<
n
; i>0; i = i>>1){

342 
sum
 +(
	`noi£3_≥æö
(
x
 * 
i
, 
y
 * i, 
z
 * i)/i);

344  
sum
;

345 
	}
}

350 
	$noi£3_ãrbuÀn˚
(
x
, 
y
, 
z
, 
n
)

352 
sum
 = 0;

353 
i
;

354 
i
 = 1<<
n
; i>0; i = i>>1)

355 
sum
 +
	`Ábs
(
	`noi£3_≥æö
(
x
 * 
i
, 
y
 * i, 
z
 * i)/(()i));

356  
sum
 * 2.0f - 1.0f;

357 
	}
}

	@src/util/noise.h

9 #i‚de‡
_NOISE_H


10 
	#_NOISE_H


	)

12 
noi£_öô
(
s
);

13 
noi£1_øndom
(
x
);

14 
noi£1_vÆue
(
x
);

15 
noi£1_≥æö
(
x
);

16 
noi£1_‰acPîlö
(
x
, 
n
);

17 
noi£1_ãrbuÀn˚
(
x
, 
n
);

19 
noi£2_øndom
(
x
, 
y
);

20 
noi£2_vÆue
(
x
, 
y
);

21 
noi£2_≥æö
(
x
, 
y
);

22 
noi£2_‰acPîlö
(
x
, 
y
, 
n
);

23 
noi£2_ãrbuÀn˚
(
x
, 
y
, 
n
);

25 
noi£3_øndom
(
x
, 
y
, 
z
);

26 
noi£3_vÆue
(
x
, 
y
, 
z
);

27 
noi£3_≥æö
(
x
, 
y
, 
z
);

28 
noi£3_‰acPîlö
(
x
, 
y
, 
z
, 
n
);

29 
noi£3_ãrbuÀn˚
(
x
, 
y
, 
z
, 
n
);

	@src/util/random.c

8 
	~<°dlib.h
>

9 
	~<°döt.h
>

10 
	~<m©h.h
>

12 
	~"utû/m©h/c⁄°.h
"

13 
	~"øndom.h
"

16 
	#MT_LEN
 624

	)

17 
	#MT_GENPARAM
 397

	)

18 
	#MT_DEFAULTSEED
 5489

	)

19 
	#MT_GENODDMASK
 0x9908b0df

	)

20 
	#MT_INIT_CONST
 0x6c078965

	)

21 
	#MT_TEMPER_CONST1
 0x9d2c5680

	)

22 
	#MT_TEMPER_CONST2
 0xefc60000

	)

23 
	#MT_32BITMASK
 0xffffffff

	)

24 
	#MT_HIGHBIT
 0x80000000

	)

25 
	#MT_LOWBITS
 0x7fffffff

	)

27 
uöt32_t
 
	gMT
[
MT_LEN
];

28 
	gMT_ödex
 = 
MT_LEN
 + 1;

33 
	$øndom_öô
(
uöt32_t
 
£ed
)

35 
MT
[0] = 
£ed
;

37 
i
;

38 
i
 = 1; i < 
MT_LEN
; i++)

40 
MT
[
i
] = (
MT_INIT_CONST
 * (MT[ò-1] ^ ((MT[ò- 1] >> 30Ë+ i))Ë& 
MT_32BITMASK
;

42 
	}
}

47 
	$gíî©e_√w_MT_vÆues
()

49 
uöt32_t
 
GENMASK
[] = {0, 
MT_GENODDMASK
};

51 
uöt32_t
 
y
;

52 
i
;

53 
i
 = 0; i < 
MT_LEN
 - 
MT_GENPARAM
; i++)

55 
y
 = (
MT
[
i
] & 
MT_HIGHBIT
Ë| (MT[i+1] & 
MT_LOWBITS
);

56 
MT
[
i
] = MT[ò+ 
MT_GENPARAM
] ^ (
y
 >> 1Ë^ (
GENMASK
[y & 0x1]);

59 ;
i
 < 
MT_LEN
 - 1; i++)

61 
y
 = (
MT
[
i
] & 
MT_HIGHBIT
Ë| (MT[i+1] & 
MT_LOWBITS
);

62 
MT
[
i
] = MT[ò+ 
MT_GENPARAM
 - 
MT_LEN
] ^ (
y
 >> 1Ë^ (
GENMASK
[y & 0x1]);

64 
y
 = (
MT
[
MT_LEN
 - 1] & 
MT_HIGHBIT
Ë| (MT[0] & 
MT_LOWBITS
);

65 
MT
[
MT_LEN
 - 1] = MT[
MT_GENPARAM
 - 1] ^ (
y
 >> 1Ë^ (
GENMASK
[y & 0x1]);

66 
	}
}

72 
uöt32_t
 
	$øndom_öt
()

74 if(
MT_ödex
 >
MT_LEN
)

76 if(
MT_ödex
 =
MT_LEN
 + 1)

78 
	`øndom_öô
(
MT_DEFAULTSEED
);

81 
	`gíî©e_√w_MT_vÆues
();

82 
MT_ödex
 = 0;

84 
uöt32_t
 
y
 = 
MT
[
MT_ödex
];

85 
MT_ödex
++;

87 
y
 ^= (y >> 11);

88 
y
 ^(y << 7Ë& 
MT_TEMPER_CONST1
;

89 
y
 ^(y << 15Ë& 
MT_TEMPER_CONST2
;

90 
y
 ^= (y >> 18);

91  
y
;

92 
	}
}

97 
uöt32_t
 
	$øndom_bñow
(
uöt32_t
 
max
)

99  
	`Êo‹f
(
	`øndom_øndom
(Ë* 
max
);

100 
	}
}

105 
uöt32_t
 
	$øndom_ønge
(
uöt32_t
 
mö
, uöt32_à
max
)

107  
mö
 + 
	`øndom_bñow
(
max
 - min);

108 
	}
}

113 
	$øndom_øndom
()

115  (((Ë
	`øndom_öt
()Ë* (1.0‡/ (Ë
UINT32_MAX
));

116 
	}
}

121 
	$øndom_unif‹m
(
mö
, 
max
)

123  
mö
 + ((
max
 - möË* 
	`øndom_øndom
());

124 
	}
}

133 
	$øndom_gauss
(
mu
, 
sigma
)

135 
x2pi
 = 
	`øndom_øndom
(Ë* 
TWOPI
;

136 
g2ød
 = 
	`sqπ
(-2.0‡* 
	`log
(1.0‡- 
	`øndom_øndom
()));

137 
z
 = 
	`cos
(
x2pi
Ë* 
g2ød
;

138  
mu
 + (
z
 * 
sigma
);

139 
	}
}

	@src/util/random.h

8 #i‚de‡
_RANDOM_H


9 
	#_RANDOM_H


	)

11 
	~<°döt.h
>

13 
øndom_öô
(
uöt32_t
 
£ed
);

14 
uöt32_t
 
øndom_öt
();

15 
uöt32_t
 
øndom_bñow
(uöt32_à
max
);

16 
uöt32_t
 
øndom_ønge
(uöt32_à
mö
, uöt32_à
max
);

17 
øndom_øndom
();

18 
øndom_unif‹m
(
mö
, 
max
);

19 
øndom_gauss
(
mu
, 
sigma
);

	@src/util/script/luaapi.c

9 
	~<°ddef.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<°döt.h
>

13 
	~<°dboﬁ.h
>

14 
	~<°rög.h
>

16 
	~<lua.h
>

17 
	~<luÆib.h
>

18 
	~<œuxlib.h
>

20 
	~"luØpi.h
"

22 
	#BUF_SZ
 512

	)

24 
	gl_memsz
 = 0;

26 
	sl_ªad°©e


28 
size_t
 
	mbufsz
;

29 *
	mbuf
;

30 
FILE
 *
	mfûe
;

33 *
	$luØpi_Æloc
(*
ud
, *
±r
, 
size_t
 
osize
, size_à
nsize
)

35 (Ë
ud
;

36 
l_memsz
 +(
nsize
 - 
osize
);

38 if(
nsize
 == 0)

40 
	`‰ì
(
±r
);

41  
NULL
;

43  
	`ªÆloc
(
±r
, 
nsize
);

44 
	}
}

46 c⁄° *
	$luØpi_ªadfûe
(
lua_Sèã
 *
l
, *
d©a
, 
size_t
 *
size
)

48 
l_ªad°©e
 *
°©e
 = (l_ªad°©e*)
d©a
;

49 *
size
 = 
	`‰ód
(
°©e
->
buf
, (), sèã->
bufsz
, sèã->
fûe
);

50  
°©e
->
buf
;

51 
	}
}

53 
	$luØpi_∑nic
(
lua_Sèã
 *
l
)

55 
lua_Debug
 
¨
;

56 
	`lua_gë°ack
(
l
, 0, &
¨
);

57 
	`lua_gëöfo
(
l
, ">nSl", &
¨
);

58 
	`¥ötf
("Lu®∑nic: %s:%d, %s\n", 
	`lua_to°rög
(
l
, 
	`lua_gët›
÷)), 
¨
.
cuºíéöe
,ár.
sour˚
);

60 
	}
}

63 
	$luØpi_›ílibs
(
lua_Sèã
 *
l
)

65 #ifde‡
_WIN32


66 
	`luaL_›ílibs
(
l
);

69 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_ba£
);

70 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_èbÀ
);

71 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_os
);

72 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_°rög
);

73 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_m©h
);

74 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_∑ckage
);

75 
	`lua_pushcfun˘i⁄
(
l
, 
lua›í_io
);

76 
	`lua_ˇŒ
(
l
, 0, 0);

77 
	`lua_ˇŒ
(
l
, 0, 0);

78 
	`lua_ˇŒ
(
l
, 0, 0);

79 
	`lua_ˇŒ
(
l
, 0, 0);

80 
	`lua_ˇŒ
(
l
, 0, 0);

81 
	`lua_ˇŒ
(
l
, 0, 0);

82 
	`lua_ˇŒ
(
l
, 0, 0);

84 
	}
}

86 
	$luØpi_lﬂdfûe
(
lua_Sèã
 *
l
, *
fûím
, *
chunknm
)

88 
buf
[
BUF_SZ
];

89 
FILE
 *
fûe
 = 
	`f›í
(
fûím
, "rb");

90 
l_ªad°©e
 
r°©e
 = {
BUF_SZ
, 
buf
, 
fûe
};

92 if(
fûe
)

95 #i‡
LUA_VERSION_NUM
 == 501

96 
îr
 = 
	`lua_lﬂd
(
l
, 
luØpi_ªadfûe
, &
r°©e
, 
chunknm
);

97 #ñi‡
LUA_VERSION_NUM
 == 502

98 
îr
 = 
	`lua_lﬂd
(
l
, 
luØpi_ªadfûe
, &
r°©e
, 
chunknm
, "bt");

100 #îr‹ 
Unknown
 
‹
 
unsuµ‹ãd
 
Lua
 
	`di°ributi⁄
 (
Mu°
 
be
 
v5
.1 or v5.2)

103 if(
îr
)

105 
	`¥ötf
("Lu®lﬂdÉº‹: %s\n", 
fûím
);

106 
	`exô
(-1);

108 
	`f˛o£
(
fûe
);

111 
	`¥ötf
("Lu®fûênŸ found: %s\n", 
fûím
);

112 
	`exô
(-1);

114 
	}
}

116 
	$luØpi_ªgi°î
(
lua_Sèã
 *
l
, c⁄° *
≠i_nm
, 
≠i_t
 *
≠i
)

118 
i
 = 0;

119 
	`lua_√wèbÀ
(
l
);

120 
èbÀödex
 = 
	`lua_gët›
(
l
);

122 
≠i_func
 *
funcs
 = 
≠i
->funcs;

123 
funcs
 && funcs->
«me
)

125 
	`lua_push°rög
(
l
, 
funcs
->
«me
);

126 
	`lua_pushcfun˘i⁄
(
l
, 
funcs
->
func
);

127 
	`lua_£âabÀ
(
l
, 
èbÀödex
);

128 
funcs
++;

131 
≠i_c⁄°
 *
c⁄°s
 = 
≠i
->consts;

132 
c⁄°s
 && c⁄°s->
«me
)

134 
	`lua_push°rög
(
l
, 
c⁄°s
->
«me
);

135 
c⁄°s
->
lua_ty≥
)

137 
LUA_TNUMBER
:

138 
	`lua_pushnumbî
(
l
, 
c⁄°s
->
vÆ
);

140 
LUA_TBOOLEAN
:

141 
	`lua_pushboﬁón
(
l
, (
boﬁ
Ë
c⁄°s
->
vÆ
);

143 
LUA_TSTRING
:

144 
	`lua_push°rög
(
l
, (c⁄° *Ë
c⁄°s
->
vÆ
);

146 
LUA_TUSERDATA
:

147 
LUA_TLIGHTUSERDATA
:

148 
	`lua_pushlightu£rd©a
(
l
, (*Ë
c⁄°s
->
vÆ
);

151 
	`lua_p›
(
l
, 1);

154 
	`lua_£âabÀ
(
l
, 
èbÀödex
);

155 
c⁄°s
++;

157 
	`lua_£tglobÆ
(
l
, 
≠i_nm
);

158 
	}
}

	@src/util/script/luaapi.h

9 #i‚de‡
_LUA_API_H


10 
	#_LUA_API_H


	)

12 
	~<lua.h
>

13 
	~<°döt.h
>

15 
	gluaL_Reg
;

16 
	glua_Sèã
;

18 
	s≠i_func


20 *
	m«me
;

21 (*
	mfunc
)(
lua_Sèã
 *
	ms
);

22 } 
	t≠i_func
;

24 
	s≠i_c⁄°


26 *
	m«me
;

27 
	mlua_ty≥
;

28 
uöt64_t
 
	mvÆ
;

29 } 
	t≠i_c⁄°
;

31 
	s≠i_t
 {

32 
≠i_func
 *
	mfuncs
;

33 
≠i_c⁄°
 *
	mc⁄°s
;

34 } 
	t≠i_t
;

36 
	#luØpi_£tc⁄°
(
l
, 
«me
Ë{
	`lua_pushnumbî
÷,Çame); 
	`lua_£tglobÆ
÷, #«me);}

	)

38 *
luØpi_Æloc
(*
ud
, *
±r
, 
size_t
 
osize
, size_à
nsize
);

39 c⁄° *
luØpi_ªadfûe
(
lua_Sèã
 *
l
, *
d©a
, 
size_t
 *
size
);

40 
luØpi_∑nic
(
lua_Sèã
 *
l
);

41 
luØpi_›ílibs
(
lua_Sèã
 *
l
);

42 
luØpi_lﬂdfûe
(
lua_Sèã
 *
l
, *
«me
, *
chunknm
);

44 
luØpi_ªgi°î
(
lua_Sèã
 *
l
, c⁄° *
nm
, 
≠i_t
 *
funcs
);

	@src/util/str.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<limôs.h
>

14 
	~"°r.h
"

16 
	#ROUND_TO_NEAREST_32
(
a
Ë(((◊Ë/ 32Ë+ 1Ë* 32)

	)

17 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

24 
	$°r_öô
(
°r
 *
s
, c⁄° *
d©a
)

26 if(
d©a
)

28 
s
->
Àn
 = 
	`°æí
(
d©a
);

29 
s
->
max
 = 
	`ROUND_TO_NEAREST_32
(s->
Àn
+1);

30 
s
->
°r
 = 
	`mÆloc
(s->
max
);

31 
	`mem˝y
(
s
->
°r
, 
d©a
, s->
Àn
 + 1);

34 
s
->
Àn
 = 0;

35 
s
->
max
 = 0;

36 
s
->
°r
 = 
NULL
;

38 
	}
}

44 
°r
 *
	$°r_˛⁄e
(
°r
 *
§c
)

46 
°r
 *
d°
 = 
	`mÆloc
((str));

47 
d°
->
Àn
 = 
§c
->len;

48 
d°
->
max
 = 
§c
->max;

49 
d°
->
°r
 = 
	`mÆloc
(d°->
max
);

50 
	`mem˝y
(
d°
->
°r
, 
§c
->°r, d°->
Àn
 + 1);

51  
d°
;

52 
	}
}

59 
	$°r_ª£t
(
°r
 *
s
, c⁄° *
d©a
)

61 
	`°r_föÆize
(
s
);

62 
	`°r_öô
(
s
, 
d©a
);

63 
	}
}

70 
	$°r_föÆize
(
°r
 *
s
)

72 if(
s
->
°r
)

74 
	`‰ì
(
s
->
°r
);

77 
s
->
Àn
 = 0;

78 
s
->
max
 = 0;

79 
s
->
°r
 = 
NULL
;

80 
	}
}

85 
	$°r_Àn
(
°r
 *
s
)

87  
s
->
Àn
;

88 
	}
}

93 c⁄° * 
	$°r_c°r
(
°r
 *
s
)

95  
s
->
°r
;

96 
	}
}

101 
	$°r_föd
(
°r
 *
s
, så *
b
)

103 
ªt
 = -1;

105 if(!
s
 || !
b
 || s->
Àn
 < b->len)

108 
i
;

109 
j
;

110 
i
 = 0; i < 
s
->
Àn
; i++)

112 
j
 = 0; j < 
b
->
Àn
; j++)

114 if(
s
->
°r
[
i
+
j
] !
b
->str[j])

119 if(
j
 =
b
->
Àn
)

121 
ªt
 = 
i
;

125  
ªt
;

126 
	}
}

133 
	$°r_föd_c°r
(
°r
 *
s
, c⁄° *
b
)

135 
bÀn
 = 
	`°æí
(
b
);

136 
°r
 
£¨ch
 = {
bÀn
, bÀn, (*)
b
};

137  
	`°r_föd
(
s
, &
£¨ch
);

138 
	}
}

146 
boﬁ
 
	$°r_°¨tswôh
(
°r
 *
s
, så *
b
)

148 
boﬁ
 
ªt
 = 
åue
;

150 if(!
s
 || !
b
 || s->
Àn
 < b->len)

151  
Ál£
;

153 
i
;

154 
i
 = 0; i <
b
->
Àn
; i++)

156 if(
s
->
°r
[
i
] !
b
->str[i])

158 
ªt
 = 
Ál£
;

162  
ªt
;

163 
	}
}

171 
boﬁ
 
	$°r_ídswôh
(
°r
 *
s
, så *
b
)

173 
boﬁ
 
ªt
 = 
åue
;

175 if(!
s
 || !
b
 || s->
Àn
 < b->len)

176  
Ál£
;

178 
i
;

179 
i
 = 1; i <
b
->
Àn
; i++)

181 if(
s
->
°r
[s->
Àn
 - 
i
] !
b
->str[b->len - i])

183 
ªt
 = 
Ál£
;

187  
ªt
;

188 
	}
}

195 
boﬁ
 
	$°r_c⁄èös
(
°r
 *
s
, så *
b
)

197  
	`°r_föd
(
s
, 
b
) != -1;

198 
	}
}

203 
	$°r_c⁄ˇt
(
°r
 *
a
, så *
b
)

205 
√wÀn
 = 
a
->
Àn
 + 
b
->len;

206 if(
√wÀn
+1 > 
a
->
max
)

208 
a
->
°r
 = 
	`ªÆloc
◊->°r, 
	`ROUND_TO_NEAREST_32
(
√wÀn
 + 1));

210 
	`°rˇt
(
a
->
°r
, 
b
->str);

211 
	}
}

213 
	$°r_c⁄ˇt_c°r
(
°r
 *
a
, c⁄° *
b
)

215 
√wÀn
 = 
a
->
Àn
 + 
	`°æí
(
b
);

216 
a
->
°r
 = 
	`ªÆloc
◊->°r, 
√wÀn
 + 1);

217 
	`°rˇt
(
a
->
°r
, 
b
);

218 
	}
}

224 
	$sub°r_di°
(
°r
 *
a
, så *
b
, 
i
, 
j
)

226 
co°
 = 0;

227 if(
a
->
°r
[
i
] !a->°r[
j
])

229 
co°
 = 1;

232 if(
a
->
Àn
 - 
i
 <= 0)

234 
co°
 = 
b
->
Àn
 - 
j
;

235 } if(
b
->
Àn
 -
j
 >= 0)

237 
co°
 = 
a
->
Àn
 - 
i
;

240 
d1
 = 
	`sub°r_di°
(
a
, 
b
, 
i
+1, 
j
);

241 
d2
 = 
	`sub°r_di°
(
a
, 
b
, 
i
, 
j
+1);

242 
d3
 = 
	`sub°r_di°
(
a
, 
b
, 
i
+1, 
j
+1);

243 
co°
 +
	`MIN
(MIN(
d1
, 
d2
), 
d3
);

246  
co°
;

247 
	}
}

249 
	$°r_di°
(
°r
 *
a
, så *
b
)

251  
	`sub°r_di°
(
a
, 
b
, 0, 0);

252 
	}
}

264 
	$°r_fûeba£
(*
fûím
, *
buf
)

266 c⁄° *
ext
 = 
	`°rchr
(
fûím
, '.');

267 c⁄° *
£p
 = 
	`°rchr
(
fûím
, '/');

268 if(!
ext
)

270 
ext
 = 
	`°rchr
(
fûím
, '\0');

272 if(!
£p
)

274 
£p
 = 
	`°rchr
(
fûím
, '\\');

275 if(!
£p
)

277 
£p
 = 
fûím
;

280 
	`°∫˝y
(
buf
, 
£p
, (
size_t
)(
ext
-sep));

281 
buf
[(
size_t
)(
ext
-
£p
)+1] = '\0';

282 
	}
}

287 
	$°r_fûìxt
(*
fûíame
, *
buf
)

289 *
p
;

290 i‡((
p
=
	`°rchr
(
fûíame
, '.')))

292 
	`°r˝y
(
buf
, 
p
+1);

295 
buf
[0] = '\0';

297 
	}
}

304 *
	$°r_√wFromFûe
(*
fûím
)

306 
FILE
 *
fûe
 = 
	`f›í
(
fûím
, "r");

307 if(!
fûe
)  0;

309 
	`f£ek
(
fûe
, 0, 
SEEK_END
);

310 
size_t
 
fûe_size
 = 
	`·ñl
(
fûe
);

311 
	`f£ek
(
fûe
, 0, 
SEEK_SET
);

312 *
s
 = 
	`mÆloc
((
fûe_size
) + 1);

313 
	`mem£t
(
s
, 0, 
fûe_size
 + 1);

314 
	`‰ód
(
s
, 
fûe_size
, (), 
fûe
);

315  
s
;

316 
	}
}

	@src/util/str.h

9 #i‚de‡
_STR_H


10 
	#_STR_H


	)

12 
	~<°dboﬁ.h
>

13 
	~<°ddef.h
>

15 
	s°r


17 
	mÀn
;

18 
	mmax
;

19 *
	m°r
;

20 } 
	t°r
;

22 
°r_öô
(
°r
 *
s
, c⁄° *
d©a
);

23 
°r
 *
°r_˛⁄e
(°∏*
§c
);

24 
°r_ª£t
(
°r
 *
s
, c⁄° *
d©a
);

25 
°r_föÆize
(
°r
 *
s
);

26 
°r_Àn
(
°r
 *
s
);

27 c⁄° * 
°r_c°r
(
°r
 *
s
);

28 
°r_föd
(
°r
 *
s
, så *
b
);

29 
°r_föd_c°r
(
°r
 *
s
, c⁄° *
b
);

30 
boﬁ
 
°r_°¨tswôh
(
°r
 *
s
, så *
b
);

31 
boﬁ
 
°r_ídswôh
(
°r
 *
s
, så *
b
);

32 
boﬁ
 
°r_c⁄èös
(
°r
 *
s
, så *
b
);

33 
°r_c⁄ˇt
(
°r
 *
a
, så *
b
);

34 
°r_c⁄ˇt_c°r
(
°r
 *
a
, c⁄° *
b
);

35 
°r_di°
(
°r
 *
a
, så *
b
);

37 
°r_fûeba£
(*
fûím
, *
buf
);

38 
°r_fûìxt
(*
fûíame
, *
buf
);

39 *
°r_√wFromFûe
(*
fûíame
);

	@src/util/struct/iterator.c

8 
	~<°ddef.h
>

10 
	~"ôî©‹.h
"

13 
	$ôî©‹_öô
(
Iãøt‹
 *
i
, *
ôîabÀ
, 
Iãr_func
 *
öc
)

15 
i
->
öc_func
 = 
öc
;

16 
i
->
dec_func
 = 
NULL
;

17 
i
->
ôîabÀ
 = iterable;

18 
i
->
vÆue
 = 
NULL
;

19 
	}
}

21 
	$ôî©‹_£töcfunc
(
Iãøt‹
 *
i
, 
Iãr_func
 *
f
)

23 
i
->
öc_func
 = 
f
;

24 
	}
}

25 
	$ôî©‹_£tdecfunc
(
Iãøt‹
 *
i
, 
Iãr_func
 *
f
)

27 
i
->
dec_func
 = 
f
;

28 
	}
}

30 
	$ôî©‹_£tôîabÀ
(
Iãøt‹
 *
i
, *
v
)

32 
i
->
ôîabÀ
 = 
v
;

33 
	}
}

35 *
	$ôî©‹_√xt
(
Iãøt‹
 *
i
)

37 
i
->
vÆue
 = i->
	`öc_func
(i->
ôîabÀ
, i);

38  
i
->
vÆue
;

39 
	}
}

41 *
	$ôî©‹_vÆue
(
Iãøt‹
 *
i
)

43  
i
->
vÆue
;

44 
	}
}

	@src/util/struct/iterator.h

8 #i‚de‡
_ITTER_H


9 
	#_ITTER_H


	)

11 
	gôî©‹
;

13 *(
	tIãr_func
)(*
	tôîabÀ
, 
	tôî©‹
 *
	ti
);

15 
	sôî©‹


17 
Iãr_func
 *
	möc_func
;

18 
Iãr_func
 *
	mdec_func
;

19 *
	môîabÀ
;

20 *
	mvÆue
;

21 } 
	tIãøt‹
;

24 
ôî©‹_öô
(
Iãøt‹
 *
i
, *
ôîabÀ
, 
Iãr_func
 *
öc
);

25 
ôî©‹_£töcfunc
(
Iãøt‹
 *
i
, 
Iãr_func
 *
f
);

26 
ôî©‹_£tdecfunc
(
Iãøt‹
 *
i
, 
Iãr_func
 *
f
);

27 
ôî©‹_£tôîabÀ
(
Iãøt‹
 *
i
, *
v
);

28 *
ôî©‹_√xt
(
Iãøt‹
 *
i
);

29 *
ôî©‹_vÆue
(
Iãøt‹
 *
i
);

	@src/util/struct/kdtree.c

8 
	~<Æloˇ.h
>

9 
	~<°dboﬁ.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<°rög.h
>

13 
	~<m©h.h
>

15 
	~<Æloˇ.h
>

17 
	~"kdåì.h
"

19 
	#XAXIS
 0

	)

20 
	#YAXIS
 1

	)

21 
	#ZAXIS
 2

	)

23 
	#MALLOC_THRESH
 127

24 

	)

26 
	skdVÆue


28 
	mdi°sq
;

29 
kdnode
 *
	mnode
;

30 } 
	tkdVÆue
;

32 
	skdSórch


34 
	mfound
;

35 
	mmax
;

36 *
	mpoöt
;

37 
kdVÆue
 *
	mli°
;

38 } 
	tkdSórch
;

40 
	skdnode
 {

41 
uöt16_t
 
	mdim
;

42 
uöt16_t
 
	maxis
;

43 *
	mpos
;

44 *
	mvÆ
;

45 
kdnode
 *
	m∑ª¡
;

46 
kdnode
 *
	mchûdªn
[2];

47 } 
	tkdnode
;

49 
di°™˚Sq
(
poöt1
[], 
poöt2
[], 
dim
);

50 
knode_√xtAxis
(
axis
, 
dim
);

51 
knode_ŸhîSide
(
side
);

52 
kdnode_öô
(
kdnode
 *
k
, kdnodê*
∑ª¡
, 
poöt
[], 
dim
, *
vÆ
);

53 
kdnode_föÆize
(
kdnode
 *
n
, (*
vÆ_föÆize
(*)));

54 
kdnode_ö£π
(
kdnode
 *
n
, 
poöt
[], *
vÆ
);

55 
kdnode_˛o£°
(
kdnode
 *
n
, 
poöt
[], 
kdVÆue
 *
vÆ
);

56 
boﬁ
 
åySórchIn£π
(
kdnode
 *
n
, 
kdSórch
 *
s
);

57 
kdnode_˛o£°N
(
kdnode
 *
n
, 
kdSórch
 *
s
);

58 
kdnode
 *
kdnode_√xt
(kdnodê*
n
, kdnodê*
¥ev
);

64 
	$di°™˚Sq
(
poöt1
[], 
poöt2
[], 
dim
)

66 
sqsum
 = 0.0f;

67 
i
;

68 
i
 = 0; i < 
dim
; i++)

70 
sqsum
 +(
poöt1
[
i
] - 
poöt2
[i]) * (point1[i] -Öoint2[i]);

72  
sqsum
;

73 
	}
}

78 
	$knode_√xtAxis
(
axis
, 
dim
)

80 ++
axis
;

81 if(
axis
 >
dim
)

83 
axis
 = 0;

85  
axis
;

86 
	}
}

91 
	$knode_ŸhîSide
(
side
)

93  (
side
 == 0 ? 1 : 0);

94 
	}
}

99 
	$kdnode_öô
(
kdnode
 *
n
, kdnodê*
∑ª¡
, 
poöt
[], 
dim
, *
vÆ
)

101 
n
->
∑ª¡
 =Öarent;

102 
n
->
dim
 = dim;

104 if(
∑ª¡
)

106 
n
->
axis
 = 
	`knode_√xtAxis
(
∑ª¡
->axis,Ö¨ít->
dim
);

109 
n
->
axis
 = 0;

112 
n
->
pos
 = 
	`mÆloc
((Ë* 
dim
);

113 
	`mem˝y
(
n
->
pos
, 
poöt
, (Ë* 
dim
);

114 
n
->
vÆ
 = val;

115 
n
->
chûdªn
[0] = 0;

116 
n
->
chûdªn
[1] = 0;

117 
	}
}

122 
kdnode_föÆize
(
kdnode
 *
n
, (*
	$vÆ_föÆize
(*)))

124 if(
n
){

125 if(
n
->
vÆ
 && 
vÆ_föÆize
){

126 
	`vÆ_föÆize
(
n
->
vÆ
);

128 
	`kdnode_föÆize
(
n
->
chûdªn
[0], 
vÆ_föÆize
);

129 
	`kdnode_föÆize
(
n
->
chûdªn
[1], 
vÆ_föÆize
);

130 
	`‰ì
(
n
->
chûdªn
[0]);

131 
	`‰ì
(
n
->
chûdªn
[1]);

133 
	}
}

138 
	$kdnode_ö£π
(
kdnode
 *
n
, 
poöt
[], *
vÆ
)

140 
side
 = (
poöt
[
n
->
axis
] >Ç->
pos
[n->axis] ? 1 : 0);

141 if(
n
->
chûdªn
[
side
]){

142 
	`kdnode_ö£π
(
n
->
chûdªn
[
side
], 
poöt
, 
vÆ
);

144 
n
->
chûdªn
[
side
] = 
	`mÆloc
((
kdnode
));

145 
	`kdnode_öô
(
n
->
chûdªn
[
side
],Ç, 
poöt
,Ç->
dim
, 
vÆ
);

147 
	}
}

153 
	$kdnode_˛o£°
(
kdnode
 *
n
, 
poöt
[], 
kdVÆue
 *
vÆ
)

155 
side
 = (
poöt
[
n
->
axis
] >Ç->
pos
[n->axis] ? 1 : 0);

156 
node_dsq
 = 
	`di°™˚Sq
(
poöt
, 
n
->
pos
,Ç->
dim
);

157 if(
node_dsq
 < 
vÆ
->
di°sq
 || vÆ->
node
 =
NULL
)

159 
vÆ
->
di°sq
 = 
node_dsq
;

160 
vÆ
->
node
 = 
n
;

163 if(
n
->
chûdªn
[
side
]){

164 
	`kdnode_˛o£°
(
n
->
chûdªn
[
side
], 
poöt
, 
vÆ
);

167 
side
 = 
	`knode_ŸhîSide
(side);

168 if(
n
->
chûdªn
[
side
]){

169 
chûdAxisDi°
 = 
	`Ábs
(
poöt
[
n
->
axis
] -Ç->
pos
[n->axis]);

170 if(
chûdAxisDi°
 <
vÆ
->
di°sq
){

171 
	`kdnode_˛o£°
(
n
->
chûdªn
[
side
], 
poöt
, 
vÆ
);

174 
	}
}

176 
boﬁ
 
	$åySórchIn£π
(
kdnode
 *
n
, 
kdSórch
 *
s
)

178 
boﬁ
 
ªt
 = 
Ál£
;

179 
node_dsq
 = 
	`di°™˚Sq
(
s
->
poöt
, 
n
->
pos
,Ç->
dim
);

181 if(!
s
->
found
)

183 
s
->
li°
[0].
di°sq
 = 
node_dsq
;

184 
s
->
li°
[0].
node
 = 
n
;

185 
s
->
found
++;

186 } if(
s
->
found
 < s->
max
 || 
node_dsq
 < s->
li°
[s->found-1].
di°sq
)

188 
i
;

189 
i
 = 
s
->
found
; i >= 0; i--)

191 if(
i
 =0 || 
node_dsq
 > 
s
->
li°
[i-1].
di°sq
)

193 if(
s
->
found
 < s->
max
)

195 
s
->
found
++;

198 
	`memmove
(&
s
->
li°
[
i
+1], &s->li°[i], (s->
found
 - iË* (
kdVÆue
));

200 
s
->
li°
[
i
].
di°sq
 = 
node_dsq
;

201 
s
->
li°
[
i
].
node
 = 
n
;

202 
ªt
 = 
åue
;

207  
ªt
;

208 
	}
}

210 
	$kdnode_˛o£°N
(
kdnode
 *
n
, 
kdSórch
 *
s
)

212 
side
 = (
s
->
poöt
[
n
->
axis
] >Ç->
pos
[n->axis] ? 1 : 0);

214 
	`åySórchIn£π
(
n
, 
s
);

216 if(
n
->
chûdªn
[
side
]){

217 
	`kdnode_˛o£°N
(
n
->
chûdªn
[
side
], 
s
);

220 
side
 = 
	`knode_ŸhîSide
(side);

221 if(
n
->
chûdªn
[
side
]){

222 
chûdAxisDi°
 = 
	`Ábs
(
s
->
poöt
[
n
->
axis
] -Ç->
pos
[n->axis]);

223 if(
s
->
found
 < s->
max
 || 
chûdAxisDi°
 <s->
li°
[s->max-1].
di°sq
){

224 
	`kdnode_˛o£°N
(
n
->
chûdªn
[
side
], 
s
);

227 
	}
}

232 
	$kdåì_öô
(
kdåì
 *
k
, 
dimísi⁄s
)

234 
k
->
dimísi⁄s
 = dimensions;

235 
k
->
roŸ
 = 0;

236 
	}
}

243 
kdåì_föÆize
(
kdåì
 *
k
, (*
	$vÆ_föÆize
(*)))

245 
	`kdnode_föÆize
(
k
->
roŸ
, 
vÆ_föÆize
);

246 
	`‰ì
(
k
->
roŸ
);

247 
k
->
roŸ
 = 0;

248 
	}
}

253 
	$kdåì_ö£π
(
kdåì
 *
k
, 
poöt
[], *
vÆ
)

255 if(!
k
->
roŸ
){

256 
k
->
roŸ
 = 
	`mÆloc
((
kdnode
));

257 
	`kdnode_öô
(
k
->
roŸ
, 
NULL
, 
poöt
, k->
dimísi⁄s
, 
vÆ
);

259 
	`kdnode_ö£π
(
k
->
roŸ
, 
poöt
, 
vÆ
);

261 
	}
}

267 *
	$kdåì_˛o£°
(
kdåì
 *
k
, 
poöt
[], 
˛o£°
[])

269 if(!
k
 || !k->
roŸ
)

270  
NULL
;

272 
kdVÆue
 
vÆ
 = {-1, 
NULL
};

273 
di°™˚sq
 = 
	`di°™˚Sq
(
poöt
, 
k
->
roŸ
->
pos
, k->
dimísi⁄s
);

274 
	`kdnode_˛o£°
(
k
->
roŸ
, 
poöt
, &
vÆ
);

275 if(
˛o£°
)

277 
	`mem˝y
(
˛o£°
, 
vÆ
.
node
->
pos
, (Ë* 
k
->
dimísi⁄s
);

279  
vÆ
.
node
->val;

280 
	}
}

282 
	$kdåì_˛o£°N
(
kdåì
 *
k
, 
poöt
[], 
n
, **
buf
, *
˛o£°
[])

284 
kdSórch
 
£¨ch
;

285 
£¨ch
.
poöt
 =Öoint;

286 
£¨ch
.
max
 = 
n
;

287 
£¨ch
.
found
 = 0;

289 if(
n
 <= 0)

292 } i‡(
n
 < 
MALLOC_THRESH
)

294 
£¨ch
.
li°
 = 
	`Æloˇ
((
kdVÆue
Ë* 
n
);

297 
£¨ch
.
li°
 = 
	`mÆloc
((
kdVÆue
Ë* 
n
);

300 
	`kdnode_˛o£°N
(
k
->
roŸ
, &
£¨ch
);

302 
i
;

303 
i
 = 0; i < 
£¨ch
.
found
; i++)

305 if(
buf
)

307 
buf
[
i
] = 
£¨ch
.
li°
[i].
node
->
vÆ
;

310 if(
˛o£°
)

312 
˛o£°
[
i
] = 
£¨ch
.
li°
[i].
node
->
pos
;

316 if(
n
 >
MALLOC_THRESH
)

318 
	`‰ì
(
£¨ch
.
li°
);

321  
£¨ch
.
found
;

322 
	}
}

324 
kdåì_ªmoveClo£°
(
kdåì
 *
k
, 
poöt
[], (*
vÆ_föÆize
)(*))

326 
kdVÆue
 
vÆ
 = {-1, 
NULL
};

327 
	`kdnode_˛o£°
(
k
->
roŸ
, 
poöt
, &
vÆ
);

328 if(
vÆ
.
node
)

331 if(
vÆ
.
node
->
∑ª¡
)

333 if(
vÆ
.
node
->
∑ª¡
->
chûdªn
[0] == val.node)

335 
vÆ
.
node
->
∑ª¡
->
chûdªn
[0] = 
NULL
;

336 } if(
vÆ
.
node
->
∑ª¡
->
chûdªn
[1] == val.node)

338 
vÆ
.
node
->
∑ª¡
->
chûdªn
[1] = 
NULL
;

340 } if(
k
->
roŸ
 =
vÆ
.
node
)

342 
k
->
roŸ
 = 
NULL
;

344 
vÆ
.
node
->
∑ª¡
 = 
NULL
;

347 
Iãøt‹
 
ôî
;

348 
	`kdåì_ôî_öô
(
k
, &
ôî
);

349 
ôî
.
vÆue
 = 
vÆ
.
node
;

351 
kdnode
 *
ôînode
;

352 (
ôînode
 = 
	`ôî©‹_√xt
(&
ôî
)))

354 
	`kdåì_ö£π
(
k
, 
ôînode
->
pos
, iã∫ode->
vÆ
);

358 if(
vÆ_föÆize
)

360 
	`vÆ_föÆize
(
vÆ
.
node
->val);

362 
	}
}

368 *
	$kdåì_ôî_√xt
(*
k
, 
Iãøt‹
 *
i
)

370 
kdnode
 *
ªt
 = 
NULL
;

371 if(!
i
->
vÆue
)

373 
ªt
 = ((
kdåì
*)
k
)->
roŸ
;

376 
ªt
 = 
	`kdnode_√xt
((
kdnode
*)
i
->
vÆue
, 
NULL
);

378  
ªt
;

379 
	}
}

381 
kdnode
 *
	$kdnode_√xt
(
kdnode
 *
n
, kdnodê*
¥ev
)

383 
kdnode
 *
ªt
 = 
NULL
;

384 if(
n
)

386 if(!
¥ev
 && 
n
->
chûdªn
[0])

388  
n
->
chûdªn
[0];

389 } if(
¥ev
 !
n
->
chûdªn
[1] &&Ç->children[1])

391  
n
->
chûdªn
[1];

394 
ªt
 = 
	`kdnode_√xt
(
n
->
∑ª¡
,Ç);

397  
ªt
;

398 
	}
}

400 
	$kdåì_ôî_öô
(
kdåì
 *
k
, 
Iãøt‹
 *
i
)

402 
	`as£π
(
k
);

403 
	`as£π
(
i
);

405 
	`ôî©‹_öô
(
i
, 
k
, 
kdåì_ôî_√xt
);

406 
i
->
vÆue
 = 
k
->
roŸ
;

407 
	}
}

409 *
	$kdåì_ôî_vÆue
(
Iãøt‹
 *
i
)

411  ((
kdnode
*)
i
->
vÆue
)->
vÆ
;

412 
	}
}

414 c⁄° *
	$kdåì_ôî_posôi⁄
(
Iãøt‹
 *
i
)

416  ((
kdnode
*)
i
->
vÆue
)->
pos
;

417 
	}
}

426 
	$kdnode_˛o£°2
(
kdnode
 *
n
, 
poöt
[], *
di°sq
, 
Iãøt‹
 *
ô
)

428 
side
 = (
poöt
[
n
->
axis
] >Ç->
pos
[n->axis] ? 1 : 0);

429 
node_dsq
 = 
	`di°™˚Sq
(
poöt
, 
n
->
pos
,Ç->
dim
);

430 if(
node_dsq
 < *
di°sq
 || 
ô
->
ôîabÀ
 =
NULL
)

432 *
di°sq
 = 
node_dsq
;

433 
ô
->
ôîabÀ
 = 
n
;

436 if(
n
->
chûdªn
[
side
]){

437 
	`kdnode_˛o£°2
(
n
->
chûdªn
[
side
], 
poöt
, 
di°sq
, 
ô
);

440 
side
 = 
	`knode_ŸhîSide
(side);

441 if(
n
->
chûdªn
[
side
]){

442 
chûdAxisDi°
 = 
	`Ábs
(
poöt
[
n
->
axis
] -Ç->
pos
[n->axis]);

443 if(
chûdAxisDi°
 < *
di°sq
){

444 
	`kdnode_˛o£°2
(
n
->
chûdªn
[
side
], 
poöt
, 
di°sq
, 
ô
);

447 
	}
}

449 *
	$kdåì_˛o£°2
(
kdåì
 *
k
, 
poöt
[], 
Iãøt‹
 *
ô
)

451 if(!
k
 || !k->
roŸ
)

452  
NULL
;

455 if(!
ô
)

457 
ô
 = 
	`Æloˇ
((
Iãøt‹
));

459 
ô
->
ôîabÀ
 = 
k
->
roŸ
;

460 
ô
->
vÆue
 = 
k
->
roŸ
->
vÆ
;

464 
di°™˚sq
 = 
	`di°™˚Sq
(
poöt
, 
k
->
roŸ
->
pos
, k->
dimísi⁄s
);

465 
	`kdnode_˛o£°2
(
k
->
roŸ
, 
poöt
, &
di°™˚sq
, 
ô
);

466 
ô
->
vÆue
 = ((
kdnode
*)ô->
ôîabÀ
)->
vÆ
;

467  
ô
->
vÆue
;

468 
	}
}

470 *
kdåì_√xt˛o£°
(
kdåì
 *
k
, 
Iãøt‹
 *
ô
);

	@src/util/struct/kdtree.h

8 #i‚de‡
_KDTREE_H


9 
	#_KDTREE_H


	)

11 
	~<as£π.h
>

13 
	~"ôî©‹.h
"

15 * 
	tkdôî©‹
;

17 
	skdåì
 {

18 
	mdimísi⁄s
;

19 
kdnode
 *
	mroŸ
;

20 } 
	tkdåì
;

22 
kdåì_öô
(
kdåì
 *
k
, 
dimísi⁄s
);

23 
kdåì_föÆize
(
kdåì
 *
k
, (*
vÆ_föÆize
(*)));

24 
kdåì_ö£π
(
kdåì
 *
k
, 
poöt
[], *
vÆ
);

25 *
kdåì_˛o£°
(
kdåì
 *
k
, 
poöt
[], 
˛o£°
[]);

26 
kdåì_˛o£°N
(
kdåì
 *
k
, 
poöt
[], 
n
, **
buf
, *
˛o£°
[]);

27 
kdåì_ªmoveClo£°
(
kdåì
 *
k
, 
poöt
[], (*
vÆ_föÆize
)(*));

30 
	`kdåì_ôî_öô
(
kdåì
 *
k
, 
Iãøt‹
 *
i
);

31 *
	`kdåì_ôî_vÆue
(
Iãøt‹
 *
i
);

32 c⁄° *
	`kdåì_ôî_posôi⁄
(
Iãøt‹
 *
i
);

36 *
	`kdåì_˛o£°2
(
kdåì
 *
k
, 
poöt
[], 
Iãøt‹
 *
ô
);

37 *
	`kdåì_√xt˛o£°
(
kdåì
 *
k
, 
Iãøt‹
 *
ô
);

	@src/util/struct/list.c

10 
	~<as£π.h
>

11 
	~<°dboﬁ.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

15 
	~"li°.h
"

17 
	#DEFAULT_MAX
 10

	)

19 
	sli°_ít


21 
li°_ít
 *
	m√xt
;

22 
li°_ít
 *
	m¥ev
;

23 
	md©a
[];

26 
size_t
 
íåy_size
(
Li°
 *
l
);

27 
boﬁ
 
isvÆid_íåy
(
Li°
 *
l
, 
li°_ít
 *
e
);

28 
övÆid©e_íåy
(
Li°
 *
l
, 
li°_ít
 *
e
);

29 
övÆid©e_¶i˚
(
Li°
 *
l
, 
li°_ít
 *
°¨t
, 
n
);

30 
ªsize
(
Li°
 *
l
, 
size_t
 
n
);

31 
li°_ít
 *
födövÆid
(
Li°
 *
l
);

33 
size_t
 
	$íåy_size
(
Li°
 *
l
)

35  
l
->
ñemít_size
 + (
li°_ít
);

36 
	}
}

41 
boﬁ
 
	$isvÆid_íåy
(
Li°
 *
l
, 
li°_ít
 *
e
)

43  
e
->
√xt
 ||É->
¥ev
 || 
l
->
fú°
 ==É;

44 
	}
}

49 
	$övÆid©e_íåy
(
Li°
 *
l
, 
li°_ít
 *
e
)

51 
	`mem£t
(
e
, 0x00, 
	`íåy_size
(
l
));

52 
	}
}

57 
	$övÆid©e_¶i˚
(
Li°
 *
l
, 
li°_ít
 *
°¨t
, 
n
)

59 
	`mem£t
(
°¨t
, 0x00, 
	`íåy_size
(
l
Ë* 
n
);

60 
	}
}

63 
	$ªsize
(
Li°
 *
l
, 
size_t
 
n
)

65 if(
n
 < 
l
->
max
)

67 
	`as£π
(
Ál£
 && "List shrinkÇot yet impl");

71 
ﬁd_max
 = 
l
->
max
;

72 
l
->
max
 = 
n
;

73 
l
->
poﬁ
 = 
	`ªÆloc
÷->poﬁ,Ü->
max
 * 
	`íåy_size
(l));

74 
	`övÆid©e_¶i˚
(
l
, &l->
poﬁ
[
ﬁd_max
],Ü->
max
 - old_max);

75 
	}
}

80 
li°_ít
 *
	$födövÆid
(
Li°
 *
l
)

82 
li°_ít
 *
found
 = 
NULL
;

83 
£¨ch_°¨t
 = 
l
->
œ°_avaû_ödex
;

84 if(
l
->
Àngth
 <Ü->
max
)

86 
i
;

87 
i
 = 
£¨ch_°¨t
; i < 
l
->
max
 && !
found
; i++)

89 if(!
	`isvÆid_íåy
(
l
, &l->
poﬁ
[
i
]))

91 
l
->
œ°_avaû_ödex
 = 
i
;

92 
found
 = &
l
->
poﬁ
[
i
];

96 
i
 = 0; i < 
£¨ch_°¨t
 && !
found
; i++)

98 if(!
	`isvÆid_íåy
(
l
, &l->
poﬁ
[
i
]))

100 
l
->
œ°_avaû_ödex
 = 
i
;

101 
found
 = &
l
->
poﬁ
[
i
];

105  
found
;

106 
	}
}

108 
	$li°_öô
(
Li°
 *
l
, 
size_t
 
ñemít_size
)

110 
l
->
ñemít_size
 =Élement_size;

111 
l
->
Àngth
 = 0;

112 
l
->
max
 = 
DEFAULT_MAX
;

113 
l
->
œ°_avaû_ödex
 = 0;

114 
l
->
poﬁ
 = 
	`ˇŒoc
÷->
max
, 
	`íåy_size
(l));

115 
l
->
fú°
 = 
NULL
;

116 
l
->
œ°
 = 
NULL
;

117 
	}
}

119 
li°_föÆize
(
Li°
 *
l
, (*
föÆizî
)(*
v
))

121 if(
l
->
fú°
 && 
föÆizî
)

123 
li°_ít
 *
ôî
 = 
l
->
fú°
;

124 
ôî
)

126 
	`föÆizî
(
ôî
->
d©a
);

127 
ôî
 = iãr->
√xt
;

130 
	`‰ì
(
l
->
poﬁ
);

131 
	}
}

133 
boﬁ
 
	$li°_i£m±y
(
Li°
 *
l
)

135  
l
->
Àngth
 == 0;

136 
	}
}

138 
size_t
 
	$li°_Àngth
(
Li°
 *
l
)

140  
l
->
Àngth
;

141 
	}
}

143 
size_t
 
	$li°_d©asize
(
Li°
 *
l
)

145  
l
->
Àngth
 *Ü->
ñemít_size
;

146 
	}
}

151 
	$li°_ª£rve
(
Li°
 *
l
, 
size_t
 
n
)

153 if(
l
->
Àngth
 + 
n
 >l->
max
)

155 
	`ªsize
(
l
,Ü->
Àngth
 + 
n
);

157 
	}
}

159 
	$li°_add‰⁄t
(
Li°
 *
l
, *
ñemít
)

161 if(
l
->
Àngth
 >l->
max
)

163 
	`ªsize
(
l
, (
size_t
)÷->
Àngth
 * 1.6f));

166 
li°_ít
 *
√w_‰⁄t
 = 
	`födövÆid
(
l
);

167 
	`as£π
(
√w_‰⁄t
);

169 if(
l
->
Àngth
 > 0)

171 
l
->
fú°
->
¥ev
 = 
√w_‰⁄t
;

174 
l
->
œ°
 = 
√w_‰⁄t
;

177 
√w_‰⁄t
->
√xt
 = 
l
->
fú°
;

178 
√w_‰⁄t
->
¥ev
 = 
NULL
;

179 
l
->
fú°
 = 
√w_‰⁄t
;

180 
	`mem˝y
(
√w_‰⁄t
->
d©a
, 
ñemít
, 
l
->
ñemít_size
);

181 
l
->
Àngth
++;

182 
	}
}

184 
	$li°_addback
(
Li°
 *
l
, *
ñemít
)

186 if(
l
->
Àngth
 =l->
max
)

188 
	`ªsize
(
l
, (
size_t
)÷->
Àngth
 * 1.6f));

191 
li°_ít
 *
√w_back
 = 
	`födövÆid
(
l
);

192 
	`as£π
(
√w_back
);

194 if(
l
->
Àngth
 > 0)

196 
l
->
œ°
->
√xt
 = 
√w_back
;

199 
l
->
fú°
 = 
√w_back
;

202 
√w_back
->
√xt
 = 
NULL
;

203 
√w_back
->
¥ev
 = 
l
->
œ°
;

204 
l
->
œ°
 = 
√w_back
;

205 
	`mem˝y
(
√w_back
->
d©a
, 
ñemít
, 
l
->
ñemít_size
);

206 
l
->
Àngth
++;

207 
	}
}

209 
	$li°_adda·î
(
Li°
 *
l
, 
Iãøt‹
 *
i
, *
ñemít
)

211 if(
l
->
Àngth
 =l->
max
)

213 
	`ªsize
(
l
, (
size_t
)÷->
Àngth
 * 1.6f));

215 
li°_ít
 *
√w_ít
 = 
	`födövÆid
(
l
);

216 
	`as£π
(
√w_ít
);

218 
li°_ít
 *
ít
 = 
i
->
ôîabÀ
;

219 
√w_ít
->
√xt
 = 
ít
->next;

220 
√w_ít
->
¥ev
 = 
ít
;

221 
	`mem˝y
(
√w_ít
->
d©a
, 
ñemít
, 
l
->
ñemít_size
);

222 
ít
->
√xt
 = 
√w_ít
;

223 
	}
}

225 
	$li°_addbef‹e
(
Li°
 *
l
, 
Iãøt‹
 *
i
, *
ñemít
)

227 if(
l
->
Àngth
 =l->
max
)

229 
	`ªsize
(
l
, (
size_t
)÷->
Àngth
 * 1.6f));

231 
li°_ít
 *
√w_ít
 = 
	`födövÆid
(
l
);

232 
	`as£π
(
√w_ít
);

234 
li°_ít
 *
ít
 = 
i
->
ôîabÀ
;

235 
√w_ít
->
¥ev
 = 
ít
->prev;

236 
√w_ít
->
√xt
 = 
ít
;

237 
	`mem˝y
(
√w_ít
->
d©a
, 
ñemít
, 
l
->
ñemít_size
);

238 
ít
->
¥ev
 = 
√w_ít
;

239 
	}
}

241 
	$li°_ªmove
(
Li°
 *
l
, 
Iãøt‹
 *
i
)

243 
li°_ít
 *
ít
 = 
i
->
ôîabÀ
;

244 
li°_ít
 *
√xt
 = 
ít
->next;

245 
li°_ít
 *
¥ev
 = 
ít
->prev;

247 if(
√xt
)

249 
√xt
->
¥ev
 =Örev;

252 
l
->
œ°
 = 
¥ev
;

255 if(
¥ev
)

257 
¥ev
->
√xt
 =Çext;

260 
l
->
fú°
 = 
√xt
;

263 
	`övÆid©e_íåy
(
l
, 
ít
);

264 
l
->
Àngth
--;

265 
	}
}

267 *
	$li°_gë
(
Li°
 *
l
, 
Iãøt‹
 *
i
)

269 
li°_ít
 *
ít
 = 
i
->
ôîabÀ
;

270  
ít
->
d©a
;

271 
	}
}

273 *
	$li°_fú°
(
Li°
 *
l
, 
Iãøt‹
 *
ô
)

275 *
ªt
 = 
NULL
;

277 if(
l
->
fú°
)

279 if(
ô
)

281 
ô
->
ôîabÀ
 = 
l
->
fú°
;

282 
ô
->
vÆue
 = &
l
->
fú°
->
d©a
;

283 
ô
->
öc_func
 = 
li°_√xt
;

284 
ô
->
dec_func
 = 
li°_¥ev
;

286 
ªt
 = &
l
->
fú°
->
d©a
;

287 } i‡(
ô
)

289 
ô
->
ôîabÀ
 = 
NULL
;

290 
ô
->
vÆue
 = 
NULL
;

291 
ô
->
öc_func
 = 
NULL
;

292 
ô
->
dec_func
 = 
NULL
;

295  
ªt
;

296 
	}
}

298 *
	$li°_œ°
(
Li°
 *
l
, 
Iãøt‹
 *
ô
)

300 *
ªt
 = 
NULL
;

302 if(
l
->
œ°
)

304 if(
ô
)

306 
ô
->
ôîabÀ
 = 
l
->
œ°
;

307 
ô
->
vÆue
 = &
l
->
œ°
->
d©a
;

308 
ô
->
öc_func
 = 
li°_√xt
;

309 
ô
->
dec_func
 = 
li°_¥ev
;

311 
ªt
 = &
l
->
œ°
->
d©a
;

312 } i‡(
ô
)

314 
ô
->
ôîabÀ
 = 
NULL
;

315 
ô
->
vÆue
 = 
NULL
;

316 
ô
->
öc_func
 = 
NULL
;

317 
ô
->
dec_func
 = 
NULL
;

320  
ªt
;

321 
	}
}

323 *
	$li°_√xt
(*
l°
, 
Iãøt‹
 *
i
)

325 *
ªt
 = 
NULL
;

326 
li°_ít
 *
ít
 = 
i
->
ôîabÀ
;

327 
ít
 =É¡->
√xt
;

328 if(
ít
)

330 
i
->
ôîabÀ
 = 
ít
;

331 
i
->
vÆue
 = &
ít
->
d©a
;

332 
ªt
 = &
ít
->
d©a
;

335 
i
->
vÆue
 = 
NULL
;

337  
ªt
;

338 
	}
}

340 *
	$li°_¥ev
(*
l
, 
Iãøt‹
 *
i
)

342 
li°_ít
 *
ít
 = 
i
->
ôîabÀ
;

343 
ít
 =É¡->
¥ev
;

344 
i
->
ôîabÀ
 = 
ít
;

345 
i
->
vÆue
 = 
ít
->
d©a
;

346  
ít
->
d©a
;

347 
	}
}

349 
	$li°_movebef‹e
(
Li°
 *
l
, 
Iãøt‹
 *
bef‹e
, Iãøt‹ *
‰om
)

351 
li°_ít
 *
bef‹e_ít
 = 
bef‹e
->
ôîabÀ
;

352 
li°_ít
 *
ít
 = 
‰om
->
ôîabÀ
;

355 if(
ít
->
√xt
)

357 
ít
->
√xt
->
¥ev
 =Ént->prev;

360 
l
->
œ°
 = 
ít
->
¥ev
;

363 if(
ít
->
¥ev
)

365 
ít
->
¥ev
->
√xt
 =Ént->next;

368 
l
->
fú°
 = 
ít
->
√xt
;

372 
ít
->
¥ev
 = 
bef‹e_ít
->prev;

373 
ít
->
√xt
 = 
bef‹e_ít
;

376 if(
bef‹e_ít
->
¥ev
)

378 
bef‹e_ít
->
¥ev
->
√xt
 = 
ít
;

381 
l
->
fú°
 = 
ít
;

385 
bef‹e_ít
->
¥ev
 = 
ít
;

386 
	}
}

388 
	$li°_movó·î
(
Li°
 *
l
, 
Iãøt‹
 *
a·î
, Iãøt‹ *
‰om
)

390 
li°_ít
 *
a·î_ít
 = 
a·î
->
ôîabÀ
;

391 
li°_ít
 *
ít
 = 
‰om
->
ôîabÀ
;

394 if(
ít
->
√xt
)

396 
ít
->
√xt
->
¥ev
 =Ént->prev;

399 
l
->
œ°
 = 
ít
->
¥ev
;

402 if(
ít
->
¥ev
)

404 
ít
->
¥ev
->
√xt
 =Ént->next;

407 
l
->
fú°
 = 
ít
->
√xt
;

411 
ít
->
¥ev
 = 
a·î_ít
;

412 
ít
->
√xt
 = 
a·î_ít
->next;

415 if(
a·î_ít
->
√xt
)

417 
a·î_ít
->
√xt
->
¥ev
 = 
ít
;

420 
l
->
fú°
 = 
ít
;

424 
a·î_ít
->
√xt
 = 
ít
;

425 
	}
}

427 
	$li°_tobuf„r
(
Li°
 *
l
, *
b
)

429 *
buf
 = 
b
;

430 
Iãøt‹
 
ô
;

431 
	`li°_fú°
(
l
, &
ô
);

433 
i
;

434 
i
 = 0; i < 
l
->
Àngth
; i++)

436 
	`as£π
(
ô
.
vÆue
 && "corruptedÜist,Üength misrepresentsÜist");

437 
	`mem˝y
(&
buf
[
i
 * 
l
->
ñemít_size
], 
	`ôî©‹_vÆue
(&
ô
),Ü->element_size);

438 
	`ôî©‹_√xt
(&
ô
);

440 
	}
}

442 
li°_˛ór
(
Li°
 *
l
, (*
föÆizî
)(*
v
))

444 
l
->
Àngth
 = 0;

445 
l
->
max
 = 
DEFAULT_MAX
;

446 
l
->
œ°_avaû_ödex
 = 0;

447 
l
->
poﬁ
 = 
	`ªÆloc
÷->poﬁ,Ü->
max
 * 
	`íåy_size
(l));

448 
l
->
fú°
 = 
NULL
;

449 
l
->
œ°
 = 
NULL
;

450 
	}
}

	@src/util/struct/list.h

10 #i‚de‡
_LIST_H


11 
	#_LIST_H


	)

13 
	~<°dboﬁ.h
>

14 
	~<°ddef.h
>

16 
	~"ôî©‹.h
"

18 
	gli°_ít
;

20 
	sLi°


22 
size_t
 
	mñemít_size
;

23 
size_t
 
	mÀngth
;

24 
size_t
 
	mmax
;

25 
	mœ°_avaû_ödex
;

26 
li°_ít
 *
	mpoﬁ
;

27 
li°_ít
 *
	mfú°
;

28 
li°_ít
 *
	mœ°
;

29 } 
	tLi°
;

31 
li°_öô
(
Li°
 *
l
, 
size_t
 
ñemít_size
);

32 
li°_föÆize
(
Li°
 *
l
, (*
föÆizî
)(*
v
));

34 
boﬁ
 
	`li°_i£m±y
(
Li°
 *
l
);

35 
size_t
 
	`li°_Àngth
(
Li°
 *
l
);

36 
size_t
 
	`li°_d©asize
(
Li°
 *
l
);

37 
	`li°_ª£rve
(
Li°
 *
l
, 
size_t
 
n
);

38 
	`li°_add‰⁄t
(
Li°
 *
l
, *
ñemít
);

39 
	`li°_addback
(
Li°
 *
l
, *
ñemít
);

40 
	`li°_addbef‹e
(
Li°
 *
l
, 
Iãøt‹
 *
i
, *
ñemít
);

41 
	`li°_adda·î
(
Li°
 *
l
, 
Iãøt‹
 *
i
, *
ñemít
);

42 
	`li°_ªmove
(
Li°
 *
l
, 
Iãøt‹
 *
i
);

43 *
	`li°_gë
(
Li°
 *
l
, 
Iãøt‹
 *
i
);

44 *
	`li°_fú°
(
Li°
 *
l
, 
Iãøt‹
 *
ªt
);

45 *
	`li°_œ°
(
Li°
 *
l
, 
Iãøt‹
 *
ªt
);

46 *
	`li°_√xt
(*
l
, 
Iãøt‹
 *
i
);

47 *
	`li°_¥ev
(*
l
, 
Iãøt‹
 *
i
);

48 
	`li°_movebef‹e
(
Li°
 *
l
, 
Iãøt‹
 *
bef‹e
, Iãøt‹ *
‰om
);

49 
	`li°_movó·î
(
Li°
 *
l
, 
Iãøt‹
 *
a·î
, Iãøt‹ *
‰om
);

50 
	`li°_tobuf„r
(
Li°
 *
l
, *
buf
);

51 
	`li°_˛ór
(
Li°
 *
l
, (*
föÆizî
)(*
v
));

	@src/util/struct/octgrid.c

10 
	~<°döt.h
>

12 
	#FAR_PTR
 0x8000

	)

15 
	ssvo_dis¸ùt‹


17 
uöt16_t
 
	mchûd_±r
;

18 
uöt8_t
 
	mvÆid_mask
;

19 
uöt8_t
 
	mÀaf_mask
;

21 
uöt8_t
 
	mc⁄tour_±r
[3];

22 
uöt8_t
 
	mc⁄tour_mask
;

25 
	ssvo_öfo


30 
	sc⁄tour


35 
	ssvo_block


37 
svo_öfo
 
	möfo
;

38 
svo_dis¸ùt‹
 
	mnodes
[];

39 
c⁄tour
 
	mc⁄tour
;

43 
	$vo˘ªe_öô
(
Vo˘ªe
 *
v
, 
x
, 
y
, 
z
)

46 
	}
}

48 
	$vo˘ªe_föÆize
(
Vo˘ªe
 *
v
)

51 
	}
}

	@src/util/struct/octgrid.h

8 #i‚de‡
_VOCTREE_H


9 
	#_VOCTREE_H


	)

11 
	gsvo_block
;

13 
	sVo˘ªe


15 
	mnblocks
;

16 
svo_block
 *
	mblocks
;

17 } 
	tVo˘ªe
;

19 
vo˘ªe_öô
(
Vo˘ªe
 *
v
, 
x
, 
y
, 
z
);

20 
vo˘ªe_föÆize
(
Vo˘ªe
 *
v
);

	@src/util/struct/octree.c

8 
	~<Æloˇ.h
>

9 
	~<as£π.h
>

10 
	~<m©h.h
>

11 
	~<°dlib.h
>

12 
	~<°ddef.h
>

13 
	~<°rög.h
>

15 
	~"utû/m©h/vec.h
"

16 
	~"o˘ªe.h
"

18 
	#XMASK
 0x01

19 
	#YMASK
 0x02

20 
	#ZMASK
 0x04

21 
	#XSHIFT
 0

22 
	#YSHIFT
 1

23 
	#ZSHIFT
 2

24 

	)

25 
	#ONODE_MAXVAL
 16

26 

	)

27 
	sovÆue_t


29 *
	mvÆ
;

30 
vec3
 
	mpoöt
;

31 } 
	tovÆue_t
;

33 
	so£¨ch_t


35 
	mÀn
;

36 
	mmax
;

37 *
	mpoöt
;

38 *
	mdi°™˚s
;

39 
ovÆue_t
 **
	mli°
;

40 } 
	to£¨ch_t
;

42 
	so˘node_t


44 
	mnvÆues
;

45 
	m˚¡î
[3];

46 
	maxis_Àn
;

47 
o˘node_t
 *
	m∑ª¡
;

48 
o˘node_t
 *
	mchûdªn
;

49 
ovÆue_t
 
	mvÆues
[
ONODE_MAXVAL
];

50 } 
	t⁄ode_t
;

52 
⁄ode_öô
(
⁄ode_t
 *
n
, onode_à*
∑ª¡
, 
˚¡î
[3], 
axis_Àn
);

53 
⁄ode_föÆize
(
⁄ode_t
 *
n
, (*
vÆ_föÆize
(*)));

54 
poöt_˛assify
(
⁄ode_t
 *
n
, 
poöt
[3]);

55 
⁄ode_•lô
(
⁄ode_t
 *
n
);

56 
⁄ode_ö£π
(
⁄ode_t
 *
n
, 
poöt
[3], *
vÆ
);

57 
⁄ode_√¨e°N
(
⁄ode_t
 *
n
, 
poöt
[3], 
o£¨ch_t
 *
li°
);

59 
o£¨ch_öô
(
o£¨ch_t
 *
s
, 
max
, 
poöt
[3], *
di°_li°
, *
li°
);

60 
o£¨ch_ö£π
(
o£¨ch_t
 *
li°
, 
ovÆue_t
 *
vÆ
);

67 
	$⁄ode_öô
(
⁄ode_t
 *
n
, onode_à*
∑ª¡
, 
˚¡î
[3], 
axis_Àn
)

69 
	`vec3_c›y
(
˚¡î
, 
n
->center);

70 
n
->
nvÆues
 = 0;

71 
n
->
axis_Àn
 =áxis_len;

72 
n
->
∑ª¡
 =Öarent;

74 
i
;

75 
n
->
chûdªn
 = 
NULL
;

76 
	}
}

81 
⁄ode_föÆize
(
⁄ode_t
 *
n
, (*
	$vÆ_föÆize
(*)))

83 
i
;

86 if(
n
->
chûdªn
)

88 
i
 = 0; i < 8; i++)

90 
	`⁄ode_föÆize
(&
n
->
chûdªn
[
i
], 
vÆ_föÆize
);

95 if(
vÆ_föÆize
)

97 
i
 = 0; i < 
n
->
nvÆues
; i++)

99 
	`vÆ_föÆize
(
n
->
vÆues
[
i
].
vÆ
);

102 
	}
}

107 
	$poöt_˛assify
(
⁄ode_t
 *
n
, 
poöt
[3])

109 
vec3
 
dñè
;

110 
	`vec3_sub
(
n
->
˚¡î
, 
poöt
, 
dñè
);

111 
ªt
 = ((
dñè
[
Z
] > 0Ë<< 
ZSHIFT
) |

112 ((
dñè
[
Y
] > 0Ë<< 
YSHIFT
) |

113 ((
dñè
[
X
] > 0Ë<< 
XSHIFT
);

115 if(
	`Ábs
(
dñè
[
X
]Ë> 
n
->
axis_Àn
 ||

116 
	`Ábs
(
dñè
[
Y
]Ë> 
n
->
axis_Àn
 ||

117 
	`Ábs
(
dñè
[
Z
]Ë> 
n
->
axis_Àn
)

119 
ªt
 = -1;

121  
ªt
;

122 
	}
}

127 
	$c⁄d_o˘™t_sw≠
(*
a_n
, *
a_f
, *
b_n
, *
b_f
)

129 *
tmp_n
;

130 *
tmp_f
;

132 if(
b_f
 < 
a_f
)

134 
tmp_n
 = 
a_n
;

135 
tmp_f
 = 
a_f
;

136 
a_n
 = 
b_n
;

137 
a_f
 = 
b_f
;

138 
b_n
 = 
tmp_n
;

139 
b_f
 = 
tmp_f
;

141 
	}
}

146 
	$˛o£°_o˘™ts
(
⁄ode_t
 *
n
, 
poöt
[3], *
idx
, *
di°
)

148 
fú°
 = 
	`poöt_˛assify
(
n
, 
poöt
);

149 
˚¡î_di°
 = 
	`sqπ
(
	`vec3_di°sq
(
poöt
, 
n
->
˚¡î
));

152 
idx
[0] = 
fú°
;

153 
di°
[0] = 0.0f;

156 
idx
[1] = 
fú°
 ^ 
XMASK
;

157 
idx
[2] = 
fú°
 ^ 
YMASK
;

158 
idx
[3] = 
fú°
 ^ 
ZMASK
;

159 
di°
[1] = 
	`Ábs
(
n
->
˚¡î
[
X
] - 
poöt
[X]);

160 
di°
[2] = 
	`Ábs
(
n
->
˚¡î
[
Y
] - 
poöt
[Y]);

161 
di°
[3] = 
	`Ábs
(
n
->
˚¡î
[
Z
] - 
poöt
[Z]);

164 
	`c⁄d_o˘™t_sw≠
(&
idx
[1], &
di°
[1], &idx[2], &dist[2]);

165 
	`c⁄d_o˘™t_sw≠
(&
idx
[1], &
di°
[1], &idx[3], &dist[3]);

166 
	`c⁄d_o˘™t_sw≠
(&
idx
[2], &
di°
[2], &idx[3], &dist[3]);

169 
idx
[4] = 
fú°
 ^ 
XMASK
 ^ 
YMASK
;

170 
idx
[5] = 
fú°
 ^ 
XMASK
 ^ 
ZMASK
;

171 
idx
[6] = 
fú°
 ^ 
YMASK
 ^ 
ZMASK
;

172 
idx
[7] = 
fú°
 ^ 
XMASK
 ^ 
YMASK
 ^ 
ZMASK
;

173 
di°
[4] = 
˚¡î_di°
;

174 
di°
[5] = 
˚¡î_di°
;

175 
di°
[6] = 
˚¡î_di°
;

176 
di°
[7] = 
˚¡î_di°
;

177 
	}
}

184 
	$chûd_˚¡î
(
⁄ode_t
 *
n
, 
chûd_ödex
, 
vec3
 
ªt
)

186 
boﬁ
 
xÊag
 = ((
chûd_ödex
 & 1) != 0);

187 
boﬁ
 
yÊag
 = ((
chûd_ödex
 & 2) != 0);

188 
boﬁ
 
zÊag
 = ((
chûd_ödex
 & 4) != 0);

191 
ªt
[
X
] = (
xÊag
 ^ (xÊag - 1)Ë* (
n
->
˚¡î
[X] -Ç->
axis_Àn
);

192 
ªt
[
Y
] = (
yÊag
 ^ (yÊag - 1)Ë* (
n
->
˚¡î
[Y] -Ç->
axis_Àn
);

193 
ªt
[
Z
] = (
zÊag
 ^ (zÊag - 1)Ë* (
n
->
˚¡î
[Z] -Ç->
axis_Àn
);

194 
	}
}

199 
	$⁄ode_•lô
(
⁄ode_t
 *
n
)

201 if(!
n
->
chûdªn
)

203 
n
->
chûdªn
 = 
	`mÆloc
((
⁄ode_t
) * 8);

205 
vec3
 
√w˚¡î
;

206 
vec3
 
axis_off£t
;

208 
chûd_Æí
 = 
n
->
axis_Àn
 / 2.0f;

210 
i
;

211 
i
 = 0; i < 8; i++)

213 
	`chûd_˚¡î
(
n
, 
i
, 
√w˚¡î
);

214 
	`⁄ode_öô
(&
n
->
chûdªn
[
i
],Ç, 
√w˚¡î
, 
chûd_Æí
);

220 
i
 = 0; i < 
n
->
nvÆues
; i++)

222 
node_idx
 = 
	`poöt_˛assify
(
n
,Ç->
vÆues
[
i
].
poöt
);

223 
	`⁄ode_ö£π
(&
n
->
chûdªn
[
node_idx
],Ç->
vÆues
[
i
].
poöt
,Ç->vÆues[i].
vÆ
);

226 
	}
}

231 
	$⁄ode_ö£π
(
⁄ode_t
 *
n
, 
poöt
[3], *
vÆ
)

233 if(
n
->
nvÆues
 >= 8)

235 
	`⁄ode_•lô
(
n
);

236 
n
->
nvÆues
 = 0;

239 if(
n
->
chûdªn
)

241 
ödex
 = 
	`poöt_˛assify
(
n
, 
poöt
);

242 
	`⁄ode_ö£π
(&
n
->
chûdªn
[
ödex
], 
poöt
, 
vÆ
);

245 
ovÆue_t
 *
√wvÆue
 = &
n
->
vÆues
[n->
nvÆues
];

246 
	`vec3_c›y
(
poöt
, 
√wvÆue
->point);

247 
√wvÆue
->
vÆ
 = val;

248 
n
->
nvÆues
++;

250 
	}
}

256 
	$o£¨ch_ö£π
(
o£¨ch_t
 *
li°
, 
ovÆue_t
 *
vÆ
)

258 
	`as£π
(
li°
->
max
 > 0);

260 
vÆ_di°
 = 
	`vec3_di°sq
(
li°
->
poöt
, 
vÆ
->point);

261 if(
li°
->
Àn
 <Üi°->
max
 || 
vÆ_di°
 <Üi°->
di°™˚s
[list->len - 1])

263 if(
li°
->
Àn
 <Üi°->
max
)

265 
li°
->
Àn
++;

268 
i
;

269 
i
 = 
li°
->
Àn
 - 1; i > 0 && 
vÆ_di°
 <Üi°->
di°™˚s
[i-1]; i--)

271 
li°
->
di°™˚s
[
i
] =Üist->distances[i-1];

272 
li°
->li°[
i
] =Üist->list[i-1];

275 
li°
->
di°™˚s
[
i
] = 
vÆ_di°
;

276 
li°
->li°[
i
] = 
vÆ
;

278 
	}
}

283 
	$⁄ode_√¨e°N
(
⁄ode_t
 *
n
, 
poöt
[3], 
o£¨ch_t
 *
£¨ch
)

285 if(
n
->
chûdªn
)

287 
di°s
[8];

288 
idx
[8];

289 
	`˛o£°_o˘™ts
(
n
, 
poöt
, 
idx
, 
di°s
);

291 
i
;

292 
i
 = 0; i < 8 && (!
£¨ch
->
Àn
 || 
di°s
[i] < sórch->
di°™˚s
[i]); i++)

294 
	`⁄ode_√¨e°N
(&
n
->
chûdªn
[
idx
[
i
]], 
poöt
, 
£¨ch
);

298 
i
;

299 
i
 = 0; i < 
n
->
nvÆues
; i++)

301 
	`o£¨ch_ö£π
(
£¨ch
, &
n
->
vÆues
[
i
]);

304 
	}
}

315 
	$o˘ªe_öô
(
o˘ªe_t
 *
t
)

317 
	`as£π
(
t
);

319 
t
->
roŸ
 = 
	`mÆloc
((
⁄ode_t
));

320 
vec3
 
˚¡î
 = {0.0f, 0.0f, 0.0f};

321 
	`⁄ode_öô
(
t
->
roŸ
, 
NULL
, 
˚¡î
, 2.0f);

322 
	}
}

327 
o˘ªe_föÆize
(
o˘ªe_t
 *
t
, (*
	$vÆ_föÆize
(*)))

329 
	`as£π
(
t
);

330 
	`as£π
(
t
->
roŸ
);

332 
	`⁄ode_föÆize
(
t
->
roŸ
, 
vÆ_föÆize
);

333 
	`‰ì
(
t
->
roŸ
);

334 
t
->
roŸ
 = 
NULL
;

335 
	}
}

341 
	$o˘ªe_ö£π
(
o˘ªe_t
 *
t
, 
loc
[3], *
vÆ
)

343 if(
	`poöt_˛assify
(
t
->
roŸ
, 
loc
) == -1)

346 
	`as£π
(
Ál£
 && "OctreeÉxpansionÇot yet impl :(\n");

349 
	`⁄ode_ö£π
(
t
->
roŸ
, 
loc
, 
vÆ
);

350 
	}
}

355 
	$o£¨ch_öô
(
o£¨ch_t
 *
s
, 
max
, 
poöt
[3], *
di°_li°
, *
li°
)

357 
s
->
Àn
 = 0;

358 
s
->
max
 = max;

359 
s
->
poöt
 =Öoint;

360 
s
->
di°™˚s
 = 
di°_li°
;

361 
s
->
li°
 =Üist;

362 
	}
}

367 *
	$o˘ªe_√¨e°
(
o˘ªe_t
 *
t
, 
loc
[3], 
√¨e°
[3])

369 
	`as£π
(
t
);

370 
	`as£π
(
t
->
roŸ
);

372 
o£¨ch_t
 
£¨ch
;

373 *
£¨ch_li°
 = 
	`Æloˇ
((
ovÆue_t
*));

374 *
di°™˚s
 = 
	`Æloˇ
(());

375 
	`o£¨ch_öô
(&
£¨ch
, 1, 
loc
, 
di°™˚s
, 
£¨ch_li°
);

377 
	`⁄ode_√¨e°N
(
t
->
roŸ
, 
loc
, &
£¨ch
);

379 *
ªt
 = 
NULL
;

381 if(
£¨ch
.
Àn
 > 0)

383 
ovÆue_t
 *
√¨
 = 
£¨ch
.
li°
[0];

384 
	`vec3_c›y
(
√¨
->
vÆ
, 
√¨e°
);

385 
ªt
 = 
√¨
->
vÆ
;

387  
ªt
;

388 
	}
}

393 
	$o˘ªe_√¨e°N
(
o˘ªe_t
 *
t
, 
loc
[3], 
n
, **
buf
, *
√¨e°
[3])

395 
	`as£π
(
t
);

396 
	`as£π
(
t
->
roŸ
);

398 
o£¨ch_t
 
£¨ch
;

399 *
£¨ch_li°
 = 
	`Æloˇ
((
ovÆue_t
*Ë* 
n
);

400 *
di°™˚s
 = 
	`Æloˇ
((Ë* 
n
);

401 
	`o£¨ch_öô
(&
£¨ch
, 
n
, 
loc
, 
di°™˚s
, 
£¨ch_li°
);

403 
	`⁄ode_√¨e°N
(
t
->
roŸ
, 
loc
, &
£¨ch
);

405 
i
;

406 
i
 = 0; i < 
£¨ch
.
Àn
 ; i++)

408 
buf
[
i
] = 
£¨ch
.
li°
[i]->
vÆ
;

409 
	`mem˝y
(
√¨e°
[
i
], 
£¨ch
.
li°
[i]->
poöt
, () * 3);

412  
£¨ch
.
Àn
;

413 
	}
}

	@src/util/struct/octree.h

8 #i‚de‡
_OCTREE_H


9 
	#_OCTREE_H


	)

11 
	so˘ªe_t


13 
o˘node_t
 *
	mroŸ
;

14 } 
	to˘ªe_t
;

16 
o˘ªe_öô
(
o˘ªe_t
 *
t
);

17 
o˘ªe_föÆize
(
o˘ªe_t
 *
t
, (*
vÆ_föÆize
(*)));

18 
o˘ªe_ö£π
(
o˘ªe_t
 *
t
, 
poöt
[3], *
vÆ
);

19 *
o˘ªe_√¨e°
(
o˘ªe_t
 *
t
, 
loc
[3], 
√¨e°
[3]);

20 
o˘ªe_√¨e°N
(
o˘ªe_t
 *
t
, 
loc
[3], 
n
, **
buf
, *
√¨e°
[3]);

	@src/util/struct/rtree.c

8 
	~"πªe.h
"

	@src/util/struct/rtree.h

8 #i‚de‡
_RTREE_H


9 
	#_RTREE_H


	)

11 
	sπªe
 {

13 } 
	gπªe
;

	@src/util/struct/tmesh.c

8 
	~<°dlib.h
>

10 
	~"tmesh.h
"

12 
	#FACE_STEP
 16

	)

13 
	#VERT_STEP
 32

	)

15 
	#MAX
(
a
,
b
Ë(◊Ë< (bË? (bË: (a));

	)

16 
	#MIN
(
a
,
b
Ë(◊Ë> (bË? (bË: (a));

	)

18 
	$ª£rve•a˚
(
Tmesh
 *
m
, 
df
, 
dv
)

20 
√w_nÁ˚s
 = 
m
->
nÁ˚s
 + 
df
;

21 
√w_nvîts
 = 
m
->
nvîts
 + 
dv
;

23 if(
m
->
maxÁ˚s
 <
√w_nÁ˚s
 + 
df
)

25 
°ï_Á˚s
 = 
	`MAX
(
√w_nÁ˚s
, 
m
->
nÁ˚s
 + 
FACE_STEP
);

26 
m
->
Á˚s
 = 
	`ªÆloc
((
Tmesh_Á˚
Ë* 
°ï_Á˚s
);

27 
m
->
maxÁ˚s
 = 
°ï_Á˚s
;

30 if(
m
->
maxvîts
 <
√w_nvîts
 + 
dv
)

32 
°ï_Á˚s
 = 
	`MAX
(
√w_nvîts
 , 
m
->
nvîts
 + 
VERT_STEP
);

33 
m
->
Á˚s
 = 
	`ªÆloc
((
Tmesh_vît
Ë* 
°ï_vîts
);

34 
m
->
maxvîts
 = 
°ï_vîts
;

37  || 
m
->
maxvîts
 <m->
nvîts
;

38 
	}
}

40 
	$tmesh_öô
(
Tmesh
 *
m
)

42 
m
->
maxÁ˚s
 = 32;

43 
m
->
maxvîts
 = 64;

44 
m
->
nÁ˚s
 = 0;

45 
m
->
nvîts
 = 0;

46 
m
->
Á˚s
 = 
	`mÆloc
((
Tmesh_Á˚
Ë* m->
maxÁ˚s
);

47 
m
->
vîts
 = 
	`mÆloc
((
Tmesh_vît
Ë* m->
maxvîts
);

48 
	}
}

50 
	$tmesh_föÆize
(
Tmesh
 *
m
)

52 
	`‰ì
(
m
->
Á˚s
);

53 
	`‰ì
(
m
->
vîts
);

54 
	}
}

56 
	$tmesh_¥óŒoc
(
Tmesh
 *
m
, 
f
, 
v
)

58 if(
f
 !
m
->
maxÁ˚s
)

60 
m
->
maxÁ˚s
 = 
f
;

61 
m
->
Á˚s
 = 
	`ªÆloc
(m->Á˚s, (
Tmesh_Á˚
Ë* 
f
);

64 if(
v
 !
m
->
maxvîts
)

66 
m
->
maxvîts
 = 
v
;

67 
m
->
vîts
 = 
	`ªÆloc
(m->vîts, (
Tmesh_vît
Ë* 
v
);

69 
	}
}

71 
	$tmesh_addquad
(
Tmesh
 *
m
, *
vîts
)

73 
	`ª£rve•a˚
(
m
, 2, 4);

74 
	`mem˝y
(
m
->
vîts
[m->
nvîts
], 
vît
, (
Tmesh_vît
));

75 
	`mem˝y
(
m
->
vîts
[m->
nvîts
 + 1], &
vît
[3], (
Tmesh_vît
));

76 
	`mem˝y
(
m
->
vîts
[m->
nvîts
 + 2], &
vît
[6], (
Tmesh_vît
));

77 
	`mem˝y
(
m
->
vîts
[m->
nvîts
 + 3], &
vît
[6], (
Tmesh_vît
));

78 
m
->
Á˚s
[m->
nÁ˚s
][0] = (
uöt16_t
Ëm->
nvîts
;

79 
m
->
Á˚s
[m->
nÁ˚s
][1] = (
uöt16_t
Ëm->
nvîts
 + 1;

80 
m
->
Á˚s
[m->
nÁ˚s
][2] = (
uöt16_t
Ëm->
nvîts
 + 2;

81 
m
->
nÁ˚s
++;

82 
m
->
Á˚s
[m->
nÁ˚s
][0] = (
uöt16_t
Ëm->
nvîts
;

83 
m
->
Á˚s
[m->
nÁ˚s
][1] = (
uöt16_t
Ëm->
nvîts
 + 2;

84 
m
->
Á˚s
[m->
nÁ˚s
][2] = (
uöt16_t
Ëm->
nvîts
 + 3;

85 
m
->
nÁ˚s
++;

86 
m
->
nvîts
 += 3;

87 
	}
}

89 
	$tmesh_addåi
(
Tmesh
 *
m
, *
vîts
)

91 
	`ª£rve•a˚
(
m
, 1, 3);

92 
	`mem˝y
(
m
->
vîts
[m->
nvîts
], 
vît
, (
Tmesh_vît
));

93 
	`mem˝y
(
m
->
vîts
[m->
nvîts
 + 1], &
vît
[3], (
Tmesh_vît
));

94 
	`mem˝y
(
m
->
vîts
[m->
nvîts
 + 2], &
vît
[6], (
Tmesh_vît
));

95 
m
->
Á˚s
[m->
nÁ˚s
][0] = (
uöt16_t
Ëm->
nvîts
;

96 
m
->
Á˚s
[m->
nÁ˚s
][1] = (
uöt16_t
Ëm->
nvîts
 + 1;

97 
m
->
Á˚s
[m->
nÁ˚s
][2] = (
uöt16_t
Ëm->
nvîts
 + 2;

98 
m
->
nÁ˚s
++;

99 
m
->
nvîts
 += 3;

100 
	}
}

102 
	$tmesh_addvîti˚s
(
Tmesh
 *
m
, *
vît
)

104 
	`ª£rve•a˚
(
m
, 0, 1);

105 
	`mem˝y
(
m
->
vîts
[m->
nvîts
], 
vît
, (
Tmesh_vît
));

106 
m
->
nvîts
++;

107 
	}
}

109 
	$tmesh_addÁ˚
(
Tmesh
 *
m
, 
a
, 
b
, 
c
)

111 
	`ª£rve•a˚
(
m
, 1, 0);

112 
m
->
Á˚s
[m->
nÁ˚s
][0] = (
uöt16_t
Ë
a
;

113 
m
->
Á˚s
[m->
nÁ˚s
][1] = (
uöt16_t
Ë
b
;

114 
m
->
Á˚s
[m->
nÁ˚s
][2] = (
uöt16_t
Ë
c
;

115 
m
->
nÁ˚s
++;

116 
	}
}

	@src/util/struct/tmesh.h

8 #i‚de‡
_TMESH_H


9 
	#_TMESH_H


	)

11 
	~<°döt.h
>

13 
uöt16_t
 
	tTmesh_Á˚
[3];

15 
	tTmesh_vît
[3];

17 
	sTmesh
 {

18 
	mmaxÁ˚s
;

19 
	mmaxvîts
;

20 
	mnÁ˚s
;

21 
	mnvîts
;

22 
Tmesh_Á˚
 *
	mÁ˚s
;

23 
Tmesh_vît
 *
	mvîts
;

24 } 
	tTmesh
;

26 
tmesh_öô
(
Tmesh
 *
m
);

27 
tmesh_föÆize
(
Tmesh
 *
m
);

28 
tmesh_¥óŒoc
(
Tmesh
 *
m
, 
f
, 
v
);

29 
tmesh_addquad
(
Tmesh
 *
m
, *
vîts
);

30 
tmesh_addåi
(
Tmesh
 *
m
, *
vîts
);

31 
tmesh_addvîti˚s
(
Tmesh
 *
m
, *
vît
);

32 
tmesh_addÁ˚
(
Tmesh
 *
m
, 
a
, 
b
, 
c
);

	@src/util/struct/varray.c

8 
	~<as£π.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<m©h.h
>

13 
	~"v¨øy.h
"

15 
	#OFFSET
(
a
,
sz
,
b
Ë((*)(((*)◊)Ë+ ((szË* (b))))

	)

17 
grow
(
V¨øy
 *
¨øy
);

18 
shrök
(
V¨øy
 *
¨øy
);

19 
föd_ñemít
(
V¨øy
 *
¨øy
, * 
ñemít
);

21 
	$grow
(
V¨øy
 *
¨øy
)

23 
¨øy
->
max
 = 
	`˚û
(array->max * 1.6f);

24 
¨øy
->
d©a
 = 
	`ªÆloc
◊ºay->d©a,áºay->
max
 *áºay->
ñemít_size
);

25 
	}
}

27 
	$shrök
(
V¨øy
 *
¨øy
)

29 
¨øy
->
max
 = (Ë
	`˚û
(array->max / 2.0);

30 
¨øy
->
d©a
 = 
	`ªÆloc
◊ºay->d©a,áºay->
max
 *áºay->
ñemít_size
);

31 
	}
}

47 
	$v¨øy_öô
(
V¨øy
 *
a
, 
size_t
 
ñemít_size
)

49 
max
 = 10;

50 
a
->
ñemít_size
 =Élement_size;

51 
a
->
Àngth
 = 0;

52 
a
->
max
 = max;

53 
a
->
d©a
 = 
	`mÆloc
(
max
*
ñemít_size
);

54 
	}
}

56 
v¨øy_föÆize
(
V¨øy
 *
¨øy
, (*
föÆizî
)(*
v
))

58 if(
föÆizî
)

60 
i
;

61 
i
 = 0; i < 
¨øy
->
Àngth
; i++)

63 
	`föÆizî
(
	`OFFSET
(
¨øy
,áºay->
ñemít_size
, 
i
));

67 
	`‰ì
(
¨øy
->
d©a
);

68 
	}
}

70 
boﬁ
 
	$v¨øy_i£m±y
(
V¨øy
 *
¨øy
)

72  
¨øy
->
Àngth
 == 0;

73 
	}
}

75 
size_t
 
	$v¨øy_Àngth
(
V¨øy
 *
¨øy
)

77  
¨øy
->
Àngth
;

78 
	}
}

80 
size_t
 
	$v¨øy_d©asize
(
V¨øy
 *
¨øy
)

82  
¨øy
->
Àngth
 *áºay->
ñemít_size
;

83 
	}
}

85 
	$v¨øy_ª£rve
(
V¨øy
 *
¨øy
, 
size_t
 
n
)

87 if(
¨øy
->
Àngth
 + 
n
 <áºay->
max
)

89 
¨øy
->
max
 =áºay->
Àngth
 + 
n
;

90 
¨øy
->
d©a
 = 
	`ªÆloc
◊ºay->d©a,áºay->
max
 *áºay->
ñemít_size
);

92 
	}
}

94 
	$v¨øy_add
(
V¨øy
 *
¨øy
, * 
ñemít
)

96 
	`as£π
(
ñemít
);

98 i‡(
¨øy
->
Àngth
 + 1 =¨øy->
max
)

100 
	`grow
(
¨øy
);

103 
	`mem˝y
(
	`OFFSET
(
¨øy
->
d©a
,áºay->
Àngth
,áºay->
ñemít_size
), 
ñemít
,árray->element_size);

104 ++(
¨øy
->
Àngth
);

105 
	}
}

107 
v¨øy_ªmove
(
V¨øy
 *
¨øy
, 
i
, (*
föÆizî
)(*
v
))

109 * 
ªm_ñemít
 = 
	`OFFSET
(
¨øy
,áºay->
ñemít_size
, 
i
);

110 
	`föÆizî
(
ªm_ñemít
);

111 
	`mem˝y
(
ªm_ñemít
, 
	`OFFSET
‘em_ñemít, 
¨øy
->
ñemít_size
, 1),áºay->ñemít_sizê* (¨øy->
Àngth
 - 
i
));

112 --(
¨øy
->
Àngth
);

113 i‡(
¨øy
->
max
 > 10 &&áºay->
Àngth
 <árray->max/3)

114 
	`shrök
(
¨øy
);

115 
	}
}

117 c⁄° c⁄°* 
	$v¨øy_gë
(
V¨øy
 *
¨øy
, 
ödex
)

119  
	`OFFSET
(
¨øy
->
d©a
,áºay->
ñemít_size
, 
ödex
);

120 
	}
}

122 
	$v¨øy_tobuf„r
(
V¨øy
 *
¨øy
, *
buf
)

124 
	`mem˝y
(
buf
, 
¨øy
->
d©a
,áºay->
Àngth
 *áºay->
ñemít_size
);

125 
	}
}

127 c⁄° c⁄°* 
	$v¨øy_d©≠å
(
V¨øy
 *
¨øy
)

129  
¨øy
->
d©a
;

130 
	}
}

132 
	$v¨øy_˛ór
(
V¨øy
 *
¨øy
)

134 
¨øy
->
max
 = 10;

135 
¨øy
->
Àngth
 = 0;

136 
¨øy
->
d©a
 = 
	`ªÆloc
◊ºay->d©a,áºay->
max
 *áºay->
ñemít_size
);

137 
	}
}

	@src/util/struct/varray.h

8 #i‚de‡
_VARRAY_H


9 
	#_VARRAY_H


	)

11 
	~<°ddef.h
>

12 
	~<°dboﬁ.h
>

16 
	sV¨øy
 {

17 
size_t
 
	mñemít_size
;

18 
size_t
 
	mÀngth
;

19 
size_t
 
	mmax
;

20 * 
	md©a
;

21 } 
	tV¨øy
;

24 
v¨øy_öô
(
V¨øy
 *
v
, 
size_t
 
ñemít_size
);

25 
v¨øy_föÆize
(
V¨øy
 *
¨øy
, (*
föÆizî
)(*
v
));

27 
boﬁ
 
	`v¨øy_i£m±y
(
V¨øy
 *
¨øy
);

28 
size_t
 
	`v¨øy_Àngth
(
V¨øy
 *
¨øy
);

29 
size_t
 
	`v¨øy_d©asize
(
V¨øy
 *
¨øy
);

30 
	`v¨øy_ª£rve
(
V¨øy
 *
¨øy
, 
size_t
 
n
);

31 
	`v¨øy_add
(
V¨øy
 *
¨øy
, * 
ñemít
);

32 
	`v¨øy_ªmove
(
V¨øy
 *
¨øy
, 
i
, (*
föÆizî
)(*
v
));

33 c⁄° c⁄°* 
	`v¨øy_gë
(
V¨øy
 *
¨øy
, 
ödex
);

34 
	`v¨øy_tobuf„r
(
V¨øy
 *
¨øy
, *
buf
);

35 c⁄° c⁄°* 
	`v¨øy_d©≠å
(
V¨øy
 *
¨øy
);

36 
	`v¨øy_˛ór
(
V¨øy
 *
¨øy
);

	@src/util/time.c

8 
	~<time.h
>

9 
	~<sys/time.h
>

11 
	~"time.h
"

13 
	$timevÆ_tick
(
timevÆ
 *
t
)

15 
dt
;

16 
timevÆ
 
t2
;

17 
	`gëtimeofday
(&
t2
, 
NULL
);

19 
dt
 = (1000.0‡* (
t2
.
tv_£c
 - 
t
->tv_sec) +

20 ((
t2
.
tv_u£c
 - 
t
->tv_usec) / 1000.0f));

22 
t
->
tv_£c
 = 
t2
.tv_sec;

23 
t
->
tv_u£c
 = 
t2
.tv_usec;

24  
dt
;

25 
	}
}

	@src/util/time.h

8 #i‚de‡
_OBJ_TIME_H


9 
	#_OBJ_TIME_H


	)

11 
timevÆ_tick
(
timevÆ
 *
t
);

	@test/main.c

7 
	~<GL/gÀw.h
>

8 
	~<GL/gl.h
>

9 
	~<Æloˇ.h
>

10 
	~<as£π.h
>

11 
	~<î∫o.h
>

12 
	~<Êﬂt.h
>

13 
	~<°dlib.h
>

14 
	~<°dboﬁ.h
>

15 
	~<°dio.h
>

16 
	~<°döt.h
>

18 
	~"˛ockw‹k/utû/m©h/°©s.h
"

19 
	~"˛ockw‹k/utû/hash.h
"

20 
	~"˛ockw‹k/utû/m©h/vec.h
"

21 
	~"˛ockw‹k/utû/m©h/sˇœr.h
"

22 
	~"˛ockw‹k/utû/m©h/åi.h
"

23 
	~"˛ockw‹k/utû/m©h/m©rix.h
"

24 
	~"˛ockw‹k/utû/m©h/c⁄vît.h
"

25 
	~"˛ockw‹k/utû/°ru˘/ôî©‹.h
"

26 
	~"˛ockw‹k/utû/°ru˘/kdåì.h
"

27 
	~"˛ockw‹k/utû/°ru˘/li°.h
"

28 
	~"˛ockw‹k/utû/°r.h
"

30 
	#SECTION_BEGIN
(
msg
Ë
	`¥ötf
("***Te°ög %s***\n",msg)

	)

31 
	#SECTION_END
(
msg
Ë
	`¥ötf
("***Pas£d %s***\n\n",msg)

	)

32 
	#TEST
(
msg
,
vÆ
Ëif(vÆ && msg){
	`¥ötf
("Pas£d %s\n",msg);}if(!vÆ){¥ötf("!!!Faûed %s!!!\n",msg);}

	)

33 
	#TEST_BEGIN
(
msg
Ë
	`¥ötf
("Te°ög %s\n",msg)

	)

34 
	#TEST_END
(
msg
Ë
	`¥ötf
("Pas£d %s\n",msg)

	)

36 #i‚de‡
DEBUG


37 
	#NDEBUG


	)

40 
ã°_glExt
();

41 
ã°_vec
();

42 
ã°_°r
();

43 
ã°_m©rix
();

44 
ã°_mesh
();

45 
boﬁ
 
unô_ã°
(boﬁ 
ign‹e
);

48 
	$ã°_glExt
()

50 
	`as£π
(
GL_VERSION_3_0
 && "GL Version < 3.0");

51 
	`as£π
(
GL_ARB_vîãx_¨øy_obje˘
 && "Vertex Array capabilitiesÇot found. \
 update Graphics drivers");

53 
	`as£π
(
GL_ARB_ö°™˚d_¨øys
 && "Instancedárray capabilitiesÇot found. \
 update Graphics drivers");

55 
	`as£π
(
GL_EXT_døw_ö°™˚d
 && "Cannot draw instances meshes.");

56 
	`as£π
(
GL_BGRA
 && "BGRA ColorÑepresentationÇot supported");

57 
	}
}

59 
	$ã°_°©s
()

61 
	`SECTION_BEGIN
("Stats");

62 
	`as£π
(1140 =
	`°©s_choo£
(20, 3));

63 
	`as£π
(35 =
	`°©s_choo£
(7, 3));

64 
	`as£π
(0 =
	`°©s_choo£
(2, 8));

65 
	`SECTION_END
("Stats");

66 
	}
}

68 
	$ã°_°r
()

70 
	`SECTION_BEGIN
("str");

71 
°r
 
s
;

72 
	`°r_öô
(&
s
, "SomeÜongÅext or something");

73 
	`TEST_BEGIN
("find string");

74 
	`as£π
(
	`°r_föd_c°r
(&
s
, "or") == 15);

75 
	`°r_ª£t
(&
s
, "some other string 1232ánd stuffy");

76 
	`as£π
(
	`°r_föd_c°r
(&
s
, " 12") == 17);

77 
	`as£π
(
	`°r_föd_c°r
(&
s
, "stringy") == -1);

78 
	`TEST_END
("find string");

79 
	`SECTION_END
("str");

80 
	}
}

83 
	$ã°_vec
()

85 
	`SECTION_BEGIN
("Vector Math");

87 
	`TEST_BEGIN
("Half-To-Float");

88 
	`as£π
(
	`„q
(
	`htof
(32767), 1.0f));

89 
	`as£π
(
	`„q
(
	`htof
(-32768), -1.0f));

90 
	`as£π
(
	`„q
(
	`htof
(0), 0.0f));

91 
	`TEST_END
("Half-To-Float");

93 
	`TEST_BEGIN
("Unsigned-Half-To-Float");

94 
	`as£π
(
	`„q
(
	`uhtof
(0), 0.0f));

95 
	`as£π
(
	`„q
(
	`uhtof
(65535), 1.0f));

96 
	`TEST_END
("Unsigned-Half-To-Float");

98 
	`TEST_BEGIN
("Averaging");

99 
vec3
 
a
 = {1,2,3};

100 
vec3
 
b
 = {2,3,4};

101 
vec3
 
c
 = {1.4f, 1.4f, 1.4f};

102 
vec3
 
d
 = {0,0,0};

103 
vec3
 
ªs
;

104 
vec3
 
tŸ
 = {1.1f, 1.6f, 2.1f};

105 
	`vec3_avg
(
ªs
, 4, 
a
, 
b
, 
c
, 
d
);

106 
	`as£π
(
	`vec3_eq
(
ªs
, 
tŸ
));

107 
	`TEST_END
("Averaging");

108 
	`SECTION_END
("Vector Math\n");

109 
	}
}

111 
	$ã°_m©rix
()

113 
	`SECTION_BEGIN
("Matrix Math");

114 
	`TEST_BEGIN
("Quaternion Conversion");

115 
m©4
 
m
;

116 
qu©îni⁄
 
q
;

117 
	`m©4_idítôy
(
m
);

118 
	`m©4_to_qu©îni⁄
(
m
, 
q
);

119 
	`vec4_¥öt
(
q
);

121 
	`TEST_END
("Quaternion Conversion");

122 
	`SECTION_END
("Matrix Math");

123 
	}
}

125 
	$ã°_li°
()

127 
	`SECTION_BEGIN
("List");

128 
Li°
 
li°
;

129 
	`¥ötf
("list init\n");

130 
	`li°_öô
(&
li°
, ());

131 
	`as£π
(
	`li°_Àngth
(&
li°
) == 0);

132 
	`¥ötf
("listádding\n");

133 
n
 = 1;

134 
	`li°_add‰⁄t
(&
li°
, &
n
);

135 
n
 = 2; 
	`li°_add‰⁄t
(&
li°
, &n);

136 
n
 = 3; 
	`li°_add‰⁄t
(&
li°
, &n);

137 
n
 = 10; 
	`li°_addback
(&
li°
, &n);

138 
	`as£π
(
	`li°_Àngth
(&
li°
) == 4);

139 
Iãøt‹
 
‰⁄t_ô
;

140 
Iãøt‹
 
back_ô
;

141 
	`li°_fú°
(&
li°
, &
‰⁄t_ô
);

142 
	`li°_√xt
(&
li°
, &
‰⁄t_ô
);

143 
	`li°_œ°
(&
li°
, &
back_ô
);

144 
	`li°_movó·î
(&
li°
, &
‰⁄t_ô
, &
back_ô
);

145 
	`li°_ªmove
(&
li°
, &
‰⁄t_ô
);

146 
Iãøt‹
 
ô
;

147 
	`li°_fú°
(&
li°
, &
ô
);

148 
	`¥ötf
("list iterating\n");

149 
	`ôî©‹_vÆue
(&
ô
))

151 
	`¥ötf
("vÆ: %d\n", *((*)
	`ôî©‹_vÆue
(&
ô
)));

152 
	`li°_√xt
(&
li°
, &
ô
);

154 
	`as£π
(
	`li°_d©asize
(&
li°
) == () * 3);

155 *
buf
 = 
	`Æloˇ
(
	`li°_d©asize
(&
li°
));

156 
	`li°_tobuf„r
(&
li°
, 
buf
);

158 
i
;

159 
i
 = 0; i < 3; i++)

161 
	`¥ötf
("bu‚: %d\n", 
buf
[
i
]);

163 
	`SECTION_END
("List");

164 
	}
}

166 
	$maö
(
¨gc
, **
¨gv
)

168 
	`ã°_°r
();

169 
	`ã°_vec
();

170 
	`ã°_m©rix
();

171 
	`ã°_°©s
();

172 
	`ã°_li°
();

173 
	}
}

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

40 #i‡!
deföed
(
__SCITECH_SNAP__
)

42 #i‡
deföed
(
__BEOS__
)

43 
	~<°dlib.h
>

46 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
NeXT
Ë|| deföed(
NeXT_PDO
))

47 
	#OPENSTEP


	)

50 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

51 
	#__WIN32__


	)

54 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
))

55 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

56 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

57 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#GLAPI
 

	)

62 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

63 
	#GLAPIENTRY


	)

65 
	#GLAPIENTRY
 
__°dˇŒ


	)

67 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

68 
	#GLAPI
 

	)

69 
	#GLAPIENTRY
 
__°dˇŒ


	)

70 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

71 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

72 
	#GLAPIENTRY


	)

75 #i‡(
deföed
(
__BEOS__
Ë&& deföed(
__POWERPC__
)Ë|| deföed(
__QUICKDRAW__
)

76 
	#PRAGMA_EXPORT_SUPPORTED
 1

	)

87 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

88 #i‚de‡
WIN32_LEAN_AND_MEAN


89 
	#WIN32_LEAN_AND_MEAN
 1

	)

91 
	~<wödows.h
>

94 #i‡
deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


95 #¥agm®
imp‹t
 
⁄


98 #i‚de‡
GLAPI


99 
	#GLAPI
 

	)

102 #i‚de‡
GLAPIENTRY


103 
	#GLAPIENTRY


	)

106 #i‚de‡
APIENTRY


107 
	#APIENTRY
 
GLAPIENTRY


	)

111 #i‚de‡
APIENTRYP


112 
	#APIENTRYP
 
APIENTRY
 *

	)

115 #i‚de‡
GLAPIENTRYP


116 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

119 #ifde‡
CENTERLINE_CLPP


120 sig√d

	)

123 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

124 #¥agm®
exp‹t
 
⁄


134 #ifde‡
__˝lu•lus


140 
	#GL_VERSION_1_1
 1

	)

141 
	#GL_VERSION_1_2
 1

	)

142 
	#GL_VERSION_1_3
 1

	)

143 
	#GL_ARB_imagög
 1

	)

149 
	tGLíum
;

150 
	tGLboﬁón
;

151 
	tGLbôfõld
;

152 
	tGLvoid
;

153 sig√d 
	tGLbyã
;

154 
	tGLsh‹t
;

155 
	tGLöt
;

156 
	tGLubyã
;

157 
	tGLush‹t
;

158 
	tGLuöt
;

159 
	tGLsizei
;

160 
	tGLÊﬂt
;

161 
	tGL˛ampf
;

162 
	tGLdoubÀ
;

163 
	tGL˛ampd
;

172 
	#GL_FALSE
 0x0

	)

173 
	#GL_TRUE
 0x1

	)

176 
	#GL_BYTE
 0x1400

	)

177 
	#GL_UNSIGNED_BYTE
 0x1401

	)

178 
	#GL_SHORT
 0x1402

	)

179 
	#GL_UNSIGNED_SHORT
 0x1403

	)

180 
	#GL_INT
 0x1404

	)

181 
	#GL_UNSIGNED_INT
 0x1405

	)

182 
	#GL_FLOAT
 0x1406

	)

183 
	#GL_2_BYTES
 0x1407

	)

184 
	#GL_3_BYTES
 0x1408

	)

185 
	#GL_4_BYTES
 0x1409

	)

186 
	#GL_DOUBLE
 0x140A

	)

189 
	#GL_POINTS
 0x0000

	)

190 
	#GL_LINES
 0x0001

	)

191 
	#GL_LINE_LOOP
 0x0002

	)

192 
	#GL_LINE_STRIP
 0x0003

	)

193 
	#GL_TRIANGLES
 0x0004

	)

194 
	#GL_TRIANGLE_STRIP
 0x0005

	)

195 
	#GL_TRIANGLE_FAN
 0x0006

	)

196 
	#GL_QUADS
 0x0007

	)

197 
	#GL_QUAD_STRIP
 0x0008

	)

198 
	#GL_POLYGON
 0x0009

	)

201 
	#GL_VERTEX_ARRAY
 0x8074

	)

202 
	#GL_NORMAL_ARRAY
 0x8075

	)

203 
	#GL_COLOR_ARRAY
 0x8076

	)

204 
	#GL_INDEX_ARRAY
 0x8077

	)

205 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

206 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

207 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

208 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

209 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

210 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

211 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

212 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

213 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

214 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

215 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

216 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

217 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

218 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

219 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

220 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

221 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

222 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

223 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

224 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

225 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

226 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

227 
	#GL_V2F
 0x2A20

	)

228 
	#GL_V3F
 0x2A21

	)

229 
	#GL_C4UB_V2F
 0x2A22

	)

230 
	#GL_C4UB_V3F
 0x2A23

	)

231 
	#GL_C3F_V3F
 0x2A24

	)

232 
	#GL_N3F_V3F
 0x2A25

	)

233 
	#GL_C4F_N3F_V3F
 0x2A26

	)

234 
	#GL_T2F_V3F
 0x2A27

	)

235 
	#GL_T4F_V4F
 0x2A28

	)

236 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

237 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

238 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

239 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

240 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

243 
	#GL_MATRIX_MODE
 0x0BA0

	)

244 
	#GL_MODELVIEW
 0x1700

	)

245 
	#GL_PROJECTION
 0x1701

	)

246 
	#GL_TEXTURE
 0x1702

	)

249 
	#GL_POINT_SMOOTH
 0x0B10

	)

250 
	#GL_POINT_SIZE
 0x0B11

	)

251 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

252 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

255 
	#GL_LINE_SMOOTH
 0x0B20

	)

256 
	#GL_LINE_STIPPLE
 0x0B24

	)

257 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

258 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

259 
	#GL_LINE_WIDTH
 0x0B21

	)

260 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

261 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

264 
	#GL_POINT
 0x1B00

	)

265 
	#GL_LINE
 0x1B01

	)

266 
	#GL_FILL
 0x1B02

	)

267 
	#GL_CW
 0x0900

	)

268 
	#GL_CCW
 0x0901

	)

269 
	#GL_FRONT
 0x0404

	)

270 
	#GL_BACK
 0x0405

	)

271 
	#GL_POLYGON_MODE
 0x0B40

	)

272 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

273 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

274 
	#GL_EDGE_FLAG
 0x0B43

	)

275 
	#GL_CULL_FACE
 0x0B44

	)

276 
	#GL_CULL_FACE_MODE
 0x0B45

	)

277 
	#GL_FRONT_FACE
 0x0B46

	)

278 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

279 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

280 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

281 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

282 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

285 
	#GL_COMPILE
 0x1300

	)

286 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

287 
	#GL_LIST_BASE
 0x0B32

	)

288 
	#GL_LIST_INDEX
 0x0B33

	)

289 
	#GL_LIST_MODE
 0x0B30

	)

292 
	#GL_NEVER
 0x0200

	)

293 
	#GL_LESS
 0x0201

	)

294 
	#GL_EQUAL
 0x0202

	)

295 
	#GL_LEQUAL
 0x0203

	)

296 
	#GL_GREATER
 0x0204

	)

297 
	#GL_NOTEQUAL
 0x0205

	)

298 
	#GL_GEQUAL
 0x0206

	)

299 
	#GL_ALWAYS
 0x0207

	)

300 
	#GL_DEPTH_TEST
 0x0B71

	)

301 
	#GL_DEPTH_BITS
 0x0D56

	)

302 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

303 
	#GL_DEPTH_FUNC
 0x0B74

	)

304 
	#GL_DEPTH_RANGE
 0x0B70

	)

305 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

306 
	#GL_DEPTH_COMPONENT
 0x1902

	)

309 
	#GL_LIGHTING
 0x0B50

	)

310 
	#GL_LIGHT0
 0x4000

	)

311 
	#GL_LIGHT1
 0x4001

	)

312 
	#GL_LIGHT2
 0x4002

	)

313 
	#GL_LIGHT3
 0x4003

	)

314 
	#GL_LIGHT4
 0x4004

	)

315 
	#GL_LIGHT5
 0x4005

	)

316 
	#GL_LIGHT6
 0x4006

	)

317 
	#GL_LIGHT7
 0x4007

	)

318 
	#GL_SPOT_EXPONENT
 0x1205

	)

319 
	#GL_SPOT_CUTOFF
 0x1206

	)

320 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

321 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

322 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

323 
	#GL_AMBIENT
 0x1200

	)

324 
	#GL_DIFFUSE
 0x1201

	)

325 
	#GL_SPECULAR
 0x1202

	)

326 
	#GL_SHININESS
 0x1601

	)

327 
	#GL_EMISSION
 0x1600

	)

328 
	#GL_POSITION
 0x1203

	)

329 
	#GL_SPOT_DIRECTION
 0x1204

	)

330 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

331 
	#GL_COLOR_INDEXES
 0x1603

	)

332 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

333 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

334 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

335 
	#GL_FRONT_AND_BACK
 0x0408

	)

336 
	#GL_SHADE_MODEL
 0x0B54

	)

337 
	#GL_FLAT
 0x1D00

	)

338 
	#GL_SMOOTH
 0x1D01

	)

339 
	#GL_COLOR_MATERIAL
 0x0B57

	)

340 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

341 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

342 
	#GL_NORMALIZE
 0x0BA1

	)

345 
	#GL_CLIP_PLANE0
 0x3000

	)

346 
	#GL_CLIP_PLANE1
 0x3001

	)

347 
	#GL_CLIP_PLANE2
 0x3002

	)

348 
	#GL_CLIP_PLANE3
 0x3003

	)

349 
	#GL_CLIP_PLANE4
 0x3004

	)

350 
	#GL_CLIP_PLANE5
 0x3005

	)

353 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

354 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

355 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

356 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

357 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

358 
	#GL_ACCUM
 0x0100

	)

359 
	#GL_ADD
 0x0104

	)

360 
	#GL_LOAD
 0x0101

	)

361 
	#GL_MULT
 0x0103

	)

362 
	#GL_RETURN
 0x0102

	)

365 
	#GL_ALPHA_TEST
 0x0BC0

	)

366 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

367 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

370 
	#GL_BLEND
 0x0BE2

	)

371 
	#GL_BLEND_SRC
 0x0BE1

	)

372 
	#GL_BLEND_DST
 0x0BE0

	)

373 
	#GL_ZERO
 0x0

	)

374 
	#GL_ONE
 0x1

	)

375 
	#GL_SRC_COLOR
 0x0300

	)

376 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

377 
	#GL_SRC_ALPHA
 0x0302

	)

378 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

379 
	#GL_DST_ALPHA
 0x0304

	)

380 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

381 
	#GL_DST_COLOR
 0x0306

	)

382 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

383 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

386 
	#GL_FEEDBACK
 0x1C01

	)

387 
	#GL_RENDER
 0x1C00

	)

388 
	#GL_SELECT
 0x1C02

	)

391 
	#GL_2D
 0x0600

	)

392 
	#GL_3D
 0x0601

	)

393 
	#GL_3D_COLOR
 0x0602

	)

394 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

395 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

396 
	#GL_POINT_TOKEN
 0x0701

	)

397 
	#GL_LINE_TOKEN
 0x0702

	)

398 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

399 
	#GL_POLYGON_TOKEN
 0x0703

	)

400 
	#GL_BITMAP_TOKEN
 0x0704

	)

401 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

402 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

403 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

404 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

405 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

406 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

409 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

410 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

413 
	#GL_FOG
 0x0B60

	)

414 
	#GL_FOG_MODE
 0x0B65

	)

415 
	#GL_FOG_DENSITY
 0x0B62

	)

416 
	#GL_FOG_COLOR
 0x0B66

	)

417 
	#GL_FOG_INDEX
 0x0B61

	)

418 
	#GL_FOG_START
 0x0B63

	)

419 
	#GL_FOG_END
 0x0B64

	)

420 
	#GL_LINEAR
 0x2601

	)

421 
	#GL_EXP
 0x0800

	)

422 
	#GL_EXP2
 0x0801

	)

425 
	#GL_LOGIC_OP
 0x0BF1

	)

426 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

427 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

428 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

429 
	#GL_CLEAR
 0x1500

	)

430 
	#GL_SET
 0x150F

	)

431 
	#GL_COPY
 0x1503

	)

432 
	#GL_COPY_INVERTED
 0x150C

	)

433 
	#GL_NOOP
 0x1505

	)

434 
	#GL_INVERT
 0x150A

	)

435 
	#GL_AND
 0x1501

	)

436 
	#GL_NAND
 0x150E

	)

437 
	#GL_OR
 0x1507

	)

438 
	#GL_NOR
 0x1508

	)

439 
	#GL_XOR
 0x1506

	)

440 
	#GL_EQUIV
 0x1509

	)

441 
	#GL_AND_REVERSE
 0x1502

	)

442 
	#GL_AND_INVERTED
 0x1504

	)

443 
	#GL_OR_REVERSE
 0x150B

	)

444 
	#GL_OR_INVERTED
 0x150D

	)

447 
	#GL_STENCIL_BITS
 0x0D57

	)

448 
	#GL_STENCIL_TEST
 0x0B90

	)

449 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

450 
	#GL_STENCIL_FUNC
 0x0B92

	)

451 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

452 
	#GL_STENCIL_FAIL
 0x0B94

	)

453 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

454 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

455 
	#GL_STENCIL_REF
 0x0B97

	)

456 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

457 
	#GL_STENCIL_INDEX
 0x1901

	)

458 
	#GL_KEEP
 0x1E00

	)

459 
	#GL_REPLACE
 0x1E01

	)

460 
	#GL_INCR
 0x1E02

	)

461 
	#GL_DECR
 0x1E03

	)

464 
	#GL_NONE
 0x0

	)

465 
	#GL_LEFT
 0x0406

	)

466 
	#GL_RIGHT
 0x0407

	)

470 
	#GL_FRONT_LEFT
 0x0400

	)

471 
	#GL_FRONT_RIGHT
 0x0401

	)

472 
	#GL_BACK_LEFT
 0x0402

	)

473 
	#GL_BACK_RIGHT
 0x0403

	)

474 
	#GL_AUX0
 0x0409

	)

475 
	#GL_AUX1
 0x040A

	)

476 
	#GL_AUX2
 0x040B

	)

477 
	#GL_AUX3
 0x040C

	)

478 
	#GL_COLOR_INDEX
 0x1900

	)

479 
	#GL_RED
 0x1903

	)

480 
	#GL_GREEN
 0x1904

	)

481 
	#GL_BLUE
 0x1905

	)

482 
	#GL_ALPHA
 0x1906

	)

483 
	#GL_LUMINANCE
 0x1909

	)

484 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

485 
	#GL_ALPHA_BITS
 0x0D55

	)

486 
	#GL_RED_BITS
 0x0D52

	)

487 
	#GL_GREEN_BITS
 0x0D53

	)

488 
	#GL_BLUE_BITS
 0x0D54

	)

489 
	#GL_INDEX_BITS
 0x0D51

	)

490 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

491 
	#GL_AUX_BUFFERS
 0x0C00

	)

492 
	#GL_READ_BUFFER
 0x0C02

	)

493 
	#GL_DRAW_BUFFER
 0x0C01

	)

494 
	#GL_DOUBLEBUFFER
 0x0C32

	)

495 
	#GL_STEREO
 0x0C33

	)

496 
	#GL_BITMAP
 0x1A00

	)

497 
	#GL_COLOR
 0x1800

	)

498 
	#GL_DEPTH
 0x1801

	)

499 
	#GL_STENCIL
 0x1802

	)

500 
	#GL_DITHER
 0x0BD0

	)

501 
	#GL_RGB
 0x1907

	)

502 
	#GL_RGBA
 0x1908

	)

505 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

506 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

507 
	#GL_MAX_LIGHTS
 0x0D31

	)

508 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

509 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

510 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

511 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

512 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

513 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

514 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

515 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

516 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

517 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

520 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

521 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

522 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

523 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

524 
	#GL_CURRENT_INDEX
 0x0B01

	)

525 
	#GL_CURRENT_COLOR
 0x0B00

	)

526 
	#GL_CURRENT_NORMAL
 0x0B02

	)

527 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

528 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

529 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

530 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

531 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

532 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

533 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

534 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

535 
	#GL_INDEX_MODE
 0x0C30

	)

536 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

537 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

538 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

539 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

540 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

541 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

542 
	#GL_RENDER_MODE
 0x0C40

	)

543 
	#GL_RGBA_MODE
 0x0C31

	)

544 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

545 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

546 
	#GL_VIEWPORT
 0x0BA2

	)

549 
	#GL_AUTO_NORMAL
 0x0D80

	)

550 
	#GL_MAP1_COLOR_4
 0x0D90

	)

551 
	#GL_MAP1_INDEX
 0x0D91

	)

552 
	#GL_MAP1_NORMAL
 0x0D92

	)

553 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

554 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

555 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

556 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

557 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

558 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

559 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

560 
	#GL_MAP2_INDEX
 0x0DB1

	)

561 
	#GL_MAP2_NORMAL
 0x0DB2

	)

562 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

563 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

564 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

565 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

566 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

567 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

568 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

569 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

570 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

571 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

572 
	#GL_COEFF
 0x0A00

	)

573 
	#GL_ORDER
 0x0A01

	)

574 
	#GL_DOMAIN
 0x0A02

	)

577 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

578 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

579 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

580 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

581 
	#GL_FOG_HINT
 0x0C54

	)

582 
	#GL_DONT_CARE
 0x1100

	)

583 
	#GL_FASTEST
 0x1101

	)

584 
	#GL_NICEST
 0x1102

	)

587 
	#GL_SCISSOR_BOX
 0x0C10

	)

588 
	#GL_SCISSOR_TEST
 0x0C11

	)

591 
	#GL_MAP_COLOR
 0x0D10

	)

592 
	#GL_MAP_STENCIL
 0x0D11

	)

593 
	#GL_INDEX_SHIFT
 0x0D12

	)

594 
	#GL_INDEX_OFFSET
 0x0D13

	)

595 
	#GL_RED_SCALE
 0x0D14

	)

596 
	#GL_RED_BIAS
 0x0D15

	)

597 
	#GL_GREEN_SCALE
 0x0D18

	)

598 
	#GL_GREEN_BIAS
 0x0D19

	)

599 
	#GL_BLUE_SCALE
 0x0D1A

	)

600 
	#GL_BLUE_BIAS
 0x0D1B

	)

601 
	#GL_ALPHA_SCALE
 0x0D1C

	)

602 
	#GL_ALPHA_BIAS
 0x0D1D

	)

603 
	#GL_DEPTH_SCALE
 0x0D1E

	)

604 
	#GL_DEPTH_BIAS
 0x0D1F

	)

605 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

606 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

607 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

608 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

609 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

610 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

611 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

612 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

613 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

614 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

615 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

616 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

617 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

618 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

619 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

620 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

621 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

622 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

623 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

624 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

625 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

626 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

627 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

628 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

629 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

630 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

631 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

632 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

633 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

634 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

635 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

636 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

637 
	#GL_ZOOM_X
 0x0D16

	)

638 
	#GL_ZOOM_Y
 0x0D17

	)

641 
	#GL_TEXTURE_ENV
 0x2300

	)

642 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

643 
	#GL_TEXTURE_1D
 0x0DE0

	)

644 
	#GL_TEXTURE_2D
 0x0DE1

	)

645 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

646 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

647 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

648 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

649 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

650 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

651 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

652 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

653 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

654 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

655 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

656 
	#GL_TEXTURE_WIDTH
 0x1000

	)

657 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

658 
	#GL_TEXTURE_BORDER
 0x1005

	)

659 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

660 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

661 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

662 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

663 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

664 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

665 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

666 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

667 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

668 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

669 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

670 
	#GL_OBJECT_LINEAR
 0x2401

	)

671 
	#GL_OBJECT_PLANE
 0x2501

	)

672 
	#GL_EYE_LINEAR
 0x2400

	)

673 
	#GL_EYE_PLANE
 0x2502

	)

674 
	#GL_SPHERE_MAP
 0x2402

	)

675 
	#GL_DECAL
 0x2101

	)

676 
	#GL_MODULATE
 0x2100

	)

677 
	#GL_NEAREST
 0x2600

	)

678 
	#GL_REPEAT
 0x2901

	)

679 
	#GL_CLAMP
 0x2900

	)

680 
	#GL_S
 0x2000

	)

681 
	#GL_T
 0x2001

	)

682 
	#GL_R
 0x2002

	)

683 
	#GL_Q
 0x2003

	)

686 
	#GL_VENDOR
 0x1F00

	)

687 
	#GL_RENDERER
 0x1F01

	)

688 
	#GL_VERSION
 0x1F02

	)

689 
	#GL_EXTENSIONS
 0x1F03

	)

692 
	#GL_NO_ERROR
 0x0

	)

693 
	#GL_INVALID_ENUM
 0x0500

	)

694 
	#GL_INVALID_VALUE
 0x0501

	)

695 
	#GL_INVALID_OPERATION
 0x0502

	)

696 
	#GL_STACK_OVERFLOW
 0x0503

	)

697 
	#GL_STACK_UNDERFLOW
 0x0504

	)

698 
	#GL_OUT_OF_MEMORY
 0x0505

	)

701 
	#GL_CURRENT_BIT
 0x00000001

	)

702 
	#GL_POINT_BIT
 0x00000002

	)

703 
	#GL_LINE_BIT
 0x00000004

	)

704 
	#GL_POLYGON_BIT
 0x00000008

	)

705 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

706 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

707 
	#GL_LIGHTING_BIT
 0x00000040

	)

708 
	#GL_FOG_BIT
 0x00000080

	)

709 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

710 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

711 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

712 
	#GL_VIEWPORT_BIT
 0x00000800

	)

713 
	#GL_TRANSFORM_BIT
 0x00001000

	)

714 
	#GL_ENABLE_BIT
 0x00002000

	)

715 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

716 
	#GL_HINT_BIT
 0x00008000

	)

717 
	#GL_EVAL_BIT
 0x00010000

	)

718 
	#GL_LIST_BIT
 0x00020000

	)

719 
	#GL_TEXTURE_BIT
 0x00040000

	)

720 
	#GL_SCISSOR_BIT
 0x00080000

	)

721 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

725 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

726 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

727 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

728 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

729 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

730 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

731 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

732 
	#GL_ALPHA4
 0x803B

	)

733 
	#GL_ALPHA8
 0x803C

	)

734 
	#GL_ALPHA12
 0x803D

	)

735 
	#GL_ALPHA16
 0x803E

	)

736 
	#GL_LUMINANCE4
 0x803F

	)

737 
	#GL_LUMINANCE8
 0x8040

	)

738 
	#GL_LUMINANCE12
 0x8041

	)

739 
	#GL_LUMINANCE16
 0x8042

	)

740 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

741 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

742 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

743 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

744 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

745 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

746 
	#GL_INTENSITY
 0x8049

	)

747 
	#GL_INTENSITY4
 0x804A

	)

748 
	#GL_INTENSITY8
 0x804B

	)

749 
	#GL_INTENSITY12
 0x804C

	)

750 
	#GL_INTENSITY16
 0x804D

	)

751 
	#GL_R3_G3_B2
 0x2A10

	)

752 
	#GL_RGB4
 0x804F

	)

753 
	#GL_RGB5
 0x8050

	)

754 
	#GL_RGB8
 0x8051

	)

755 
	#GL_RGB10
 0x8052

	)

756 
	#GL_RGB12
 0x8053

	)

757 
	#GL_RGB16
 0x8054

	)

758 
	#GL_RGBA2
 0x8055

	)

759 
	#GL_RGBA4
 0x8056

	)

760 
	#GL_RGB5_A1
 0x8057

	)

761 
	#GL_RGBA8
 0x8058

	)

762 
	#GL_RGB10_A2
 0x8059

	)

763 
	#GL_RGBA12
 0x805A

	)

764 
	#GL_RGBA16
 0x805B

	)

765 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

766 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

767 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

768 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

776 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

778 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

780 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

784 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

786 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

788 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

790 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

792 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

798 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

800 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

802 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

804 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

806 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

810 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

812 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

814 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

816 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

818 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

820 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

822 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

824 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

826 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

828 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

831 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

833 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

836 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

838 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

840 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

842 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

845 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

847 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

850 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

852 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

855 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

857 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

859 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

861 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

863 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

865 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

872 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

874 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

876 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

878 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

885 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

887 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

894 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

896 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

897 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

898 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

900 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

901 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

902 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

904 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

905 
GLsizei
 
width
, GLsizeò
height
 );

907 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

909 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

911 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

913 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

914 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

916 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

917 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

919 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

920 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

921 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

922 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

924 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

925 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

927 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

928 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

935 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

937 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

939 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

941 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

943 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

945 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

947 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

948 c⁄° 
GLvoid
 *
li°s
 );

950 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

957 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

959 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

963 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

964 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

965 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

967 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

968 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

969 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

970 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

972 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

973 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

974 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

975 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

977 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

979 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

980 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

982 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

983 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

984 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

985 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

987 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

988 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

989 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

990 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

993 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

994 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

995 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

996 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

997 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

999 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

1000 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1001 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1002 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

1003 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

1006 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

1007 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

1008 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

1009 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

1010 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

1012 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

1013 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

1014 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

1015 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

1016 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1025 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1028 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1030 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1032 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1034 
GLöt
 
blue
, GLöà
Æpha
 );

1035 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1036 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1037 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1038 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1039 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1040 
GLuöt
 
blue
, GLuöà
Æpha
 );

1041 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1042 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1045 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1046 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1047 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1048 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1049 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1050 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1051 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1052 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1054 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1055 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1056 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1060 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1065 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1070 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1075 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1076 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1077 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1079 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1080 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1081 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1082 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1084 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1085 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1086 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1087 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1089 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1090 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1091 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1092 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1096 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1101 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1106 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1107 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1112 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1113 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1118 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1120 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1121 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1122 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1123 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1125 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1126 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1127 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1128 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1130 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1131 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1132 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1133 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1136 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1137 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1138 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1139 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1142 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1143 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1144 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1145 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1152 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1153 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1155 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1156 c⁄° 
GLvoid
 *
±r
 );

1158 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1159 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1161 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1162 c⁄° 
GLvoid
 *
±r
 );

1164 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1165 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1167 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1169 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1173 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1175 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1176 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1178 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1179 c⁄° 
GLvoid
 *
poöãr
 );

1185 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1187 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1188 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1189 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1190 c⁄° 
GLÊﬂt
 *
∑øms
 );

1191 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1192 c⁄° 
GLöt
 *
∑øms
 );

1194 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1195 
GLÊﬂt
 *
∑øms
 );

1196 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1197 
GLöt
 *
∑øms
 );

1199 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1200 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1201 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1202 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1204 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1205 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1206 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1207 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1209 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1210 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1212 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1219 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1221 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1222 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1224 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1225 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1227 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1228 c⁄° 
GLÊﬂt
 *
vÆues
 );

1229 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1230 c⁄° 
GLuöt
 *
vÆues
 );

1231 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1232 c⁄° 
GLush‹t
 *
vÆues
 );

1234 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1235 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1236 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1238 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1239 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1240 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1241 c⁄° 
GLubyã
 *
bôm≠
 );

1243 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1244 
GLsizei
 
width
, GLsizeò
height
,

1245 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1246 
GLvoid
 *
pixñs
 );

1248 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1249 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1250 c⁄° 
GLvoid
 *
pixñs
 );

1252 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1253 
GLsizei
 
width
, GLsizeò
height
,

1254 
GLíum
 
ty≥
 );

1260 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1262 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1264 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1266 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1275 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1276 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1278 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1279 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1280 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1283 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1287 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1290 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1291 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1293 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1294 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1297 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1298 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1300 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1301 c⁄° 
GLÊﬂt
 *
∑øms
 );

1302 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1303 c⁄° 
GLöt
 *
∑øms
 );

1305 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1306 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1307 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1308 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1310 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1311 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1312 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1313 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1316 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1317 
GLöt
 
öã∫ÆF‹m©
,

1318 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1319 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1320 c⁄° 
GLvoid
 *
pixñs
 );

1322 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1323 
GLöt
 
öã∫ÆF‹m©
,

1324 
GLsizei
 
width
, GLsizeò
height
,

1325 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1326 c⁄° 
GLvoid
 *
pixñs
 );

1328 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1329 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1330 
GLvoid
 *
pixñs
 );

1335 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1339 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1341 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1342 c⁄° 
GLuöt
 *
ãxtuªs
,

1343 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1345 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1346 c⁄° 
GLuöt
 *
ãxtuªs
,

1347 
GLboﬁón
 *
ªsidí˚s
 );

1349 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1352 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1353 
GLöt
 
xoff£t
,

1354 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1355 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1358 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1359 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1360 
GLsizei
 
width
, GLsizeò
height
,

1361 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1362 c⁄° 
GLvoid
 *
pixñs
 );

1365 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1366 
GLíum
 
öã∫Æf‹m©
,

1367 
GLöt
 
x
, GLöà
y
,

1368 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1371 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1372 
GLíum
 
öã∫Æf‹m©
,

1373 
GLöt
 
x
, GLöà
y
,

1374 
GLsizei
 
width
, GLsizeò
height
,

1375 
GLöt
 
b‹dî
 );

1378 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1379 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1380 
GLsizei
 
width
 );

1383 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1384 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1385 
GLöt
 
x
, GLöà
y
,

1386 
GLsizei
 
width
, GLsizeò
height
 );

1393 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1394 
GLöt
 
°ride
,

1395 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1396 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1397 
GLöt
 
°ride
,

1398 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1401 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1402 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1403 c⁄° 
GLdoubÀ
 *
poöts
 );

1404 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1405 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1406 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1407 c⁄° 
GLÊﬂt
 *
poöts
 );

1409 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1410 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1411 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1413 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1414 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1416 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1417 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1419 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1420 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1422 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1423 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1425 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1426 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1428 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1429 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1430 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1431 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1433 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1435 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1437 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1439 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1446 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1448 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1450 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1452 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1459 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1461 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1463 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1465 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1467 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1469 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1471 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1479 
	#GL_RESCALE_NORMAL
 0x803A

	)

1480 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1481 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1482 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1483 
	#GL_BGR
 0x80E0

	)

1484 
	#GL_BGRA
 0x80E1

	)

1485 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1486 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1487 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1488 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1489 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1490 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1491 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1492 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1493 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1494 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1495 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1496 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1497 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1498 
	#GL_SINGLE_COLOR
 0x81F9

	)

1499 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1500 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1501 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1502 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1503 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1504 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1505 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1506 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1507 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1508 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1509 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1510 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1511 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1512 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1513 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1514 
	#GL_TEXTURE_3D
 0x806F

	)

1515 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1516 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1517 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1518 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1519 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1521 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1522 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1524 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1525 
GLöt
 
öã∫ÆF‹m©
,

1526 
GLsizei
 
width
, GLsizeò
height
,

1527 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1528 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1529 c⁄° 
GLvoid
 *
pixñs
 );

1531 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1532 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1533 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1534 
GLsizei
 
height
, GLsizeò
dïth
,

1535 
GLíum
 
f‹m©
,

1536 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1538 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1539 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1540 
GLöt
 
zoff£t
, GLöà
x
,

1541 
GLöt
 
y
, 
GLsizei
 
width
,

1542 
GLsizei
 
height
 );

1544 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1545 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1546 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1547 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1554 
	#GL_CONSTANT_COLOR
 0x8001

	)

1555 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1556 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1557 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1558 
	#GL_COLOR_TABLE
 0x80D0

	)

1559 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1560 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1561 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1562 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1563 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1564 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1565 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1566 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1567 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1568 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1569 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1570 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1571 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1572 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1573 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1574 
	#GL_CONVOLUTION_1D
 0x8010

	)

1575 
	#GL_CONVOLUTION_2D
 0x8011

	)

1576 
	#GL_SEPARABLE_2D
 0x8012

	)

1577 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1578 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1579 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1580 
	#GL_REDUCE
 0x8016

	)

1581 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1582 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1583 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1584 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1585 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1586 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1587 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1588 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1589 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1590 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1591 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1592 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1593 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1594 
	#GL_CONSTANT_BORDER
 0x8151

	)

1595 
	#GL_REPLICATE_BORDER
 0x8153

	)

1596 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1597 
	#GL_COLOR_MATRIX
 0x80B1

	)

1598 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1599 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1600 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1601 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1602 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1603 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1604 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1605 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1606 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1607 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1608 
	#GL_HISTOGRAM
 0x8024

	)

1609 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1610 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1611 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1612 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1613 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1614 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1615 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1616 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1617 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1618 
	#GL_MINMAX
 0x802E

	)

1619 
	#GL_MINMAX_FORMAT
 0x802F

	)

1620 
	#GL_MINMAX_SINK
 0x8030

	)

1621 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1622 
	#GL_BLEND_EQUATION
 0x8009

	)

1623 
	#GL_MIN
 0x8007

	)

1624 
	#GL_MAX
 0x8008

	)

1625 
	#GL_FUNC_ADD
 0x8006

	)

1626 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1627 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1628 
	#GL_BLEND_COLOR
 0x8005

	)

1631 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1632 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1633 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1635 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1636 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1637 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1638 c⁄° 
GLvoid
 *
d©a
 );

1640 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1641 c⁄° 
GLöt
 *
∑øms
);

1643 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1644 c⁄° 
GLÊﬂt
 *
∑øms
);

1646 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1647 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1649 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1650 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1652 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1653 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1655 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1656 
GLÊﬂt
 *
∑øms
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1659 
GLöt
 *
∑øms
 );

1661 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1663 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1664 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1666 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1667 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1669 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1671 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1672 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1673 
GLvoid
 *
vÆues
 );

1675 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1676 
GLÊﬂt
 *
∑øms
 );

1678 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1679 
GLöt
 *
∑øms
 );

1681 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1682 
GLboﬁón
 
sök
 );

1684 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1686 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1687 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1688 
GLvoid
 *
vÆues
 );

1690 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1691 
GLÊﬂt
 *
∑øms
 );

1693 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1694 
GLöt
 *
∑øms
 );

1696 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1697 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1698 c⁄° 
GLvoid
 *
image
 );

1700 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1701 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1702 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1704 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1705 
GLÊﬂt
 
∑øms
 );

1707 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1708 c⁄° 
GLÊﬂt
 *
∑øms
 );

1710 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1711 
GLöt
 
∑øms
 );

1713 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1714 c⁄° 
GLöt
 *
∑øms
 );

1716 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1717 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1719 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1720 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1721 
GLsizei
 
height
);

1723 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1724 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1726 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1727 
GLÊﬂt
 *
∑øms
 );

1729 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1730 
GLöt
 *
∑øms
 );

1732 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1733 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1734 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1736 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1737 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1739 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1740 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1749 
	#GL_TEXTURE0
 0x84C0

	)

1750 
	#GL_TEXTURE1
 0x84C1

	)

1751 
	#GL_TEXTURE2
 0x84C2

	)

1752 
	#GL_TEXTURE3
 0x84C3

	)

1753 
	#GL_TEXTURE4
 0x84C4

	)

1754 
	#GL_TEXTURE5
 0x84C5

	)

1755 
	#GL_TEXTURE6
 0x84C6

	)

1756 
	#GL_TEXTURE7
 0x84C7

	)

1757 
	#GL_TEXTURE8
 0x84C8

	)

1758 
	#GL_TEXTURE9
 0x84C9

	)

1759 
	#GL_TEXTURE10
 0x84CA

	)

1760 
	#GL_TEXTURE11
 0x84CB

	)

1761 
	#GL_TEXTURE12
 0x84CC

	)

1762 
	#GL_TEXTURE13
 0x84CD

	)

1763 
	#GL_TEXTURE14
 0x84CE

	)

1764 
	#GL_TEXTURE15
 0x84CF

	)

1765 
	#GL_TEXTURE16
 0x84D0

	)

1766 
	#GL_TEXTURE17
 0x84D1

	)

1767 
	#GL_TEXTURE18
 0x84D2

	)

1768 
	#GL_TEXTURE19
 0x84D3

	)

1769 
	#GL_TEXTURE20
 0x84D4

	)

1770 
	#GL_TEXTURE21
 0x84D5

	)

1771 
	#GL_TEXTURE22
 0x84D6

	)

1772 
	#GL_TEXTURE23
 0x84D7

	)

1773 
	#GL_TEXTURE24
 0x84D8

	)

1774 
	#GL_TEXTURE25
 0x84D9

	)

1775 
	#GL_TEXTURE26
 0x84DA

	)

1776 
	#GL_TEXTURE27
 0x84DB

	)

1777 
	#GL_TEXTURE28
 0x84DC

	)

1778 
	#GL_TEXTURE29
 0x84DD

	)

1779 
	#GL_TEXTURE30
 0x84DE

	)

1780 
	#GL_TEXTURE31
 0x84DF

	)

1781 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1782 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1783 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1785 
	#GL_NORMAL_MAP
 0x8511

	)

1786 
	#GL_REFLECTION_MAP
 0x8512

	)

1787 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1788 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1789 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1790 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1791 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1792 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1793 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1794 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1795 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1796 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1798 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1799 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1800 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1801 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1802 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1803 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1804 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1805 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1806 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1807 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1808 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1810 
	#GL_MULTISAMPLE
 0x809D

	)

1811 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1812 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1813 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1814 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1815 
	#GL_SAMPLES
 0x80A9

	)

1816 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1817 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1818 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1820 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1821 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1822 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1823 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1825 
	#GL_COMBINE
 0x8570

	)

1826 
	#GL_COMBINE_RGB
 0x8571

	)

1827 
	#GL_COMBINE_ALPHA
 0x8572

	)

1828 
	#GL_SOURCE0_RGB
 0x8580

	)

1829 
	#GL_SOURCE1_RGB
 0x8581

	)

1830 
	#GL_SOURCE2_RGB
 0x8582

	)

1831 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1832 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1833 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1834 
	#GL_OPERAND0_RGB
 0x8590

	)

1835 
	#GL_OPERAND1_RGB
 0x8591

	)

1836 
	#GL_OPERAND2_RGB
 0x8592

	)

1837 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1838 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1839 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1840 
	#GL_RGB_SCALE
 0x8573

	)

1841 
	#GL_ADD_SIGNED
 0x8574

	)

1842 
	#GL_INTERPOLATE
 0x8575

	)

1843 
	#GL_SUBTRACT
 0x84E7

	)

1844 
	#GL_CONSTANT
 0x8576

	)

1845 
	#GL_PRIMARY_COLOR
 0x8577

	)

1846 
	#GL_PREVIOUS
 0x8578

	)

1848 
	#GL_DOT3_RGB
 0x86AE

	)

1849 
	#GL_DOT3_RGBA
 0x86AF

	)

1851 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1853 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1855 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1857 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1859 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1861 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1863 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1865 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1867 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1869 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1905 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1907 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1909 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1911 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1913 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1915 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1917 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1919 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1921 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1923 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1925 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1927 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1929 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1931 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1933 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1936 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1938 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1940 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1942 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1944 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1947 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1948 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1949 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1950 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1951 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1952 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1953 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1954 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1955 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1962 #i‚de‡
GL_ARB_mu…ôextuª


1963 
	#GL_ARB_mu…ôextuª
 1

	)

1965 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1966 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1967 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1968 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1969 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1970 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1971 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1972 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1973 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1974 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1975 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1976 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1977 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1978 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1979 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1980 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1981 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1982 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1983 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1984 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1985 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1986 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1987 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1988 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1989 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1990 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1991 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1992 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1993 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1994 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1995 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1996 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1997 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1998 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1999 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

2001 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2002 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2005 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

2006 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2007 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

2008 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2009 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

2010 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2011 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

2012 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2013 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

2014 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2015 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

2016 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2017 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

2018 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2019 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

2020 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2021 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

2022 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2023 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

2024 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2025 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2026 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2027 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2028 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2029 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2030 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2031 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2032 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2033 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2034 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2036 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2037 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2040 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2041 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2042 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2043 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2044 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2045 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2046 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2047 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2048 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2049 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2050 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2051 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2052 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2053 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2054 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2055 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2056 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2057 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2058 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2059 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2060 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2061 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2062 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2063 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2064 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2065 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2066 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2067 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2068 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2069 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2079 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2085 
	~<GL/gÀxt.h
>

2091 #i‡
GL_ARB_shadî_obje˘s


2093 #i‚de‡
GL_MESA_shadî_debug


2094 
	#GL_MESA_shadî_debug
 1

	)

2096 
	#GL_DEBUG_OBJECT_MESA
 0x8759

	)

2097 
	#GL_DEBUG_PRINT_MESA
 0x875A

	)

2098 
	#GL_DEBUG_ASSERT_MESA
 0x875B

	)

2100 
GLAPI
 
GLh™dÀARB
 
GLAPIENTRY
 
glCª©eDebugObje˘MESA
 ();

2101 
GLAPI
 
GLAPIENTRY
 
glCÀ¨DebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2102 
GLAPI
 
GLAPIENTRY
 
glGëDebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
, 
GLsizei
 
maxLígth
,

2103 
GLsizei
 *
Àngth
, 
GLch¨ARB
 *
debugLog
);

2104 
GLAPI
 
GLsizei
 
GLAPIENTRY
 
glGëDebugLogLígthMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2115 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2116 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2118 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2119 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2120 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2121 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2122 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2127 #i‚de‡
GL_MESA_¥ogøm_debug


2128 
	#GL_MESA_¥ogøm_debug
 1

	)

2130 
	#GL_FRAGMENT_PROGRAM_POSITION_MESA
 0x8bb0

	)

2131 
	#GL_FRAGMENT_PROGRAM_CALLBACK_MESA
 0x8bb1

	)

2132 
	#GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb2

	)

2133 
	#GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA
 0x8bb3

	)

2134 
	#GL_VERTEX_PROGRAM_POSITION_MESA
 0x8bb4

	)

2135 
	#GL_VERTEX_PROGRAM_CALLBACK_MESA
 0x8bb5

	)

2136 
	#GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb6

	)

2137 
	#GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA
 0x8bb7

	)

2139 (*
GL¥ogømˇŒbackMESA
)(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 *
	td©a
);

2141 
GLAPI
 
GLAPIENTRY
 
glProgømCÆlbackMESA
(
GLíum
 
èrgë
, 
GL¥ogømˇŒbackMESA
 
ˇŒback
, 
GLvoid
 *
d©a
);

2143 
GLAPI
 
GLAPIENTRY
 
glGëProgømRegi°îfvMESA
(
GLíum
 
èrgë
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
v
);

2148 #i‚de‡
GL_MESA_ãxtuª_¨øy


2149 
	#GL_MESA_ãxtuª_¨øy
 1

	)

2153 #i‚de‡
GL_EXT_ãxtuª_¨øy


2155 #ifde‡
GL_GLEXT_PROTOTYPES


2156 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
(
GLíum
 
èrgë
,

2157 
GLíum
 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2164 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
,

2165 
	tGLíum
 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2168 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

2169 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

2170 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

2171 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

2172 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

2173 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

2174 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

2175 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

2181 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2182 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2184 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2186 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2187 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2193 #i‚de‡
GL_OES_EGL_image


2194 * 
	tGLeglImageOES
;

2197 #i‚de‡
GL_OES_EGL_image


2198 
	#GL_OES_EGL_image
 1

	)

2199 #ifde‡
GL_GLEXT_PROTOTYPES


2200 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2201 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2203 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2204 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2219 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2220 #¥agm®
exp‹t
 
off


2223 #i‡
deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


2224 #¥agm®
imp‹t
 
off


2231 #ifde‡
__˝lu•lus


	@/usr/include/GL/glew.h

79 #i‚de‡
__gÀw_h__


80 
	#__gÀw_h__


	)

81 
	#__GLEW_H__


	)

83 #i‡
deföed
(
__gl_h_
Ë|| deföed(
__GL_H__
Ë|| deföed(
__X_GL_H
)

84 #îr‹ 
gl
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

86 #i‡
deföed
(
__REGAL_H__
)

87 #îr‹ 
RegÆ
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

89 #i‡
deföed
(
__gÀxt_h_
Ë|| deföed(
__GLEXT_H_
)

90 #îr‹ 
gÀxt
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

92 #i‡
deföed
(
__gl_ATI_h_
)

93 #îr‹ 
glATI
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

96 
	#__gl_h_


	)

97 
	#__GL_H__


	)

98 
	#__REGAL_H__


	)

99 
	#__X_GL_H


	)

100 
	#__gÀxt_h_


	)

101 
	#__GLEXT_H_


	)

102 
	#__gl_ATI_h_


	)

104 #i‡
deföed
(
_WIN32
)

112 #i‚de‡
APIENTRY


113 
	#GLEW_APIENTRY_DEFINED


	)

114 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

115 
	#APIENTRY
 
__°dˇŒ


	)

116 #ñi‡(
_MSC_VER
 >800Ë|| 
deföed
(
_STDCALL_SUPPORTED
Ë|| deföed(
__BORLANDC__
)

117 
	#APIENTRY
 
__°dˇŒ


	)

119 
	#APIENTRY


	)

122 #i‚de‡
GLAPI


123 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

124 
	#GLAPI
 

	)

128 #i‚de‡
CALLBACK


129 
	#GLEW_CALLBACK_DEFINED


	)

130 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

131 
	#CALLBACK
 
	`__©åibuã__
 ((
__°dˇŒ__
))

	)

132 #ñi‡(
deföed
(
_M_MRX000
Ë|| deföed(
_M_IX86
Ë|| deföed(
_M_ALPHA
Ë|| deföed(
_M_PPC
)Ë&& !deföed(
MIDL_PASS
)

133 
	#CALLBACK
 
__°dˇŒ


	)

135 
	#CALLBACK


	)

139 #i‚de‡
WINGDIAPI


140 
	#GLEW_WINGDIAPI_DEFINED


	)

141 
	#WINGDIAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

144 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)Ë&& !deföed(
_WCHAR_T_DEFINED
)

145 
	twch¨_t
;

146 
	#_WCHAR_T_DEFINED


	)

149 #i‡!
deföed
(
_W64
)

150 #i‡!
deföed
(
__midl
Ë&& (deföed(
_X86_
Ë|| deföed(
_M_IX86
)Ë&& deföed(
_MSC_VER
) && _MSC_VER >= 1300

151 
	#_W64
 
__w64


	)

153 
	#_W64


	)

156 #i‡!
deföed
(
_PTRDIFF_T_DEFINED
Ë&& !deföed(
_PTRDIFF_T_
Ë&& !deföed(
__MINGW64__
)

157 #ifde‡
_WIN64


158 
__öt64
 
	t±rdiff_t
;

160 
_W64
 
	t±rdiff_t
;

162 
	#_PTRDIFF_T_DEFINED


	)

163 
	#_PTRDIFF_T_


	)

166 #i‚de‡
GLAPI


167 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

168 
	#GLAPI
 

	)

170 
	#GLAPI
 
WINGDIAPI


	)

174 #i‚de‡
GLAPIENTRY


175 
	#GLAPIENTRY
 
APIENTRY


	)

178 #i‚de‡
GLEWAPIENTRY


179 
	#GLEWAPIENTRY
 
APIENTRY


	)

187 #ifde‡
GLEW_STATIC


188 
	#GLEWAPI
 

	)

190 #ifde‡
GLEW_BUILD


191 
	#GLEWAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

193 
	#GLEWAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

208 
	~<°ddef.h
>

213 #i‡(
deföed
(
__sgi
Ë|| deföed(
__sun
)Ë&& !deföed(
__GNUC__
)

214 
	~<öây≥s.h
>

216 
	~<°döt.h
>

219 
	#GLEW_APIENTRY_DEFINED


	)

220 
	#APIENTRY


	)

226 #ifde‡
GLEW_STATIC


227 
	#GLEWAPI
 

	)

229 #i‡
deföed
(
__GNUC__
) && __GNUC__>=4

230 
	#GLEWAPI
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

231 #ñi‡
deföed
(
__SUNPRO_C
Ë|| deföed(
__SUNPRO_CC
)

232 
	#GLEWAPI
 
__globÆ


	)

234 
	#GLEWAPI
 

	)

239 #i‚de‡
GLAPI


240 
	#GLAPI
 

	)

243 #i‚de‡
GLAPIENTRY


244 
	#GLAPIENTRY


	)

247 #i‚de‡
GLEWAPIENTRY


248 
	#GLEWAPIENTRY


	)

253 #ifde‡
__˝lu•lus


259 #i‚de‡
GL_VERSION_1_1


260 
	#GL_VERSION_1_1
 1

	)

262 
	tGLíum
;

263 
	tGLbôfõld
;

264 
	tGLuöt
;

265 
	tGLöt
;

266 
	tGLsizei
;

267 
	tGLboﬁón
;

268 sig√d 
	tGLbyã
;

269 
	tGLsh‹t
;

270 
	tGLubyã
;

271 
	tGLush‹t
;

272 
	tGLul⁄g
;

273 
	tGLÊﬂt
;

274 
	tGL˛ampf
;

275 
	tGLdoubÀ
;

276 
	tGL˛ampd
;

277 
	tGLvoid
;

278 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1400

279 
__öt64
 
	tGLöt64EXT
;

280 
	t__öt64
 
	tGLuöt64EXT
;

281 #ñi‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

282 sig√d 
	tGLöt64EXT
;

283 
	tGLuöt64EXT
;

285 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

286 
	~<öây≥s.h
>

288 
öt64_t
 
	tGLöt64EXT
;

289 
uöt64_t
 
	tGLuöt64EXT
;

291 
GLöt64EXT
 
	tGLöt64
;

292 
GLuöt64EXT
 
	tGLuöt64
;

293 
__GLsync
 *
	tGLsync
;

295 
	tGLch¨
;

297 
	#GL_ZERO
 0

	)

298 
	#GL_FALSE
 0

	)

299 
	#GL_LOGIC_OP
 0x0BF1

	)

300 
	#GL_NONE
 0

	)

301 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

302 
	#GL_NO_ERROR
 0

	)

303 
	#GL_POINTS
 0x0000

	)

304 
	#GL_CURRENT_BIT
 0x00000001

	)

305 
	#GL_TRUE
 1

	)

306 
	#GL_ONE
 1

	)

307 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

308 
	#GL_LINES
 0x0001

	)

309 
	#GL_LINE_LOOP
 0x0002

	)

310 
	#GL_POINT_BIT
 0x00000002

	)

311 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

312 
	#GL_LINE_STRIP
 0x0003

	)

313 
	#GL_LINE_BIT
 0x00000004

	)

314 
	#GL_TRIANGLES
 0x0004

	)

315 
	#GL_TRIANGLE_STRIP
 0x0005

	)

316 
	#GL_TRIANGLE_FAN
 0x0006

	)

317 
	#GL_QUADS
 0x0007

	)

318 
	#GL_QUAD_STRIP
 0x0008

	)

319 
	#GL_POLYGON_BIT
 0x00000008

	)

320 
	#GL_POLYGON
 0x0009

	)

321 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

322 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

323 
	#GL_LIGHTING_BIT
 0x00000040

	)

324 
	#GL_FOG_BIT
 0x00000080

	)

325 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

326 
	#GL_ACCUM
 0x0100

	)

327 
	#GL_LOAD
 0x0101

	)

328 
	#GL_RETURN
 0x0102

	)

329 
	#GL_MULT
 0x0103

	)

330 
	#GL_ADD
 0x0104

	)

331 
	#GL_NEVER
 0x0200

	)

332 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

333 
	#GL_LESS
 0x0201

	)

334 
	#GL_EQUAL
 0x0202

	)

335 
	#GL_LEQUAL
 0x0203

	)

336 
	#GL_GREATER
 0x0204

	)

337 
	#GL_NOTEQUAL
 0x0205

	)

338 
	#GL_GEQUAL
 0x0206

	)

339 
	#GL_ALWAYS
 0x0207

	)

340 
	#GL_SRC_COLOR
 0x0300

	)

341 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

342 
	#GL_SRC_ALPHA
 0x0302

	)

343 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

344 
	#GL_DST_ALPHA
 0x0304

	)

345 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

346 
	#GL_DST_COLOR
 0x0306

	)

347 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

348 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

349 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

350 
	#GL_FRONT_LEFT
 0x0400

	)

351 
	#GL_FRONT_RIGHT
 0x0401

	)

352 
	#GL_BACK_LEFT
 0x0402

	)

353 
	#GL_BACK_RIGHT
 0x0403

	)

354 
	#GL_FRONT
 0x0404

	)

355 
	#GL_BACK
 0x0405

	)

356 
	#GL_LEFT
 0x0406

	)

357 
	#GL_RIGHT
 0x0407

	)

358 
	#GL_FRONT_AND_BACK
 0x0408

	)

359 
	#GL_AUX0
 0x0409

	)

360 
	#GL_AUX1
 0x040A

	)

361 
	#GL_AUX2
 0x040B

	)

362 
	#GL_AUX3
 0x040C

	)

363 
	#GL_INVALID_ENUM
 0x0500

	)

364 
	#GL_INVALID_VALUE
 0x0501

	)

365 
	#GL_INVALID_OPERATION
 0x0502

	)

366 
	#GL_STACK_OVERFLOW
 0x0503

	)

367 
	#GL_STACK_UNDERFLOW
 0x0504

	)

368 
	#GL_OUT_OF_MEMORY
 0x0505

	)

369 
	#GL_2D
 0x0600

	)

370 
	#GL_3D
 0x0601

	)

371 
	#GL_3D_COLOR
 0x0602

	)

372 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

373 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

374 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

375 
	#GL_POINT_TOKEN
 0x0701

	)

376 
	#GL_LINE_TOKEN
 0x0702

	)

377 
	#GL_POLYGON_TOKEN
 0x0703

	)

378 
	#GL_BITMAP_TOKEN
 0x0704

	)

379 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

380 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

381 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

382 
	#GL_EXP
 0x0800

	)

383 
	#GL_VIEWPORT_BIT
 0x00000800

	)

384 
	#GL_EXP2
 0x0801

	)

385 
	#GL_CW
 0x0900

	)

386 
	#GL_CCW
 0x0901

	)

387 
	#GL_COEFF
 0x0A00

	)

388 
	#GL_ORDER
 0x0A01

	)

389 
	#GL_DOMAIN
 0x0A02

	)

390 
	#GL_CURRENT_COLOR
 0x0B00

	)

391 
	#GL_CURRENT_INDEX
 0x0B01

	)

392 
	#GL_CURRENT_NORMAL
 0x0B02

	)

393 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

394 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

395 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

396 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

397 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

398 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

399 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

400 
	#GL_POINT_SMOOTH
 0x0B10

	)

401 
	#GL_POINT_SIZE
 0x0B11

	)

402 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

403 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

404 
	#GL_LINE_SMOOTH
 0x0B20

	)

405 
	#GL_LINE_WIDTH
 0x0B21

	)

406 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

407 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

408 
	#GL_LINE_STIPPLE
 0x0B24

	)

409 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

410 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

411 
	#GL_LIST_MODE
 0x0B30

	)

412 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

413 
	#GL_LIST_BASE
 0x0B32

	)

414 
	#GL_LIST_INDEX
 0x0B33

	)

415 
	#GL_POLYGON_MODE
 0x0B40

	)

416 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

417 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

418 
	#GL_EDGE_FLAG
 0x0B43

	)

419 
	#GL_CULL_FACE
 0x0B44

	)

420 
	#GL_CULL_FACE_MODE
 0x0B45

	)

421 
	#GL_FRONT_FACE
 0x0B46

	)

422 
	#GL_LIGHTING
 0x0B50

	)

423 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

424 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

425 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

426 
	#GL_SHADE_MODEL
 0x0B54

	)

427 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

428 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

429 
	#GL_COLOR_MATERIAL
 0x0B57

	)

430 
	#GL_FOG
 0x0B60

	)

431 
	#GL_FOG_INDEX
 0x0B61

	)

432 
	#GL_FOG_DENSITY
 0x0B62

	)

433 
	#GL_FOG_START
 0x0B63

	)

434 
	#GL_FOG_END
 0x0B64

	)

435 
	#GL_FOG_MODE
 0x0B65

	)

436 
	#GL_FOG_COLOR
 0x0B66

	)

437 
	#GL_DEPTH_RANGE
 0x0B70

	)

438 
	#GL_DEPTH_TEST
 0x0B71

	)

439 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

440 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

441 
	#GL_DEPTH_FUNC
 0x0B74

	)

442 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

443 
	#GL_STENCIL_TEST
 0x0B90

	)

444 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

445 
	#GL_STENCIL_FUNC
 0x0B92

	)

446 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

447 
	#GL_STENCIL_FAIL
 0x0B94

	)

448 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

449 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

450 
	#GL_STENCIL_REF
 0x0B97

	)

451 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

452 
	#GL_MATRIX_MODE
 0x0BA0

	)

453 
	#GL_NORMALIZE
 0x0BA1

	)

454 
	#GL_VIEWPORT
 0x0BA2

	)

455 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

456 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

457 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

458 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

459 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

460 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

461 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

462 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

463 
	#GL_ALPHA_TEST
 0x0BC0

	)

464 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

465 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

466 
	#GL_DITHER
 0x0BD0

	)

467 
	#GL_BLEND_DST
 0x0BE0

	)

468 
	#GL_BLEND_SRC
 0x0BE1

	)

469 
	#GL_BLEND
 0x0BE2

	)

470 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

471 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

472 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

473 
	#GL_AUX_BUFFERS
 0x0C00

	)

474 
	#GL_DRAW_BUFFER
 0x0C01

	)

475 
	#GL_READ_BUFFER
 0x0C02

	)

476 
	#GL_SCISSOR_BOX
 0x0C10

	)

477 
	#GL_SCISSOR_TEST
 0x0C11

	)

478 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

479 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

480 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

481 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

482 
	#GL_INDEX_MODE
 0x0C30

	)

483 
	#GL_RGBA_MODE
 0x0C31

	)

484 
	#GL_DOUBLEBUFFER
 0x0C32

	)

485 
	#GL_STEREO
 0x0C33

	)

486 
	#GL_RENDER_MODE
 0x0C40

	)

487 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

488 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

489 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

490 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

491 
	#GL_FOG_HINT
 0x0C54

	)

492 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

493 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

494 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

495 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

496 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

497 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

498 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

499 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

500 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

501 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

502 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

503 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

504 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

505 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

506 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

507 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

508 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

509 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

510 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

511 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

512 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

513 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

514 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

515 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

516 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

517 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

518 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

519 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

520 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

521 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

522 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

523 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

524 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

525 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

526 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

527 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

528 
	#GL_MAP_COLOR
 0x0D10

	)

529 
	#GL_MAP_STENCIL
 0x0D11

	)

530 
	#GL_INDEX_SHIFT
 0x0D12

	)

531 
	#GL_INDEX_OFFSET
 0x0D13

	)

532 
	#GL_RED_SCALE
 0x0D14

	)

533 
	#GL_RED_BIAS
 0x0D15

	)

534 
	#GL_ZOOM_X
 0x0D16

	)

535 
	#GL_ZOOM_Y
 0x0D17

	)

536 
	#GL_GREEN_SCALE
 0x0D18

	)

537 
	#GL_GREEN_BIAS
 0x0D19

	)

538 
	#GL_BLUE_SCALE
 0x0D1A

	)

539 
	#GL_BLUE_BIAS
 0x0D1B

	)

540 
	#GL_ALPHA_SCALE
 0x0D1C

	)

541 
	#GL_ALPHA_BIAS
 0x0D1D

	)

542 
	#GL_DEPTH_SCALE
 0x0D1E

	)

543 
	#GL_DEPTH_BIAS
 0x0D1F

	)

544 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

545 
	#GL_MAX_LIGHTS
 0x0D31

	)

546 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

547 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

548 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

549 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

550 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

551 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

552 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

553 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

554 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

555 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

556 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

557 
	#GL_INDEX_BITS
 0x0D51

	)

558 
	#GL_RED_BITS
 0x0D52

	)

559 
	#GL_GREEN_BITS
 0x0D53

	)

560 
	#GL_BLUE_BITS
 0x0D54

	)

561 
	#GL_ALPHA_BITS
 0x0D55

	)

562 
	#GL_DEPTH_BITS
 0x0D56

	)

563 
	#GL_STENCIL_BITS
 0x0D57

	)

564 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

565 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

566 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

567 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

568 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

569 
	#GL_AUTO_NORMAL
 0x0D80

	)

570 
	#GL_MAP1_COLOR_4
 0x0D90

	)

571 
	#GL_MAP1_INDEX
 0x0D91

	)

572 
	#GL_MAP1_NORMAL
 0x0D92

	)

573 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

574 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

575 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

576 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

577 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

578 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

579 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

580 
	#GL_MAP2_INDEX
 0x0DB1

	)

581 
	#GL_MAP2_NORMAL
 0x0DB2

	)

582 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

583 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

584 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

585 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

586 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

587 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

588 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

589 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

590 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

591 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

592 
	#GL_TEXTURE_1D
 0x0DE0

	)

593 
	#GL_TEXTURE_2D
 0x0DE1

	)

594 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

595 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

596 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

597 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

598 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

599 
	#GL_TEXTURE_WIDTH
 0x1000

	)

600 
	#GL_TRANSFORM_BIT
 0x00001000

	)

601 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

602 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

603 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

604 
	#GL_TEXTURE_BORDER
 0x1005

	)

605 
	#GL_DONT_CARE
 0x1100

	)

606 
	#GL_FASTEST
 0x1101

	)

607 
	#GL_NICEST
 0x1102

	)

608 
	#GL_AMBIENT
 0x1200

	)

609 
	#GL_DIFFUSE
 0x1201

	)

610 
	#GL_SPECULAR
 0x1202

	)

611 
	#GL_POSITION
 0x1203

	)

612 
	#GL_SPOT_DIRECTION
 0x1204

	)

613 
	#GL_SPOT_EXPONENT
 0x1205

	)

614 
	#GL_SPOT_CUTOFF
 0x1206

	)

615 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

616 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

617 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

618 
	#GL_COMPILE
 0x1300

	)

619 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

620 
	#GL_BYTE
 0x1400

	)

621 
	#GL_UNSIGNED_BYTE
 0x1401

	)

622 
	#GL_SHORT
 0x1402

	)

623 
	#GL_UNSIGNED_SHORT
 0x1403

	)

624 
	#GL_INT
 0x1404

	)

625 
	#GL_UNSIGNED_INT
 0x1405

	)

626 
	#GL_FLOAT
 0x1406

	)

627 
	#GL_2_BYTES
 0x1407

	)

628 
	#GL_3_BYTES
 0x1408

	)

629 
	#GL_4_BYTES
 0x1409

	)

630 
	#GL_DOUBLE
 0x140A

	)

631 
	#GL_CLEAR
 0x1500

	)

632 
	#GL_AND
 0x1501

	)

633 
	#GL_AND_REVERSE
 0x1502

	)

634 
	#GL_COPY
 0x1503

	)

635 
	#GL_AND_INVERTED
 0x1504

	)

636 
	#GL_NOOP
 0x1505

	)

637 
	#GL_XOR
 0x1506

	)

638 
	#GL_OR
 0x1507

	)

639 
	#GL_NOR
 0x1508

	)

640 
	#GL_EQUIV
 0x1509

	)

641 
	#GL_INVERT
 0x150A

	)

642 
	#GL_OR_REVERSE
 0x150B

	)

643 
	#GL_COPY_INVERTED
 0x150C

	)

644 
	#GL_OR_INVERTED
 0x150D

	)

645 
	#GL_NAND
 0x150E

	)

646 
	#GL_SET
 0x150F

	)

647 
	#GL_EMISSION
 0x1600

	)

648 
	#GL_SHININESS
 0x1601

	)

649 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

650 
	#GL_COLOR_INDEXES
 0x1603

	)

651 
	#GL_MODELVIEW
 0x1700

	)

652 
	#GL_PROJECTION
 0x1701

	)

653 
	#GL_TEXTURE
 0x1702

	)

654 
	#GL_COLOR
 0x1800

	)

655 
	#GL_DEPTH
 0x1801

	)

656 
	#GL_STENCIL
 0x1802

	)

657 
	#GL_COLOR_INDEX
 0x1900

	)

658 
	#GL_STENCIL_INDEX
 0x1901

	)

659 
	#GL_DEPTH_COMPONENT
 0x1902

	)

660 
	#GL_RED
 0x1903

	)

661 
	#GL_GREEN
 0x1904

	)

662 
	#GL_BLUE
 0x1905

	)

663 
	#GL_ALPHA
 0x1906

	)

664 
	#GL_RGB
 0x1907

	)

665 
	#GL_RGBA
 0x1908

	)

666 
	#GL_LUMINANCE
 0x1909

	)

667 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

668 
	#GL_BITMAP
 0x1A00

	)

669 
	#GL_POINT
 0x1B00

	)

670 
	#GL_LINE
 0x1B01

	)

671 
	#GL_FILL
 0x1B02

	)

672 
	#GL_RENDER
 0x1C00

	)

673 
	#GL_FEEDBACK
 0x1C01

	)

674 
	#GL_SELECT
 0x1C02

	)

675 
	#GL_FLAT
 0x1D00

	)

676 
	#GL_SMOOTH
 0x1D01

	)

677 
	#GL_KEEP
 0x1E00

	)

678 
	#GL_REPLACE
 0x1E01

	)

679 
	#GL_INCR
 0x1E02

	)

680 
	#GL_DECR
 0x1E03

	)

681 
	#GL_VENDOR
 0x1F00

	)

682 
	#GL_RENDERER
 0x1F01

	)

683 
	#GL_VERSION
 0x1F02

	)

684 
	#GL_EXTENSIONS
 0x1F03

	)

685 
	#GL_S
 0x2000

	)

686 
	#GL_ENABLE_BIT
 0x00002000

	)

687 
	#GL_T
 0x2001

	)

688 
	#GL_R
 0x2002

	)

689 
	#GL_Q
 0x2003

	)

690 
	#GL_MODULATE
 0x2100

	)

691 
	#GL_DECAL
 0x2101

	)

692 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

693 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

694 
	#GL_TEXTURE_ENV
 0x2300

	)

695 
	#GL_EYE_LINEAR
 0x2400

	)

696 
	#GL_OBJECT_LINEAR
 0x2401

	)

697 
	#GL_SPHERE_MAP
 0x2402

	)

698 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

699 
	#GL_OBJECT_PLANE
 0x2501

	)

700 
	#GL_EYE_PLANE
 0x2502

	)

701 
	#GL_NEAREST
 0x2600

	)

702 
	#GL_LINEAR
 0x2601

	)

703 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

704 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

705 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

706 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

707 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

708 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

709 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

710 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

711 
	#GL_CLAMP
 0x2900

	)

712 
	#GL_REPEAT
 0x2901

	)

713 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

714 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

715 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

716 
	#GL_R3_G3_B2
 0x2A10

	)

717 
	#GL_V2F
 0x2A20

	)

718 
	#GL_V3F
 0x2A21

	)

719 
	#GL_C4UB_V2F
 0x2A22

	)

720 
	#GL_C4UB_V3F
 0x2A23

	)

721 
	#GL_C3F_V3F
 0x2A24

	)

722 
	#GL_N3F_V3F
 0x2A25

	)

723 
	#GL_C4F_N3F_V3F
 0x2A26

	)

724 
	#GL_T2F_V3F
 0x2A27

	)

725 
	#GL_T4F_V4F
 0x2A28

	)

726 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

727 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

728 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

729 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

730 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

731 
	#GL_CLIP_PLANE0
 0x3000

	)

732 
	#GL_CLIP_PLANE1
 0x3001

	)

733 
	#GL_CLIP_PLANE2
 0x3002

	)

734 
	#GL_CLIP_PLANE3
 0x3003

	)

735 
	#GL_CLIP_PLANE4
 0x3004

	)

736 
	#GL_CLIP_PLANE5
 0x3005

	)

737 
	#GL_LIGHT0
 0x4000

	)

738 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

739 
	#GL_LIGHT1
 0x4001

	)

740 
	#GL_LIGHT2
 0x4002

	)

741 
	#GL_LIGHT3
 0x4003

	)

742 
	#GL_LIGHT4
 0x4004

	)

743 
	#GL_LIGHT5
 0x4005

	)

744 
	#GL_LIGHT6
 0x4006

	)

745 
	#GL_LIGHT7
 0x4007

	)

746 
	#GL_HINT_BIT
 0x00008000

	)

747 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

748 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

749 
	#GL_ALPHA4
 0x803B

	)

750 
	#GL_ALPHA8
 0x803C

	)

751 
	#GL_ALPHA12
 0x803D

	)

752 
	#GL_ALPHA16
 0x803E

	)

753 
	#GL_LUMINANCE4
 0x803F

	)

754 
	#GL_LUMINANCE8
 0x8040

	)

755 
	#GL_LUMINANCE12
 0x8041

	)

756 
	#GL_LUMINANCE16
 0x8042

	)

757 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

758 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

759 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

760 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

761 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

762 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

763 
	#GL_INTENSITY
 0x8049

	)

764 
	#GL_INTENSITY4
 0x804A

	)

765 
	#GL_INTENSITY8
 0x804B

	)

766 
	#GL_INTENSITY12
 0x804C

	)

767 
	#GL_INTENSITY16
 0x804D

	)

768 
	#GL_RGB4
 0x804F

	)

769 
	#GL_RGB5
 0x8050

	)

770 
	#GL_RGB8
 0x8051

	)

771 
	#GL_RGB10
 0x8052

	)

772 
	#GL_RGB12
 0x8053

	)

773 
	#GL_RGB16
 0x8054

	)

774 
	#GL_RGBA2
 0x8055

	)

775 
	#GL_RGBA4
 0x8056

	)

776 
	#GL_RGB5_A1
 0x8057

	)

777 
	#GL_RGBA8
 0x8058

	)

778 
	#GL_RGB10_A2
 0x8059

	)

779 
	#GL_RGBA12
 0x805A

	)

780 
	#GL_RGBA16
 0x805B

	)

781 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

782 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

783 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

784 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

785 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

786 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

787 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

788 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

789 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

790 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

791 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

792 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

793 
	#GL_VERTEX_ARRAY
 0x8074

	)

794 
	#GL_NORMAL_ARRAY
 0x8075

	)

795 
	#GL_COLOR_ARRAY
 0x8076

	)

796 
	#GL_INDEX_ARRAY
 0x8077

	)

797 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

798 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

799 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

800 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

801 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

802 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

803 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

804 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

805 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

806 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

807 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

808 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

809 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

810 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

811 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

812 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

813 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

814 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

815 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

816 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

817 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

818 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

819 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

820 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

821 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

822 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

823 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

824 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

825 
	#GL_EVAL_BIT
 0x00010000

	)

826 
	#GL_LIST_BIT
 0x00020000

	)

827 
	#GL_TEXTURE_BIT
 0x00040000

	)

828 
	#GL_SCISSOR_BIT
 0x00080000

	)

829 
	#GL_ALL_ATTRIB_BITS
 0x000fffff

	)

830 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xffffffff

	)

832 
GLAPI
 
GLAPIENTRY
 
glAccum
 (
GLíum
 
›
, 
GLÊﬂt
 
vÆue
);

833 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

834 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

835 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
 (
GLöt
 
i
);

836 
GLAPI
 
GLAPIENTRY
 
glBegö
 (
GLíum
 
mode
);

837 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

838 
GLAPI
 
GLAPIENTRY
 
glBôm≠
 (
GLsizei
 
width
, GLsizeò
height
, 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
, GLÊﬂà
xmove
, GLÊﬂà
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

839 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

840 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
 (
GLuöt
 
li°
);

841 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
li°s
);

842 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

843 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

844 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

845 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
 (
GL˛ampd
 
dïth
);

846 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
 (
GLÊﬂt
 
c
);

847 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

848 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
 (
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
);

849 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

850 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

851 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

852 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

853 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

854 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

855 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

856 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

857 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

858 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

859 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

860 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

861 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

862 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

863 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

864 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

865 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
, GLbyã 
Æpha
);

866 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
 (c⁄° 
GLbyã
 *
v
);

867 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
, GLdoubÀ 
Æpha
);

868 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
 (c⁄° 
GLdoubÀ
 *
v
);

869 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

870 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
 (c⁄° 
GLÊﬂt
 *
v
);

871 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

872 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
 (c⁄° 
GLöt
 *
v
);

873 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
, GLsh‹à
Æpha
);

874 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
 (c⁄° 
GLsh‹t
 *
v
);

875 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
, GLubyã 
Æpha
);

876 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
 (c⁄° 
GLubyã
 *
v
);

877 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

878 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
 (c⁄° 
GLuöt
 *
v
);

879 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
, GLush‹à
Æpha
);

880 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
 (c⁄° 
GLush‹t
 *
v
);

881 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

882 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
 (
GLíum
 
Á˚
, GLíum 
mode
);

883 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

884 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
ty≥
);

885 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫ÆF‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

886 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫ÆF‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

887 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

888 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

889 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

890 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
 (
GLuöt
 
li°
, 
GLsizei
 
ønge
);

891 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

892 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

893 
GLAPI
 
GLAPIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

894 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
 (
GL˛ampd
 
zNór
, GL˛ampd 
zF¨
);

895 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

896 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
 (
GLíum
 
¨øy
);

897 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

898 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
 (
GLíum
 
mode
);

899 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

900 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
 (
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

901 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
 (
GLboﬁón
 
Êag
);

902 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
 (
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

903 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
 (c⁄° 
GLboﬁón
 *
Êag
);

904 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

905 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
 (
GLíum
 
¨øy
);

906 
GLAPI
 
GLAPIENTRY
 
glEnd
 ();

907 
GLAPI
 
GLAPIENTRY
 
glEndLi°
 ();

908 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
 (
GLdoubÀ
 
u
);

909 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
 (c⁄° 
GLdoubÀ
 *
u
);

910 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
 (
GLÊﬂt
 
u
);

911 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
 (c⁄° 
GLÊﬂt
 *
u
);

912 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
 (
GLdoubÀ
 
u
, GLdoubÀ 
v
);

913 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
 (c⁄° 
GLdoubÀ
 *
u
);

914 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
 (
GLÊﬂt
 
u
, GLÊﬂà
v
);

915 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
 (c⁄° 
GLÊﬂt
 *
u
);

916 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
 (
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
);

917 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
 (
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
);

918 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
 (
GLöt
 
i
);

919 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
 (
GLöt
 
i
, GLöà
j
);

920 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
 (
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
);

921 
GLAPI
 
GLAPIENTRY
 
glFöish
 ();

922 
GLAPI
 
GLAPIENTRY
 
glFlush
 ();

923 
GLAPI
 
GLAPIENTRY
 
glFogf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

924 
GLAPI
 
GLAPIENTRY
 
glFogfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

925 
GLAPI
 
GLAPIENTRY
 
glFogi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

926 
GLAPI
 
GLAPIENTRY
 
glFogiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

927 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

928 
GLAPI
 
GLAPIENTRY
 
glFru°um
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

929 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
 (
GLsizei
 
ønge
);

930 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

931 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
);

932 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
 (
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
);

933 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

934 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
 ();

935 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

936 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

937 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

938 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

939 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
);

940 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
);

941 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
);

942 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

943 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

944 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
 (
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
);

945 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
 (
GLíum
 
m≠
, 
GLuöt
 *
vÆues
);

946 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
 (
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
);

947 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
 (
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

948 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
 (
GLubyã
 *
mask
);

949 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

950 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

951 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

952 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

953 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

954 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

955 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

956 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

957 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

958 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

959 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

960 
GLAPI
 
GLAPIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

961 
GLAPI
 
GLAPIENTRY
 
glIndexMask
 (
GLuöt
 
mask
);

962 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

963 
GLAPI
 
GLAPIENTRY
 
glIndexd
 (
GLdoubÀ
 
c
);

964 
GLAPI
 
GLAPIENTRY
 
glIndexdv
 (c⁄° 
GLdoubÀ
 *
c
);

965 
GLAPI
 
GLAPIENTRY
 
glIndexf
 (
GLÊﬂt
 
c
);

966 
GLAPI
 
GLAPIENTRY
 
glIndexfv
 (c⁄° 
GLÊﬂt
 *
c
);

967 
GLAPI
 
GLAPIENTRY
 
glIndexi
 (
GLöt
 
c
);

968 
GLAPI
 
GLAPIENTRY
 
glIndexiv
 (c⁄° 
GLöt
 *
c
);

969 
GLAPI
 
GLAPIENTRY
 
glIndexs
 (
GLsh‹t
 
c
);

970 
GLAPI
 
GLAPIENTRY
 
glIndexsv
 (c⁄° 
GLsh‹t
 *
c
);

971 
GLAPI
 
GLAPIENTRY
 
glIndexub
 (
GLubyã
 
c
);

972 
GLAPI
 
GLAPIENTRY
 
glIndexubv
 (c⁄° 
GLubyã
 *
c
);

973 
GLAPI
 
GLAPIENTRY
 
glInôNames
 ();

974 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
 (
GLíum
 
f‹m©
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

975 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

976 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
 (
GLuöt
 
li°
);

977 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

978 
GLAPI
 
GLAPIENTRY
 
glLightModñf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

979 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

980 
GLAPI
 
GLAPIENTRY
 
glLightModñi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

981 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

982 
GLAPI
 
GLAPIENTRY
 
glLightf
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

983 
GLAPI
 
GLAPIENTRY
 
glLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

984 
GLAPI
 
GLAPIENTRY
 
glLighti
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

985 
GLAPI
 
GLAPIENTRY
 
glLightiv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

986 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
 (
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
);

987 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

988 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
 (
GLuöt
 
ba£
);

989 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
 ();

990 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

991 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

992 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
 (
GLuöt
 
«me
);

993 
GLAPI
 
GLAPIENTRY
 
glLogicOp
 (
GLíum
 
›code
);

994 
GLAPI
 
GLAPIENTRY
 
glM≠1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

995 
GLAPI
 
GLAPIENTRY
 
glM≠1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

996 
GLAPI
 
GLAPIENTRY
 
glM≠2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

997 
GLAPI
 
GLAPIENTRY
 
glM≠2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

998 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
 (
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
);

999 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
 (
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
);

1000 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
 (
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, GLöà
vn
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

1001 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
 (
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, GLöà
vn
, GLÊﬂà
v1
, GLÊﬂà
v2
);

1002 
GLAPI
 
GLAPIENTRY
 
glM©îülf
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1003 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1004 
GLAPI
 
GLAPIENTRY
 
glM©îüli
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1005 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1006 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
 (
GLíum
 
mode
);

1007 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

1008 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

1009 
GLAPI
 
GLAPIENTRY
 
glNewLi°
 (
GLuöt
 
li°
, 
GLíum
 
mode
);

1010 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
 (
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

1011 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
 (c⁄° 
GLbyã
 *
v
);

1012 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
 (
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

1013 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1014 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

1015 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1016 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
 (
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

1017 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
 (c⁄° 
GLöt
 *
v
);

1018 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
 (
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

1019 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
 (c⁄° 
GLsh‹t
 *
v
);

1020 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

1021 
GLAPI
 
GLAPIENTRY
 
glOπho
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

1022 
GLAPI
 
GLAPIENTRY
 
glPassThrough
 (
GLÊﬂt
 
tokí
);

1023 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
 (
GLíum
 
m≠
, 
GLsizei
 
m≠size
, c⁄° 
GLÊﬂt
 *
vÆues
);

1024 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
 (
GLíum
 
m≠
, 
GLsizei
 
m≠size
, c⁄° 
GLuöt
 *
vÆues
);

1025 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
 (
GLíum
 
m≠
, 
GLsizei
 
m≠size
, c⁄° 
GLush‹t
 *
vÆues
);

1026 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1027 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1028 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1029 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1030 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
 (
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
);

1031 
GLAPI
 
GLAPIENTRY
 
glPoötSize
 (
GLÊﬂt
 
size
);

1032 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
 (
GLíum
 
Á˚
, GLíum 
mode
);

1033 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

1034 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
 (c⁄° 
GLubyã
 *
mask
);

1035 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
 ();

1036 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
 ();

1037 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
 ();

1038 
GLAPI
 
GLAPIENTRY
 
glP›Name
 ();

1039 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

1040 
GLAPI
 
GLAPIENTRY
 
glPushAârib
 (
GLbôfõld
 
mask
);

1041 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
 (
GLbôfõld
 
mask
);

1042 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
 ();

1043 
GLAPI
 
GLAPIENTRY
 
glPushName
 (
GLuöt
 
«me
);

1044 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1045 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

1046 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

1047 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

1048 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
 (
GLöt
 
x
, GLöà
y
);

1049 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
 (c⁄° 
GLöt
 *
v
);

1050 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

1051 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

1052 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1053 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1054 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1055 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1056 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

1057 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
 (c⁄° 
GLöt
 *
v
);

1058 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

1059 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

1060 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1061 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
 (c⁄° 
GLdoubÀ
 *
v
);

1062 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

1063 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
 (c⁄° 
GLÊﬂt
 *
v
);

1064 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1065 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
 (c⁄° 
GLöt
 *
v
);

1066 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

1067 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
 (c⁄° 
GLsh‹t
 *
v
);

1068 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
 (
GLíum
 
mode
);

1069 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

1070 
GLAPI
 
GLAPIENTRY
 
glRe˘d
 (
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
);

1071 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
 (c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
);

1072 
GLAPI
 
GLAPIENTRY
 
glRe˘f
 (
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
);

1073 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
 (c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
);

1074 
GLAPI
 
GLAPIENTRY
 
glRe˘i
 (
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
);

1075 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
 (c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
);

1076 
GLAPI
 
GLAPIENTRY
 
glRe˘s
 (
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
);

1077 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
 (c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
);

1078 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
 (
GLíum
 
mode
);

1079 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
 (
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1080 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
 (
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1081 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1082 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1083 
GLAPI
 
GLAPIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

1084 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
 (
GLsizei
 
size
, 
GLuöt
 *
buf„r
);

1085 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
 (
GLíum
 
mode
);

1086 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

1087 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

1088 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

1089 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
 (
GLdoubÀ
 
s
);

1090 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
 (c⁄° 
GLdoubÀ
 *
v
);

1091 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
 (
GLÊﬂt
 
s
);

1092 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
 (c⁄° 
GLÊﬂt
 *
v
);

1093 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
 (
GLöt
 
s
);

1094 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
 (c⁄° 
GLöt
 *
v
);

1095 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
 (
GLsh‹t
 
s
);

1096 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
 (c⁄° 
GLsh‹t
 *
v
);

1097 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
 (
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1098 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
 (c⁄° 
GLdoubÀ
 *
v
);

1099 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
 (
GLÊﬂt
 
s
, GLÊﬂà
t
);

1100 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
 (c⁄° 
GLÊﬂt
 *
v
);

1101 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
 (
GLöt
 
s
, GLöà
t
);

1102 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
 (c⁄° 
GLöt
 *
v
);

1103 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
 (
GLsh‹t
 
s
, GLsh‹à
t
);

1104 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
 (c⁄° 
GLsh‹t
 *
v
);

1105 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
 (
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1106 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1107 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1108 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1109 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
 (
GLöt
 
s
, GLöà
t
, GLöà
r
);

1110 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
 (c⁄° 
GLöt
 *
v
);

1111 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
 (
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

1112 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
 (c⁄° 
GLsh‹t
 *
v
);

1113 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
 (
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

1114 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
 (c⁄° 
GLdoubÀ
 *
v
);

1115 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

1116 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
 (c⁄° 
GLÊﬂt
 *
v
);

1117 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
 (
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

1118 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
 (c⁄° 
GLöt
 *
v
);

1119 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
 (
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

1120 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
 (c⁄° 
GLsh‹t
 *
v
);

1121 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

1122 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1123 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1124 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1125 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1126 
GLAPI
 
GLAPIENTRY
 
glTexGíd
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

1127 
GLAPI
 
GLAPIENTRY
 
glTexGídv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

1128 
GLAPI
 
GLAPIENTRY
 
glTexGíf
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1129 
GLAPI
 
GLAPIENTRY
 
glTexGífv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1130 
GLAPI
 
GLAPIENTRY
 
glTexGíi
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1131 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1132 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1133 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1134 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1135 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1136 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1137 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1138 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1139 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1140 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1141 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1142 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1143 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
 (c⁄° 
GLdoubÀ
 *
v
);

1144 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

1145 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
 (c⁄° 
GLÊﬂt
 *
v
);

1146 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
 (
GLöt
 
x
, GLöà
y
);

1147 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
 (c⁄° 
GLöt
 *
v
);

1148 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

1149 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
 (c⁄° 
GLsh‹t
 *
v
);

1150 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1151 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1152 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1153 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1154 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

1155 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
 (c⁄° 
GLöt
 *
v
);

1156 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

1157 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
 (c⁄° 
GLsh‹t
 *
v
);

1158 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1159 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
 (c⁄° 
GLdoubÀ
 *
v
);

1160 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

1161 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
 (c⁄° 
GLÊﬂt
 *
v
);

1162 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1163 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
 (c⁄° 
GLöt
 *
v
);

1164 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

1165 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
 (c⁄° 
GLsh‹t
 *
v
);

1166 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

1167 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

1169 
	#GLEW_VERSION_1_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_1
)

	)

1175 #i‚de‡
GLEW_NO_GLU


1177 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

1178 
	~<O≥nGL/glu.h
>

1180 
	~<GL/glu.h
>

1186 #i‚de‡
GL_VERSION_1_2


1187 
	#GL_VERSION_1_2
 1

	)

1189 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1190 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1191 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1192 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1193 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1194 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1195 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1196 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1197 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1198 
	#GL_RESCALE_NORMAL
 0x803A

	)

1199 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1200 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1201 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1202 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1203 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1204 
	#GL_TEXTURE_3D
 0x806F

	)

1205 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1206 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1207 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1208 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1209 
	#GL_BGR
 0x80E0

	)

1210 
	#GL_BGRA
 0x80E1

	)

1211 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1212 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1213 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1214 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1215 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1216 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1217 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1218 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1219 
	#GL_SINGLE_COLOR
 0x81F9

	)

1220 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1221 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1222 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1223 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1224 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1225 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1226 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1227 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1228 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1229 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1231 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1232 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1233 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1234 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1236 
	#glC›yTexSubImage3D
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage3D
)

	)

1237 
	#glDøwR™geEÀmíts
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmíts
)

	)

1238 
	#glTexImage3D
 
	`GLEW_GET_FUN
(
__gÀwTexImage3D
)

	)

1239 
	#glTexSubImage3D
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage3D
)

	)

1241 
	#GLEW_VERSION_1_2
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_2
)

	)

1247 #i‚de‡
GL_VERSION_1_2_1


1248 
	#GL_VERSION_1_2_1
 1

	)

1250 
	#GLEW_VERSION_1_2_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_2_1
)

	)

1256 #i‚de‡
GL_VERSION_1_3


1257 
	#GL_VERSION_1_3
 1

	)

1259 
	#GL_MULTISAMPLE
 0x809D

	)

1260 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1261 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1262 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1263 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1264 
	#GL_SAMPLES
 0x80A9

	)

1265 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1266 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1267 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1268 
	#GL_TEXTURE0
 0x84C0

	)

1269 
	#GL_TEXTURE1
 0x84C1

	)

1270 
	#GL_TEXTURE2
 0x84C2

	)

1271 
	#GL_TEXTURE3
 0x84C3

	)

1272 
	#GL_TEXTURE4
 0x84C4

	)

1273 
	#GL_TEXTURE5
 0x84C5

	)

1274 
	#GL_TEXTURE6
 0x84C6

	)

1275 
	#GL_TEXTURE7
 0x84C7

	)

1276 
	#GL_TEXTURE8
 0x84C8

	)

1277 
	#GL_TEXTURE9
 0x84C9

	)

1278 
	#GL_TEXTURE10
 0x84CA

	)

1279 
	#GL_TEXTURE11
 0x84CB

	)

1280 
	#GL_TEXTURE12
 0x84CC

	)

1281 
	#GL_TEXTURE13
 0x84CD

	)

1282 
	#GL_TEXTURE14
 0x84CE

	)

1283 
	#GL_TEXTURE15
 0x84CF

	)

1284 
	#GL_TEXTURE16
 0x84D0

	)

1285 
	#GL_TEXTURE17
 0x84D1

	)

1286 
	#GL_TEXTURE18
 0x84D2

	)

1287 
	#GL_TEXTURE19
 0x84D3

	)

1288 
	#GL_TEXTURE20
 0x84D4

	)

1289 
	#GL_TEXTURE21
 0x84D5

	)

1290 
	#GL_TEXTURE22
 0x84D6

	)

1291 
	#GL_TEXTURE23
 0x84D7

	)

1292 
	#GL_TEXTURE24
 0x84D8

	)

1293 
	#GL_TEXTURE25
 0x84D9

	)

1294 
	#GL_TEXTURE26
 0x84DA

	)

1295 
	#GL_TEXTURE27
 0x84DB

	)

1296 
	#GL_TEXTURE28
 0x84DC

	)

1297 
	#GL_TEXTURE29
 0x84DD

	)

1298 
	#GL_TEXTURE30
 0x84DE

	)

1299 
	#GL_TEXTURE31
 0x84DF

	)

1300 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1301 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1302 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1303 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1304 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1305 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1306 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1307 
	#GL_SUBTRACT
 0x84E7

	)

1308 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1309 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1310 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1311 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1312 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1313 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1314 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1315 
	#GL_NORMAL_MAP
 0x8511

	)

1316 
	#GL_REFLECTION_MAP
 0x8512

	)

1317 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1318 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1319 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1320 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1321 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1322 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1323 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1324 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1325 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1326 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1327 
	#GL_COMBINE
 0x8570

	)

1328 
	#GL_COMBINE_RGB
 0x8571

	)

1329 
	#GL_COMBINE_ALPHA
 0x8572

	)

1330 
	#GL_RGB_SCALE
 0x8573

	)

1331 
	#GL_ADD_SIGNED
 0x8574

	)

1332 
	#GL_INTERPOLATE
 0x8575

	)

1333 
	#GL_CONSTANT
 0x8576

	)

1334 
	#GL_PRIMARY_COLOR
 0x8577

	)

1335 
	#GL_PREVIOUS
 0x8578

	)

1336 
	#GL_SOURCE0_RGB
 0x8580

	)

1337 
	#GL_SOURCE1_RGB
 0x8581

	)

1338 
	#GL_SOURCE2_RGB
 0x8582

	)

1339 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1340 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1341 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1342 
	#GL_OPERAND0_RGB
 0x8590

	)

1343 
	#GL_OPERAND1_RGB
 0x8591

	)

1344 
	#GL_OPERAND2_RGB
 0x8592

	)

1345 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1346 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1347 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1348 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1349 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1350 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1351 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1352 
	#GL_DOT3_RGB
 0x86AE

	)

1353 
	#GL_DOT3_RGBA
 0x86AF

	)

1354 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1356 (
GLAPIENTRY
 * 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1357 (
GLAPIENTRY
 * 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1358 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1359 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1360 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1361 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1362 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1363 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1364 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

1365 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 
	tm
[16]);

1366 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 
	tm
[16]);

1367 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 
	tm
[16]);

1368 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 
	tm
[16]);

1369 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

1370 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1371 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

1372 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1373 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

1374 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1375 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

1376 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1377 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

1378 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1379 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

1380 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1381 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

1382 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1383 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

1384 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1385 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

1386 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1387 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

1388 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1389 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

1390 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1391 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

1392 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1393 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

1394 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1395 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

1396 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1397 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

1398 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1399 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

1400 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1401 (
GLAPIENTRY
 * 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1403 
	#glA˘iveTextuª
 
	`GLEW_GET_FUN
(
__gÀwA˘iveTextuª
)

	)

1404 
	#glClõ¡A˘iveTextuª
 
	`GLEW_GET_FUN
(
__gÀwClõ¡A˘iveTextuª
)

	)

1405 
	#glCom¥es£dTexImage1D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage1D
)

	)

1406 
	#glCom¥es£dTexImage2D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage2D
)

	)

1407 
	#glCom¥es£dTexImage3D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage3D
)

	)

1408 
	#glCom¥es£dTexSubImage1D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage1D
)

	)

1409 
	#glCom¥es£dTexSubImage2D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage2D
)

	)

1410 
	#glCom¥es£dTexSubImage3D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage3D
)

	)

1411 
	#glGëCom¥es£dTexImage
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dTexImage
)

	)

1412 
	#glLﬂdTøn•o£M©rixd
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixd
)

	)

1413 
	#glLﬂdTøn•o£M©rixf
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixf
)

	)

1414 
	#glMu…Tøn•o£M©rixd
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixd
)

	)

1415 
	#glMu…Tøn•o£M©rixf
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixf
)

	)

1416 
	#glMu…iTexCo‹d1d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1d
)

	)

1417 
	#glMu…iTexCo‹d1dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1dv
)

	)

1418 
	#glMu…iTexCo‹d1f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1f
)

	)

1419 
	#glMu…iTexCo‹d1fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1fv
)

	)

1420 
	#glMu…iTexCo‹d1i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1i
)

	)

1421 
	#glMu…iTexCo‹d1iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1iv
)

	)

1422 
	#glMu…iTexCo‹d1s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1s
)

	)

1423 
	#glMu…iTexCo‹d1sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1sv
)

	)

1424 
	#glMu…iTexCo‹d2d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2d
)

	)

1425 
	#glMu…iTexCo‹d2dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2dv
)

	)

1426 
	#glMu…iTexCo‹d2f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2f
)

	)

1427 
	#glMu…iTexCo‹d2fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2fv
)

	)

1428 
	#glMu…iTexCo‹d2i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2i
)

	)

1429 
	#glMu…iTexCo‹d2iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2iv
)

	)

1430 
	#glMu…iTexCo‹d2s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2s
)

	)

1431 
	#glMu…iTexCo‹d2sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2sv
)

	)

1432 
	#glMu…iTexCo‹d3d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3d
)

	)

1433 
	#glMu…iTexCo‹d3dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3dv
)

	)

1434 
	#glMu…iTexCo‹d3f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3f
)

	)

1435 
	#glMu…iTexCo‹d3fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3fv
)

	)

1436 
	#glMu…iTexCo‹d3i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3i
)

	)

1437 
	#glMu…iTexCo‹d3iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3iv
)

	)

1438 
	#glMu…iTexCo‹d3s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3s
)

	)

1439 
	#glMu…iTexCo‹d3sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3sv
)

	)

1440 
	#glMu…iTexCo‹d4d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4d
)

	)

1441 
	#glMu…iTexCo‹d4dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4dv
)

	)

1442 
	#glMu…iTexCo‹d4f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4f
)

	)

1443 
	#glMu…iTexCo‹d4fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4fv
)

	)

1444 
	#glMu…iTexCo‹d4i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4i
)

	)

1445 
	#glMu…iTexCo‹d4iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4iv
)

	)

1446 
	#glMu…iTexCo‹d4s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4s
)

	)

1447 
	#glMu…iTexCo‹d4sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4sv
)

	)

1448 
	#glSam∂eCovîage
 
	`GLEW_GET_FUN
(
__gÀwSam∂eCovîage
)

	)

1450 
	#GLEW_VERSION_1_3
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_3
)

	)

1456 #i‚de‡
GL_VERSION_1_4


1457 
	#GL_VERSION_1_4
 1

	)

1459 
	#GL_BLEND_DST_RGB
 0x80C8

	)

1460 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

1461 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

1462 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

1463 
	#GL_POINT_SIZE_MIN
 0x8126

	)

1464 
	#GL_POINT_SIZE_MAX
 0x8127

	)

1465 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

1466 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

1467 
	#GL_GENERATE_MIPMAP
 0x8191

	)

1468 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

1469 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

1470 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

1471 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

1472 
	#GL_MIRRORED_REPEAT
 0x8370

	)

1473 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

1474 
	#GL_FOG_COORDINATE
 0x8451

	)

1475 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

1476 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

1477 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

1478 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

1479 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

1480 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

1481 
	#GL_COLOR_SUM
 0x8458

	)

1482 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

1483 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

1484 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

1485 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

1486 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

1487 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

1488 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

1489 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

1490 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

1491 
	#GL_INCR_WRAP
 0x8507

	)

1492 
	#GL_DECR_WRAP
 0x8508

	)

1493 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

1494 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

1495 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

1496 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

1497 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

1499 (
GLAPIENTRY
 * 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1500 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1501 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

1502 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

1503 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

1504 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

1505 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

1506 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

1507 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

1508 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 **
	tödi˚s
, GLsizeò
	tdøwcou¡
);

1509 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1510 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

1511 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1512 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1513 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

1514 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

1515 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

1516 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

1517 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

1518 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

1519 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

1520 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

1521 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

1522 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

1523 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

1524 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

1525 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

1526 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

1527 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

1528 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

1529 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

1530 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1531 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tp
);

1532 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

1533 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tp
);

1534 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

1535 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tp
);

1536 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

1537 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tp
);

1538 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1539 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tp
);

1540 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

1541 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tp
);

1542 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1543 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tp
);

1544 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

1545 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tp
);

1547 
	#glBÀndCﬁ‹
 
	`GLEW_GET_FUN
(
__gÀwBÀndCﬁ‹
)

	)

1548 
	#glBÀndEqu©i⁄
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄
)

	)

1549 
	#glBÀndFuncSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©e
)

	)

1550 
	#glFogCo‹dPoöãr
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dPoöãr
)

	)

1551 
	#glFogCo‹dd
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dd
)

	)

1552 
	#glFogCo‹ddv
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹ddv
)

	)

1553 
	#glFogCo‹df
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹df
)

	)

1554 
	#glFogCo‹dfv
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dfv
)

	)

1555 
	#glMu…iDøwAºays
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºays
)

	)

1556 
	#glMu…iDøwEÀmíts
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmíts
)

	)

1557 
	#glPoötP¨amëîf
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîf
)

	)

1558 
	#glPoötP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfv
)

	)

1559 
	#glPoötP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîi
)

	)

1560 
	#glPoötP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîiv
)

	)

1561 
	#glSec⁄d¨yCﬁ‹3b
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3b
)

	)

1562 
	#glSec⁄d¨yCﬁ‹3bv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3bv
)

	)

1563 
	#glSec⁄d¨yCﬁ‹3d
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3d
)

	)

1564 
	#glSec⁄d¨yCﬁ‹3dv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3dv
)

	)

1565 
	#glSec⁄d¨yCﬁ‹3f
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3f
)

	)

1566 
	#glSec⁄d¨yCﬁ‹3fv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3fv
)

	)

1567 
	#glSec⁄d¨yCﬁ‹3i
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3i
)

	)

1568 
	#glSec⁄d¨yCﬁ‹3iv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3iv
)

	)

1569 
	#glSec⁄d¨yCﬁ‹3s
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3s
)

	)

1570 
	#glSec⁄d¨yCﬁ‹3sv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3sv
)

	)

1571 
	#glSec⁄d¨yCﬁ‹3ub
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ub
)

	)

1572 
	#glSec⁄d¨yCﬁ‹3ubv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ubv
)

	)

1573 
	#glSec⁄d¨yCﬁ‹3ui
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ui
)

	)

1574 
	#glSec⁄d¨yCﬁ‹3uiv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3uiv
)

	)

1575 
	#glSec⁄d¨yCﬁ‹3us
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3us
)

	)

1576 
	#glSec⁄d¨yCﬁ‹3usv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3usv
)

	)

1577 
	#glSec⁄d¨yCﬁ‹Poöãr
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹Poöãr
)

	)

1578 
	#glWödowPos2d
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2d
)

	)

1579 
	#glWödowPos2dv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dv
)

	)

1580 
	#glWödowPos2f
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2f
)

	)

1581 
	#glWödowPos2fv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fv
)

	)

1582 
	#glWödowPos2i
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2i
)

	)

1583 
	#glWödowPos2iv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2iv
)

	)

1584 
	#glWödowPos2s
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2s
)

	)

1585 
	#glWödowPos2sv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2sv
)

	)

1586 
	#glWödowPos3d
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3d
)

	)

1587 
	#glWödowPos3dv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dv
)

	)

1588 
	#glWödowPos3f
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3f
)

	)

1589 
	#glWödowPos3fv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fv
)

	)

1590 
	#glWödowPos3i
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3i
)

	)

1591 
	#glWödowPos3iv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3iv
)

	)

1592 
	#glWödowPos3s
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3s
)

	)

1593 
	#glWödowPos3sv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3sv
)

	)

1595 
	#GLEW_VERSION_1_4
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_4
)

	)

1601 #i‚de‡
GL_VERSION_1_5


1602 
	#GL_VERSION_1_5
 1

	)

1604 
	#GL_FOG_COORD_SRC
 
GL_FOG_COORDINATE_SOURCE


	)

1605 
	#GL_FOG_COORD
 
GL_FOG_COORDINATE


	)

1606 
	#GL_FOG_COORD_ARRAY
 
GL_FOG_COORDINATE_ARRAY


	)

1607 
	#GL_SRC0_RGB
 
GL_SOURCE0_RGB


	)

1608 
	#GL_FOG_COORD_ARRAY_POINTER
 
GL_FOG_COORDINATE_ARRAY_POINTER


	)

1609 
	#GL_FOG_COORD_ARRAY_TYPE
 
GL_FOG_COORDINATE_ARRAY_TYPE


	)

1610 
	#GL_SRC1_ALPHA
 
GL_SOURCE1_ALPHA


	)

1611 
	#GL_CURRENT_FOG_COORD
 
GL_CURRENT_FOG_COORDINATE


	)

1612 
	#GL_FOG_COORD_ARRAY_STRIDE
 
GL_FOG_COORDINATE_ARRAY_STRIDE


	)

1613 
	#GL_SRC0_ALPHA
 
GL_SOURCE0_ALPHA


	)

1614 
	#GL_SRC1_RGB
 
GL_SOURCE1_RGB


	)

1615 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING


	)

1616 
	#GL_SRC2_ALPHA
 
GL_SOURCE2_ALPHA


	)

1617 
	#GL_SRC2_RGB
 
GL_SOURCE2_RGB


	)

1618 
	#GL_BUFFER_SIZE
 0x8764

	)

1619 
	#GL_BUFFER_USAGE
 0x8765

	)

1620 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

1621 
	#GL_CURRENT_QUERY
 0x8865

	)

1622 
	#GL_QUERY_RESULT
 0x8866

	)

1623 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

1624 
	#GL_ARRAY_BUFFER
 0x8892

	)

1625 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

1626 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

1627 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

1628 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

1629 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

1630 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

1631 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

1632 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

1633 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

1634 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

1635 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

1636 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

1637 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

1638 
	#GL_READ_ONLY
 0x88B8

	)

1639 
	#GL_WRITE_ONLY
 0x88B9

	)

1640 
	#GL_READ_WRITE
 0x88BA

	)

1641 
	#GL_BUFFER_ACCESS
 0x88BB

	)

1642 
	#GL_BUFFER_MAPPED
 0x88BC

	)

1643 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

1644 
	#GL_STREAM_DRAW
 0x88E0

	)

1645 
	#GL_STREAM_READ
 0x88E1

	)

1646 
	#GL_STREAM_COPY
 0x88E2

	)

1647 
	#GL_STATIC_DRAW
 0x88E4

	)

1648 
	#GL_STATIC_READ
 0x88E5

	)

1649 
	#GL_STATIC_COPY
 0x88E6

	)

1650 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

1651 
	#GL_DYNAMIC_READ
 0x88E9

	)

1652 
	#GL_DYNAMIC_COPY
 0x88EA

	)

1653 
	#GL_SAMPLES_PASSED
 0x8914

	)

1655 
±rdiff_t
 
	tGLöçå
;

1656 
±rdiff_t
 
	tGLsizeùå
;

1658 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1659 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

1660 (
GLAPIENTRY
 * 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
, GLíum 
	tußge
);

1661 (
GLAPIENTRY
 * 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
);

1662 (
GLAPIENTRY
 * 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tbuf„rs
);

1663 (
GLAPIENTRY
 * 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

1664 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

1665 (
GLAPIENTRY
 * 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tbuf„rs
);

1666 (
GLAPIENTRY
 * 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

1667 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

1668 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

1669 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
* 
	td©a
);

1670 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

1671 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

1672 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

1673 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

1674 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

1675 
	gGLvoid
* (
	tGLAPIENTRY
 * 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

1676 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

1678 
	#glBegöQuîy
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîy
)

	)

1679 
	#glBödBuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„r
)

	)

1680 
	#glBuf„rD©a
 
	`GLEW_GET_FUN
(
__gÀwBuf„rD©a
)

	)

1681 
	#glBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwBuf„rSubD©a
)

	)

1682 
	#glDñëeBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDñëeBuf„rs
)

	)

1683 
	#glDñëeQuîõs
 
	`GLEW_GET_FUN
(
__gÀwDñëeQuîõs
)

	)

1684 
	#glEndQuîy
 
	`GLEW_GET_FUN
(
__gÀwEndQuîy
)

	)

1685 
	#glGíBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwGíBuf„rs
)

	)

1686 
	#glGíQuîõs
 
	`GLEW_GET_FUN
(
__gÀwGíQuîõs
)

	)

1687 
	#glGëBuf„rP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîiv
)

	)

1688 
	#glGëBuf„rPoöãrv
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rPoöãrv
)

	)

1689 
	#glGëBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rSubD©a
)

	)

1690 
	#glGëQuîyObje˘iv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘iv
)

	)

1691 
	#glGëQuîyObje˘uiv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘uiv
)

	)

1692 
	#glGëQuîyiv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyiv
)

	)

1693 
	#glIsBuf„r
 
	`GLEW_GET_FUN
(
__gÀwIsBuf„r
)

	)

1694 
	#glIsQuîy
 
	`GLEW_GET_FUN
(
__gÀwIsQuîy
)

	)

1695 
	#glM≠Buf„r
 
	`GLEW_GET_FUN
(
__gÀwM≠Buf„r
)

	)

1696 
	#glUnm≠Buf„r
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Buf„r
)

	)

1698 
	#GLEW_VERSION_1_5
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_5
)

	)

1704 #i‚de‡
GL_VERSION_2_0


1705 
	#GL_VERSION_2_0
 1

	)

1707 
	#GL_BLEND_EQUATION_RGB
 
GL_BLEND_EQUATION


	)

1708 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

1709 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

1710 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

1711 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

1712 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

1713 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

1714 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

1715 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

1716 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

1717 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

1718 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

1719 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

1720 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

1721 
	#GL_DRAW_BUFFER0
 0x8825

	)

1722 
	#GL_DRAW_BUFFER1
 0x8826

	)

1723 
	#GL_DRAW_BUFFER2
 0x8827

	)

1724 
	#GL_DRAW_BUFFER3
 0x8828

	)

1725 
	#GL_DRAW_BUFFER4
 0x8829

	)

1726 
	#GL_DRAW_BUFFER5
 0x882A

	)

1727 
	#GL_DRAW_BUFFER6
 0x882B

	)

1728 
	#GL_DRAW_BUFFER7
 0x882C

	)

1729 
	#GL_DRAW_BUFFER8
 0x882D

	)

1730 
	#GL_DRAW_BUFFER9
 0x882E

	)

1731 
	#GL_DRAW_BUFFER10
 0x882F

	)

1732 
	#GL_DRAW_BUFFER11
 0x8830

	)

1733 
	#GL_DRAW_BUFFER12
 0x8831

	)

1734 
	#GL_DRAW_BUFFER13
 0x8832

	)

1735 
	#GL_DRAW_BUFFER14
 0x8833

	)

1736 
	#GL_DRAW_BUFFER15
 0x8834

	)

1737 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

1738 
	#GL_POINT_SPRITE
 0x8861

	)

1739 
	#GL_COORD_REPLACE
 0x8862

	)

1740 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

1741 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

1742 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

1743 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

1744 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

1745 
	#GL_VERTEX_SHADER
 0x8B31

	)

1746 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

1747 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

1748 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

1749 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

1750 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

1751 
	#GL_SHADER_TYPE
 0x8B4F

	)

1752 
	#GL_FLOAT_VEC2
 0x8B50

	)

1753 
	#GL_FLOAT_VEC3
 0x8B51

	)

1754 
	#GL_FLOAT_VEC4
 0x8B52

	)

1755 
	#GL_INT_VEC2
 0x8B53

	)

1756 
	#GL_INT_VEC3
 0x8B54

	)

1757 
	#GL_INT_VEC4
 0x8B55

	)

1758 
	#GL_BOOL
 0x8B56

	)

1759 
	#GL_BOOL_VEC2
 0x8B57

	)

1760 
	#GL_BOOL_VEC3
 0x8B58

	)

1761 
	#GL_BOOL_VEC4
 0x8B59

	)

1762 
	#GL_FLOAT_MAT2
 0x8B5A

	)

1763 
	#GL_FLOAT_MAT3
 0x8B5B

	)

1764 
	#GL_FLOAT_MAT4
 0x8B5C

	)

1765 
	#GL_SAMPLER_1D
 0x8B5D

	)

1766 
	#GL_SAMPLER_2D
 0x8B5E

	)

1767 
	#GL_SAMPLER_3D
 0x8B5F

	)

1768 
	#GL_SAMPLER_CUBE
 0x8B60

	)

1769 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

1770 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

1771 
	#GL_DELETE_STATUS
 0x8B80

	)

1772 
	#GL_COMPILE_STATUS
 0x8B81

	)

1773 
	#GL_LINK_STATUS
 0x8B82

	)

1774 
	#GL_VALIDATE_STATUS
 0x8B83

	)

1775 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

1776 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

1777 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

1778 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

1779 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

1780 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

1781 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

1782 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

1783 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

1784 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

1785 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

1786 
	#GL_LOWER_LEFT
 0x8CA1

	)

1787 
	#GL_UPPER_LEFT
 0x8CA2

	)

1788 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

1789 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

1790 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

1792 (
GLAPIENTRY
 * 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

1793 (
GLAPIENTRY
 * 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
* 
	t«me
);

1794 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
, GLenum);

1795 (
GLAPIENTRY
 * 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

1796 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATEPROGRAMPROC
) ();

1797 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

1798 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1799 (
GLAPIENTRY
 * 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

1800 (
GLAPIENTRY
 * 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

1801 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
);

1802 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

1803 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
);

1804 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
* 
	tsize
, 
	tGLíum
* 
	tty≥
, 
	tGLch¨
* 
	t«me
);

1805 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
* 
	tsize
, 
	tGLíum
* 
	tty≥
, 
	tGLch¨
* 
	t«me
);

1806 (
GLAPIENTRY
 * 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizei* 
	tcou¡
, GLuöt* 
	tshadîs
);

1807 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
* 
	t«me
);

1808 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	töfoLog
);

1809 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

1810 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	töfoLog
);

1811 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tsour˚
);

1812 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

1813 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
* 
	t«me
);

1814 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
* 
	t∑øms
);

1815 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöt* 
	t∑øms
);

1816 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLvoid
**);

1817 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLdoubÀ
*);

1818 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLÊﬂt
*);

1819 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLöt
*);

1820 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1821 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

1822 (
GLAPIENTRY
 * 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1823 (
GLAPIENTRY
 * 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
** 
	t°rögs
, c⁄° 
	tGLöt
* 
	tÀngths
);

1824 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

1825 (
GLAPIENTRY
 * 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
, 
	tGLuöt
);

1826 (
GLAPIENTRY
 * 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

1827 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1828 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1829 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1830 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1831 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1832 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1833 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1834 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1835 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1836 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1837 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1838 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1839 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1840 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1841 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1842 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1843 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1844 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1845 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1846 (
GLAPIENTRY
 * 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1847 (
GLAPIENTRY
 * 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1848 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1849 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1850 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

1851 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1852 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

1853 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1854 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1855 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1856 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

1857 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1858 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

1859 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1860 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1861 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1862 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

1863 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1864 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

1865 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1866 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

1867 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

1868 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1869 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

1870 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

1871 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

1872 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

1873 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

1874 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1875 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1876 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

1877 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1878 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

1879 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

1880 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1881 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

1882 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

1883 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

1884 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* 
	tpoöãr
);

1886 
	#glAâachShadî
 
	`GLEW_GET_FUN
(
__gÀwAâachShadî
)

	)

1887 
	#glBödAâribLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwBödAâribLoˇti⁄
)

	)

1888 
	#glBÀndEqu©i⁄Sï¨©e
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©e
)

	)

1889 
	#glCompûeShadî
 
	`GLEW_GET_FUN
(
__gÀwCompûeShadî
)

	)

1890 
	#glCª©eProgøm
 
	`GLEW_GET_FUN
(
__gÀwCª©eProgøm
)

	)

1891 
	#glCª©eShadî
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadî
)

	)

1892 
	#glDñëeProgøm
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgøm
)

	)

1893 
	#glDñëeShadî
 
	`GLEW_GET_FUN
(
__gÀwDñëeShadî
)

	)

1894 
	#glDëachShadî
 
	`GLEW_GET_FUN
(
__gÀwDëachShadî
)

	)

1895 
	#glDißbÀVîãxAâribAºay
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAâribAºay
)

	)

1896 
	#glDøwBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rs
)

	)

1897 
	#glE«bÀVîãxAâribAºay
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAâribAºay
)

	)

1898 
	#glGëA˘iveAârib
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveAârib
)

	)

1899 
	#glGëA˘iveUnif‹m
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹m
)

	)

1900 
	#glGëAâachedShadîs
 
	`GLEW_GET_FUN
(
__gÀwGëAâachedShadîs
)

	)

1901 
	#glGëAâribLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëAâribLoˇti⁄
)

	)

1902 
	#glGëProgømInfoLog
 
	`GLEW_GET_FUN
(
__gÀwGëProgømInfoLog
)

	)

1903 
	#glGëProgømiv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømiv
)

	)

1904 
	#glGëShadîInfoLog
 
	`GLEW_GET_FUN
(
__gÀwGëShadîInfoLog
)

	)

1905 
	#glGëShadîSour˚
 
	`GLEW_GET_FUN
(
__gÀwGëShadîSour˚
)

	)

1906 
	#glGëShadîiv
 
	`GLEW_GET_FUN
(
__gÀwGëShadîiv
)

	)

1907 
	#glGëUnif‹mLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mLoˇti⁄
)

	)

1908 
	#glGëUnif‹mfv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mfv
)

	)

1909 
	#glGëUnif‹miv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹miv
)

	)

1910 
	#glGëVîãxAâribPoöãrv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribPoöãrv
)

	)

1911 
	#glGëVîãxAâribdv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribdv
)

	)

1912 
	#glGëVîãxAâribfv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribfv
)

	)

1913 
	#glGëVîãxAâribiv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribiv
)

	)

1914 
	#glIsProgøm
 
	`GLEW_GET_FUN
(
__gÀwIsProgøm
)

	)

1915 
	#glIsShadî
 
	`GLEW_GET_FUN
(
__gÀwIsShadî
)

	)

1916 
	#glLökProgøm
 
	`GLEW_GET_FUN
(
__gÀwLökProgøm
)

	)

1917 
	#glShadîSour˚
 
	`GLEW_GET_FUN
(
__gÀwShadîSour˚
)

	)

1918 
	#glSãncûFuncSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwSãncûFuncSï¨©e
)

	)

1919 
	#glSãncûMaskSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwSãncûMaskSï¨©e
)

	)

1920 
	#glSãncûOpSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwSãncûOpSï¨©e
)

	)

1921 
	#glUnif‹m1f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1f
)

	)

1922 
	#glUnif‹m1fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1fv
)

	)

1923 
	#glUnif‹m1i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1i
)

	)

1924 
	#glUnif‹m1iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1iv
)

	)

1925 
	#glUnif‹m2f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2f
)

	)

1926 
	#glUnif‹m2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2fv
)

	)

1927 
	#glUnif‹m2i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2i
)

	)

1928 
	#glUnif‹m2iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2iv
)

	)

1929 
	#glUnif‹m3f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3f
)

	)

1930 
	#glUnif‹m3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3fv
)

	)

1931 
	#glUnif‹m3i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3i
)

	)

1932 
	#glUnif‹m3iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3iv
)

	)

1933 
	#glUnif‹m4f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4f
)

	)

1934 
	#glUnif‹m4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4fv
)

	)

1935 
	#glUnif‹m4i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4i
)

	)

1936 
	#glUnif‹m4iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4iv
)

	)

1937 
	#glUnif‹mM©rix2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2fv
)

	)

1938 
	#glUnif‹mM©rix3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3fv
)

	)

1939 
	#glUnif‹mM©rix4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4fv
)

	)

1940 
	#glU£Progøm
 
	`GLEW_GET_FUN
(
__gÀwU£Progøm
)

	)

1941 
	#glVÆid©eProgøm
 
	`GLEW_GET_FUN
(
__gÀwVÆid©eProgøm
)

	)

1942 
	#glVîãxAârib1d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1d
)

	)

1943 
	#glVîãxAârib1dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dv
)

	)

1944 
	#glVîãxAârib1f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1f
)

	)

1945 
	#glVîãxAârib1fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fv
)

	)

1946 
	#glVîãxAârib1s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1s
)

	)

1947 
	#glVîãxAârib1sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1sv
)

	)

1948 
	#glVîãxAârib2d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2d
)

	)

1949 
	#glVîãxAârib2dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dv
)

	)

1950 
	#glVîãxAârib2f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2f
)

	)

1951 
	#glVîãxAârib2fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fv
)

	)

1952 
	#glVîãxAârib2s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2s
)

	)

1953 
	#glVîãxAârib2sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2sv
)

	)

1954 
	#glVîãxAârib3d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3d
)

	)

1955 
	#glVîãxAârib3dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dv
)

	)

1956 
	#glVîãxAârib3f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3f
)

	)

1957 
	#glVîãxAârib3fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fv
)

	)

1958 
	#glVîãxAârib3s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3s
)

	)

1959 
	#glVîãxAârib3sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3sv
)

	)

1960 
	#glVîãxAârib4Nbv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nbv
)

	)

1961 
	#glVîãxAârib4Niv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Niv
)

	)

1962 
	#glVîãxAârib4Nsv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nsv
)

	)

1963 
	#glVîãxAârib4Nub
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nub
)

	)

1964 
	#glVîãxAârib4Nubv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nubv
)

	)

1965 
	#glVîãxAârib4Nuiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nuiv
)

	)

1966 
	#glVîãxAârib4Nusv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nusv
)

	)

1967 
	#glVîãxAârib4bv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4bv
)

	)

1968 
	#glVîãxAârib4d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4d
)

	)

1969 
	#glVîãxAârib4dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dv
)

	)

1970 
	#glVîãxAârib4f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4f
)

	)

1971 
	#glVîãxAârib4fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fv
)

	)

1972 
	#glVîãxAârib4iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4iv
)

	)

1973 
	#glVîãxAârib4s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4s
)

	)

1974 
	#glVîãxAârib4sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4sv
)

	)

1975 
	#glVîãxAârib4ubv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubv
)

	)

1976 
	#glVîãxAârib4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4uiv
)

	)

1977 
	#glVîãxAârib4usv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4usv
)

	)

1978 
	#glVîãxAâribPoöãr
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribPoöãr
)

	)

1980 
	#GLEW_VERSION_2_0
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_2_0
)

	)

1986 #i‚de‡
GL_VERSION_2_1


1987 
	#GL_VERSION_2_1
 1

	)

1989 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

1990 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

1991 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

1992 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

1993 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

1994 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

1995 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

1996 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

1997 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

1998 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

1999 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

2000 
	#GL_SRGB
 0x8C40

	)

2001 
	#GL_SRGB8
 0x8C41

	)

2002 
	#GL_SRGB_ALPHA
 0x8C42

	)

2003 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

2004 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

2005 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

2006 
	#GL_SLUMINANCE
 0x8C46

	)

2007 
	#GL_SLUMINANCE8
 0x8C47

	)

2008 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

2009 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

2010 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

2011 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

2013 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2014 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2015 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2016 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2017 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2018 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2020 
	#glUnif‹mM©rix2x3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x3fv
)

	)

2021 
	#glUnif‹mM©rix2x4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x4fv
)

	)

2022 
	#glUnif‹mM©rix3x2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x2fv
)

	)

2023 
	#glUnif‹mM©rix3x4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x4fv
)

	)

2024 
	#glUnif‹mM©rix4x2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x2fv
)

	)

2025 
	#glUnif‹mM©rix4x3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x3fv
)

	)

2027 
	#GLEW_VERSION_2_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_2_1
)

	)

2033 #i‚de‡
GL_VERSION_3_0


2034 
	#GL_VERSION_3_0
 1

	)

2036 
	#GL_MAX_CLIP_DISTANCES
 
GL_MAX_CLIP_PLANES


	)

2037 
	#GL_CLIP_DISTANCE5
 
GL_CLIP_PLANE5


	)

2038 
	#GL_CLIP_DISTANCE1
 
GL_CLIP_PLANE1


	)

2039 
	#GL_CLIP_DISTANCE3
 
GL_CLIP_PLANE3


	)

2040 
	#GL_COMPARE_REF_TO_TEXTURE
 
GL_COMPARE_R_TO_TEXTURE_ARB


	)

2041 
	#GL_CLIP_DISTANCE0
 
GL_CLIP_PLANE0


	)

2042 
	#GL_CLIP_DISTANCE4
 
GL_CLIP_PLANE4


	)

2043 
	#GL_CLIP_DISTANCE2
 
GL_CLIP_PLANE2


	)

2044 
	#GL_MAX_VARYING_COMPONENTS
 
GL_MAX_VARYING_FLOATS


	)

2045 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

2046 
	#GL_MAJOR_VERSION
 0x821B

	)

2047 
	#GL_MINOR_VERSION
 0x821C

	)

2048 
	#GL_NUM_EXTENSIONS
 0x821D

	)

2049 
	#GL_CONTEXT_FLAGS
 0x821E

	)

2050 
	#GL_DEPTH_BUFFER
 0x8223

	)

2051 
	#GL_STENCIL_BUFFER
 0x8224

	)

2052 
	#GL_COMPRESSED_RED
 0x8225

	)

2053 
	#GL_COMPRESSED_RG
 0x8226

	)

2054 
	#GL_RGBA32F
 0x8814

	)

2055 
	#GL_RGB32F
 0x8815

	)

2056 
	#GL_RGBA16F
 0x881A

	)

2057 
	#GL_RGB16F
 0x881B

	)

2058 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

2059 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

2060 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

2061 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

2062 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

2063 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

2064 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

2065 
	#GL_FIXED_ONLY
 0x891D

	)

2066 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

2067 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

2068 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

2069 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

2070 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

2071 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

2072 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

2073 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

2074 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

2075 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

2076 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

2077 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

2078 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

2079 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

2080 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

2081 
	#GL_RGB9_E5
 0x8C3D

	)

2082 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

2083 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

2084 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

2085 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

2086 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

2087 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

2088 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

2089 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

2090 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

2091 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

2092 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

2093 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

2094 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

2095 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

2096 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

2097 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

2098 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

2099 
	#GL_RGBA32UI
 0x8D70

	)

2100 
	#GL_RGB32UI
 0x8D71

	)

2101 
	#GL_RGBA16UI
 0x8D76

	)

2102 
	#GL_RGB16UI
 0x8D77

	)

2103 
	#GL_RGBA8UI
 0x8D7C

	)

2104 
	#GL_RGB8UI
 0x8D7D

	)

2105 
	#GL_RGBA32I
 0x8D82

	)

2106 
	#GL_RGB32I
 0x8D83

	)

2107 
	#GL_RGBA16I
 0x8D88

	)

2108 
	#GL_RGB16I
 0x8D89

	)

2109 
	#GL_RGBA8I
 0x8D8E

	)

2110 
	#GL_RGB8I
 0x8D8F

	)

2111 
	#GL_RED_INTEGER
 0x8D94

	)

2112 
	#GL_GREEN_INTEGER
 0x8D95

	)

2113 
	#GL_BLUE_INTEGER
 0x8D96

	)

2114 
	#GL_ALPHA_INTEGER
 0x8D97

	)

2115 
	#GL_RGB_INTEGER
 0x8D98

	)

2116 
	#GL_RGBA_INTEGER
 0x8D99

	)

2117 
	#GL_BGR_INTEGER
 0x8D9A

	)

2118 
	#GL_BGRA_INTEGER
 0x8D9B

	)

2119 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

2120 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

2121 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

2122 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

2123 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

2124 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

2125 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

2126 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

2127 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

2128 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

2129 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

2130 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

2131 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

2132 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

2133 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

2134 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

2135 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

2136 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

2137 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

2138 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

2139 
	#GL_QUERY_WAIT
 0x8E13

	)

2140 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

2141 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

2142 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

2144 (
GLAPIENTRY
 * 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
, 
	tGLíum
);

2145 (
GLAPIENTRY
 * 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
);

2146 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
, GLuöt, c⁄° 
	tGLch¨
*);

2147 (
GLAPIENTRY
 * 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
, GLenum);

2148 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
, 
	tGLöt
, 
	tGLÊﬂt
, GLint);

2149 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
, 
	tGLöt
, c⁄° 
	tGLÊﬂt
*);

2150 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
, 
	tGLöt
, const GLint*);

2151 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
, 
	tGLöt
, c⁄° 
	tGLuöt
*);

2152 (
GLAPIENTRY
 * 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
, 
	tGLboﬁón
, GLboolean, GLboolean, GLboolean);

2153 (
GLAPIENTRY
 * 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2154 (
GLAPIENTRY
 * 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2155 (
GLAPIENTRY
 * 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

2156 (
GLAPIENTRY
 * 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

2157 (
GLAPIENTRY
 * 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
, 
	tGLuöt
, 
	tGLboﬁón
*);

2158 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
, c⁄° 
	tGLch¨
*);

2159 c⁄° 
	tGLubyã
* (
	tGLAPIENTRY
 * 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2160 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
, GLíum, 
	tGLöt
*);

2161 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
, GLíum, 
	tGLuöt
*);

2162 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
, GLuöt, 
	tGLsizei
, GLsizeò*, GLsizeò*, 
	tGLíum
 *, 
	tGLch¨
 *);

2163 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLuint*);

2164 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLöt
*);

2165 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
, 
	tGLíum
, GLuint*);

2166 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2167 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
, GLíum, c⁄° 
	tGLöt
*);

2168 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
, GLíum, c⁄° 
	tGLuöt
*);

2169 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
, 
	tGLsizei
, c⁄° 
	tGLch¨
 **, 
	tGLíum
);

2170 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
, 
	tGLuöt
);

2171 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2172 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
, 
	tGLuöt
, GLuint);

2173 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2174 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
, 
	tGLuöt
, GLuint, GLuint);

2175 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2176 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
, 
	tGLuöt
, GLuint, GLuint, GLuint);

2177 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2178 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
, 
	tGLöt
);

2179 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2180 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
, GLuint);

2181 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2182 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLint);

2183 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2184 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
, GLuint, GLuint);

2185 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2186 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLint, GLint);

2187 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2188 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
, GLuint, GLuint, GLuint);

2189 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2190 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLbyã
*);

2191 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLint, GLint, GLint);

2192 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2193 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLsh‹t
*);

2194 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLubyã
*);

2195 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
, GLuint, GLuint, GLuint, GLuint);

2196 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2197 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLush‹t
*);

2198 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
, 
	tGLöt
, 
	tGLíum
, 
	tGLsizei
, c⁄° 
	tGLvoid
*);

2200 
	#glBegöC⁄dôi⁄ÆRídî
 
	`GLEW_GET_FUN
(
__gÀwBegöC⁄dôi⁄ÆRídî
)

	)

2201 
	#glBegöTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwBegöTønsf‹mFìdback
)

	)

2202 
	#glBödFøgD©aLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwBödFøgD©aLoˇti⁄
)

	)

2203 
	#glCœmpCﬁ‹
 
	`GLEW_GET_FUN
(
__gÀwCœmpCﬁ‹
)

	)

2204 
	#glCÀ¨Buf„rfi
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rfi
)

	)

2205 
	#glCÀ¨Buf„rfv
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rfv
)

	)

2206 
	#glCÀ¨Buf„riv
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„riv
)

	)

2207 
	#glCÀ¨Buf„ruiv
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„ruiv
)

	)

2208 
	#glCﬁ‹Maski
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹Maski
)

	)

2209 
	#glDißbÀi
 
	`GLEW_GET_FUN
(
__gÀwDißbÀi
)

	)

2210 
	#glE«bÀi
 
	`GLEW_GET_FUN
(
__gÀwE«bÀi
)

	)

2211 
	#glEndC⁄dôi⁄ÆRídî
 
	`GLEW_GET_FUN
(
__gÀwEndC⁄dôi⁄ÆRídî
)

	)

2212 
	#glEndTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwEndTønsf‹mFìdback
)

	)

2213 
	#glGëBoﬁóni_v
 
	`GLEW_GET_FUN
(
__gÀwGëBoﬁóni_v
)

	)

2214 
	#glGëFøgD©aLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëFøgD©aLoˇti⁄
)

	)

2215 
	#glGëSåögi
 
	`GLEW_GET_FUN
(
__gÀwGëSåögi
)

	)

2216 
	#glGëTexP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIiv
)

	)

2217 
	#glGëTexP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIuiv
)

	)

2218 
	#glGëTønsf‹mFìdbackV¨yög
 
	`GLEW_GET_FUN
(
__gÀwGëTønsf‹mFìdbackV¨yög
)

	)

2219 
	#glGëUnif‹muiv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹muiv
)

	)

2220 
	#glGëVîãxAâribIiv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIiv
)

	)

2221 
	#glGëVîãxAâribIuiv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIuiv
)

	)

2222 
	#glIsE«bÀdi
 
	`GLEW_GET_FUN
(
__gÀwIsE«bÀdi
)

	)

2223 
	#glTexP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIiv
)

	)

2224 
	#glTexP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIuiv
)

	)

2225 
	#glTønsf‹mFìdbackV¨yögs
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackV¨yögs
)

	)

2226 
	#glUnif‹m1ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ui
)

	)

2227 
	#glUnif‹m1uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1uiv
)

	)

2228 
	#glUnif‹m2ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ui
)

	)

2229 
	#glUnif‹m2uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2uiv
)

	)

2230 
	#glUnif‹m3ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ui
)

	)

2231 
	#glUnif‹m3uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3uiv
)

	)

2232 
	#glUnif‹m4ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ui
)

	)

2233 
	#glUnif‹m4uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4uiv
)

	)

2234 
	#glVîãxAâribI1i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1i
)

	)

2235 
	#glVîãxAâribI1iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1iv
)

	)

2236 
	#glVîãxAâribI1ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1ui
)

	)

2237 
	#glVîãxAâribI1uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1uiv
)

	)

2238 
	#glVîãxAâribI2i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2i
)

	)

2239 
	#glVîãxAâribI2iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2iv
)

	)

2240 
	#glVîãxAâribI2ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2ui
)

	)

2241 
	#glVîãxAâribI2uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2uiv
)

	)

2242 
	#glVîãxAâribI3i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3i
)

	)

2243 
	#glVîãxAâribI3iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3iv
)

	)

2244 
	#glVîãxAâribI3ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3ui
)

	)

2245 
	#glVîãxAâribI3uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3uiv
)

	)

2246 
	#glVîãxAâribI4bv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4bv
)

	)

2247 
	#glVîãxAâribI4i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4i
)

	)

2248 
	#glVîãxAâribI4iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4iv
)

	)

2249 
	#glVîãxAâribI4sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4sv
)

	)

2250 
	#glVîãxAâribI4ubv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ubv
)

	)

2251 
	#glVîãxAâribI4ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ui
)

	)

2252 
	#glVîãxAâribI4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4uiv
)

	)

2253 
	#glVîãxAâribI4usv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4usv
)

	)

2254 
	#glVîãxAâribIPoöãr
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIPoöãr
)

	)

2256 
	#GLEW_VERSION_3_0
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_0
)

	)

2262 #i‚de‡
GL_VERSION_3_1


2263 
	#GL_VERSION_3_1
 1

	)

2265 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

2266 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

2267 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

2268 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

2269 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

2270 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

2271 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

2272 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

2273 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

2274 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

2275 
	#GL_TEXTURE_BUFFER_FORMAT
 0x8C2E

	)

2276 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

2277 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

2278 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

2279 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

2280 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

2281 
	#GL_RED_SNORM
 0x8F90

	)

2282 
	#GL_RG_SNORM
 0x8F91

	)

2283 
	#GL_RGB_SNORM
 0x8F92

	)

2284 
	#GL_RGBA_SNORM
 0x8F93

	)

2285 
	#GL_R8_SNORM
 0x8F94

	)

2286 
	#GL_RG8_SNORM
 0x8F95

	)

2287 
	#GL_RGB8_SNORM
 0x8F96

	)

2288 
	#GL_RGBA8_SNORM
 0x8F97

	)

2289 
	#GL_R16_SNORM
 0x8F98

	)

2290 
	#GL_RG16_SNORM
 0x8F99

	)

2291 
	#GL_RGB16_SNORM
 0x8F9A

	)

2292 
	#GL_RGBA16_SNORM
 0x8F9B

	)

2293 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

2294 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

2295 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

2296 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

2297 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

2298 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

2300 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
, 
	tGLöt
, 
	tGLsizei
, GLsizei);

2301 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
, 
	tGLsizei
, GLíum, c⁄° 
	tGLvoid
*, GLsizei);

2302 (
GLAPIENTRY
 * 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
);

2303 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
, GLíum, 
	tGLuöt
);

2305 
	#glDøwAºaysIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚d
)

	)

2306 
	#glDøwEÀmítsIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚d
)

	)

2307 
	#glPrimôiveRe°¨tIndex
 
	`GLEW_GET_FUN
(
__gÀwPrimôiveRe°¨tIndex
)

	)

2308 
	#glTexBuf„r
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„r
)

	)

2310 
	#GLEW_VERSION_3_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_1
)

	)

2316 #i‚de‡
GL_VERSION_3_2


2317 
	#GL_VERSION_3_2
 1

	)

2319 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

2320 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

2321 
	#GL_LINES_ADJACENCY
 0x000A

	)

2322 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

2323 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

2324 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

2325 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

2326 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

2327 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

2328 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

2329 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

2330 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

2331 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

2332 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

2333 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

2334 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

2335 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

2336 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

2337 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

2338 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

2339 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

2340 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

2342 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
, GLíum, 
	tGLuöt
, 
	tGLöt
);

2343 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
, GLíum, 
	tGLöt64
 *);

2344 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
, 
	tGLuöt
, 
	tGLöt64
 *);

2346 
	#glFømebuf„rTextuª
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª
)

	)

2347 
	#glGëBuf„rP¨amëîi64v
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîi64v
)

	)

2348 
	#glGëI¡egî64i_v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egî64i_v
)

	)

2350 
	#GLEW_VERSION_3_2
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_2
)

	)

2356 #i‚de‡
GL_VERSION_3_3


2357 
	#GL_VERSION_3_3
 1

	)

2359 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

2360 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

2361 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

2362 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

2363 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

2364 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

2365 
	#GL_RGB10_A2UI
 0x906F

	)

2367 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

2369 
	#glVîãxAâribDivis‹
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribDivis‹
)

	)

2371 
	#GLEW_VERSION_3_3
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_3
)

	)

2377 #i‚de‡
GL_VERSION_4_0


2378 
	#GL_VERSION_4_0
 1

	)

2380 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

2381 
	#GL_SAMPLE_SHADING
 0x8C36

	)

2382 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

2383 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

2384 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

2385 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

2386 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

2387 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

2388 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

2389 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
 0x8F9F

	)

2390 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

2391 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

2392 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

2393 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

2394 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

2395 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

2396 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

2398 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

2399 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

2400 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

2401 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

2402 (
GLAPIENTRY
 * 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGL˛ampf
 
	tvÆue
);

2404 
	#glBÀndEqu©i⁄Sï¨©ei
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©ei
)

	)

2405 
	#glBÀndEqu©i⁄i
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄i
)

	)

2406 
	#glBÀndFuncSï¨©ei
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©ei
)

	)

2407 
	#glBÀndFunci
 
	`GLEW_GET_FUN
(
__gÀwBÀndFunci
)

	)

2408 
	#glMöSam∂eShadög
 
	`GLEW_GET_FUN
(
__gÀwMöSam∂eShadög
)

	)

2410 
	#GLEW_VERSION_4_0
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_0
)

	)

2416 #i‚de‡
GL_VERSION_4_1


2417 
	#GL_VERSION_4_1
 1

	)

2419 
	#GLEW_VERSION_4_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_1
)

	)

2425 #i‚de‡
GL_VERSION_4_2


2426 
	#GL_VERSION_4_2
 1

	)

2428 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2429 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2430 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2431 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2433 
	#GLEW_VERSION_4_2
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_2
)

	)

2439 #i‚de‡
GL_VERSION_4_3


2440 
	#GL_VERSION_4_3
 1

	)

2442 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2443 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2445 
	#GLEW_VERSION_4_3
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_3
)

	)

2451 #i‚de‡
GL_3DFX_mu…ißm∂e


2452 
	#GL_3DFX_mu…ißm∂e
 1

	)

2454 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2455 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2456 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2457 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2459 
	#GLEW_3DFX_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_3DFX_mu…ißm∂e
)

	)

2465 #i‚de‡
GL_3DFX_tbuf„r


2466 
	#GL_3DFX_tbuf„r
 1

	)

2468 (
GLAPIENTRY
 * 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

2470 
	#glTbuf„rMask3DFX
 
	`GLEW_GET_FUN
(
__gÀwTbuf„rMask3DFX
)

	)

2472 
	#GLEW_3DFX_tbuf„r
 
	`GLEW_GET_VAR
(
__GLEW_3DFX_tbuf„r
)

	)

2478 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2479 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

2481 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2482 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2484 
	#GLEW_3DFX_ãxtuª_com¥essi⁄_FXT1
 
	`GLEW_GET_VAR
(
__GLEW_3DFX_ãxtuª_com¥essi⁄_FXT1
)

	)

2490 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


2491 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

2493 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

2494 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

2496 
	#GLEW_AMD_bÀnd_mömax_Á˘‹
 
	`GLEW_GET_VAR
(
__GLEW_AMD_bÀnd_mömax_Á˘‹
)

	)

2502 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


2503 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

2505 
	#GLEW_AMD_c⁄£rv©ive_dïth
 
	`GLEW_GET_VAR
(
__GLEW_AMD_c⁄£rv©ive_dïth
)

	)

2511 #i‚de‡
GL_AMD_debug_ouçut


2512 
	#GL_AMD_debug_ouçut
 1

	)

2514 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

2515 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

2516 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

2517 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

2518 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

2519 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

2520 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

2521 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

2522 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

2523 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

2524 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

2525 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

2526 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

2527 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

2529 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tmesßge
, 
	tGLvoid
* 
	tu£rP¨am
);

2531 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, * 
	tu£rP¨am
);

2532 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2533 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tbuf
);

2534 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
* 
	tˇãg‹õs
, GLuöt* 
	t£vîôõs
, GLuöt* 
	tids
, GLsizei* 
	tÀngths
, 
	tGLch¨
* 
	tmesßge
);

2536 
	#glDebugMesßgeCÆlbackAMD
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeCÆlbackAMD
)

	)

2537 
	#glDebugMesßgeE«bÀAMD
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeE«bÀAMD
)

	)

2538 
	#glDebugMesßgeIn£πAMD
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeIn£πAMD
)

	)

2539 
	#glGëDebugMesßgeLogAMD
 
	`GLEW_GET_FUN
(
__gÀwGëDebugMesßgeLogAMD
)

	)

2541 
	#GLEW_AMD_debug_ouçut
 
	`GLEW_GET_VAR
(
__GLEW_AMD_debug_ouçut
)

	)

2547 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


2548 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

2550 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

2551 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

2553 
	#GLEW_AMD_dïth_˛amp_£∑øã
 
	`GLEW_GET_VAR
(
__GLEW_AMD_dïth_˛amp_£∑øã
)

	)

2559 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


2560 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

2562 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

2563 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

2564 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

2565 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

2567 
	#glBÀndEqu©i⁄IndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄IndexedAMD
)

	)

2568 
	#glBÀndEqu©i⁄Sï¨©eIndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©eIndexedAMD
)

	)

2569 
	#glBÀndFuncIndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncIndexedAMD
)

	)

2570 
	#glBÀndFuncSï¨©eIndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©eIndexedAMD
)

	)

2572 
	#GLEW_AMD_døw_buf„rs_bÀnd
 
	`GLEW_GET_VAR
(
__GLEW_AMD_døw_buf„rs_bÀnd
)

	)

2578 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


2579 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

2581 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° * 
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

2582 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° * 
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

2584 
	#glMu…iDøwAºaysIndúe˘AMD
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysIndúe˘AMD
)

	)

2585 
	#glMu…iDøwEÀmítsIndúe˘AMD
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsIndúe˘AMD
)

	)

2587 
	#GLEW_AMD_mu…i_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_AMD_mu…i_døw_ödúe˘
)

	)

2593 #i‚de‡
GL_AMD_«me_gí_dñëe


2594 
	#GL_AMD_«me_gí_dñëe
 1

	)

2596 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

2597 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

2598 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

2599 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

2600 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

2602 (
GLAPIENTRY
 * 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöt* 
	t«mes
);

2603 (
GLAPIENTRY
 * 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöt* 
	t«mes
);

2604 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

2606 
	#glDñëeNamesAMD
 
	`GLEW_GET_FUN
(
__gÀwDñëeNamesAMD
)

	)

2607 
	#glGíNamesAMD
 
	`GLEW_GET_FUN
(
__gÀwGíNamesAMD
)

	)

2608 
	#glIsNameAMD
 
	`GLEW_GET_FUN
(
__gÀwIsNameAMD
)

	)

2610 
	#GLEW_AMD_«me_gí_dñëe
 
	`GLEW_GET_VAR
(
__GLEW_AMD_«me_gí_dñëe
)

	)

2616 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


2617 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

2619 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

2620 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

2621 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

2622 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

2623 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

2624 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

2625 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

2627 (
GLAPIENTRY
 * 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

2628 (
GLAPIENTRY
 * 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tm⁄ô‹s
);

2629 (
GLAPIENTRY
 * 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

2630 (
GLAPIENTRY
 * 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tm⁄ô‹s
);

2631 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöt* 
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

2632 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, * 
	td©a
);

2633 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

2634 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
* 
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îsSize
, GLuöà*
	tcou¡îs
);

2635 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

2636 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
* 
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

2637 (
GLAPIENTRY
 * 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöt* 
	tcou¡îLi°
);

2639 
	#glBegöPîfM⁄ô‹AMD
 
	`GLEW_GET_FUN
(
__gÀwBegöPîfM⁄ô‹AMD
)

	)

2640 
	#glDñëePîfM⁄ô‹sAMD
 
	`GLEW_GET_FUN
(
__gÀwDñëePîfM⁄ô‹sAMD
)

	)

2641 
	#glEndPîfM⁄ô‹AMD
 
	`GLEW_GET_FUN
(
__gÀwEndPîfM⁄ô‹AMD
)

	)

2642 
	#glGíPîfM⁄ô‹sAMD
 
	`GLEW_GET_FUN
(
__gÀwGíPîfM⁄ô‹sAMD
)

	)

2643 
	#glGëPîfM⁄ô‹Cou¡îD©aAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îD©aAMD
)

	)

2644 
	#glGëPîfM⁄ô‹Cou¡îInfoAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îInfoAMD
)

	)

2645 
	#glGëPîfM⁄ô‹Cou¡îSåögAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îSåögAMD
)

	)

2646 
	#glGëPîfM⁄ô‹Cou¡îsAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îsAMD
)

	)

2647 
	#glGëPîfM⁄ô‹GroupSåögAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹GroupSåögAMD
)

	)

2648 
	#glGëPîfM⁄ô‹GroupsAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹GroupsAMD
)

	)

2649 
	#glSñe˘PîfM⁄ô‹Cou¡îsAMD
 
	`GLEW_GET_FUN
(
__gÀwSñe˘PîfM⁄ô‹Cou¡îsAMD
)

	)

2651 
	#GLEW_AMD_≥rf‹m™˚_m⁄ô‹
 
	`GLEW_GET_VAR
(
__GLEW_AMD_≥rf‹m™˚_m⁄ô‹
)

	)

2657 #i‚de‡
GL_AMD_pö√d_mem‹y


2658 
	#GL_AMD_pö√d_mem‹y
 1

	)

2660 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

2662 
	#GLEW_AMD_pö√d_mem‹y
 
	`GLEW_GET_VAR
(
__GLEW_AMD_pö√d_mem‹y
)

	)

2668 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


2669 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

2671 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

2672 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

2673 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

2675 
	#GLEW_AMD_quîy_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_AMD_quîy_buf„r_obje˘
)

	)

2681 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


2682 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

2684 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

2686 (
GLAPIENTRY
 * 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tvÆ
);

2688 
	#glSëMu…ißm∂efvAMD
 
	`GLEW_GET_FUN
(
__gÀwSëMu…ißm∂efvAMD
)

	)

2690 
	#GLEW_AMD_ßm∂e_posôi⁄s
 
	`GLEW_GET_VAR
(
__GLEW_AMD_ßm∂e_posôi⁄s
)

	)

2696 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


2697 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

2699 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB
 0x884F

	)

2701 
	#GLEW_AMD_£amÀss_cubem≠_≥r_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_AMD_£amÀss_cubem≠_≥r_ãxtuª
)

	)

2707 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


2708 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

2710 
	#GLEW_AMD_shadî_°ícû_exp‹t
 
	`GLEW_GET_VAR
(
__GLEW_AMD_shadî_°ícû_exp‹t
)

	)

2716 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


2717 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

2719 
	#GL_SET_AMD
 0x874A

	)

2720 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

2721 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

2722 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

2724 (
GLAPIENTRY
 * 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

2726 
	#glSãncûOpVÆueAMD
 
	`GLEW_GET_FUN
(
__gÀwSãncûOpVÆueAMD
)

	)

2728 
	#GLEW_AMD_°ícû_›î©i⁄_exãnded
 
	`GLEW_GET_VAR
(
__GLEW_AMD_°ícû_›î©i⁄_exãnded
)

	)

2734 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


2735 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

2737 
	#GLEW_AMD_ãxtuª_ãxtuª4
 
	`GLEW_GET_VAR
(
__GLEW_AMD_ãxtuª_ãxtuª4
)

	)

2743 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


2744 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

2746 
	#GLEW_AMD_å™sf‹m_„edback3_löes_åüngÀs
 
	`GLEW_GET_VAR
(
__GLEW_AMD_å™sf‹m_„edback3_löes_åüngÀs
)

	)

2752 #i‚de‡
GL_AMD_vîãx_shadî_œyî


2753 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

2755 
	#GLEW_AMD_vîãx_shadî_œyî
 
	`GLEW_GET_VAR
(
__GLEW_AMD_vîãx_shadî_œyî
)

	)

2761 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


2762 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

2764 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

2765 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

2766 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

2767 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

2768 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

2769 
	#GL_DISCRETE_AMD
 0x9006

	)

2770 
	#GL_CONTINUOUS_AMD
 0x9007

	)

2772 (
GLAPIENTRY
 * 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

2773 (
GLAPIENTRY
 * 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

2775 
	#glTes£Œ©i⁄Fa˘‹AMD
 
	`GLEW_GET_FUN
(
__gÀwTes£Œ©i⁄Fa˘‹AMD
)

	)

2776 
	#glTes£Œ©i⁄ModeAMD
 
	`GLEW_GET_FUN
(
__gÀwTes£Œ©i⁄ModeAMD
)

	)

2778 
	#GLEW_AMD_vîãx_shadî_ãs£Œ©‹
 
	`GLEW_GET_VAR
(
__GLEW_AMD_vîãx_shadî_ãs£Œ©‹
)

	)

2784 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


2785 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

2787 
	#GLEW_AMD_vîãx_shadî_võwp‹t_ödex
 
	`GLEW_GET_VAR
(
__GLEW_AMD_vîãx_shadî_võwp‹t_ödex
)

	)

2793 #i‚de‡
GL_APPLE_aux_dïth_°ícû


2794 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

2796 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

2798 
	#GLEW_APPLE_aux_dïth_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_aux_dïth_°ícû
)

	)

2804 #i‚de‡
GL_APPLE_˛õ¡_°‹age


2805 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

2807 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

2809 
	#GLEW_APPLE_˛õ¡_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_˛õ¡_°‹age
)

	)

2815 #i‚de‡
GL_APPLE_ñemít_¨øy


2816 
	#GL_APPLE_ñemít_¨øy
 1

	)

2818 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

2819 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

2820 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

2822 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

2823 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

2824 (
GLAPIENTRY
 * 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° * 
	tpoöãr
);

2825 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
* 
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

2826 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
* 
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

2828 
	#glDøwEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítAºayAPPLE
)

	)

2829 
	#glDøwR™geEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítAºayAPPLE
)

	)

2830 
	#glEÀmítPoöãrAPPLE
 
	`GLEW_GET_FUN
(
__gÀwEÀmítPoöãrAPPLE
)

	)

2831 
	#glMu…iDøwEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítAºayAPPLE
)

	)

2832 
	#glMu…iDøwR™geEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwR™geEÀmítAºayAPPLE
)

	)

2834 
	#GLEW_APPLE_ñemít_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_ñemít_¨øy
)

	)

2840 #i‚de‡
GL_APPLE_„n˚


2841 
	#GL_APPLE_„n˚
 1

	)

2843 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

2844 
	#GL_FENCE_APPLE
 0x8A0B

	)

2846 (
GLAPIENTRY
 * 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t„n˚s
);

2847 (
GLAPIENTRY
 * 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

2848 (
GLAPIENTRY
 * 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

2849 (
GLAPIENTRY
 * 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t„n˚s
);

2850 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

2851 (
GLAPIENTRY
 * 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

2852 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

2853 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

2855 
	#glDñëeFí˚sAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDñëeFí˚sAPPLE
)

	)

2856 
	#glFöishFí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwFöishFí˚APPLE
)

	)

2857 
	#glFöishObje˘APPLE
 
	`GLEW_GET_FUN
(
__gÀwFöishObje˘APPLE
)

	)

2858 
	#glGíFí˚sAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGíFí˚sAPPLE
)

	)

2859 
	#glIsFí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwIsFí˚APPLE
)

	)

2860 
	#glSëFí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwSëFí˚APPLE
)

	)

2861 
	#glTe°Fí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwTe°Fí˚APPLE
)

	)

2862 
	#glTe°Obje˘APPLE
 
	`GLEW_GET_FUN
(
__gÀwTe°Obje˘APPLE
)

	)

2864 
	#GLEW_APPLE_„n˚
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_„n˚
)

	)

2870 #i‚de‡
GL_APPLE_Êﬂt_pixñs


2871 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

2873 
	#GL_HALF_APPLE
 0x140B

	)

2874 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

2875 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

2876 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

2877 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

2878 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

2879 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

2880 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

2881 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

2882 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

2883 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

2884 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

2885 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

2886 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

2888 
	#GLEW_APPLE_Êﬂt_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_Êﬂt_pixñs
)

	)

2894 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


2895 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

2897 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

2898 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

2900 (
GLAPIENTRY
 * 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2901 (
GLAPIENTRY
 * 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2903 
	#glBuf„rP¨amëîiAPPLE
 
	`GLEW_GET_FUN
(
__gÀwBuf„rP¨amëîiAPPLE
)

	)

2904 
	#glFlushM≠≥dBuf„rR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwFlushM≠≥dBuf„rR™geAPPLE
)

	)

2906 
	#GLEW_APPLE_Êush_buf„r_ønge
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_Êush_buf„r_ønge
)

	)

2912 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


2913 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

2915 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

2916 
	#GL_RELEASED_APPLE
 0x8A19

	)

2917 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

2918 
	#GL_RETAINED_APPLE
 0x8A1B

	)

2919 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

2920 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

2922 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

2923 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

2924 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

2926 
	#glGëObje˘P¨amëîivAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘P¨amëîivAPPLE
)

	)

2927 
	#glObje˘PurgóbÀAPPLE
 
	`GLEW_GET_FUN
(
__gÀwObje˘PurgóbÀAPPLE
)

	)

2928 
	#glObje˘U≈urgóbÀAPPLE
 
	`GLEW_GET_FUN
(
__gÀwObje˘U≈urgóbÀAPPLE
)

	)

2930 
	#GLEW_APPLE_obje˘_purgóbÀ
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_obje˘_purgóbÀ
)

	)

2936 #i‚de‡
GL_APPLE_pixñ_buf„r


2937 
	#GL_APPLE_pixñ_buf„r
 1

	)

2939 
	#GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE
 0x8A10

	)

2941 
	#GLEW_APPLE_pixñ_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_pixñ_buf„r
)

	)

2947 #i‚de‡
GL_APPLE_rgb_422


2948 
	#GL_APPLE_rgb_422
 1

	)

2950 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

2951 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

2952 
	#GL_RGB_422_APPLE
 0x8A1F

	)

2954 
	#GLEW_APPLE_rgb_422
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_rgb_422
)

	)

2960 #i‚de‡
GL_APPLE_row_byãs


2961 
	#GL_APPLE_row_byãs
 1

	)

2963 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

2964 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

2966 
	#GLEW_APPLE_row_byãs
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_row_byãs
)

	)

2972 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


2973 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

2975 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

2977 
	#GLEW_APPLE_•ecuœr_ve˘‹
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_•ecuœr_ve˘‹
)

	)

2983 #i‚de‡
GL_APPLE_ãxtuª_ønge


2984 
	#GL_APPLE_ãxtuª_ønge
 1

	)

2986 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

2987 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

2988 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

2989 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

2990 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

2991 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

2993 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 **
	t∑øms
);

2994 (
GLAPIENTRY
 * 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

2996 
	#glGëTexP¨amëîPoöãrvAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîPoöãrvAPPLE
)

	)

2997 
	#glTextuªR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwTextuªR™geAPPLE
)

	)

2999 
	#GLEW_APPLE_ãxtuª_ønge
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_ãxtuª_ønge
)

	)

3005 #i‚de‡
GL_APPLE_å™sf‹m_höt


3006 
	#GL_APPLE_å™sf‹m_höt
 1

	)

3008 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

3010 
	#GLEW_APPLE_å™sf‹m_höt
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_å™sf‹m_höt
)

	)

3016 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


3017 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

3019 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

3021 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

3022 (
GLAPIENTRY
 * 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¨øys
);

3023 (
GLAPIENTRY
 * 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¨øys
);

3024 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

3026 
	#glBödVîãxAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxAºayAPPLE
)

	)

3027 
	#glDñëeVîãxAºaysAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDñëeVîãxAºaysAPPLE
)

	)

3028 
	#glGíVîãxAºaysAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGíVîãxAºaysAPPLE
)

	)

3029 
	#glIsVîãxAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwIsVîãxAºayAPPLE
)

	)

3031 
	#GLEW_APPLE_vîãx_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_vîãx_¨øy_obje˘
)

	)

3037 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


3038 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

3040 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

3041 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

3042 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

3043 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE
 0x8520

	)

3044 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

3045 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

3046 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

3047 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

3049 (
GLAPIENTRY
 * 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, * 
	tpoöãr
);

3050 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3051 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, * 
	tpoöãr
);

3053 
	#glFlushVîãxAºayR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwFlushVîãxAºayR™geAPPLE
)

	)

3054 
	#glVîãxAºayP¨amëîiAPPLE
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayP¨amëîiAPPLE
)

	)

3055 
	#glVîãxAºayR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayR™geAPPLE
)

	)

3057 
	#GLEW_APPLE_vîãx_¨øy_ønge
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_vîãx_¨øy_ønge
)

	)

3063 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


3064 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

3066 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

3067 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

3068 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

3069 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

3070 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

3071 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

3072 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

3073 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

3074 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

3075 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

3077 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

3078 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

3079 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

3080 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ* 
	tpoöts
);

3081 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂt* 
	tpoöts
);

3082 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ* 
	tpoöts
);

3083 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂt* 
	tpoöts
);

3085 
	#glDißbÀVîãxAâribAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAâribAPPLE
)

	)

3086 
	#glE«bÀVîãxAâribAPPLE
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAâribAPPLE
)

	)

3087 
	#glIsVîãxAâribE«bÀdAPPLE
 
	`GLEW_GET_FUN
(
__gÀwIsVîãxAâribE«bÀdAPPLE
)

	)

3088 
	#glM≠VîãxAârib1dAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib1dAPPLE
)

	)

3089 
	#glM≠VîãxAârib1fAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib1fAPPLE
)

	)

3090 
	#glM≠VîãxAârib2dAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib2dAPPLE
)

	)

3091 
	#glM≠VîãxAârib2fAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib2fAPPLE
)

	)

3093 
	#GLEW_APPLE_vîãx_¥ogøm_evÆu©‹s
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_vîãx_¥ogøm_evÆu©‹s
)

	)

3099 #i‚de‡
GL_APPLE_ycb¸_422


3100 
	#GL_APPLE_ycb¸_422
 1

	)

3102 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

3104 
	#GLEW_APPLE_ycb¸_422
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_ycb¸_422
)

	)

3110 #i‚de‡
GL_ARB_ES2_com∑tibûôy


3111 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

3113 
	#GL_FIXED
 0x140C

	)

3114 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

3115 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

3116 
	#GL_RGB565
 0x8D62

	)

3117 
	#GL_LOW_FLOAT
 0x8DF0

	)

3118 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

3119 
	#GL_HIGH_FLOAT
 0x8DF2

	)

3120 
	#GL_LOW_INT
 0x8DF3

	)

3121 
	#GL_MEDIUM_INT
 0x8DF4

	)

3122 
	#GL_HIGH_INT
 0x8DF5

	)

3123 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

3124 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

3125 
	#GL_SHADER_COMPILER
 0x8DFA

	)

3126 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

3127 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

3128 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

3130 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGL˛ampf
 
	td
);

3131 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

3132 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
* 
	tønge
, GLöà*
	t¥ecisi⁄
);

3133 (
GLAPIENTRY
 * 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

3134 (
GLAPIENTRY
 * 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° 
	tGLvoid
*
	tbö¨y
, GLsizeò
	tÀngth
);

3136 
	#glCÀ¨Dïthf
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Dïthf
)

	)

3137 
	#glDïthR™gef
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gef
)

	)

3138 
	#glGëShadîPªcisi⁄F‹m©
 
	`GLEW_GET_FUN
(
__gÀwGëShadîPªcisi⁄F‹m©
)

	)

3139 
	#glRñó£ShadîCompûî
 
	`GLEW_GET_FUN
(
__gÀwRñó£ShadîCompûî
)

	)

3140 
	#glShadîBö¨y
 
	`GLEW_GET_FUN
(
__gÀwShadîBö¨y
)

	)

3142 
	#GLEW_ARB_ES2_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ES2_com∑tibûôy
)

	)

3148 #i‚de‡
GL_ARB_ES3_com∑tibûôy


3149 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

3151 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

3152 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

3153 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

3154 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

3155 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

3156 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

3157 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

3158 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

3159 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

3160 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

3161 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

3162 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

3163 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

3165 
	#GLEW_ARB_ES3_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ES3_com∑tibûôy
)

	)

3171 #i‚de‡
GL_ARB_¨øys_of_¨øys


3172 
	#GL_ARB_¨øys_of_¨øys
 1

	)

3174 
	#GLEW_ARB_¨øys_of_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_ARB_¨øys_of_¨øys
)

	)

3180 #i‚de‡
GL_ARB_ba£_ö°™˚


3181 
	#GL_ARB_ba£_ö°™˚
 1

	)

3183 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

3184 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° * 
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

3185 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° * 
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

3187 
	#glDøwAºaysIn°™˚dBa£In°™˚
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dBa£In°™˚
)

	)

3188 
	#glDøwEÀmítsIn°™˚dBa£In°™˚
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dBa£In°™˚
)

	)

3189 
	#glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
)

	)

3191 
	#GLEW_ARB_ba£_ö°™˚
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ba£_ö°™˚
)

	)

3197 #i‚de‡
GL_ARB_bÀnd_func_exãnded


3198 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

3200 
	#GL_SRC1_COLOR
 0x88F9

	)

3201 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

3202 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

3203 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

3205 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 * 
	t«me
);

3206 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 * 
	t«me
);

3208 
	#glBödFøgD©aLoˇti⁄Indexed
 
	`GLEW_GET_FUN
(
__gÀwBödFøgD©aLoˇti⁄Indexed
)

	)

3209 
	#glGëFøgD©aIndex
 
	`GLEW_GET_FUN
(
__gÀwGëFøgD©aIndex
)

	)

3211 
	#GLEW_ARB_bÀnd_func_exãnded
 
	`GLEW_GET_VAR
(
__GLEW_ARB_bÀnd_func_exãnded
)

	)

3217 #i‚de‡
GL_ARB_˛_evít


3218 
	#GL_ARB_˛_evít
 1

	)

3220 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

3221 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

3223 
_˛_c⁄ãxt
 *
	t˛_c⁄ãxt
;

3224 
_˛_evít
 *
	t˛_evít
;

3226 
GLsync
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t˛_c⁄ãxt
 
	tc⁄ãxt
, 
	t˛_evít
 
	tevít
, 
	tGLbôfõld
 
	tÊags
);

3228 
	#glCª©eSyncFromCLevítARB
 
	`GLEW_GET_FUN
(
__gÀwCª©eSyncFromCLevítARB
)

	)

3230 
	#GLEW_ARB_˛_evít
 
	`GLEW_GET_VAR
(
__GLEW_ARB_˛_evít
)

	)

3236 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


3237 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

3239 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3240 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3241 (
GLAPIENTRY
 * 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3242 (
GLAPIENTRY
 * 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3244 
	#glCÀ¨Buf„rD©a
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rD©a
)

	)

3245 
	#glCÀ¨Buf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rSubD©a
)

	)

3246 
	#glCÀ¨NamedBuf„rD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨NamedBuf„rD©aEXT
)

	)

3247 
	#glCÀ¨NamedBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨NamedBuf„rSubD©aEXT
)

	)

3249 
	#GLEW_ARB_˛ór_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_˛ór_buf„r_obje˘
)

	)

3255 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


3256 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

3258 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

3259 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

3260 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

3261 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

3262 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

3264 (
GLAPIENTRY
 * 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

3266 
	#glCœmpCﬁ‹ARB
 
	`GLEW_GET_FUN
(
__gÀwCœmpCﬁ‹ARB
)

	)

3268 
	#GLEW_ARB_cﬁ‹_buf„r_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ARB_cﬁ‹_buf„r_Êﬂt
)

	)

3274 #i‚de‡
GL_ARB_com∑tibûôy


3275 
	#GL_ARB_com∑tibûôy
 1

	)

3277 
	#GLEW_ARB_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_com∑tibûôy
)

	)

3283 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


3284 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

3286 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

3287 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

3288 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

3289 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

3290 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

3291 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

3292 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

3293 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

3295 
	#GLEW_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_ARB_com¥es£d_ãxtuª_pixñ_°‹age
)

	)

3301 #i‚de‡
GL_ARB_compuã_shadî


3302 
	#GL_ARB_compuã_shadî
 1

	)

3304 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

3305 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

3306 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

3307 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

3308 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

3309 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

3310 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

3311 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

3312 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

3313 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

3314 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

3315 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

3316 
	#GL_COMPUTE_SHADER
 0x91B9

	)

3317 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

3318 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

3319 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

3320 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

3321 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

3323 (
GLAPIENTRY
 * 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

3324 (
GLAPIENTRY
 * 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

3326 
	#glDi•©chCompuã
 
	`GLEW_GET_FUN
(
__gÀwDi•©chCompuã
)

	)

3327 
	#glDi•©chCompuãIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwDi•©chCompuãIndúe˘
)

	)

3329 
	#GLEW_ARB_compuã_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_compuã_shadî
)

	)

3335 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3336 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3338 
	#GLEW_ARB_c⁄£rv©ive_dïth
 
	`GLEW_GET_VAR
(
__GLEW_ARB_c⁄£rv©ive_dïth
)

	)

3344 #i‚de‡
GL_ARB_c›y_buf„r


3345 
	#GL_ARB_c›y_buf„r
 1

	)

3347 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

3348 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

3350 (
GLAPIENTRY
 * 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadèrgë
, GLíum 
	twrôë¨gë
, 
	tGLöçå
 
	tªadoff£t
, GLöçå 
	twrôeoff£t
, 
	tGLsizeùå
 
	tsize
);

3352 
	#glC›yBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwC›yBuf„rSubD©a
)

	)

3354 
	#GLEW_ARB_c›y_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_ARB_c›y_buf„r
)

	)

3360 #i‚de‡
GL_ARB_c›y_image


3361 
	#GL_ARB_c›y_image
 1

	)

3363 (
GLAPIENTRY
 * 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

3365 
	#glC›yImageSubD©a
 
	`GLEW_GET_FUN
(
__gÀwC›yImageSubD©a
)

	)

3367 
	#GLEW_ARB_c›y_image
 
	`GLEW_GET_VAR
(
__GLEW_ARB_c›y_image
)

	)

3373 #i‚de‡
GL_ARB_debug_ouçut


3374 
	#GL_ARB_debug_ouçut
 1

	)

3376 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3377 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3378 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3379 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3380 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3381 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3382 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3383 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3384 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3385 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3386 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3387 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3388 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3389 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3390 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3391 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3392 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3393 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3394 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3395 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3396 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3397 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3399 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tmesßge
, 
	tGLvoid
* 
	tu£rP¨am
);

3401 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, * 
	tu£rP¨am
);

3402 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3403 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tbuf
);

3404 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
* 
	tsour˚s
, GLíum* 
	tty≥s
, GLuöt* 
	tids
, GLíum* 
	t£vîôõs
, GLsizei* 
	tÀngths
, 
	tGLch¨
* 
	tmesßgeLog
);

3406 
	#glDebugMesßgeCÆlbackARB
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeCÆlbackARB
)

	)

3407 
	#glDebugMesßgeC⁄åﬁARB
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeC⁄åﬁARB
)

	)

3408 
	#glDebugMesßgeIn£πARB
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeIn£πARB
)

	)

3409 
	#glGëDebugMesßgeLogARB
 
	`GLEW_GET_FUN
(
__gÀwGëDebugMesßgeLogARB
)

	)

3411 
	#GLEW_ARB_debug_ouçut
 
	`GLEW_GET_VAR
(
__GLEW_ARB_debug_ouçut
)

	)

3417 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3418 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3420 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

3421 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

3422 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

3424 
	#GLEW_ARB_dïth_buf„r_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ARB_dïth_buf„r_Êﬂt
)

	)

3430 #i‚de‡
GL_ARB_dïth_˛amp


3431 
	#GL_ARB_dïth_˛amp
 1

	)

3433 
	#GL_DEPTH_CLAMP
 0x864F

	)

3435 
	#GLEW_ARB_dïth_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_ARB_dïth_˛amp
)

	)

3441 #i‚de‡
GL_ARB_dïth_ãxtuª


3442 
	#GL_ARB_dïth_ãxtuª
 1

	)

3444 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

3445 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

3446 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

3447 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

3448 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

3450 
	#GLEW_ARB_dïth_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_dïth_ãxtuª
)

	)

3456 #i‚de‡
GL_ARB_døw_buf„rs


3457 
	#GL_ARB_døw_buf„rs
 1

	)

3459 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

3460 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

3461 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

3462 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

3463 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

3464 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

3465 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

3466 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

3467 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

3468 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

3469 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

3470 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

3471 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

3472 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

3473 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

3474 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

3475 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

3477 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

3479 
	#glDøwBuf„rsARB
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rsARB
)

	)

3481 
	#GLEW_ARB_døw_buf„rs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_buf„rs
)

	)

3487 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3488 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3490 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3491 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3492 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3493 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3495 
	#glBÀndEqu©i⁄Sï¨©eiARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©eiARB
)

	)

3496 
	#glBÀndEqu©i⁄iARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄iARB
)

	)

3497 
	#glBÀndFuncSï¨©eiARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©eiARB
)

	)

3498 
	#glBÀndFunciARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndFunciARB
)

	)

3500 
	#GLEW_ARB_døw_buf„rs_bÀnd
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_buf„rs_bÀnd
)

	)

3506 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3507 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3509 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, * 
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

3510 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° * 
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tba£vîãx
);

3511 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, * 
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

3512 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
* 
	tcou¡
, GLíum 
	tty≥
, 
	tGLvoid
**
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 *
	tba£vîãx
);

3514 
	#glDøwEÀmítsBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsBa£Vîãx
)

	)

3515 
	#glDøwEÀmítsIn°™˚dBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dBa£Vîãx
)

	)

3516 
	#glDøwR™geEÀmítsBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítsBa£Vîãx
)

	)

3517 
	#glMu…iDøwEÀmítsBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsBa£Vîãx
)

	)

3519 
	#GLEW_ARB_døw_ñemíts_ba£_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_ñemíts_ba£_vîãx
)

	)

3525 #i‚de‡
GL_ARB_døw_ödúe˘


3526 
	#GL_ARB_døw_ödúe˘
 1

	)

3528 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

3529 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

3531 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° * 
	tödúe˘
);

3532 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° * 
	tödúe˘
);

3534 
	#glDøwAºaysIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIndúe˘
)

	)

3535 
	#glDøwEÀmítsIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIndúe˘
)

	)

3537 
	#GLEW_ARB_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_ödúe˘
)

	)

3543 #i‚de‡
GL_ARB_døw_ö°™˚d


3544 
	#GL_ARB_døw_ö°™˚d
 1

	)

3546 
	#GLEW_ARB_døw_ö°™˚d
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_ö°™˚d
)

	)

3552 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3553 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3555 
	#GLEW_ARB_ex∂icô_©åib_loˇti⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ex∂icô_©åib_loˇti⁄
)

	)

3561 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3562 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3564 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

3566 
	#GLEW_ARB_ex∂icô_unif‹m_loˇti⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ex∂icô_unif‹m_loˇti⁄
)

	)

3572 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3573 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3575 
	#GLEW_ARB_‰agmít_co‹d_c⁄víti⁄s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_co‹d_c⁄víti⁄s
)

	)

3581 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3582 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3584 
	#GLEW_ARB_‰agmít_œyî_võwp‹t
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_œyî_võwp‹t
)

	)

3590 #i‚de‡
GL_ARB_‰agmít_¥ogøm


3591 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

3593 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

3594 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

3595 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

3596 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

3597 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

3598 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

3599 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

3600 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

3601 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

3602 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

3603 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

3604 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

3605 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

3606 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

3607 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

3609 
	#GLEW_ARB_‰agmít_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_¥ogøm
)

	)

3615 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


3616 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

3618 
	#GLEW_ARB_‰agmít_¥ogøm_shadow
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_¥ogøm_shadow
)

	)

3624 #i‚de‡
GL_ARB_‰agmít_shadî


3625 
	#GL_ARB_‰agmít_shadî
 1

	)

3627 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

3628 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

3629 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

3631 
	#GLEW_ARB_‰agmít_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_shadî
)

	)

3637 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


3638 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

3640 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

3641 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

3642 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

3643 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

3644 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

3645 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

3646 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

3647 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

3648 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

3650 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3651 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3652 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3653 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3655 
	#glFømebuf„rP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rP¨amëîi
)

	)

3656 
	#glGëFømebuf„rP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rP¨amëîiv
)

	)

3657 
	#glGëNamedFømebuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedFømebuf„rP¨amëîivEXT
)

	)

3658 
	#glNamedFømebuf„rP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rP¨amëîiEXT
)

	)

3660 
	#GLEW_ARB_‰amebuf„r_no_©èchmíts
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰amebuf„r_no_©èchmíts
)

	)

3666 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


3667 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

3669 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

3670 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

3671 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

3672 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

3673 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

3674 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

3675 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

3676 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

3677 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

3678 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

3679 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

3680 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

3681 
	#GL_INDEX
 0x8222

	)

3682 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

3683 
	#GL_DEPTH_STENCIL
 0x84F9

	)

3684 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

3685 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

3686 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

3687 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

3688 
	#GL_SRGB
 0x8C40

	)

3689 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

3690 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

3691 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

3692 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

3693 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

3694 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

3695 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

3696 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

3697 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

3698 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

3699 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

3700 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

3701 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

3702 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

3703 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

3704 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

3705 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

3706 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

3707 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

3708 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

3709 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

3710 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

3711 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

3712 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

3713 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

3714 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

3715 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

3716 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

3717 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

3718 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

3719 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

3720 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

3721 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

3722 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

3723 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

3724 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

3725 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

3726 
	#GL_FRAMEBUFFER
 0x8D40

	)

3727 
	#GL_RENDERBUFFER
 0x8D41

	)

3728 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

3729 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

3730 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

3731 
	#GL_STENCIL_INDEX1
 0x8D46

	)

3732 
	#GL_STENCIL_INDEX4
 0x8D47

	)

3733 
	#GL_STENCIL_INDEX8
 0x8D48

	)

3734 
	#GL_STENCIL_INDEX16
 0x8D49

	)

3735 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

3736 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

3737 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

3738 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

3739 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

3740 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

3741 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

3742 
	#GL_MAX_SAMPLES
 0x8D57

	)

3744 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

3745 (
GLAPIENTRY
 * 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

3746 (
GLAPIENTRY
 * 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

3747 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

3748 (
GLAPIENTRY
 * 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t‰amebuf„rs
);

3749 (
GLAPIENTRY
 * 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tªndîbuf„rs
);

3750 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

3751 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3752 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3753 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3754 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
,GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
,
	tGLöt
 
	tÀvñ
,GLöà
	tœyî
);

3755 (
GLAPIENTRY
 * 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t‰amebuf„rs
);

3756 (
GLAPIENTRY
 * 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tªndîbuf„rs
);

3757 (
GLAPIENTRY
 * 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

3758 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3759 (
GLAPIENTRY
 * 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3760 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

3761 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

3762 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3763 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

3765 
	#glBödFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödFømebuf„r
)

	)

3766 
	#glBödRídîbuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödRídîbuf„r
)

	)

3767 
	#glBlôFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwBlôFømebuf„r
)

	)

3768 
	#glCheckFømebuf„rSètus
 
	`GLEW_GET_FUN
(
__gÀwCheckFømebuf„rSètus
)

	)

3769 
	#glDñëeFømebuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDñëeFømebuf„rs
)

	)

3770 
	#glDñëeRídîbuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDñëeRídîbuf„rs
)

	)

3771 
	#glFømebuf„rRídîbuf„r
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rRídîbuf„r
)

	)

3772 
	#glFømebuf„rTextuª1D
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª1D
)

	)

3773 
	#glFømebuf„rTextuª2D
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª2D
)

	)

3774 
	#glFømebuf„rTextuª3D
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª3D
)

	)

3775 
	#glFømebuf„rTextuªLayî
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªLayî
)

	)

3776 
	#glGíFømebuf„rs
 
	`GLEW_GET_FUN
(
__gÀwGíFømebuf„rs
)

	)

3777 
	#glGíRídîbuf„rs
 
	`GLEW_GET_FUN
(
__gÀwGíRídîbuf„rs
)

	)

3778 
	#glGíî©eMùm≠
 
	`GLEW_GET_FUN
(
__gÀwGíî©eMùm≠
)

	)

3779 
	#glGëFømebuf„rAâachmítP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rAâachmítP¨amëîiv
)

	)

3780 
	#glGëRídîbuf„rP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëRídîbuf„rP¨amëîiv
)

	)

3781 
	#glIsFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwIsFømebuf„r
)

	)

3782 
	#glIsRídîbuf„r
 
	`GLEW_GET_FUN
(
__gÀwIsRídîbuf„r
)

	)

3783 
	#glRídîbuf„rSt‹age
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹age
)

	)

3784 
	#glRídîbuf„rSt‹ageMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂e
)

	)

3786 
	#GLEW_ARB_‰amebuf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰amebuf„r_obje˘
)

	)

3792 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


3793 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

3795 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

3797 
	#GLEW_ARB_‰amebuf„r_sRGB
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰amebuf„r_sRGB
)

	)

3803 #i‚de‡
GL_ARB_geomëry_shadî4


3804 
	#GL_ARB_geomëry_shadî4
 1

	)

3806 
	#GL_LINES_ADJACENCY_ARB
 0xA

	)

3807 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0xB

	)

3808 
	#GL_TRIANGLES_ADJACENCY_ARB
 0xC

	)

3809 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0xD

	)

3810 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

3811 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

3812 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

3813 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

3814 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

3815 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

3816 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

3817 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

3818 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

3819 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3820 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3821 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3822 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3823 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3824 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3826 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3827 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3828 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3829 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3831 
	#glFømebuf„rTextuªARB
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªARB
)

	)

3832 
	#glFømebuf„rTextuªFa˚ARB
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªFa˚ARB
)

	)

3833 
	#glFømebuf„rTextuªLayîARB
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªLayîARB
)

	)

3834 
	#glProgømP¨amëîiARB
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîiARB
)

	)

3836 
	#GLEW_ARB_geomëry_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_ARB_geomëry_shadî4
)

	)

3842 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3843 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3845 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

3846 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

3847 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

3848 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

3850 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
*
	tbö¨y
);

3851 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° * 
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

3852 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3854 
	#glGëProgømBö¨y
 
	`GLEW_GET_FUN
(
__gÀwGëProgømBö¨y
)

	)

3855 
	#glProgømBö¨y
 
	`GLEW_GET_FUN
(
__gÀwProgømBö¨y
)

	)

3856 
	#glProgømP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîi
)

	)

3858 
	#GLEW_ARB_gë_¥ogøm_bö¨y
 
	`GLEW_GET_VAR
(
__GLEW_ARB_gë_¥ogøm_bö¨y
)

	)

3864 #i‚de‡
GL_ARB_gpu_shadî5


3865 
	#GL_ARB_gpu_shadî5
 1

	)

3867 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

3868 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

3869 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

3870 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

3871 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

3872 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

3874 
	#GLEW_ARB_gpu_shadî5
 
	`GLEW_GET_VAR
(
__GLEW_ARB_gpu_shadî5
)

	)

3880 #i‚de‡
GL_ARB_gpu_shadî_Â64


3881 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3883 
	#GL_DOUBLE_MAT2
 0x8F46

	)

3884 
	#GL_DOUBLE_MAT3
 0x8F47

	)

3885 
	#GL_DOUBLE_MAT4
 0x8F48

	)

3886 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

3887 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

3888 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

3889 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

3890 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

3891 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

3892 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

3893 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

3894 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

3896 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
* 
	t∑øms
);

3897 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

3898 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3899 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3900 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3901 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3902 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3903 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3904 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3905 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3906 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3907 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3908 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3909 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3910 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3911 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3912 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3913 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

3915 
	#glGëUnif‹mdv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mdv
)

	)

3916 
	#glUnif‹m1d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1d
)

	)

3917 
	#glUnif‹m1dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1dv
)

	)

3918 
	#glUnif‹m2d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2d
)

	)

3919 
	#glUnif‹m2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2dv
)

	)

3920 
	#glUnif‹m3d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3d
)

	)

3921 
	#glUnif‹m3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3dv
)

	)

3922 
	#glUnif‹m4d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4d
)

	)

3923 
	#glUnif‹m4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4dv
)

	)

3924 
	#glUnif‹mM©rix2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2dv
)

	)

3925 
	#glUnif‹mM©rix2x3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x3dv
)

	)

3926 
	#glUnif‹mM©rix2x4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x4dv
)

	)

3927 
	#glUnif‹mM©rix3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3dv
)

	)

3928 
	#glUnif‹mM©rix3x2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x2dv
)

	)

3929 
	#glUnif‹mM©rix3x4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x4dv
)

	)

3930 
	#glUnif‹mM©rix4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4dv
)

	)

3931 
	#glUnif‹mM©rix4x2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x2dv
)

	)

3932 
	#glUnif‹mM©rix4x3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x3dv
)

	)

3934 
	#GLEW_ARB_gpu_shadî_Â64
 
	`GLEW_GET_VAR
(
__GLEW_ARB_gpu_shadî_Â64
)

	)

3940 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3941 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3943 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3945 
	#GLEW_ARB_hÆf_Êﬂt_pixñ
 
	`GLEW_GET_VAR
(
__GLEW_ARB_hÆf_Êﬂt_pixñ
)

	)

3951 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3952 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3954 
	#GL_HALF_FLOAT
 0x140B

	)

3956 
	#GLEW_ARB_hÆf_Êﬂt_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_ARB_hÆf_Êﬂt_vîãx
)

	)

3962 #i‚de‡
GL_ARB_imagög


3963 
	#GL_ARB_imagög
 1

	)

3965 
	#GL_CONSTANT_COLOR
 0x8001

	)

3966 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

3967 
	#GL_CONSTANT_ALPHA
 0x8003

	)

3968 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

3969 
	#GL_BLEND_COLOR
 0x8005

	)

3970 
	#GL_FUNC_ADD
 0x8006

	)

3971 
	#GL_MIN
 0x8007

	)

3972 
	#GL_MAX
 0x8008

	)

3973 
	#GL_BLEND_EQUATION
 0x8009

	)

3974 
	#GL_FUNC_SUBTRACT
 0x800A

	)

3975 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

3976 
	#GL_CONVOLUTION_1D
 0x8010

	)

3977 
	#GL_CONVOLUTION_2D
 0x8011

	)

3978 
	#GL_SEPARABLE_2D
 0x8012

	)

3979 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3980 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3981 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3982 
	#GL_REDUCE
 0x8016

	)

3983 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3984 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3985 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3986 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3987 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3988 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3989 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3990 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3991 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3992 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3993 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3994 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3995 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3996 
	#GL_HISTOGRAM
 0x8024

	)

3997 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3998 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3999 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

4000 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

4001 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

4002 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

4003 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

4004 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

4005 
	#GL_HISTOGRAM_SINK
 0x802D

	)

4006 
	#GL_MINMAX
 0x802E

	)

4007 
	#GL_MINMAX_FORMAT
 0x802F

	)

4008 
	#GL_MINMAX_SINK
 0x8030

	)

4009 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

4010 
	#GL_COLOR_MATRIX
 0x80B1

	)

4011 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

4012 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

4013 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

4014 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

4015 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

4016 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

4017 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

4018 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

4019 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

4020 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

4021 
	#GL_COLOR_TABLE
 0x80D0

	)

4022 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

4023 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

4024 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

4025 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

4026 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

4027 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

4028 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

4029 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

4030 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

4031 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

4032 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

4033 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

4034 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

4035 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

4036 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

4037 
	#GL_IGNORE_BORDER
 0x8150

	)

4038 
	#GL_CONSTANT_BORDER
 0x8151

	)

4039 
	#GL_WRAP_BORDER
 0x8152

	)

4040 
	#GL_REPLICATE_BORDER
 0x8153

	)

4041 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

4043 (
GLAPIENTRY
 * 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

4044 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4045 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4046 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4047 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4048 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4049 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

4050 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4051 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

4052 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4053 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

4054 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4055 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4056 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4057 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

4058 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4059 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4060 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

4061 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4062 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4063 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4064 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4065 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4066 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥s
, 
	tGLvoid
 *
	tvÆues
);

4067 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4068 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4069 (
GLAPIENTRY
 * 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

4070 (
GLAPIENTRY
 * 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4071 (
GLAPIENTRY
 * 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4072 (
GLAPIENTRY
 * 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

4073 (
GLAPIENTRY
 * 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

4074 (
GLAPIENTRY
 * 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

4076 
	#glCﬁ‹SubTabÀ
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹SubTabÀ
)

	)

4077 
	#glCﬁ‹TabÀ
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀ
)

	)

4078 
	#glCﬁ‹TabÀP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîfv
)

	)

4079 
	#glCﬁ‹TabÀP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîiv
)

	)

4080 
	#glC⁄vﬁuti⁄Fûãr1D
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr1D
)

	)

4081 
	#glC⁄vﬁuti⁄Fûãr2D
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr2D
)

	)

4082 
	#glC⁄vﬁuti⁄P¨amëîf
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîf
)

	)

4083 
	#glC⁄vﬁuti⁄P¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîfv
)

	)

4084 
	#glC⁄vﬁuti⁄P¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîi
)

	)

4085 
	#glC⁄vﬁuti⁄P¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîiv
)

	)

4086 
	#glC›yCﬁ‹SubTabÀ
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹SubTabÀ
)

	)

4087 
	#glC›yCﬁ‹TabÀ
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹TabÀ
)

	)

4088 
	#glC›yC⁄vﬁuti⁄Fûãr1D
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr1D
)

	)

4089 
	#glC›yC⁄vﬁuti⁄Fûãr2D
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr2D
)

	)

4090 
	#glGëCﬁ‹TabÀ
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀ
)

	)

4091 
	#glGëCﬁ‹TabÀP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîfv
)

	)

4092 
	#glGëCﬁ‹TabÀP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîiv
)

	)

4093 
	#glGëC⁄vﬁuti⁄Fûãr
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄Fûãr
)

	)

4094 
	#glGëC⁄vﬁuti⁄P¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîfv
)

	)

4095 
	#glGëC⁄vﬁuti⁄P¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîiv
)

	)

4096 
	#glGëHi°ogøm
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogøm
)

	)

4097 
	#glGëHi°ogømP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîfv
)

	)

4098 
	#glGëHi°ogømP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîiv
)

	)

4099 
	#glGëMömax
 
	`GLEW_GET_FUN
(
__gÀwGëMömax
)

	)

4100 
	#glGëMömaxP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîfv
)

	)

4101 
	#glGëMömaxP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîiv
)

	)

4102 
	#glGëSï¨abÀFûãr
 
	`GLEW_GET_FUN
(
__gÀwGëSï¨abÀFûãr
)

	)

4103 
	#glHi°ogøm
 
	`GLEW_GET_FUN
(
__gÀwHi°ogøm
)

	)

4104 
	#glMömax
 
	`GLEW_GET_FUN
(
__gÀwMömax
)

	)

4105 
	#glRe£tHi°ogøm
 
	`GLEW_GET_FUN
(
__gÀwRe£tHi°ogøm
)

	)

4106 
	#glRe£tMömax
 
	`GLEW_GET_FUN
(
__gÀwRe£tMömax
)

	)

4107 
	#glSï¨abÀFûãr2D
 
	`GLEW_GET_FUN
(
__gÀwSï¨abÀFûãr2D
)

	)

4109 
	#GLEW_ARB_imagög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_imagög
)

	)

4115 #i‚de‡
GL_ARB_ö°™˚d_¨øys


4116 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

4118 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

4120 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

4121 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° * 
	tödi˚s
, GLsizeò
	t¥imcou¡
);

4122 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

4124 
	#glDøwAºaysIn°™˚dARB
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dARB
)

	)

4125 
	#glDøwEÀmítsIn°™˚dARB
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dARB
)

	)

4126 
	#glVîãxAâribDivis‹ARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribDivis‹ARB
)

	)

4128 
	#GLEW_ARB_ö°™˚d_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ö°™˚d_¨øys
)

	)

4134 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


4135 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

4137 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

4139 (
GLAPIENTRY
 * 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
* 
	t∑øms
);

4141 
	#glGëI¡î«lf‹m©iv
 
	`GLEW_GET_FUN
(
__gÀwGëI¡î«lf‹m©iv
)

	)

4143 
	#GLEW_ARB_öã∫Æf‹m©_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_öã∫Æf‹m©_quîy
)

	)

4149 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


4150 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

4152 
	#GL_TEXTURE_1D
 0x0DE0

	)

4153 
	#GL_TEXTURE_2D
 0x0DE1

	)

4154 
	#GL_TEXTURE_3D
 0x806F

	)

4155 
	#GL_SAMPLES
 0x80A9

	)

4156 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

4157 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

4158 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

4159 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

4160 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

4161 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

4162 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

4163 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

4164 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

4165 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

4166 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

4167 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

4168 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

4169 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

4170 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

4171 
	#GL_MAX_WIDTH
 0x827E

	)

4172 
	#GL_MAX_HEIGHT
 0x827F

	)

4173 
	#GL_MAX_DEPTH
 0x8280

	)

4174 
	#GL_MAX_LAYERS
 0x8281

	)

4175 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

4176 
	#GL_COLOR_COMPONENTS
 0x8283

	)

4177 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

4178 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

4179 
	#GL_COLOR_RENDERABLE
 0x8286

	)

4180 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

4181 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

4182 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

4183 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

4184 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

4185 
	#GL_READ_PIXELS
 0x828C

	)

4186 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

4187 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

4188 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

4189 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

4190 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

4191 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

4192 
	#GL_MIPMAP
 0x8293

	)

4193 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

4194 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

4195 
	#GL_COLOR_ENCODING
 0x8296

	)

4196 
	#GL_SRGB_READ
 0x8297

	)

4197 
	#GL_SRGB_WRITE
 0x8298

	)

4198 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

4199 
	#GL_FILTER
 0x829A

	)

4200 
	#GL_VERTEX_TEXTURE
 0x829B

	)

4201 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

4202 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

4203 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

4204 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

4205 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

4206 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

4207 
	#GL_TEXTURE_GATHER
 0x82A2

	)

4208 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

4209 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

4210 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

4211 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

4212 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

4213 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

4214 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

4215 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

4216 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

4217 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

4218 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

4219 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

4220 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

4221 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

4222 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

4223 
	#GL_CLEAR_BUFFER
 0x82B4

	)

4224 
	#GL_TEXTURE_VIEW
 0x82B5

	)

4225 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

4226 
	#GL_FULL_SUPPORT
 0x82B7

	)

4227 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

4228 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

4229 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

4230 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

4231 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

4232 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

4233 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

4234 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

4235 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

4236 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

4237 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

4238 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

4239 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

4240 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

4241 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

4242 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

4243 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

4244 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

4245 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

4246 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

4247 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

4248 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

4249 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

4250 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

4251 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

4252 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

4253 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

4254 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

4255 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

4256 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

4257 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

4258 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

4259 
	#GL_RENDERBUFFER
 0x8D41

	)

4260 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

4261 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

4262 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

4263 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

4265 (
GLAPIENTRY
 * 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
* 
	t∑øms
);

4267 
	#glGëI¡î«lf‹m©i64v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡î«lf‹m©i64v
)

	)

4269 
	#GLEW_ARB_öã∫Æf‹m©_quîy2
 
	`GLEW_GET_VAR
(
__GLEW_ARB_öã∫Æf‹m©_quîy2
)

	)

4275 #i‚de‡
GL_ARB_övÆid©e_subd©a


4276 
	#GL_ARB_övÆid©e_subd©a
 1

	)

4278 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4279 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

4280 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum* 
	t©èchmíts
);

4281 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum* 
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

4282 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

4283 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

4285 
	#glInvÆid©eBuf„rD©a
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eBuf„rD©a
)

	)

4286 
	#glInvÆid©eBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eBuf„rSubD©a
)

	)

4287 
	#glInvÆid©eFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eFømebuf„r
)

	)

4288 
	#glInvÆid©eSubFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eSubFømebuf„r
)

	)

4289 
	#glInvÆid©eTexImage
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eTexImage
)

	)

4290 
	#glInvÆid©eTexSubImage
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eTexSubImage
)

	)

4292 
	#GLEW_ARB_övÆid©e_subd©a
 
	`GLEW_GET_VAR
(
__GLEW_ARB_övÆid©e_subd©a
)

	)

4298 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


4299 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

4301 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

4303 
	#GLEW_ARB_m≠_buf„r_Æignmít
 
	`GLEW_GET_VAR
(
__GLEW_ARB_m≠_buf„r_Æignmít
)

	)

4309 #i‚de‡
GL_ARB_m≠_buf„r_ønge


4310 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

4312 
	#GL_MAP_READ_BIT
 0x0001

	)

4313 
	#GL_MAP_WRITE_BIT
 0x0002

	)

4314 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

4315 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

4316 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

4317 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

4319 (
GLAPIENTRY
 * 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

4320 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

4322 
	#glFlushM≠≥dBuf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwFlushM≠≥dBuf„rR™ge
)

	)

4323 
	#glM≠Buf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwM≠Buf„rR™ge
)

	)

4325 
	#GLEW_ARB_m≠_buf„r_ønge
 
	`GLEW_GET_VAR
(
__GLEW_ARB_m≠_buf„r_ønge
)

	)

4331 #i‚de‡
GL_ARB_m©rix_∑Àâe


4332 
	#GL_ARB_m©rix_∑Àâe
 1

	)

4334 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

4335 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

4336 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

4337 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

4338 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

4339 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

4340 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

4341 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

4342 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

4343 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

4345 (
GLAPIENTRY
 * 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

4346 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

4347 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLubyã
 *
	tödi˚s
);

4348 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLuöt
 *
	tödi˚s
);

4349 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLush‹t
 *
	tödi˚s
);

4351 
	#glCuºítPÆëãM©rixARB
 
	`GLEW_GET_FUN
(
__gÀwCuºítPÆëãM©rixARB
)

	)

4352 
	#glM©rixIndexPoöãrARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexPoöãrARB
)

	)

4353 
	#glM©rixIndexubvARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexubvARB
)

	)

4354 
	#glM©rixIndexuivARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexuivARB
)

	)

4355 
	#glM©rixIndexusvARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexusvARB
)

	)

4357 
	#GLEW_ARB_m©rix_∑Àâe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_m©rix_∑Àâe
)

	)

4363 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


4364 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

4366 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° * 
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4367 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° * 
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4369 
	#glMu…iDøwAºaysIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysIndúe˘
)

	)

4370 
	#glMu…iDøwEÀmítsIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsIndúe˘
)

	)

4372 
	#GLEW_ARB_mu…i_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…i_døw_ödúe˘
)

	)

4378 #i‚de‡
GL_ARB_mu…ißm∂e


4379 
	#GL_ARB_mu…ißm∂e
 1

	)

4381 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

4382 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

4383 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

4384 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

4385 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

4386 
	#GL_SAMPLES_ARB
 0x80A9

	)

4387 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

4388 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

4389 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

4391 (
GLAPIENTRY
 * 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4393 
	#glSam∂eCovîageARB
 
	`GLEW_GET_FUN
(
__gÀwSam∂eCovîageARB
)

	)

4395 
	#GLEW_ARB_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…ißm∂e
)

	)

4401 #i‚de‡
GL_ARB_mu…ôextuª


4402 
	#GL_ARB_mu…ôextuª
 1

	)

4404 
	#GL_TEXTURE0_ARB
 0x84C0

	)

4405 
	#GL_TEXTURE1_ARB
 0x84C1

	)

4406 
	#GL_TEXTURE2_ARB
 0x84C2

	)

4407 
	#GL_TEXTURE3_ARB
 0x84C3

	)

4408 
	#GL_TEXTURE4_ARB
 0x84C4

	)

4409 
	#GL_TEXTURE5_ARB
 0x84C5

	)

4410 
	#GL_TEXTURE6_ARB
 0x84C6

	)

4411 
	#GL_TEXTURE7_ARB
 0x84C7

	)

4412 
	#GL_TEXTURE8_ARB
 0x84C8

	)

4413 
	#GL_TEXTURE9_ARB
 0x84C9

	)

4414 
	#GL_TEXTURE10_ARB
 0x84CA

	)

4415 
	#GL_TEXTURE11_ARB
 0x84CB

	)

4416 
	#GL_TEXTURE12_ARB
 0x84CC

	)

4417 
	#GL_TEXTURE13_ARB
 0x84CD

	)

4418 
	#GL_TEXTURE14_ARB
 0x84CE

	)

4419 
	#GL_TEXTURE15_ARB
 0x84CF

	)

4420 
	#GL_TEXTURE16_ARB
 0x84D0

	)

4421 
	#GL_TEXTURE17_ARB
 0x84D1

	)

4422 
	#GL_TEXTURE18_ARB
 0x84D2

	)

4423 
	#GL_TEXTURE19_ARB
 0x84D3

	)

4424 
	#GL_TEXTURE20_ARB
 0x84D4

	)

4425 
	#GL_TEXTURE21_ARB
 0x84D5

	)

4426 
	#GL_TEXTURE22_ARB
 0x84D6

	)

4427 
	#GL_TEXTURE23_ARB
 0x84D7

	)

4428 
	#GL_TEXTURE24_ARB
 0x84D8

	)

4429 
	#GL_TEXTURE25_ARB
 0x84D9

	)

4430 
	#GL_TEXTURE26_ARB
 0x84DA

	)

4431 
	#GL_TEXTURE27_ARB
 0x84DB

	)

4432 
	#GL_TEXTURE28_ARB
 0x84DC

	)

4433 
	#GL_TEXTURE29_ARB
 0x84DD

	)

4434 
	#GL_TEXTURE30_ARB
 0x84DE

	)

4435 
	#GL_TEXTURE31_ARB
 0x84DF

	)

4436 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

4437 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

4438 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

4440 (
GLAPIENTRY
 * 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

4441 (
GLAPIENTRY
 * 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

4442 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

4443 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4444 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

4445 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4446 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

4447 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4448 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

4449 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4450 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

4451 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4452 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

4453 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4454 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

4455 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4456 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

4457 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4458 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

4459 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4460 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

4461 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4462 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

4463 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4464 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

4465 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4466 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

4467 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4468 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

4469 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4470 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

4471 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4472 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

4473 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4475 
	#glA˘iveTextuªARB
 
	`GLEW_GET_FUN
(
__gÀwA˘iveTextuªARB
)

	)

4476 
	#glClõ¡A˘iveTextuªARB
 
	`GLEW_GET_FUN
(
__gÀwClõ¡A˘iveTextuªARB
)

	)

4477 
	#glMu…iTexCo‹d1dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1dARB
)

	)

4478 
	#glMu…iTexCo‹d1dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1dvARB
)

	)

4479 
	#glMu…iTexCo‹d1fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1fARB
)

	)

4480 
	#glMu…iTexCo‹d1fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1fvARB
)

	)

4481 
	#glMu…iTexCo‹d1iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1iARB
)

	)

4482 
	#glMu…iTexCo‹d1ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1ivARB
)

	)

4483 
	#glMu…iTexCo‹d1sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1sARB
)

	)

4484 
	#glMu…iTexCo‹d1svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1svARB
)

	)

4485 
	#glMu…iTexCo‹d2dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2dARB
)

	)

4486 
	#glMu…iTexCo‹d2dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2dvARB
)

	)

4487 
	#glMu…iTexCo‹d2fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2fARB
)

	)

4488 
	#glMu…iTexCo‹d2fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2fvARB
)

	)

4489 
	#glMu…iTexCo‹d2iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2iARB
)

	)

4490 
	#glMu…iTexCo‹d2ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2ivARB
)

	)

4491 
	#glMu…iTexCo‹d2sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2sARB
)

	)

4492 
	#glMu…iTexCo‹d2svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2svARB
)

	)

4493 
	#glMu…iTexCo‹d3dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3dARB
)

	)

4494 
	#glMu…iTexCo‹d3dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3dvARB
)

	)

4495 
	#glMu…iTexCo‹d3fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3fARB
)

	)

4496 
	#glMu…iTexCo‹d3fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3fvARB
)

	)

4497 
	#glMu…iTexCo‹d3iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3iARB
)

	)

4498 
	#glMu…iTexCo‹d3ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3ivARB
)

	)

4499 
	#glMu…iTexCo‹d3sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3sARB
)

	)

4500 
	#glMu…iTexCo‹d3svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3svARB
)

	)

4501 
	#glMu…iTexCo‹d4dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4dARB
)

	)

4502 
	#glMu…iTexCo‹d4dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4dvARB
)

	)

4503 
	#glMu…iTexCo‹d4fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4fARB
)

	)

4504 
	#glMu…iTexCo‹d4fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4fvARB
)

	)

4505 
	#glMu…iTexCo‹d4iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4iARB
)

	)

4506 
	#glMu…iTexCo‹d4ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4ivARB
)

	)

4507 
	#glMu…iTexCo‹d4sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4sARB
)

	)

4508 
	#glMu…iTexCo‹d4svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4svARB
)

	)

4510 
	#GLEW_ARB_mu…ôextuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…ôextuª
)

	)

4516 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


4517 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

4519 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

4520 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

4521 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

4522 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

4523 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

4525 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4526 (
GLAPIENTRY
 * 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

4527 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4528 (
GLAPIENTRY
 * 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

4529 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4530 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

4531 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4532 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

4534 
	#glBegöQuîyARB
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîyARB
)

	)

4535 
	#glDñëeQuîõsARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeQuîõsARB
)

	)

4536 
	#glEndQuîyARB
 
	`GLEW_GET_FUN
(
__gÀwEndQuîyARB
)

	)

4537 
	#glGíQuîõsARB
 
	`GLEW_GET_FUN
(
__gÀwGíQuîõsARB
)

	)

4538 
	#glGëQuîyObje˘ivARB
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ivARB
)

	)

4539 
	#glGëQuîyObje˘uivARB
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘uivARB
)

	)

4540 
	#glGëQuîyivARB
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyivARB
)

	)

4541 
	#glIsQuîyARB
 
	`GLEW_GET_FUN
(
__gÀwIsQuîyARB
)

	)

4543 
	#GLEW_ARB_oc˛usi⁄_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_oc˛usi⁄_quîy
)

	)

4549 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


4550 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

4552 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

4554 
	#GLEW_ARB_oc˛usi⁄_quîy2
 
	`GLEW_GET_VAR
(
__GLEW_ARB_oc˛usi⁄_quîy2
)

	)

4560 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


4561 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

4563 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

4564 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

4565 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

4566 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

4568 
	#GLEW_ARB_pixñ_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_pixñ_buf„r_obje˘
)

	)

4574 #i‚de‡
GL_ARB_poöt_∑ømëîs


4575 
	#GL_ARB_poöt_∑ømëîs
 1

	)

4577 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

4578 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

4579 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

4580 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

4582 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4583 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

4585 
	#glPoötP¨amëîfARB
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfARB
)

	)

4586 
	#glPoötP¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfvARB
)

	)

4588 
	#GLEW_ARB_poöt_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_poöt_∑ømëîs
)

	)

4594 #i‚de‡
GL_ARB_poöt_•rôe


4595 
	#GL_ARB_poöt_•rôe
 1

	)

4597 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

4598 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

4600 
	#GLEW_ARB_poöt_•rôe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_poöt_•rôe
)

	)

4606 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


4607 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

4609 
	#GL_UNIFORM
 0x92E1

	)

4610 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

4611 
	#GL_PROGRAM_INPUT
 0x92E3

	)

4612 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

4613 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

4614 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

4615 
	#GL_IS_PER_PATCH
 0x92E7

	)

4616 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

4617 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

4618 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

4619 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

4620 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

4621 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

4622 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

4623 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

4624 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

4625 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

4626 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

4627 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

4628 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

4629 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

4630 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

4631 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

4632 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

4633 
	#GL_NAME_LENGTH
 0x92F9

	)

4634 
	#GL_TYPE
 0x92FA

	)

4635 
	#GL_ARRAY_SIZE
 0x92FB

	)

4636 
	#GL_OFFSET
 0x92FC

	)

4637 
	#GL_BLOCK_INDEX
 0x92FD

	)

4638 
	#GL_ARRAY_STRIDE
 0x92FE

	)

4639 
	#GL_MATRIX_STRIDE
 0x92FF

	)

4640 
	#GL_IS_ROW_MAJOR
 0x9300

	)

4641 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

4642 
	#GL_BUFFER_BINDING
 0x9302

	)

4643 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

4644 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

4645 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

4646 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

4647 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

4648 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

4649 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

4650 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

4651 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

4652 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

4653 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

4654 
	#GL_LOCATION
 0x930E

	)

4655 
	#GL_LOCATION_INDEX
 0x930F

	)

4657 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4658 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
* 
	t«me
);

4659 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
* 
	t«me
);

4660 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
* 
	t«me
);

4661 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	t«me
);

4662 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum* 
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

4664 
	#glGëProgømI¡îÁ˚iv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømI¡îÁ˚iv
)

	)

4665 
	#glGëProgømResour˚Index
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Index
)

	)

4666 
	#glGëProgømResour˚Loˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Loˇti⁄
)

	)

4667 
	#glGëProgømResour˚Loˇti⁄Index
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Loˇti⁄Index
)

	)

4668 
	#glGëProgømResour˚Name
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Name
)

	)

4669 
	#glGëProgømResour˚iv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚iv
)

	)

4671 
	#GLEW_ARB_¥ogøm_öãrÁ˚_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_¥ogøm_öãrÁ˚_quîy
)

	)

4677 #i‚de‡
GL_ARB_¥ovokög_vîãx


4678 
	#GL_ARB_¥ovokög_vîãx
 1

	)

4680 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

4681 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

4682 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

4683 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

4685 (
GLAPIENTRY
 * 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

4687 
	#glProvokögVîãx
 
	`GLEW_GET_FUN
(
__gÀwProvokögVîãx
)

	)

4689 
	#GLEW_ARB_¥ovokög_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_ARB_¥ovokög_vîãx
)

	)

4695 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


4696 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

4698 
	#GLEW_ARB_robu°_buf„r_ac˚ss_behavi‹
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°_buf„r_ac˚ss_behavi‹
)

	)

4704 #i‚de‡
GL_ARB_robu°√ss


4705 
	#GL_ARB_robu°√ss
 1

	)

4707 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

4708 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

4709 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

4710 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

4711 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

4712 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

4713 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

4715 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

4716 (
GLAPIENTRY
 * 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	tèbÀ
);

4717 (
GLAPIENTRY
 * 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, * 
	timg
);

4718 (
GLAPIENTRY
 * 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	timage
);

4719 (
GLAPIENTRY
 * 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	tvÆues
);

4720 (
GLAPIENTRY
 * 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
* 
	tv
);

4721 (
GLAPIENTRY
 * 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
* 
	tv
);

4722 (
GLAPIENTRY
 * 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
* 
	tv
);

4723 (
GLAPIENTRY
 * 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	tvÆues
);

4724 (
GLAPIENTRY
 * 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
* 
	tvÆues
);

4725 (
GLAPIENTRY
 * 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
* 
	tvÆues
);

4726 (
GLAPIENTRY
 * 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
* 
	tvÆues
);

4727 (
GLAPIENTRY
 * 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
* 
	t∑âîn
);

4728 (
GLAPIENTRY
 * 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, * 
	trow
, GLsizeò
	tcﬁumnBufSize
, 
	tGLvoid
*
	tcﬁumn
, GLvoid*
	t•™
);

4729 (
GLAPIENTRY
 * 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	timg
);

4730 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
* 
	t∑øms
);

4731 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
* 
	t∑øms
);

4732 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöt* 
	t∑øms
);

4733 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöt* 
	t∑øms
);

4734 (
GLAPIENTRY
 * 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, * 
	td©a
);

4736 
	#glGëGøphicsRe£tSètusARB
 
	`GLEW_GET_FUN
(
__gÀwGëGøphicsRe£tSètusARB
)

	)

4737 
	#glGënCﬁ‹TabÀARB
 
	`GLEW_GET_FUN
(
__gÀwGënCﬁ‹TabÀARB
)

	)

4738 
	#glGënCom¥es£dTexImageARB
 
	`GLEW_GET_FUN
(
__gÀwGënCom¥es£dTexImageARB
)

	)

4739 
	#glGënC⁄vﬁuti⁄FûãrARB
 
	`GLEW_GET_FUN
(
__gÀwGënC⁄vﬁuti⁄FûãrARB
)

	)

4740 
	#glGënHi°ogømARB
 
	`GLEW_GET_FUN
(
__gÀwGënHi°ogømARB
)

	)

4741 
	#glGënM≠dvARB
 
	`GLEW_GET_FUN
(
__gÀwGënM≠dvARB
)

	)

4742 
	#glGënM≠fvARB
 
	`GLEW_GET_FUN
(
__gÀwGënM≠fvARB
)

	)

4743 
	#glGënM≠ivARB
 
	`GLEW_GET_FUN
(
__gÀwGënM≠ivARB
)

	)

4744 
	#glGënMömaxARB
 
	`GLEW_GET_FUN
(
__gÀwGënMömaxARB
)

	)

4745 
	#glGënPixñM≠fvARB
 
	`GLEW_GET_FUN
(
__gÀwGënPixñM≠fvARB
)

	)

4746 
	#glGënPixñM≠uivARB
 
	`GLEW_GET_FUN
(
__gÀwGënPixñM≠uivARB
)

	)

4747 
	#glGënPixñM≠usvARB
 
	`GLEW_GET_FUN
(
__gÀwGënPixñM≠usvARB
)

	)

4748 
	#glGënPﬁyg⁄Stù∂eARB
 
	`GLEW_GET_FUN
(
__gÀwGënPﬁyg⁄Stù∂eARB
)

	)

4749 
	#glGënSï¨abÀFûãrARB
 
	`GLEW_GET_FUN
(
__gÀwGënSï¨abÀFûãrARB
)

	)

4750 
	#glGënTexImageARB
 
	`GLEW_GET_FUN
(
__gÀwGënTexImageARB
)

	)

4751 
	#glGënUnif‹mdvARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹mdvARB
)

	)

4752 
	#glGënUnif‹mfvARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹mfvARB
)

	)

4753 
	#glGënUnif‹mivARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹mivARB
)

	)

4754 
	#glGënUnif‹muivARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹muivARB
)

	)

4755 
	#glRódnPixñsARB
 
	`GLEW_GET_FUN
(
__gÀwRódnPixñsARB
)

	)

4757 
	#GLEW_ARB_robu°√ss
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°√ss
)

	)

4763 #i‚de‡
GL_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄


4764 
	#GL_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
 1

	)

4766 
	#GLEW_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
)

	)

4772 #i‚de‡
GL_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄


4773 
	#GL_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
 1

	)

4775 
	#GLEW_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
)

	)

4781 #i‚de‡
GL_ARB_ßm∂e_shadög


4782 
	#GL_ARB_ßm∂e_shadög
 1

	)

4784 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

4785 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

4787 (
GLAPIENTRY
 * 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
);

4789 
	#glMöSam∂eShadögARB
 
	`GLEW_GET_FUN
(
__gÀwMöSam∂eShadögARB
)

	)

4791 
	#GLEW_ARB_ßm∂e_shadög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ßm∂e_shadög
)

	)

4797 #i‚de‡
GL_ARB_ßm∂î_obje˘s


4798 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

4800 
	#GL_SAMPLER_BINDING
 0x8919

	)

4802 (
GLAPIENTRY
 * 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

4803 (
GLAPIENTRY
 * 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 * 
	tßm∂îs
);

4804 (
GLAPIENTRY
 * 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
* 
	tßm∂îs
);

4805 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4806 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

4807 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

4808 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4809 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

4810 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

4811 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöt* 
	t∑øms
);

4812 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4813 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

4814 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4815 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

4817 
	#glBödSam∂î
 
	`GLEW_GET_FUN
(
__gÀwBödSam∂î
)

	)

4818 
	#glDñëeSam∂îs
 
	`GLEW_GET_FUN
(
__gÀwDñëeSam∂îs
)

	)

4819 
	#glGíSam∂îs
 
	`GLEW_GET_FUN
(
__gÀwGíSam∂îs
)

	)

4820 
	#glGëSam∂îP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîIiv
)

	)

4821 
	#glGëSam∂îP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîIuiv
)

	)

4822 
	#glGëSam∂îP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîfv
)

	)

4823 
	#glGëSam∂îP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîiv
)

	)

4824 
	#glIsSam∂î
 
	`GLEW_GET_FUN
(
__gÀwIsSam∂î
)

	)

4825 
	#glSam∂îP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîIiv
)

	)

4826 
	#glSam∂îP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîIuiv
)

	)

4827 
	#glSam∂îP¨amëîf
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîf
)

	)

4828 
	#glSam∂îP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîfv
)

	)

4829 
	#glSam∂îP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîi
)

	)

4830 
	#glSam∂îP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîiv
)

	)

4832 
	#GLEW_ARB_ßm∂î_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ßm∂î_obje˘s
)

	)

4838 #i‚de‡
GL_ARB_£amÀss_cube_m≠


4839 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

4841 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

4843 
	#GLEW_ARB_£amÀss_cube_m≠
 
	`GLEW_GET_VAR
(
__GLEW_ARB_£amÀss_cube_m≠
)

	)

4849 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


4850 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

4852 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

4853 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

4854 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

4855 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

4856 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

4857 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

4858 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

4859 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

4860 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

4862 (
GLAPIENTRY
 * 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

4863 (
GLAPIENTRY
 * 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

4864 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 ** 
	t°rögs
);

4865 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tpùñöes
);

4866 (
GLAPIENTRY
 * 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tpùñöes
);

4867 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

4868 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4869 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

4870 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

4871 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4872 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
);

4873 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4874 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
);

4875 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

4876 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
);

4877 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

4878 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4879 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4880 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4881 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4882 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
);

4883 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

4884 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
, GLuöà
	ty
);

4885 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

4886 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4887 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4888 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4889 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4890 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
, GLöà
	tz
);

4891 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

4892 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

4893 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

4894 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4895 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4896 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4897 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4898 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

4899 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

4900 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

4901 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

4902 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4903 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4904 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4905 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4906 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4907 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4908 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4909 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4910 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4911 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4912 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4913 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4914 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4915 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4916 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4917 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4918 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4919 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

4920 (
GLAPIENTRY
 * 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

4921 (
GLAPIENTRY
 * 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

4923 
	#glA˘iveShadîProgøm
 
	`GLEW_GET_FUN
(
__gÀwA˘iveShadîProgøm
)

	)

4924 
	#glBödProgømPùñöe
 
	`GLEW_GET_FUN
(
__gÀwBödProgømPùñöe
)

	)

4925 
	#glCª©eShadîProgømv
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadîProgømv
)

	)

4926 
	#glDñëeProgømPùñöes
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgømPùñöes
)

	)

4927 
	#glGíProgømPùñöes
 
	`GLEW_GET_FUN
(
__gÀwGíProgømPùñöes
)

	)

4928 
	#glGëProgømPùñöeInfoLog
 
	`GLEW_GET_FUN
(
__gÀwGëProgømPùñöeInfoLog
)

	)

4929 
	#glGëProgømPùñöeiv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømPùñöeiv
)

	)

4930 
	#glIsProgømPùñöe
 
	`GLEW_GET_FUN
(
__gÀwIsProgømPùñöe
)

	)

4931 
	#glProgømUnif‹m1d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1d
)

	)

4932 
	#glProgømUnif‹m1dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1dv
)

	)

4933 
	#glProgømUnif‹m1f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1f
)

	)

4934 
	#glProgømUnif‹m1fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1fv
)

	)

4935 
	#glProgømUnif‹m1i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1i
)

	)

4936 
	#glProgømUnif‹m1iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1iv
)

	)

4937 
	#glProgømUnif‹m1ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ui
)

	)

4938 
	#glProgømUnif‹m1uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1uiv
)

	)

4939 
	#glProgømUnif‹m2d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2d
)

	)

4940 
	#glProgømUnif‹m2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2dv
)

	)

4941 
	#glProgømUnif‹m2f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2f
)

	)

4942 
	#glProgømUnif‹m2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2fv
)

	)

4943 
	#glProgømUnif‹m2i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2i
)

	)

4944 
	#glProgømUnif‹m2iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2iv
)

	)

4945 
	#glProgømUnif‹m2ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ui
)

	)

4946 
	#glProgømUnif‹m2uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2uiv
)

	)

4947 
	#glProgømUnif‹m3d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3d
)

	)

4948 
	#glProgømUnif‹m3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3dv
)

	)

4949 
	#glProgømUnif‹m3f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3f
)

	)

4950 
	#glProgømUnif‹m3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3fv
)

	)

4951 
	#glProgømUnif‹m3i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3i
)

	)

4952 
	#glProgømUnif‹m3iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3iv
)

	)

4953 
	#glProgømUnif‹m3ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ui
)

	)

4954 
	#glProgømUnif‹m3uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3uiv
)

	)

4955 
	#glProgømUnif‹m4d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4d
)

	)

4956 
	#glProgømUnif‹m4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4dv
)

	)

4957 
	#glProgømUnif‹m4f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4f
)

	)

4958 
	#glProgømUnif‹m4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4fv
)

	)

4959 
	#glProgømUnif‹m4i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4i
)

	)

4960 
	#glProgømUnif‹m4iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4iv
)

	)

4961 
	#glProgømUnif‹m4ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ui
)

	)

4962 
	#glProgømUnif‹m4uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4uiv
)

	)

4963 
	#glProgømUnif‹mM©rix2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2dv
)

	)

4964 
	#glProgømUnif‹mM©rix2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2fv
)

	)

4965 
	#glProgømUnif‹mM©rix2x3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3dv
)

	)

4966 
	#glProgømUnif‹mM©rix2x3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3fv
)

	)

4967 
	#glProgømUnif‹mM©rix2x4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4dv
)

	)

4968 
	#glProgømUnif‹mM©rix2x4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4fv
)

	)

4969 
	#glProgømUnif‹mM©rix3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3dv
)

	)

4970 
	#glProgømUnif‹mM©rix3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3fv
)

	)

4971 
	#glProgømUnif‹mM©rix3x2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2dv
)

	)

4972 
	#glProgømUnif‹mM©rix3x2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2fv
)

	)

4973 
	#glProgømUnif‹mM©rix3x4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4dv
)

	)

4974 
	#glProgømUnif‹mM©rix3x4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4fv
)

	)

4975 
	#glProgømUnif‹mM©rix4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4dv
)

	)

4976 
	#glProgømUnif‹mM©rix4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4fv
)

	)

4977 
	#glProgømUnif‹mM©rix4x2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2dv
)

	)

4978 
	#glProgømUnif‹mM©rix4x2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2fv
)

	)

4979 
	#glProgømUnif‹mM©rix4x3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3dv
)

	)

4980 
	#glProgømUnif‹mM©rix4x3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3fv
)

	)

4981 
	#glU£ProgømSèges
 
	`GLEW_GET_FUN
(
__gÀwU£ProgømSèges
)

	)

4982 
	#glVÆid©eProgømPùñöe
 
	`GLEW_GET_FUN
(
__gÀwVÆid©eProgømPùñöe
)

	)

4984 
	#GLEW_ARB_£∑øã_shadî_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_£∑øã_shadî_obje˘s
)

	)

4990 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


4991 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

4993 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

4994 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

4995 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

4996 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

4997 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

4998 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

4999 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

5000 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

5001 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

5002 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

5003 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

5004 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

5005 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

5006 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

5007 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

5008 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

5009 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

5010 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

5011 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

5012 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

5013 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

5014 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

5015 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

5016 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

5017 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

5018 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

5019 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

5020 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

5021 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

5023 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5025 
	#glGëA˘iveAtomicCou¡îBuf„riv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveAtomicCou¡îBuf„riv
)

	)

5027 
	#GLEW_ARB_shadî_©omic_cou¡îs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_©omic_cou¡îs
)

	)

5033 #i‚de‡
GL_ARB_shadî_bô_ícodög


5034 
	#GL_ARB_shadî_bô_ícodög
 1

	)

5036 
	#GLEW_ARB_shadî_bô_ícodög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_bô_ícodög
)

	)

5042 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


5043 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

5045 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

5046 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

5047 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

5048 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

5049 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

5050 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

5051 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

5052 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

5053 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

5054 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

5055 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

5056 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

5057 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

5058 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

5059 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

5060 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

5061 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

5062 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

5063 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

5064 
	#GL_IMAGE_1D
 0x904C

	)

5065 
	#GL_IMAGE_2D
 0x904D

	)

5066 
	#GL_IMAGE_3D
 0x904E

	)

5067 
	#GL_IMAGE_2D_RECT
 0x904F

	)

5068 
	#GL_IMAGE_CUBE
 0x9050

	)

5069 
	#GL_IMAGE_BUFFER
 0x9051

	)

5070 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

5071 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

5072 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

5073 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

5074 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

5075 
	#GL_INT_IMAGE_1D
 0x9057

	)

5076 
	#GL_INT_IMAGE_2D
 0x9058

	)

5077 
	#GL_INT_IMAGE_3D
 0x9059

	)

5078 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

5079 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

5080 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

5081 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

5082 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

5083 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

5084 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

5085 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

5086 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

5087 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

5088 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

5089 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

5090 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

5091 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

5092 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

5093 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

5094 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

5095 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

5096 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

5097 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

5098 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

5099 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

5100 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

5101 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

5102 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

5103 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

5104 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

5105 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

5106 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

5107 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

5108 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

5110 (
GLAPIENTRY
 * 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

5111 (
GLAPIENTRY
 * 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

5113 
	#glBödImageTextuª
 
	`GLEW_GET_FUN
(
__gÀwBödImageTextuª
)

	)

5114 
	#glMem‹yB¨rõr
 
	`GLEW_GET_FUN
(
__gÀwMem‹yB¨rõr
)

	)

5116 
	#GLEW_ARB_shadî_image_lﬂd_°‹e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_image_lﬂd_°‹e
)

	)

5122 #i‚de‡
GL_ARB_shadî_image_size


5123 
	#GL_ARB_shadî_image_size
 1

	)

5125 
	#GLEW_ARB_shadî_image_size
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_image_size
)

	)

5131 #i‚de‡
GL_ARB_shadî_obje˘s


5132 
	#GL_ARB_shadî_obje˘s
 1

	)

5134 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

5135 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

5136 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

5137 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

5138 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

5139 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

5140 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

5141 
	#GL_INT_VEC2_ARB
 0x8B53

	)

5142 
	#GL_INT_VEC3_ARB
 0x8B54

	)

5143 
	#GL_INT_VEC4_ARB
 0x8B55

	)

5144 
	#GL_BOOL_ARB
 0x8B56

	)

5145 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

5146 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

5147 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

5148 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

5149 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

5150 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

5151 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

5152 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

5153 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

5154 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

5155 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

5156 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

5157 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

5158 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

5159 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

5160 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

5161 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

5162 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

5163 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

5164 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

5165 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

5166 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

5167 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

5169 
	tGLch¨ARB
;

5170 
	tGLh™dÀARB
;

5172 (
GLAPIENTRY
 * 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

5173 (
GLAPIENTRY
 * 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

5174 
GLh™dÀARB
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

5175 
GLh™dÀARB
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

5176 (
GLAPIENTRY
 * 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

5177 (
GLAPIENTRY
 * 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

5178 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

5179 (
GLAPIENTRY
 * 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizei* 
	tcou¡
, GLh™dÀARB *
	tobj
);

5180 
GLh™dÀARB
 (
	tGLAPIENTRY
 * 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

5181 (
GLAPIENTRY
 * 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

5182 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

5183 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5184 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

5185 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
* 
	t«me
);

5186 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
* 
	t∑øms
);

5187 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöt* 
	t∑øms
);

5188 (
GLAPIENTRY
 * 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5189 (
GLAPIENTRY
 * 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 ** 
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

5190 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

5191 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5192 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

5193 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5194 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

5195 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5196 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

5197 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5198 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

5199 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5200 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

5201 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5202 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

5203 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5204 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

5205 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5206 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5207 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5208 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5209 (
GLAPIENTRY
 * 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5210 (
GLAPIENTRY
 * 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5212 
	#glAâachObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwAâachObje˘ARB
)

	)

5213 
	#glCompûeShadîARB
 
	`GLEW_GET_FUN
(
__gÀwCompûeShadîARB
)

	)

5214 
	#glCª©eProgømObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwCª©eProgømObje˘ARB
)

	)

5215 
	#glCª©eShadîObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadîObje˘ARB
)

	)

5216 
	#glDñëeObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeObje˘ARB
)

	)

5217 
	#glDëachObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwDëachObje˘ARB
)

	)

5218 
	#glGëA˘iveUnif‹mARB
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mARB
)

	)

5219 
	#glGëAâachedObje˘sARB
 
	`GLEW_GET_FUN
(
__gÀwGëAâachedObje˘sARB
)

	)

5220 
	#glGëH™dÀARB
 
	`GLEW_GET_FUN
(
__gÀwGëH™dÀARB
)

	)

5221 
	#glGëInfoLogARB
 
	`GLEW_GET_FUN
(
__gÀwGëInfoLogARB
)

	)

5222 
	#glGëObje˘P¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘P¨amëîfvARB
)

	)

5223 
	#glGëObje˘P¨amëîivARB
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘P¨amëîivARB
)

	)

5224 
	#glGëShadîSour˚ARB
 
	`GLEW_GET_FUN
(
__gÀwGëShadîSour˚ARB
)

	)

5225 
	#glGëUnif‹mLoˇti⁄ARB
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mLoˇti⁄ARB
)

	)

5226 
	#glGëUnif‹mfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mfvARB
)

	)

5227 
	#glGëUnif‹mivARB
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mivARB
)

	)

5228 
	#glLökProgømARB
 
	`GLEW_GET_FUN
(
__gÀwLökProgømARB
)

	)

5229 
	#glShadîSour˚ARB
 
	`GLEW_GET_FUN
(
__gÀwShadîSour˚ARB
)

	)

5230 
	#glUnif‹m1fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1fARB
)

	)

5231 
	#glUnif‹m1fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1fvARB
)

	)

5232 
	#glUnif‹m1iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1iARB
)

	)

5233 
	#glUnif‹m1ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ivARB
)

	)

5234 
	#glUnif‹m2fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2fARB
)

	)

5235 
	#glUnif‹m2fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2fvARB
)

	)

5236 
	#glUnif‹m2iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2iARB
)

	)

5237 
	#glUnif‹m2ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ivARB
)

	)

5238 
	#glUnif‹m3fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3fARB
)

	)

5239 
	#glUnif‹m3fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3fvARB
)

	)

5240 
	#glUnif‹m3iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3iARB
)

	)

5241 
	#glUnif‹m3ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ivARB
)

	)

5242 
	#glUnif‹m4fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4fARB
)

	)

5243 
	#glUnif‹m4fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4fvARB
)

	)

5244 
	#glUnif‹m4iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4iARB
)

	)

5245 
	#glUnif‹m4ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ivARB
)

	)

5246 
	#glUnif‹mM©rix2fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2fvARB
)

	)

5247 
	#glUnif‹mM©rix3fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3fvARB
)

	)

5248 
	#glUnif‹mM©rix4fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4fvARB
)

	)

5249 
	#glU£ProgømObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwU£ProgømObje˘ARB
)

	)

5250 
	#glVÆid©eProgømARB
 
	`GLEW_GET_FUN
(
__gÀwVÆid©eProgømARB
)

	)

5252 
	#GLEW_ARB_shadî_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_obje˘s
)

	)

5258 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


5259 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

5261 
	#GLEW_ARB_shadî_¥ecisi⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_¥ecisi⁄
)

	)

5267 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


5268 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

5270 
	#GLEW_ARB_shadî_°ícû_exp‹t
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_°ícû_exp‹t
)

	)

5276 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


5277 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

5279 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x2000

	)

5280 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

5281 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

5282 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

5283 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

5284 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

5285 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

5286 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

5287 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

5288 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

5289 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

5290 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

5291 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

5292 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

5293 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

5294 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

5296 (
GLAPIENTRY
 * 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

5298 
	#glShadîSt‹ageBlockBödög
 
	`GLEW_GET_FUN
(
__gÀwShadîSt‹ageBlockBödög
)

	)

5300 
	#GLEW_ARB_shadî_°‹age_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_°‹age_buf„r_obje˘
)

	)

5306 #i‚de‡
GL_ARB_shadî_subroutöe


5307 
	#GL_ARB_shadî_subroutöe
 1

	)

5309 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

5310 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

5311 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

5312 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

5313 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

5314 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

5315 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

5316 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

5317 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

5319 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	t«me
);

5320 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	t«me
);

5321 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆues
);

5322 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆues
);

5323 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
* 
	t«me
);

5324 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
* 
	t«me
);

5325 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
* 
	t∑øms
);

5326 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tödi˚s
);

5328 
	#glGëA˘iveSubroutöeName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveSubroutöeName
)

	)

5329 
	#glGëA˘iveSubroutöeUnif‹mName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveSubroutöeUnif‹mName
)

	)

5330 
	#glGëA˘iveSubroutöeUnif‹miv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveSubroutöeUnif‹miv
)

	)

5331 
	#glGëProgømSègeiv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømSègeiv
)

	)

5332 
	#glGëSubroutöeIndex
 
	`GLEW_GET_FUN
(
__gÀwGëSubroutöeIndex
)

	)

5333 
	#glGëSubroutöeUnif‹mLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëSubroutöeUnif‹mLoˇti⁄
)

	)

5334 
	#glGëUnif‹mSubroutöeuiv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mSubroutöeuiv
)

	)

5335 
	#glUnif‹mSubroutöesuiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mSubroutöesuiv
)

	)

5337 
	#GLEW_ARB_shadî_subroutöe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_subroutöe
)

	)

5343 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


5344 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

5346 
	#GLEW_ARB_shadî_ãxtuª_lod
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_ãxtuª_lod
)

	)

5352 #i‚de‡
GL_ARB_shadög_œnguage_100


5353 
	#GL_ARB_shadög_œnguage_100
 1

	)

5355 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

5357 
	#GLEW_ARB_shadög_œnguage_100
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_100
)

	)

5363 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


5364 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

5366 
	#GLEW_ARB_shadög_œnguage_420∑ck
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_420∑ck
)

	)

5372 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


5373 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

5375 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

5376 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

5377 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

5379 (
GLAPIENTRY
 * 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 ** 
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

5380 (
GLAPIENTRY
 * 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
);

5381 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

5382 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

5383 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
);

5384 (
GLAPIENTRY
 * 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

5386 
	#glCompûeShadîIn˛udeARB
 
	`GLEW_GET_FUN
(
__gÀwCompûeShadîIn˛udeARB
)

	)

5387 
	#glDñëeNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeNamedSåögARB
)

	)

5388 
	#glGëNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwGëNamedSåögARB
)

	)

5389 
	#glGëNamedSåögivARB
 
	`GLEW_GET_FUN
(
__gÀwGëNamedSåögivARB
)

	)

5390 
	#glIsNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwIsNamedSåögARB
)

	)

5391 
	#glNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwNamedSåögARB
)

	)

5393 
	#GLEW_ARB_shadög_œnguage_ö˛ude
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_ö˛ude
)

	)

5399 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


5400 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

5402 
	#GLEW_ARB_shadög_œnguage_∑ckög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_∑ckög
)

	)

5408 #i‚de‡
GL_ARB_shadow


5409 
	#GL_ARB_shadow
 1

	)

5411 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

5412 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

5413 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

5415 
	#GLEW_ARB_shadow
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadow
)

	)

5421 #i‚de‡
GL_ARB_shadow_ambõ¡


5422 
	#GL_ARB_shadow_ambõ¡
 1

	)

5424 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

5426 
	#GLEW_ARB_shadow_ambõ¡
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadow_ambõ¡
)

	)

5432 #i‚de‡
GL_ARB_°ícû_ãxturög


5433 
	#GL_ARB_°ícû_ãxturög
 1

	)

5435 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

5437 
	#GLEW_ARB_°ícû_ãxturög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_°ícû_ãxturög
)

	)

5443 #i‚de‡
GL_ARB_sync


5444 
	#GL_ARB_sync
 1

	)

5446 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

5447 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

5448 
	#GL_OBJECT_TYPE
 0x9112

	)

5449 
	#GL_SYNC_CONDITION
 0x9113

	)

5450 
	#GL_SYNC_STATUS
 0x9114

	)

5451 
	#GL_SYNC_FLAGS
 0x9115

	)

5452 
	#GL_SYNC_FENCE
 0x9116

	)

5453 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

5454 
	#GL_UNSIGNALED
 0x9118

	)

5455 
	#GL_SIGNALED
 0x9119

	)

5456 
	#GL_ALREADY_SIGNALED
 0x911A

	)

5457 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

5458 
	#GL_CONDITION_SATISFIED
 0x911C

	)

5459 
	#GL_WAIT_FAILED
 0x911D

	)

5460 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFF

	)

5462 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 GLsync,
	tGLbôfõld
 
	tÊags
,
	tGLuöt64
 
	ttimeout
);

5463 (
GLAPIENTRY
 * 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 GLsync);

5464 
GLsync
 (
	tGLAPIENTRY
 * 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
,
	tGLbôfõld
 
	tÊags
);

5465 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
* 
	t∑øms
);

5466 (
GLAPIENTRY
 * 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 GLsync,
	tGLíum
 
	t≤ame
,
	tGLsizei
 
	tbufSize
,GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

5467 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 GLsync);

5468 (
GLAPIENTRY
 * 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 GLsync,
	tGLbôfõld
 
	tÊags
,
	tGLuöt64
 
	ttimeout
);

5470 
	#glClõ¡WaôSync
 
	`GLEW_GET_FUN
(
__gÀwClõ¡WaôSync
)

	)

5471 
	#glDñëeSync
 
	`GLEW_GET_FUN
(
__gÀwDñëeSync
)

	)

5472 
	#glFí˚Sync
 
	`GLEW_GET_FUN
(
__gÀwFí˚Sync
)

	)

5473 
	#glGëI¡egî64v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egî64v
)

	)

5474 
	#glGëSynciv
 
	`GLEW_GET_FUN
(
__gÀwGëSynciv
)

	)

5475 
	#glIsSync
 
	`GLEW_GET_FUN
(
__gÀwIsSync
)

	)

5476 
	#glWaôSync
 
	`GLEW_GET_FUN
(
__gÀwWaôSync
)

	)

5478 
	#GLEW_ARB_sync
 
	`GLEW_GET_VAR
(
__GLEW_ARB_sync
)

	)

5484 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


5485 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

5487 
	#GL_PATCHES
 0xE

	)

5488 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

5489 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

5490 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

5491 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

5492 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

5493 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

5494 
	#GL_PATCH_VERTICES
 0x8E72

	)

5495 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

5496 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

5497 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

5498 
	#GL_TESS_GEN_MODE
 0x8E76

	)

5499 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

5500 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

5501 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

5502 
	#GL_ISOLINES
 0x8E7A

	)

5503 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

5504 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

5505 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

5506 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

5507 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

5508 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

5509 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

5510 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

5511 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

5512 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

5513 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

5514 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

5515 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

5516 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

5517 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

5518 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

5520 (
GLAPIENTRY
 * 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	tvÆues
);

5521 (
GLAPIENTRY
 * 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

5523 
	#glP©chP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwP©chP¨amëîfv
)

	)

5524 
	#glP©chP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwP©chP¨amëîi
)

	)

5526 
	#GLEW_ARB_ãs£Œ©i⁄_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãs£Œ©i⁄_shadî
)

	)

5532 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


5533 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

5535 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

5537 
	#GLEW_ARB_ãxtuª_b‹dî_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_b‹dî_˛amp
)

	)

5543 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


5544 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

5546 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

5547 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

5548 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

5549 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

5550 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

5552 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

5554 
	#glTexBuf„rARB
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„rARB
)

	)

5556 
	#GLEW_ARB_ãxtuª_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_buf„r_obje˘
)

	)

5562 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


5563 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

5565 
	#GLEW_ARB_ãxtuª_buf„r_obje˘_rgb32
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_buf„r_obje˘_rgb32
)

	)

5571 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


5572 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

5574 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

5575 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

5576 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

5578 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5579 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5581 
	#glTexBuf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„rR™ge
)

	)

5582 
	#glTextuªBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªBuf„rR™geEXT
)

	)

5584 
	#GLEW_ARB_ãxtuª_buf„r_ønge
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_buf„r_ønge
)

	)

5590 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


5591 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

5593 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

5594 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

5595 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

5596 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

5597 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

5598 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

5599 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

5600 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

5601 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

5602 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

5603 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

5605 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

5606 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

5607 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

5608 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

5609 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

5610 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

5611 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, * 
	timg
);

5613 
	#glCom¥es£dTexImage1DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage1DARB
)

	)

5614 
	#glCom¥es£dTexImage2DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage2DARB
)

	)

5615 
	#glCom¥es£dTexImage3DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage3DARB
)

	)

5616 
	#glCom¥es£dTexSubImage1DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage1DARB
)

	)

5617 
	#glCom¥es£dTexSubImage2DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage2DARB
)

	)

5618 
	#glCom¥es£dTexSubImage3DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage3DARB
)

	)

5619 
	#glGëCom¥es£dTexImageARB
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dTexImageARB
)

	)

5621 
	#GLEW_ARB_ãxtuª_com¥essi⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_com¥essi⁄
)

	)

5627 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


5628 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

5630 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

5631 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

5632 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

5633 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

5635 
	#GLEW_ARB_ãxtuª_com¥essi⁄_b±c
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_com¥essi⁄_b±c
)

	)

5641 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


5642 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

5644 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

5645 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

5646 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

5647 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

5649 
	#GLEW_ARB_ãxtuª_com¥essi⁄_rgtc
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_com¥essi⁄_rgtc
)

	)

5655 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


5656 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

5658 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

5659 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

5660 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

5661 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

5662 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

5663 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

5664 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

5665 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

5666 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

5667 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

5668 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

5669 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

5671 
	#GLEW_ARB_ãxtuª_cube_m≠
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_cube_m≠
)

	)

5677 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


5678 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

5680 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

5681 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

5682 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

5683 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

5684 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

5685 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

5686 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

5688 
	#GLEW_ARB_ãxtuª_cube_m≠_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_cube_m≠_¨øy
)

	)

5694 #i‚de‡
GL_ARB_ãxtuª_ív_add


5695 
	#GL_ARB_ãxtuª_ív_add
 1

	)

5697 
	#GLEW_ARB_ãxtuª_ív_add
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_add
)

	)

5703 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


5704 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

5706 
	#GL_SUBTRACT_ARB
 0x84E7

	)

5707 
	#GL_COMBINE_ARB
 0x8570

	)

5708 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

5709 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

5710 
	#GL_RGB_SCALE_ARB
 0x8573

	)

5711 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

5712 
	#GL_INTERPOLATE_ARB
 0x8575

	)

5713 
	#GL_CONSTANT_ARB
 0x8576

	)

5714 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

5715 
	#GL_PREVIOUS_ARB
 0x8578

	)

5716 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

5717 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

5718 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

5719 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

5720 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

5721 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

5722 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

5723 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

5724 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

5725 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

5726 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

5727 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

5729 
	#GLEW_ARB_ãxtuª_ív_comböe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_comböe
)

	)

5735 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


5736 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

5738 
	#GLEW_ARB_ãxtuª_ív_¸ossb¨
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_¸ossb¨
)

	)

5744 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


5745 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

5747 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

5748 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

5750 
	#GLEW_ARB_ãxtuª_ív_dŸ3
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_dŸ3
)

	)

5756 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


5757 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

5759 
	#GL_RGBA32F_ARB
 0x8814

	)

5760 
	#GL_RGB32F_ARB
 0x8815

	)

5761 
	#GL_ALPHA32F_ARB
 0x8816

	)

5762 
	#GL_INTENSITY32F_ARB
 0x8817

	)

5763 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

5764 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

5765 
	#GL_RGBA16F_ARB
 0x881A

	)

5766 
	#GL_RGB16F_ARB
 0x881B

	)

5767 
	#GL_ALPHA16F_ARB
 0x881C

	)

5768 
	#GL_INTENSITY16F_ARB
 0x881D

	)

5769 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

5770 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

5771 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

5772 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

5773 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

5774 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

5775 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

5776 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

5777 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

5778 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

5780 
	#GLEW_ARB_ãxtuª_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_Êﬂt
)

	)

5786 #i‚de‡
GL_ARB_ãxtuª_g©hî


5787 
	#GL_ARB_ãxtuª_g©hî
 1

	)

5789 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

5790 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

5791 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

5793 
	#GLEW_ARB_ãxtuª_g©hî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_g©hî
)

	)

5799 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


5800 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

5802 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

5804 
	#GLEW_ARB_ãxtuª_múr‹ed_ª≥©
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_múr‹ed_ª≥©
)

	)

5810 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


5811 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

5813 
	#GL_SAMPLE_POSITION
 0x8E50

	)

5814 
	#GL_SAMPLE_MASK
 0x8E51

	)

5815 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

5816 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

5817 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

5818 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

5819 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

5820 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

5821 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

5822 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

5823 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

5824 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

5825 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

5826 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

5827 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

5828 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

5829 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

5830 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

5831 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

5832 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

5833 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

5835 (
GLAPIENTRY
 * 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	tvÆ
);

5836 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

5837 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

5838 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

5840 
	#glGëMu…ißm∂efv
 
	`GLEW_GET_FUN
(
__gÀwGëMu…ißm∂efv
)

	)

5841 
	#glSam∂eMaski
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaski
)

	)

5842 
	#glTexImage2DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexImage2DMu…ißm∂e
)

	)

5843 
	#glTexImage3DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexImage3DMu…ißm∂e
)

	)

5845 
	#GLEW_ARB_ãxtuª_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_mu…ißm∂e
)

	)

5851 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


5852 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

5854 
	#GLEW_ARB_ãxtuª_n⁄_powî_of_two
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_n⁄_powî_of_two
)

	)

5860 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


5861 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

5863 
	#GLEW_ARB_ãxtuª_quîy_Àvñs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_quîy_Àvñs
)

	)

5869 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


5870 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

5872 
	#GLEW_ARB_ãxtuª_quîy_lod
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_quîy_lod
)

	)

5878 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


5879 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

5881 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

5882 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

5883 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

5884 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

5885 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

5886 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

5888 
	#GLEW_ARB_ãxtuª_ª˘™gÀ
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ª˘™gÀ
)

	)

5894 #i‚de‡
GL_ARB_ãxtuª_rg


5895 
	#GL_ARB_ãxtuª_rg
 1

	)

5897 
	#GL_COMPRESSED_RED
 0x8225

	)

5898 
	#GL_COMPRESSED_RG
 0x8226

	)

5899 
	#GL_RG
 0x8227

	)

5900 
	#GL_RG_INTEGER
 0x8228

	)

5901 
	#GL_R8
 0x8229

	)

5902 
	#GL_R16
 0x822A

	)

5903 
	#GL_RG8
 0x822B

	)

5904 
	#GL_RG16
 0x822C

	)

5905 
	#GL_R16F
 0x822D

	)

5906 
	#GL_R32F
 0x822E

	)

5907 
	#GL_RG16F
 0x822F

	)

5908 
	#GL_RG32F
 0x8230

	)

5909 
	#GL_R8I
 0x8231

	)

5910 
	#GL_R8UI
 0x8232

	)

5911 
	#GL_R16I
 0x8233

	)

5912 
	#GL_R16UI
 0x8234

	)

5913 
	#GL_R32I
 0x8235

	)

5914 
	#GL_R32UI
 0x8236

	)

5915 
	#GL_RG8I
 0x8237

	)

5916 
	#GL_RG8UI
 0x8238

	)

5917 
	#GL_RG16I
 0x8239

	)

5918 
	#GL_RG16UI
 0x823A

	)

5919 
	#GL_RG32I
 0x823B

	)

5920 
	#GL_RG32UI
 0x823C

	)

5922 
	#GLEW_ARB_ãxtuª_rg
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_rg
)

	)

5928 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


5929 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

5931 
	#GL_RGB10_A2UI
 0x906F

	)

5933 
	#GLEW_ARB_ãxtuª_rgb10_a2ui
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_rgb10_a2ui
)

	)

5939 #i‚de‡
GL_ARB_ãxtuª_°‹age


5940 
	#GL_ARB_ãxtuª_°‹age
 1

	)

5942 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

5944 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

5945 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

5946 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

5947 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

5948 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

5949 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

5951 
	#glTexSt‹age1D
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age1D
)

	)

5952 
	#glTexSt‹age2D
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age2D
)

	)

5953 
	#glTexSt‹age3D
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age3D
)

	)

5954 
	#glTextuªSt‹age1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age1DEXT
)

	)

5955 
	#glTextuªSt‹age2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age2DEXT
)

	)

5956 
	#glTextuªSt‹age3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age3DEXT
)

	)

5958 
	#GLEW_ARB_ãxtuª_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_°‹age
)

	)

5964 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


5965 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

5967 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

5968 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

5969 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

5970 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

5972 
	#glTexSt‹age2DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age2DMu…ißm∂e
)

	)

5973 
	#glTexSt‹age3DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age3DMu…ißm∂e
)

	)

5974 
	#glTextuªSt‹age2DMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age2DMu…ißm∂eEXT
)

	)

5975 
	#glTextuªSt‹age3DMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age3DMu…ißm∂eEXT
)

	)

5977 
	#GLEW_ARB_ãxtuª_°‹age_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_°‹age_mu…ißm∂e
)

	)

5983 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


5984 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

5986 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

5987 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

5988 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

5989 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

5990 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

5992 
	#GLEW_ARB_ãxtuª_swizzÀ
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_swizzÀ
)

	)

5998 #i‚de‡
GL_ARB_ãxtuª_võw


5999 
	#GL_ARB_ãxtuª_võw
 1

	)

6001 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

6002 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

6003 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

6004 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

6005 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

6007 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

6009 
	#glTextuªVõw
 
	`GLEW_GET_FUN
(
__gÀwTextuªVõw
)

	)

6011 
	#GLEW_ARB_ãxtuª_võw
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_võw
)

	)

6017 #i‚de‡
GL_ARB_timî_quîy


6018 
	#GL_ARB_timî_quîy
 1

	)

6020 
	#GL_TIME_ELAPSED
 0x88BF

	)

6021 
	#GL_TIMESTAMP
 0x8E28

	)

6023 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
* 
	t∑øms
);

6024 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
* 
	t∑øms
);

6025 (
GLAPIENTRY
 * 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

6027 
	#glGëQuîyObje˘i64v
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘i64v
)

	)

6028 
	#glGëQuîyObje˘ui64v
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ui64v
)

	)

6029 
	#glQuîyCou¡î
 
	`GLEW_GET_FUN
(
__gÀwQuîyCou¡î
)

	)

6031 
	#GLEW_ARB_timî_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_timî_quîy
)

	)

6037 #i‚de‡
GL_ARB_å™sf‹m_„edback2


6038 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

6040 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

6041 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

6042 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

6043 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

6045 (
GLAPIENTRY
 * 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

6046 (
GLAPIENTRY
 * 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

6047 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

6048 (
GLAPIENTRY
 * 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

6049 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

6050 (
GLAPIENTRY
 * 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

6051 (
GLAPIENTRY
 * 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

6053 
	#glBödTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwBödTønsf‹mFìdback
)

	)

6054 
	#glDñëeTønsf‹mFìdbacks
 
	`GLEW_GET_FUN
(
__gÀwDñëeTønsf‹mFìdbacks
)

	)

6055 
	#glDøwTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdback
)

	)

6056 
	#glGíTønsf‹mFìdbacks
 
	`GLEW_GET_FUN
(
__gÀwGíTønsf‹mFìdbacks
)

	)

6057 
	#glIsTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwIsTønsf‹mFìdback
)

	)

6058 
	#glPau£Tønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwPau£Tønsf‹mFìdback
)

	)

6059 
	#glResumeTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwResumeTønsf‹mFìdback
)

	)

6061 
	#GLEW_ARB_å™sf‹m_„edback2
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™sf‹m_„edback2
)

	)

6067 #i‚de‡
GL_ARB_å™sf‹m_„edback3


6068 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

6070 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

6071 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

6073 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

6074 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

6075 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6076 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6078 
	#glBegöQuîyIndexed
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîyIndexed
)

	)

6079 
	#glDøwTønsf‹mFìdbackSåóm
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackSåóm
)

	)

6080 
	#glEndQuîyIndexed
 
	`GLEW_GET_FUN
(
__gÀwEndQuîyIndexed
)

	)

6081 
	#glGëQuîyIndexediv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyIndexediv
)

	)

6083 
	#GLEW_ARB_å™sf‹m_„edback3
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™sf‹m_„edback3
)

	)

6089 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


6090 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

6092 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	t¥imcou¡
);

6093 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	t¥imcou¡
);

6095 
	#glDøwTønsf‹mFìdbackIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackIn°™˚d
)

	)

6096 
	#glDøwTønsf‹mFìdbackSåómIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackSåómIn°™˚d
)

	)

6098 
	#GLEW_ARB_å™sf‹m_„edback_ö°™˚d
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™sf‹m_„edback_ö°™˚d
)

	)

6104 #i‚de‡
GL_ARB_å™•o£_m©rix


6105 
	#GL_ARB_å™•o£_m©rix
 1

	)

6107 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

6108 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

6109 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

6110 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

6112 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(
	tGLdoubÀ
 
	tm
[16]);

6113 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(
	tGLÊﬂt
 
	tm
[16]);

6114 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(
	tGLdoubÀ
 
	tm
[16]);

6115 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(
	tGLÊﬂt
 
	tm
[16]);

6117 
	#glLﬂdTøn•o£M©rixdARB
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixdARB
)

	)

6118 
	#glLﬂdTøn•o£M©rixfARB
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixfARB
)

	)

6119 
	#glMu…Tøn•o£M©rixdARB
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixdARB
)

	)

6120 
	#glMu…Tøn•o£M©rixfARB
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixfARB
)

	)

6122 
	#GLEW_ARB_å™•o£_m©rix
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™•o£_m©rix
)

	)

6128 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


6129 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

6131 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

6132 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

6133 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

6134 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

6135 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

6136 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

6137 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

6138 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

6139 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

6140 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

6141 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

6142 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

6143 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

6144 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

6145 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

6146 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

6147 
	#GL_UNIFORM_TYPE
 0x8A37

	)

6148 
	#GL_UNIFORM_SIZE
 0x8A38

	)

6149 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

6150 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

6151 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

6152 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

6153 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

6154 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

6155 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

6156 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

6157 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

6158 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

6159 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

6160 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

6161 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

6162 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

6163 
	#GL_INVALID_INDEX
 0xFFFFFFFF

	)

6165 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

6166 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6167 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tunif‹mBlockName
);

6168 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6169 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tunif‹mName
);

6170 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöt* 
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6171 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
* 
	td©a
);

6172 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
* 
	tunif‹mBlockName
);

6173 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
** 
	tunif‹mNames
, GLuöt* 
	tunif‹mIndi˚s
);

6174 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

6176 
	#glBödBuf„rBa£
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rBa£
)

	)

6177 
	#glBödBuf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rR™ge
)

	)

6178 
	#glGëA˘iveUnif‹mBlockName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mBlockName
)

	)

6179 
	#glGëA˘iveUnif‹mBlockiv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mBlockiv
)

	)

6180 
	#glGëA˘iveUnif‹mName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mName
)

	)

6181 
	#glGëA˘iveUnif‹msiv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹msiv
)

	)

6182 
	#glGëI¡egîi_v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîi_v
)

	)

6183 
	#glGëUnif‹mBlockIndex
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mBlockIndex
)

	)

6184 
	#glGëUnif‹mIndi˚s
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mIndi˚s
)

	)

6185 
	#glUnif‹mBlockBödög
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mBlockBödög
)

	)

6187 
	#GLEW_ARB_unif‹m_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_unif‹m_buf„r_obje˘
)

	)

6193 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


6194 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

6196 
	#GL_BGRA
 0x80E1

	)

6198 
	#GLEW_ARB_vîãx_¨øy_bgø
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_¨øy_bgø
)

	)

6204 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


6205 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

6207 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

6209 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

6210 (
GLAPIENTRY
 * 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¨øys
);

6211 (
GLAPIENTRY
 * 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t¨øys
);

6212 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

6214 
	#glBödVîãxAºay
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxAºay
)

	)

6215 
	#glDñëeVîãxAºays
 
	`GLEW_GET_FUN
(
__gÀwDñëeVîãxAºays
)

	)

6216 
	#glGíVîãxAºays
 
	`GLEW_GET_FUN
(
__gÀwGíVîãxAºays
)

	)

6217 
	#glIsVîãxAºay
 
	`GLEW_GET_FUN
(
__gÀwIsVîãxAºay
)

	)

6219 
	#GLEW_ARB_vîãx_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_¨øy_obje˘
)

	)

6225 #i‚de‡
GL_ARB_vîãx_©åib_64bô


6226 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

6228 
	#GL_DOUBLE_MAT2
 0x8F46

	)

6229 
	#GL_DOUBLE_MAT3
 0x8F47

	)

6230 
	#GL_DOUBLE_MAT4
 0x8F48

	)

6231 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

6232 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

6233 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

6235 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

6236 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6237 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6238 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6239 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6240 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6241 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6242 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6243 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6244 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

6246 
	#glGëVîãxAâribLdv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLdv
)

	)

6247 
	#glVîãxAâribL1d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1d
)

	)

6248 
	#glVîãxAâribL1dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1dv
)

	)

6249 
	#glVîãxAâribL2d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2d
)

	)

6250 
	#glVîãxAâribL2dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2dv
)

	)

6251 
	#glVîãxAâribL3d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3d
)

	)

6252 
	#glVîãxAâribL3dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3dv
)

	)

6253 
	#glVîãxAâribL4d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4d
)

	)

6254 
	#glVîãxAâribL4dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4dv
)

	)

6255 
	#glVîãxAâribLPoöãr
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLPoöãr
)

	)

6257 
	#GLEW_ARB_vîãx_©åib_64bô
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_©åib_64bô
)

	)

6263 #i‚de‡
GL_ARB_vîãx_©åib_bödög


6264 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

6266 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

6267 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

6268 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

6269 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

6270 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

6271 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

6272 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

6274 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6275 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

6276 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6277 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6278 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6279 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

6281 
	#glBödVîãxBuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxBuf„r
)

	)

6282 
	#glVîãxAâribBödög
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribBödög
)

	)

6283 
	#glVîãxAâribF‹m©
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribF‹m©
)

	)

6284 
	#glVîãxAâribIF‹m©
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIF‹m©
)

	)

6285 
	#glVîãxAâribLF‹m©
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLF‹m©
)

	)

6286 
	#glVîãxBödögDivis‹
 
	`GLEW_GET_FUN
(
__gÀwVîãxBödögDivis‹
)

	)

6288 
	#GLEW_ARB_vîãx_©åib_bödög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_©åib_bödög
)

	)

6294 #i‚de‡
GL_ARB_vîãx_bÀnd


6295 
	#GL_ARB_vîãx_bÀnd
 1

	)

6297 
	#GL_MODELVIEW0_ARB
 0x1700

	)

6298 
	#GL_MODELVIEW1_ARB
 0x850A

	)

6299 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

6300 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

6301 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

6302 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

6303 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

6304 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

6305 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

6306 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

6307 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

6308 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

6309 
	#GL_MODELVIEW2_ARB
 0x8722

	)

6310 
	#GL_MODELVIEW3_ARB
 0x8723

	)

6311 
	#GL_MODELVIEW4_ARB
 0x8724

	)

6312 
	#GL_MODELVIEW5_ARB
 0x8725

	)

6313 
	#GL_MODELVIEW6_ARB
 0x8726

	)

6314 
	#GL_MODELVIEW7_ARB
 0x8727

	)

6315 
	#GL_MODELVIEW8_ARB
 0x8728

	)

6316 
	#GL_MODELVIEW9_ARB
 0x8729

	)

6317 
	#GL_MODELVIEW10_ARB
 0x872A

	)

6318 
	#GL_MODELVIEW11_ARB
 0x872B

	)

6319 
	#GL_MODELVIEW12_ARB
 0x872C

	)

6320 
	#GL_MODELVIEW13_ARB
 0x872D

	)

6321 
	#GL_MODELVIEW14_ARB
 0x872E

	)

6322 
	#GL_MODELVIEW15_ARB
 0x872F

	)

6323 
	#GL_MODELVIEW16_ARB
 0x8730

	)

6324 
	#GL_MODELVIEW17_ARB
 0x8731

	)

6325 
	#GL_MODELVIEW18_ARB
 0x8732

	)

6326 
	#GL_MODELVIEW19_ARB
 0x8733

	)

6327 
	#GL_MODELVIEW20_ARB
 0x8734

	)

6328 
	#GL_MODELVIEW21_ARB
 0x8735

	)

6329 
	#GL_MODELVIEW22_ARB
 0x8736

	)

6330 
	#GL_MODELVIEW23_ARB
 0x8737

	)

6331 
	#GL_MODELVIEW24_ARB
 0x8738

	)

6332 
	#GL_MODELVIEW25_ARB
 0x8739

	)

6333 
	#GL_MODELVIEW26_ARB
 0x873A

	)

6334 
	#GL_MODELVIEW27_ARB
 0x873B

	)

6335 
	#GL_MODELVIEW28_ARB
 0x873C

	)

6336 
	#GL_MODELVIEW29_ARB
 0x873D

	)

6337 
	#GL_MODELVIEW30_ARB
 0x873E

	)

6338 
	#GL_MODELVIEW31_ARB
 0x873F

	)

6340 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

6341 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

6342 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLbyã
 *
	tweights
);

6343 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLdoubÀ
 *
	tweights
);

6344 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLÊﬂt
 *
	tweights
);

6345 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, GLöà*
	tweights
);

6346 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLsh‹t
 *
	tweights
);

6347 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLubyã
 *
	tweights
);

6348 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLuöt
 *
	tweights
);

6349 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLush‹t
 *
	tweights
);

6351 
	#glVîãxBÀndARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxBÀndARB
)

	)

6352 
	#glWeightPoöãrARB
 
	`GLEW_GET_FUN
(
__gÀwWeightPoöãrARB
)

	)

6353 
	#glWeightbvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightbvARB
)

	)

6354 
	#glWeightdvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightdvARB
)

	)

6355 
	#glWeightfvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightfvARB
)

	)

6356 
	#glWeightivARB
 
	`GLEW_GET_FUN
(
__gÀwWeightivARB
)

	)

6357 
	#glWeightsvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightsvARB
)

	)

6358 
	#glWeightubvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightubvARB
)

	)

6359 
	#glWeightuivARB
 
	`GLEW_GET_FUN
(
__gÀwWeightuivARB
)

	)

6360 
	#glWeightusvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightusvARB
)

	)

6362 
	#GLEW_ARB_vîãx_bÀnd
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_bÀnd
)

	)

6368 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


6369 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

6371 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

6372 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

6373 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

6374 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

6375 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

6376 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

6377 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

6378 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

6379 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

6380 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

6381 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

6382 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

6383 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

6384 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

6385 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

6386 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

6387 
	#GL_READ_ONLY_ARB
 0x88B8

	)

6388 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

6389 
	#GL_READ_WRITE_ARB
 0x88BA

	)

6390 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

6391 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

6392 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

6393 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

6394 
	#GL_STREAM_READ_ARB
 0x88E1

	)

6395 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

6396 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

6397 
	#GL_STATIC_READ_ARB
 0x88E5

	)

6398 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

6399 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

6400 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

6401 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

6403 
±rdiff_t
 
	tGLöçåARB
;

6404 
±rdiff_t
 
	tGLsizeùåARB
;

6406 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

6407 (
GLAPIENTRY
 * 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
, GLíum 
	tußge
);

6408 (
GLAPIENTRY
 * 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
);

6409 (
GLAPIENTRY
 * 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tbuf„rs
);

6410 (
GLAPIENTRY
 * 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tbuf„rs
);

6411 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6412 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

6413 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
* 
	td©a
);

6414 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6415 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

6416 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

6418 
	#glBödBuf„rARB
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rARB
)

	)

6419 
	#glBuf„rD©aARB
 
	`GLEW_GET_FUN
(
__gÀwBuf„rD©aARB
)

	)

6420 
	#glBuf„rSubD©aARB
 
	`GLEW_GET_FUN
(
__gÀwBuf„rSubD©aARB
)

	)

6421 
	#glDñëeBuf„rsARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeBuf„rsARB
)

	)

6422 
	#glGíBuf„rsARB
 
	`GLEW_GET_FUN
(
__gÀwGíBuf„rsARB
)

	)

6423 
	#glGëBuf„rP¨amëîivARB
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîivARB
)

	)

6424 
	#glGëBuf„rPoöãrvARB
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rPoöãrvARB
)

	)

6425 
	#glGëBuf„rSubD©aARB
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rSubD©aARB
)

	)

6426 
	#glIsBuf„rARB
 
	`GLEW_GET_FUN
(
__gÀwIsBuf„rARB
)

	)

6427 
	#glM≠Buf„rARB
 
	`GLEW_GET_FUN
(
__gÀwM≠Buf„rARB
)

	)

6428 
	#glUnm≠Buf„rARB
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Buf„rARB
)

	)

6430 
	#GLEW_ARB_vîãx_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_buf„r_obje˘
)

	)

6436 #i‚de‡
GL_ARB_vîãx_¥ogøm


6437 
	#GL_ARB_vîãx_¥ogøm
 1

	)

6439 
	#GL_COLOR_SUM_ARB
 0x8458

	)

6440 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

6441 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

6442 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

6443 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

6444 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

6445 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

6446 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

6447 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

6448 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

6449 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

6450 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

6451 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

6452 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

6453 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

6454 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

6455 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

6456 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

6457 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

6458 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

6459 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

6460 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

6461 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

6462 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

6463 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

6464 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

6465 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

6466 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

6467 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

6468 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

6469 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

6470 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

6471 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

6472 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

6473 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

6474 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

6475 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

6476 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

6477 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

6478 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

6479 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

6480 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

6481 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

6482 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

6483 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

6484 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

6485 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

6486 
	#GL_MATRIX0_ARB
 0x88C0

	)

6487 
	#GL_MATRIX1_ARB
 0x88C1

	)

6488 
	#GL_MATRIX2_ARB
 0x88C2

	)

6489 
	#GL_MATRIX3_ARB
 0x88C3

	)

6490 
	#GL_MATRIX4_ARB
 0x88C4

	)

6491 
	#GL_MATRIX5_ARB
 0x88C5

	)

6492 
	#GL_MATRIX6_ARB
 0x88C6

	)

6493 
	#GL_MATRIX7_ARB
 0x88C7

	)

6494 
	#GL_MATRIX8_ARB
 0x88C8

	)

6495 
	#GL_MATRIX9_ARB
 0x88C9

	)

6496 
	#GL_MATRIX10_ARB
 0x88CA

	)

6497 
	#GL_MATRIX11_ARB
 0x88CB

	)

6498 
	#GL_MATRIX12_ARB
 0x88CC

	)

6499 
	#GL_MATRIX13_ARB
 0x88CD

	)

6500 
	#GL_MATRIX14_ARB
 0x88CE

	)

6501 
	#GL_MATRIX15_ARB
 0x88CF

	)

6502 
	#GL_MATRIX16_ARB
 0x88D0

	)

6503 
	#GL_MATRIX17_ARB
 0x88D1

	)

6504 
	#GL_MATRIX18_ARB
 0x88D2

	)

6505 
	#GL_MATRIX19_ARB
 0x88D3

	)

6506 
	#GL_MATRIX20_ARB
 0x88D4

	)

6507 
	#GL_MATRIX21_ARB
 0x88D5

	)

6508 
	#GL_MATRIX22_ARB
 0x88D6

	)

6509 
	#GL_MATRIX23_ARB
 0x88D7

	)

6510 
	#GL_MATRIX24_ARB
 0x88D8

	)

6511 
	#GL_MATRIX25_ARB
 0x88D9

	)

6512 
	#GL_MATRIX26_ARB
 0x88DA

	)

6513 
	#GL_MATRIX27_ARB
 0x88DB

	)

6514 
	#GL_MATRIX28_ARB
 0x88DC

	)

6515 
	#GL_MATRIX29_ARB
 0x88DD

	)

6516 
	#GL_MATRIX30_ARB
 0x88DE

	)

6517 
	#GL_MATRIX31_ARB
 0x88DF

	)

6519 (
GLAPIENTRY
 * 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

6520 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¥ogøms
);

6521 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

6522 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

6523 (
GLAPIENTRY
 * 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t¥ogøms
);

6524 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

6525 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

6526 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

6527 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

6528 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, * 
	t°rög
);

6529 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6530 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	tpoöãr
);

6531 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

6532 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

6533 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6534 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6535 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6536 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

6537 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6538 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

6539 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6540 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

6541 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6542 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

6543 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° * 
	t°rög
);

6544 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6545 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6546 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

6547 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

6548 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

6549 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

6550 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6551 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6552 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6553 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

6554 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6555 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

6556 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6557 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6558 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6559 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

6560 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6561 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

6562 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

6563 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

6564 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

6565 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

6566 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

6567 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

6568 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

6569 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

6570 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6571 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6572 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6573 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

6574 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

6575 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6576 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

6577 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

6578 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

6579 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

6580 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

6582 
	#glBödProgømARB
 
	`GLEW_GET_FUN
(
__gÀwBödProgømARB
)

	)

6583 
	#glDñëeProgømsARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgømsARB
)

	)

6584 
	#glDißbÀVîãxAâribAºayARB
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAâribAºayARB
)

	)

6585 
	#glE«bÀVîãxAâribAºayARB
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAâribAºayARB
)

	)

6586 
	#glGíProgømsARB
 
	`GLEW_GET_FUN
(
__gÀwGíProgømsARB
)

	)

6587 
	#glGëProgømEnvP¨amëîdvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømEnvP¨amëîdvARB
)

	)

6588 
	#glGëProgømEnvP¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømEnvP¨amëîfvARB
)

	)

6589 
	#glGëProgømLoˇlP¨amëîdvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømLoˇlP¨amëîdvARB
)

	)

6590 
	#glGëProgømLoˇlP¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømLoˇlP¨amëîfvARB
)

	)

6591 
	#glGëProgømSåögARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømSåögARB
)

	)

6592 
	#glGëProgømivARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømivARB
)

	)

6593 
	#glGëVîãxAâribPoöãrvARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribPoöãrvARB
)

	)

6594 
	#glGëVîãxAâribdvARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribdvARB
)

	)

6595 
	#glGëVîãxAâribfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribfvARB
)

	)

6596 
	#glGëVîãxAâribivARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribivARB
)

	)

6597 
	#glIsProgømARB
 
	`GLEW_GET_FUN
(
__gÀwIsProgømARB
)

	)

6598 
	#glProgømEnvP¨amëî4dARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4dARB
)

	)

6599 
	#glProgømEnvP¨amëî4dvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4dvARB
)

	)

6600 
	#glProgømEnvP¨amëî4fARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4fARB
)

	)

6601 
	#glProgømEnvP¨amëî4fvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4fvARB
)

	)

6602 
	#glProgømLoˇlP¨amëî4dARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4dARB
)

	)

6603 
	#glProgømLoˇlP¨amëî4dvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4dvARB
)

	)

6604 
	#glProgømLoˇlP¨amëî4fARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4fARB
)

	)

6605 
	#glProgømLoˇlP¨amëî4fvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4fvARB
)

	)

6606 
	#glProgømSåögARB
 
	`GLEW_GET_FUN
(
__gÀwProgømSåögARB
)

	)

6607 
	#glVîãxAârib1dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dARB
)

	)

6608 
	#glVîãxAârib1dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dvARB
)

	)

6609 
	#glVîãxAârib1fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fARB
)

	)

6610 
	#glVîãxAârib1fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fvARB
)

	)

6611 
	#glVîãxAârib1sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1sARB
)

	)

6612 
	#glVîãxAârib1svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1svARB
)

	)

6613 
	#glVîãxAârib2dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dARB
)

	)

6614 
	#glVîãxAârib2dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dvARB
)

	)

6615 
	#glVîãxAârib2fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fARB
)

	)

6616 
	#glVîãxAârib2fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fvARB
)

	)

6617 
	#glVîãxAârib2sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2sARB
)

	)

6618 
	#glVîãxAârib2svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2svARB
)

	)

6619 
	#glVîãxAârib3dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dARB
)

	)

6620 
	#glVîãxAârib3dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dvARB
)

	)

6621 
	#glVîãxAârib3fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fARB
)

	)

6622 
	#glVîãxAârib3fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fvARB
)

	)

6623 
	#glVîãxAârib3sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3sARB
)

	)

6624 
	#glVîãxAârib3svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3svARB
)

	)

6625 
	#glVîãxAârib4NbvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NbvARB
)

	)

6626 
	#glVîãxAârib4NivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NivARB
)

	)

6627 
	#glVîãxAârib4NsvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NsvARB
)

	)

6628 
	#glVîãxAârib4NubARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NubARB
)

	)

6629 
	#glVîãxAârib4NubvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NubvARB
)

	)

6630 
	#glVîãxAârib4NuivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NuivARB
)

	)

6631 
	#glVîãxAârib4NusvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NusvARB
)

	)

6632 
	#glVîãxAârib4bvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4bvARB
)

	)

6633 
	#glVîãxAârib4dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dARB
)

	)

6634 
	#glVîãxAârib4dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dvARB
)

	)

6635 
	#glVîãxAârib4fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fARB
)

	)

6636 
	#glVîãxAârib4fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fvARB
)

	)

6637 
	#glVîãxAârib4ivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ivARB
)

	)

6638 
	#glVîãxAârib4sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4sARB
)

	)

6639 
	#glVîãxAârib4svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4svARB
)

	)

6640 
	#glVîãxAârib4ubvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubvARB
)

	)

6641 
	#glVîãxAârib4uivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4uivARB
)

	)

6642 
	#glVîãxAârib4usvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4usvARB
)

	)

6643 
	#glVîãxAâribPoöãrARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribPoöãrARB
)

	)

6645 
	#GLEW_ARB_vîãx_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_¥ogøm
)

	)

6651 #i‚de‡
GL_ARB_vîãx_shadî


6652 
	#GL_ARB_vîãx_shadî
 1

	)

6654 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

6655 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

6656 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

6657 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

6658 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

6659 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

6660 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

6662 (
GLAPIENTRY
 * 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
* 
	t«me
);

6663 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

6664 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
* 
	t«me
);

6666 
	#glBödAâribLoˇti⁄ARB
 
	`GLEW_GET_FUN
(
__gÀwBödAâribLoˇti⁄ARB
)

	)

6667 
	#glGëA˘iveAâribARB
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveAâribARB
)

	)

6668 
	#glGëAâribLoˇti⁄ARB
 
	`GLEW_GET_FUN
(
__gÀwGëAâribLoˇti⁄ARB
)

	)

6670 
	#GLEW_ARB_vîãx_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_shadî
)

	)

6676 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


6677 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

6679 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

6680 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

6682 (
GLAPIENTRY
 * 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

6683 (
GLAPIENTRY
 * 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tcﬁ‹
);

6684 (
GLAPIENTRY
 * 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

6685 (
GLAPIENTRY
 * 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tcﬁ‹
);

6686 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6687 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6688 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6689 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6690 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6691 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6692 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6693 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6694 (
GLAPIENTRY
 * 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6695 (
GLAPIENTRY
 * 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6696 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

6697 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tcﬁ‹
);

6698 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6699 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6700 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6701 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6702 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6703 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6704 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

6705 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

6706 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

6707 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

6708 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

6709 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

6710 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

6711 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

6712 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

6713 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

6714 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

6715 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tvÆue
);

6716 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

6717 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tvÆue
);

6718 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

6719 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tvÆue
);

6721 
	#glCﬁ‹P3ui
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P3ui
)

	)

6722 
	#glCﬁ‹P3uiv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P3uiv
)

	)

6723 
	#glCﬁ‹P4ui
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P4ui
)

	)

6724 
	#glCﬁ‹P4uiv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P4uiv
)

	)

6725 
	#glMu…iTexCo‹dP1ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP1ui
)

	)

6726 
	#glMu…iTexCo‹dP1uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP1uiv
)

	)

6727 
	#glMu…iTexCo‹dP2ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP2ui
)

	)

6728 
	#glMu…iTexCo‹dP2uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP2uiv
)

	)

6729 
	#glMu…iTexCo‹dP3ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP3ui
)

	)

6730 
	#glMu…iTexCo‹dP3uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP3uiv
)

	)

6731 
	#glMu…iTexCo‹dP4ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP4ui
)

	)

6732 
	#glMu…iTexCo‹dP4uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP4uiv
)

	)

6733 
	#glN‹mÆP3ui
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆP3ui
)

	)

6734 
	#glN‹mÆP3uiv
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆP3uiv
)

	)

6735 
	#glSec⁄d¨yCﬁ‹P3ui
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹P3ui
)

	)

6736 
	#glSec⁄d¨yCﬁ‹P3uiv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹P3uiv
)

	)

6737 
	#glTexCo‹dP1ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP1ui
)

	)

6738 
	#glTexCo‹dP1uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP1uiv
)

	)

6739 
	#glTexCo‹dP2ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP2ui
)

	)

6740 
	#glTexCo‹dP2uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP2uiv
)

	)

6741 
	#glTexCo‹dP3ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP3ui
)

	)

6742 
	#glTexCo‹dP3uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP3uiv
)

	)

6743 
	#glTexCo‹dP4ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP4ui
)

	)

6744 
	#glTexCo‹dP4uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP4uiv
)

	)

6745 
	#glVîãxAâribP1ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP1ui
)

	)

6746 
	#glVîãxAâribP1uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP1uiv
)

	)

6747 
	#glVîãxAâribP2ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP2ui
)

	)

6748 
	#glVîãxAâribP2uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP2uiv
)

	)

6749 
	#glVîãxAâribP3ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP3ui
)

	)

6750 
	#glVîãxAâribP3uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP3uiv
)

	)

6751 
	#glVîãxAâribP4ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP4ui
)

	)

6752 
	#glVîãxAâribP4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP4uiv
)

	)

6753 
	#glVîãxP2ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxP2ui
)

	)

6754 
	#glVîãxP2uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxP2uiv
)

	)

6755 
	#glVîãxP3ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxP3ui
)

	)

6756 
	#glVîãxP3uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxP3uiv
)

	)

6757 
	#glVîãxP4ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxP4ui
)

	)

6758 
	#glVîãxP4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxP4uiv
)

	)

6760 
	#GLEW_ARB_vîãx_ty≥_2_10_10_10_ªv
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_ty≥_2_10_10_10_ªv
)

	)

6766 #i‚de‡
GL_ARB_võwp‹t_¨øy


6767 
	#GL_ARB_võwp‹t_¨øy
 1

	)

6769 
	#GL_DEPTH_RANGE
 0x0B70

	)

6770 
	#GL_VIEWPORT
 0x0BA2

	)

6771 
	#GL_SCISSOR_BOX
 0x0C10

	)

6772 
	#GL_SCISSOR_TEST
 0x0C11

	)

6773 
	#GL_MAX_VIEWPORTS
 0x825B

	)

6774 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

6775 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

6776 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

6777 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

6778 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

6779 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

6780 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

6781 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

6783 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGL˛ampd
 * 
	tv
);

6784 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGL˛ampd
 
	tn
, GL˛ampd 
	tf
);

6785 (
GLAPIENTRY
 * 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	td©a
);

6786 (
GLAPIENTRY
 * 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	td©a
);

6787 (
GLAPIENTRY
 * 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 * 
	tv
);

6788 (
GLAPIENTRY
 * 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6789 (
GLAPIENTRY
 * 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 * 
	tv
);

6790 (
GLAPIENTRY
 * 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 * 
	tv
);

6791 (
GLAPIENTRY
 * 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

6792 (
GLAPIENTRY
 * 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 * 
	tv
);

6794 
	#glDïthR™geAºayv
 
	`GLEW_GET_FUN
(
__gÀwDïthR™geAºayv
)

	)

6795 
	#glDïthR™geIndexed
 
	`GLEW_GET_FUN
(
__gÀwDïthR™geIndexed
)

	)

6796 
	#glGëDoubÀi_v
 
	`GLEW_GET_FUN
(
__gÀwGëDoubÀi_v
)

	)

6797 
	#glGëFlﬂti_v
 
	`GLEW_GET_FUN
(
__gÀwGëFlﬂti_v
)

	)

6798 
	#glSciss‹Aºayv
 
	`GLEW_GET_FUN
(
__gÀwSciss‹Aºayv
)

	)

6799 
	#glSciss‹Indexed
 
	`GLEW_GET_FUN
(
__gÀwSciss‹Indexed
)

	)

6800 
	#glSciss‹Indexedv
 
	`GLEW_GET_FUN
(
__gÀwSciss‹Indexedv
)

	)

6801 
	#glVõwp‹tAºayv
 
	`GLEW_GET_FUN
(
__gÀwVõwp‹tAºayv
)

	)

6802 
	#glVõwp‹tIndexedf
 
	`GLEW_GET_FUN
(
__gÀwVõwp‹tIndexedf
)

	)

6803 
	#glVõwp‹tIndexedfv
 
	`GLEW_GET_FUN
(
__gÀwVõwp‹tIndexedfv
)

	)

6805 
	#GLEW_ARB_võwp‹t_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_võwp‹t_¨øy
)

	)

6811 #i‚de‡
GL_ARB_wödow_pos


6812 
	#GL_ARB_wödow_pos
 1

	)

6814 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6815 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

6816 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6817 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

6818 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

6819 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

6820 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6821 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

6822 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6823 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

6824 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6825 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

6826 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6827 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

6828 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6829 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

6831 
	#glWödowPos2dARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dARB
)

	)

6832 
	#glWödowPos2dvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dvARB
)

	)

6833 
	#glWödowPos2fARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fARB
)

	)

6834 
	#glWödowPos2fvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fvARB
)

	)

6835 
	#glWödowPos2iARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2iARB
)

	)

6836 
	#glWödowPos2ivARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2ivARB
)

	)

6837 
	#glWödowPos2sARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2sARB
)

	)

6838 
	#glWödowPos2svARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2svARB
)

	)

6839 
	#glWödowPos3dARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dARB
)

	)

6840 
	#glWödowPos3dvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dvARB
)

	)

6841 
	#glWödowPos3fARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fARB
)

	)

6842 
	#glWödowPos3fvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fvARB
)

	)

6843 
	#glWödowPos3iARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3iARB
)

	)

6844 
	#glWödowPos3ivARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3ivARB
)

	)

6845 
	#glWödowPos3sARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3sARB
)

	)

6846 
	#glWödowPos3svARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3svARB
)

	)

6848 
	#GLEW_ARB_wödow_pos
 
	`GLEW_GET_VAR
(
__GLEW_ARB_wödow_pos
)

	)

6854 #i‚de‡
GL_ATIX_poöt_•rôes


6855 
	#GL_ATIX_poöt_•rôes
 1

	)

6857 
	#GL_TEXTURE_POINT_MODE_ATIX
 0x60B0

	)

6858 
	#GL_TEXTURE_POINT_ONE_COORD_ATIX
 0x60B1

	)

6859 
	#GL_TEXTURE_POINT_SPRITE_ATIX
 0x60B2

	)

6860 
	#GL_POINT_SPRITE_CULL_MODE_ATIX
 0x60B3

	)

6861 
	#GL_POINT_SPRITE_CULL_CENTER_ATIX
 0x60B4

	)

6862 
	#GL_POINT_SPRITE_CULL_CLIP_ATIX
 0x60B5

	)

6864 
	#GLEW_ATIX_poöt_•rôes
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_poöt_•rôes
)

	)

6870 #i‚de‡
GL_ATIX_ãxtuª_ív_comböe3


6871 
	#GL_ATIX_ãxtuª_ív_comböe3
 1

	)

6873 
	#GL_MODULATE_ADD_ATIX
 0x8744

	)

6874 
	#GL_MODULATE_SIGNED_ADD_ATIX
 0x8745

	)

6875 
	#GL_MODULATE_SUBTRACT_ATIX
 0x8746

	)

6877 
	#GLEW_ATIX_ãxtuª_ív_comböe3
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_ãxtuª_ív_comböe3
)

	)

6883 #i‚de‡
GL_ATIX_ãxtuª_ív_rouã


6884 
	#GL_ATIX_ãxtuª_ív_rouã
 1

	)

6886 
	#GL_SECONDARY_COLOR_ATIX
 0x8747

	)

6887 
	#GL_TEXTURE_OUTPUT_RGB_ATIX
 0x8748

	)

6888 
	#GL_TEXTURE_OUTPUT_ALPHA_ATIX
 0x8749

	)

6890 
	#GLEW_ATIX_ãxtuª_ív_rouã
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_ãxtuª_ív_rouã
)

	)

6896 #i‚de‡
GL_ATIX_vîãx_shadî_ouçut_poöt_size


6897 
	#GL_ATIX_vîãx_shadî_ouçut_poöt_size
 1

	)

6899 
	#GL_OUTPUT_POINT_SIZE_ATIX
 0x610E

	)

6901 
	#GLEW_ATIX_vîãx_shadî_ouçut_poöt_size
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_vîãx_shadî_ouçut_poöt_size
)

	)

6907 #i‚de‡
GL_ATI_døw_buf„rs


6908 
	#GL_ATI_døw_buf„rs
 1

	)

6910 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

6911 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

6912 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

6913 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

6914 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

6915 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

6916 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

6917 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

6918 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

6919 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

6920 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

6921 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

6922 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

6923 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

6924 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

6925 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

6926 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

6928 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

6930 
	#glDøwBuf„rsATI
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rsATI
)

	)

6932 
	#GLEW_ATI_døw_buf„rs
 
	`GLEW_GET_VAR
(
__GLEW_ATI_døw_buf„rs
)

	)

6938 #i‚de‡
GL_ATI_ñemít_¨øy


6939 
	#GL_ATI_ñemít_¨øy
 1

	)

6941 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

6942 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

6943 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

6945 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

6946 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

6947 (
GLAPIENTRY
 * 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° * 
	tpoöãr
);

6949 
	#glDøwEÀmítAºayATI
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítAºayATI
)

	)

6950 
	#glDøwR™geEÀmítAºayATI
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítAºayATI
)

	)

6951 
	#glEÀmítPoöãrATI
 
	`GLEW_GET_FUN
(
__gÀwEÀmítPoöãrATI
)

	)

6953 
	#GLEW_ATI_ñemít_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ñemít_¨øy
)

	)

6959 #i‚de‡
GL_ATI_ívm≠_bumpm≠


6960 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

6962 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

6963 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

6964 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

6965 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

6966 
	#GL_DUDV_ATI
 0x8779

	)

6967 
	#GL_DU8DV8_ATI
 0x877A

	)

6968 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

6969 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

6971 (
GLAPIENTRY
 * 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

6972 (
GLAPIENTRY
 * 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6973 (
GLAPIENTRY
 * 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

6974 (
GLAPIENTRY
 * 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6976 
	#glGëTexBumpP¨amëîfvATI
 
	`GLEW_GET_FUN
(
__gÀwGëTexBumpP¨amëîfvATI
)

	)

6977 
	#glGëTexBumpP¨amëîivATI
 
	`GLEW_GET_FUN
(
__gÀwGëTexBumpP¨amëîivATI
)

	)

6978 
	#glTexBumpP¨amëîfvATI
 
	`GLEW_GET_FUN
(
__gÀwTexBumpP¨amëîfvATI
)

	)

6979 
	#glTexBumpP¨amëîivATI
 
	`GLEW_GET_FUN
(
__gÀwTexBumpP¨amëîivATI
)

	)

6981 
	#GLEW_ATI_ívm≠_bumpm≠
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ívm≠_bumpm≠
)

	)

6987 #i‚de‡
GL_ATI_‰agmít_shadî


6988 
	#GL_ATI_‰agmít_shadî
 1

	)

6990 
	#GL_RED_BIT_ATI
 0x00000001

	)

6991 
	#GL_2X_BIT_ATI
 0x00000001

	)

6992 
	#GL_4X_BIT_ATI
 0x00000002

	)

6993 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

6994 
	#GL_COMP_BIT_ATI
 0x00000002

	)

6995 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

6996 
	#GL_8X_BIT_ATI
 0x00000004

	)

6997 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

6998 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

6999 
	#GL_HALF_BIT_ATI
 0x00000008

	)

7000 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

7001 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

7002 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

7003 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

7004 
	#GL_REG_0_ATI
 0x8921

	)

7005 
	#GL_REG_1_ATI
 0x8922

	)

7006 
	#GL_REG_2_ATI
 0x8923

	)

7007 
	#GL_REG_3_ATI
 0x8924

	)

7008 
	#GL_REG_4_ATI
 0x8925

	)

7009 
	#GL_REG_5_ATI
 0x8926

	)

7010 
	#GL_CON_0_ATI
 0x8941

	)

7011 
	#GL_CON_1_ATI
 0x8942

	)

7012 
	#GL_CON_2_ATI
 0x8943

	)

7013 
	#GL_CON_3_ATI
 0x8944

	)

7014 
	#GL_CON_4_ATI
 0x8945

	)

7015 
	#GL_CON_5_ATI
 0x8946

	)

7016 
	#GL_CON_6_ATI
 0x8947

	)

7017 
	#GL_CON_7_ATI
 0x8948

	)

7018 
	#GL_MOV_ATI
 0x8961

	)

7019 
	#GL_ADD_ATI
 0x8963

	)

7020 
	#GL_MUL_ATI
 0x8964

	)

7021 
	#GL_SUB_ATI
 0x8965

	)

7022 
	#GL_DOT3_ATI
 0x8966

	)

7023 
	#GL_DOT4_ATI
 0x8967

	)

7024 
	#GL_MAD_ATI
 0x8968

	)

7025 
	#GL_LERP_ATI
 0x8969

	)

7026 
	#GL_CND_ATI
 0x896A

	)

7027 
	#GL_CND0_ATI
 0x896B

	)

7028 
	#GL_DOT2_ADD_ATI
 0x896C

	)

7029 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

7030 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

7031 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

7032 
	#GL_NUM_PASSES_ATI
 0x8970

	)

7033 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

7034 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

7035 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

7036 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

7037 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

7038 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

7039 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

7040 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

7041 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

7042 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

7043 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

7045 (
GLAPIENTRY
 * 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

7046 (
GLAPIENTRY
 * 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

7047 (
GLAPIENTRY
 * 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

7048 (
GLAPIENTRY
 * 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

7049 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

7050 (
GLAPIENTRY
 * 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

7051 (
GLAPIENTRY
 * 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

7052 (
GLAPIENTRY
 * 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

7053 (
GLAPIENTRY
 * 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

7054 (
GLAPIENTRY
 * 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

7055 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

7056 (
GLAPIENTRY
 * 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

7057 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

7058 (
GLAPIENTRY
 * 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7060 
	#glAÕhaFøgmítOp1ATI
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFøgmítOp1ATI
)

	)

7061 
	#glAÕhaFøgmítOp2ATI
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFøgmítOp2ATI
)

	)

7062 
	#glAÕhaFøgmítOp3ATI
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFøgmítOp3ATI
)

	)

7063 
	#glBegöFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwBegöFøgmítShadîATI
)

	)

7064 
	#glBödFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwBödFøgmítShadîATI
)

	)

7065 
	#glCﬁ‹FøgmítOp1ATI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹FøgmítOp1ATI
)

	)

7066 
	#glCﬁ‹FøgmítOp2ATI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹FøgmítOp2ATI
)

	)

7067 
	#glCﬁ‹FøgmítOp3ATI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹FøgmítOp3ATI
)

	)

7068 
	#glDñëeFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwDñëeFøgmítShadîATI
)

	)

7069 
	#glEndFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwEndFøgmítShadîATI
)

	)

7070 
	#glGíFøgmítShadîsATI
 
	`GLEW_GET_FUN
(
__gÀwGíFøgmítShadîsATI
)

	)

7071 
	#glPassTexCo‹dATI
 
	`GLEW_GET_FUN
(
__gÀwPassTexCo‹dATI
)

	)

7072 
	#glSam∂eM≠ATI
 
	`GLEW_GET_FUN
(
__gÀwSam∂eM≠ATI
)

	)

7073 
	#glSëFøgmítShadîC⁄°™tATI
 
	`GLEW_GET_FUN
(
__gÀwSëFøgmítShadîC⁄°™tATI
)

	)

7075 
	#GLEW_ATI_‰agmít_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ATI_‰agmít_shadî
)

	)

7081 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


7082 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

7084 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7085 (
GLAPIENTRY
 * 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7087 
	#glM≠Obje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwM≠Obje˘Buf„rATI
)

	)

7088 
	#glUnm≠Obje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Obje˘Buf„rATI
)

	)

7090 
	#GLEW_ATI_m≠_obje˘_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_ATI_m≠_obje˘_buf„r
)

	)

7096 #i‚de‡
GL_ATI_memöfo


7097 
	#GL_ATI_memöfo
 1

	)

7099 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

7100 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

7101 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

7103 
	#GLEW_ATI_memöfo
 
	`GLEW_GET_VAR
(
__GLEW_ATI_memöfo
)

	)

7109 #i‚de‡
GL_ATI_≤_åüngÀs


7110 
	#GL_ATI_≤_åüngÀs
 1

	)

7112 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

7113 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

7114 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

7115 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

7116 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

7117 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

7118 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

7119 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

7120 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

7122 (
GLAPIENTRY
 * 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7123 (
GLAPIENTRY
 * 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7125 
	#glPNTrüngÀsfATI
 
	`GLEW_GET_FUN
(
__gÀwPNTrüngÀsfATI
)

	)

7126 
	#glPNTrüngÀsiATI
 
	`GLEW_GET_FUN
(
__gÀwPNTrüngÀsiATI
)

	)

7128 
	#GLEW_ATI_≤_åüngÀs
 
	`GLEW_GET_VAR
(
__GLEW_ATI_≤_åüngÀs
)

	)

7134 #i‚de‡
GL_ATI_£∑øã_°ícû


7135 
	#GL_ATI_£∑øã_°ícû
 1

	)

7137 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

7138 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

7139 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

7140 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

7142 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

7143 (
GLAPIENTRY
 * 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

7145 
	#glSãncûFuncSï¨©eATI
 
	`GLEW_GET_FUN
(
__gÀwSãncûFuncSï¨©eATI
)

	)

7146 
	#glSãncûOpSï¨©eATI
 
	`GLEW_GET_FUN
(
__gÀwSãncûOpSï¨©eATI
)

	)

7148 
	#GLEW_ATI_£∑øã_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_ATI_£∑øã_°ícû
)

	)

7154 #i‚de‡
GL_ATI_shadî_ãxtuª_lod


7155 
	#GL_ATI_shadî_ãxtuª_lod
 1

	)

7157 
	#GLEW_ATI_shadî_ãxtuª_lod
 
	`GLEW_GET_VAR
(
__GLEW_ATI_shadî_ãxtuª_lod
)

	)

7163 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


7164 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

7166 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

7168 
	#GLEW_ATI_ãxt_‰agmít_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxt_‰agmít_shadî
)

	)

7174 #i‚de‡
GL_ATI_ãxtuª_com¥essi⁄_3dc


7175 
	#GL_ATI_ãxtuª_com¥essi⁄_3dc
 1

	)

7177 
	#GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI
 0x8837

	)

7179 
	#GLEW_ATI_ãxtuª_com¥essi⁄_3dc
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_com¥essi⁄_3dc
)

	)

7185 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


7186 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

7188 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

7189 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

7190 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

7192 
	#GLEW_ATI_ãxtuª_ív_comböe3
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_ív_comböe3
)

	)

7198 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


7199 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

7201 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

7202 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

7203 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

7204 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

7205 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

7206 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

7207 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

7208 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

7209 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

7210 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

7211 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

7212 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

7214 
	#GLEW_ATI_ãxtuª_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_Êﬂt
)

	)

7220 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


7221 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

7223 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

7224 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

7226 
	#GLEW_ATI_ãxtuª_múr‹_⁄˚
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_múr‹_⁄˚
)

	)

7232 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


7233 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

7235 
	#GL_STATIC_ATI
 0x8760

	)

7236 
	#GL_DYNAMIC_ATI
 0x8761

	)

7237 
	#GL_PRESERVE_ATI
 0x8762

	)

7238 
	#GL_DISCARD_ATI
 0x8763

	)

7239 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

7240 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

7241 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

7242 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

7244 (
GLAPIENTRY
 * 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

7245 (
GLAPIENTRY
 * 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7246 (
GLAPIENTRY
 * 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7247 (
GLAPIENTRY
 * 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7248 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7249 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7250 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7251 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7252 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7253 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° * 
	tpoöãr
, 
	tGLíum
 
	tußge
);

7254 (
GLAPIENTRY
 * 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° * 
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

7255 (
GLAPIENTRY
 * 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

7257 
	#glAºayObje˘ATI
 
	`GLEW_GET_FUN
(
__gÀwAºayObje˘ATI
)

	)

7258 
	#glFªeObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwFªeObje˘Buf„rATI
)

	)

7259 
	#glGëAºayObje˘fvATI
 
	`GLEW_GET_FUN
(
__gÀwGëAºayObje˘fvATI
)

	)

7260 
	#glGëAºayObje˘ivATI
 
	`GLEW_GET_FUN
(
__gÀwGëAºayObje˘ivATI
)

	)

7261 
	#glGëObje˘Buf„rfvATI
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘Buf„rfvATI
)

	)

7262 
	#glGëObje˘Buf„rivATI
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘Buf„rivATI
)

	)

7263 
	#glGëV¨ü¡AºayObje˘fvATI
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡AºayObje˘fvATI
)

	)

7264 
	#glGëV¨ü¡AºayObje˘ivATI
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡AºayObje˘ivATI
)

	)

7265 
	#glIsObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwIsObje˘Buf„rATI
)

	)

7266 
	#glNewObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwNewObje˘Buf„rATI
)

	)

7267 
	#glUpd©eObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwUpd©eObje˘Buf„rATI
)

	)

7268 
	#glV¨ü¡AºayObje˘ATI
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡AºayObje˘ATI
)

	)

7270 
	#GLEW_ATI_vîãx_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ATI_vîãx_¨øy_obje˘
)

	)

7276 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


7277 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

7279 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7280 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7281 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

7283 
	#glGëVîãxAâribAºayObje˘fvATI
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribAºayObje˘fvATI
)

	)

7284 
	#glGëVîãxAâribAºayObje˘ivATI
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribAºayObje˘ivATI
)

	)

7285 
	#glVîãxAâribAºayObje˘ATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribAºayObje˘ATI
)

	)

7287 
	#GLEW_ATI_vîãx_©åib_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ATI_vîãx_©åib_¨øy_obje˘
)

	)

7293 #i‚de‡
GL_ATI_vîãx_°ªams


7294 
	#GL_ATI_vîãx_°ªams
 1

	)

7296 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

7297 
	#GL_VERTEX_SOURCE_ATI
 0x876C

	)

7298 
	#GL_VERTEX_STREAM0_ATI
 0x876D

	)

7299 
	#GL_VERTEX_STREAM1_ATI
 0x876E

	)

7300 
	#GL_VERTEX_STREAM2_ATI
 0x876F

	)

7301 
	#GL_VERTEX_STREAM3_ATI
 0x8770

	)

7302 
	#GL_VERTEX_STREAM4_ATI
 0x8771

	)

7303 
	#GL_VERTEX_STREAM5_ATI
 0x8772

	)

7304 
	#GL_VERTEX_STREAM6_ATI
 0x8773

	)

7305 
	#GL_VERTEX_STREAM7_ATI
 0x8774

	)

7307 (
GLAPIENTRY
 * 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

7308 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

7309 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

7310 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7311 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7312 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7313 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7314 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7315 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7316 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7317 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7318 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7319 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7320 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

7321 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7322 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

7323 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7324 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

7325 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7326 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

7327 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7328 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7329 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7330 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7331 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7332 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

7333 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7334 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7335 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7336 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7337 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7338 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7339 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7340 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7341 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7342 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7343 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7344 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7345 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7346 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7347 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7348 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7349 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7350 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7351 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7353 
	#glClõ¡A˘iveVîãxSåómATI
 
	`GLEW_GET_FUN
(
__gÀwClõ¡A˘iveVîãxSåómATI
)

	)

7354 
	#glN‹mÆSåóm3bATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3bATI
)

	)

7355 
	#glN‹mÆSåóm3bvATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3bvATI
)

	)

7356 
	#glN‹mÆSåóm3dATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3dATI
)

	)

7357 
	#glN‹mÆSåóm3dvATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3dvATI
)

	)

7358 
	#glN‹mÆSåóm3fATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3fATI
)

	)

7359 
	#glN‹mÆSåóm3fvATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3fvATI
)

	)

7360 
	#glN‹mÆSåóm3iATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3iATI
)

	)

7361 
	#glN‹mÆSåóm3ivATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3ivATI
)

	)

7362 
	#glN‹mÆSåóm3sATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3sATI
)

	)

7363 
	#glN‹mÆSåóm3svATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3svATI
)

	)

7364 
	#glVîãxBÀndEnvfATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxBÀndEnvfATI
)

	)

7365 
	#glVîãxBÀndEnviATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxBÀndEnviATI
)

	)

7366 
	#glVîãxSåóm1dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1dATI
)

	)

7367 
	#glVîãxSåóm1dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1dvATI
)

	)

7368 
	#glVîãxSåóm1fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1fATI
)

	)

7369 
	#glVîãxSåóm1fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1fvATI
)

	)

7370 
	#glVîãxSåóm1iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1iATI
)

	)

7371 
	#glVîãxSåóm1ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1ivATI
)

	)

7372 
	#glVîãxSåóm1sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1sATI
)

	)

7373 
	#glVîãxSåóm1svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1svATI
)

	)

7374 
	#glVîãxSåóm2dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2dATI
)

	)

7375 
	#glVîãxSåóm2dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2dvATI
)

	)

7376 
	#glVîãxSåóm2fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2fATI
)

	)

7377 
	#glVîãxSåóm2fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2fvATI
)

	)

7378 
	#glVîãxSåóm2iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2iATI
)

	)

7379 
	#glVîãxSåóm2ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2ivATI
)

	)

7380 
	#glVîãxSåóm2sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2sATI
)

	)

7381 
	#glVîãxSåóm2svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2svATI
)

	)

7382 
	#glVîãxSåóm3dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3dATI
)

	)

7383 
	#glVîãxSåóm3dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3dvATI
)

	)

7384 
	#glVîãxSåóm3fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3fATI
)

	)

7385 
	#glVîãxSåóm3fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3fvATI
)

	)

7386 
	#glVîãxSåóm3iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3iATI
)

	)

7387 
	#glVîãxSåóm3ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3ivATI
)

	)

7388 
	#glVîãxSåóm3sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3sATI
)

	)

7389 
	#glVîãxSåóm3svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3svATI
)

	)

7390 
	#glVîãxSåóm4dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4dATI
)

	)

7391 
	#glVîãxSåóm4dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4dvATI
)

	)

7392 
	#glVîãxSåóm4fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4fATI
)

	)

7393 
	#glVîãxSåóm4fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4fvATI
)

	)

7394 
	#glVîãxSåóm4iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4iATI
)

	)

7395 
	#glVîãxSåóm4ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4ivATI
)

	)

7396 
	#glVîãxSåóm4sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4sATI
)

	)

7397 
	#glVîãxSåóm4svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4svATI
)

	)

7399 
	#GLEW_ATI_vîãx_°ªams
 
	`GLEW_GET_VAR
(
__GLEW_ATI_vîãx_°ªams
)

	)

7405 #i‚de‡
GL_EXT_422_pixñs


7406 
	#GL_EXT_422_pixñs
 1

	)

7408 
	#GL_422_EXT
 0x80CC

	)

7409 
	#GL_422_REV_EXT
 0x80CD

	)

7410 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

7411 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

7413 
	#GLEW_EXT_422_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_422_pixñs
)

	)

7419 #i‚de‡
GL_EXT_Cg_shadî


7420 
	#GL_EXT_Cg_shadî
 1

	)

7422 
	#GL_CG_VERTEX_SHADER_EXT
 0x890E

	)

7423 
	#GL_CG_FRAGMENT_SHADER_EXT
 0x890F

	)

7425 
	#GLEW_EXT_Cg_shadî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_Cg_shadî
)

	)

7431 #i‚de‡
GL_EXT_abgr


7432 
	#GL_EXT_abgr
 1

	)

7434 
	#GL_ABGR_EXT
 0x8000

	)

7436 
	#GLEW_EXT_abgr
 
	`GLEW_GET_VAR
(
__GLEW_EXT_abgr
)

	)

7442 #i‚de‡
GL_EXT_bgø


7443 
	#GL_EXT_bgø
 1

	)

7445 
	#GL_BGR_EXT
 0x80E0

	)

7446 
	#GL_BGRA_EXT
 0x80E1

	)

7448 
	#GLEW_EXT_bgø
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bgø
)

	)

7454 #i‚de‡
GL_EXT_bödabÀ_unif‹m


7455 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

7457 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

7458 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

7459 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

7460 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

7461 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

7462 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

7464 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

7465 
GLöçå
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

7466 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

7468 
	#glGëUnif‹mBuf„rSizeEXT
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mBuf„rSizeEXT
)

	)

7469 
	#glGëUnif‹mOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mOff£tEXT
)

	)

7470 
	#glUnif‹mBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mBuf„rEXT
)

	)

7472 
	#GLEW_EXT_bödabÀ_unif‹m
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bödabÀ_unif‹m
)

	)

7478 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


7479 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

7481 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

7482 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

7483 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

7484 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

7485 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

7487 (
GLAPIENTRY
 * 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

7489 
	#glBÀndCﬁ‹EXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndCﬁ‹EXT
)

	)

7491 
	#GLEW_EXT_bÀnd_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_cﬁ‹
)

	)

7497 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


7498 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

7500 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

7501 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

7503 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

7505 
	#glBÀndEqu©i⁄Sï¨©eEXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©eEXT
)

	)

7507 
	#GLEW_EXT_bÀnd_equ©i⁄_£∑øã
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_equ©i⁄_£∑øã
)

	)

7513 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


7514 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

7516 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

7517 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

7518 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

7519 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

7521 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

7523 
	#glBÀndFuncSï¨©eEXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©eEXT
)

	)

7525 
	#GLEW_EXT_bÀnd_func_£∑øã
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_func_£∑øã
)

	)

7531 #i‚de‡
GL_EXT_bÀnd_logic_›


7532 
	#GL_EXT_bÀnd_logic_›
 1

	)

7534 
	#GLEW_EXT_bÀnd_logic_›
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_logic_›
)

	)

7540 #i‚de‡
GL_EXT_bÀnd_mömax


7541 
	#GL_EXT_bÀnd_mömax
 1

	)

7543 
	#GL_FUNC_ADD_EXT
 0x8006

	)

7544 
	#GL_MIN_EXT
 0x8007

	)

7545 
	#GL_MAX_EXT
 0x8008

	)

7546 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

7548 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

7550 
	#glBÀndEqu©i⁄EXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄EXT
)

	)

7552 
	#GLEW_EXT_bÀnd_mömax
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_mömax
)

	)

7558 #i‚de‡
GL_EXT_bÀnd_subåa˘


7559 
	#GL_EXT_bÀnd_subåa˘
 1

	)

7561 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

7562 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

7564 
	#GLEW_EXT_bÀnd_subåa˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_subåa˘
)

	)

7570 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


7571 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

7573 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

7575 
	#GLEW_EXT_˛ù_vﬁume_höt
 
	`GLEW_GET_VAR
(
__GLEW_EXT_˛ù_vﬁume_höt
)

	)

7581 #i‚de‡
GL_EXT_cmyka


7582 
	#GL_EXT_cmyka
 1

	)

7584 
	#GL_CMYK_EXT
 0x800C

	)

7585 
	#GL_CMYKA_EXT
 0x800D

	)

7586 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

7587 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

7589 
	#GLEW_EXT_cmyka
 
	`GLEW_GET_VAR
(
__GLEW_EXT_cmyka
)

	)

7595 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


7596 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

7598 (
GLAPIENTRY
 * 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	td©a
);

7599 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

7601 
	#glCﬁ‹SubTabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹SubTabÀEXT
)

	)

7602 
	#glC›yCﬁ‹SubTabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹SubTabÀEXT
)

	)

7604 
	#GLEW_EXT_cﬁ‹_subèbÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_cﬁ‹_subèbÀ
)

	)

7610 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


7611 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

7613 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

7614 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

7616 (
GLAPIENTRY
 * 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

7617 (
GLAPIENTRY
 * 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

7619 
	#glLockAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwLockAºaysEXT
)

	)

7620 
	#glU∆ockAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwU∆ockAºaysEXT
)

	)

7622 
	#GLEW_EXT_compûed_vîãx_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_compûed_vîãx_¨øy
)

	)

7628 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


7629 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

7631 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

7632 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

7633 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

7634 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

7635 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

7636 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

7637 
	#GL_REDUCE_EXT
 0x8016

	)

7638 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

7639 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

7640 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

7641 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

7642 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

7643 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

7644 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

7645 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

7646 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

7647 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

7648 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

7649 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

7650 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

7652 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	timage
);

7653 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	timage
);

7654 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7655 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7656 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7657 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

7658 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

7659 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7660 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	timage
);

7661 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7662 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7663 (
GLAPIENTRY
 * 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	trow
, * 
	tcﬁumn
, * 
	t•™
);

7664 (
GLAPIENTRY
 * 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	trow
, c⁄° * 
	tcﬁumn
);

7666 
	#glC⁄vﬁuti⁄Fûãr1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr1DEXT
)

	)

7667 
	#glC⁄vﬁuti⁄Fûãr2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr2DEXT
)

	)

7668 
	#glC⁄vﬁuti⁄P¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîfEXT
)

	)

7669 
	#glC⁄vﬁuti⁄P¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîfvEXT
)

	)

7670 
	#glC⁄vﬁuti⁄P¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîiEXT
)

	)

7671 
	#glC⁄vﬁuti⁄P¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîivEXT
)

	)

7672 
	#glC›yC⁄vﬁuti⁄Fûãr1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr1DEXT
)

	)

7673 
	#glC›yC⁄vﬁuti⁄Fûãr2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr2DEXT
)

	)

7674 
	#glGëC⁄vﬁuti⁄FûãrEXT
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄FûãrEXT
)

	)

7675 
	#glGëC⁄vﬁuti⁄P¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîfvEXT
)

	)

7676 
	#glGëC⁄vﬁuti⁄P¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîivEXT
)

	)

7677 
	#glGëSï¨abÀFûãrEXT
 
	`GLEW_GET_FUN
(
__gÀwGëSï¨abÀFûãrEXT
)

	)

7678 
	#glSï¨abÀFûãr2DEXT
 
	`GLEW_GET_FUN
(
__gÀwSï¨abÀFûãr2DEXT
)

	)

7680 
	#GLEW_EXT_c⁄vﬁuti⁄
 
	`GLEW_GET_VAR
(
__GLEW_EXT_c⁄vﬁuti⁄
)

	)

7686 #i‚de‡
GL_EXT_co‹dö©e_‰ame


7687 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

7689 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

7690 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

7691 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

7692 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

7693 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

7694 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

7695 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

7696 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

7697 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

7698 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

7699 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

7700 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

7701 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

7702 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

7704 (
GLAPIENTRY
 * 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, * 
	tpoöãr
);

7705 (
GLAPIENTRY
 * 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, * 
	tpoöãr
);

7707 
	#glBö‹mÆPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwBö‹mÆPoöãrEXT
)

	)

7708 
	#glT™gítPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwT™gítPoöãrEXT
)

	)

7710 
	#GLEW_EXT_co‹dö©e_‰ame
 
	`GLEW_GET_VAR
(
__GLEW_EXT_co‹dö©e_‰ame
)

	)

7716 #i‚de‡
GL_EXT_c›y_ãxtuª


7717 
	#GL_EXT_c›y_ãxtuª
 1

	)

7719 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

7720 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

7721 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

7722 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7723 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7725 
	#glC›yTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexImage1DEXT
)

	)

7726 
	#glC›yTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexImage2DEXT
)

	)

7727 
	#glC›yTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage1DEXT
)

	)

7728 
	#glC›yTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage2DEXT
)

	)

7729 
	#glC›yTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage3DEXT
)

	)

7731 
	#GLEW_EXT_c›y_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_c›y_ãxtuª
)

	)

7737 #i‚de‡
GL_EXT_cuŒ_vîãx


7738 
	#GL_EXT_cuŒ_vîãx
 1

	)

7740 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

7741 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

7742 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

7744 (
GLAPIENTRY
 * 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

7745 (
GLAPIENTRY
 * 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7747 
	#glCuŒP¨amëîdvEXT
 
	`GLEW_GET_FUN
(
__gÀwCuŒP¨amëîdvEXT
)

	)

7748 
	#glCuŒP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwCuŒP¨amëîfvEXT
)

	)

7750 
	#GLEW_EXT_cuŒ_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_EXT_cuŒ_vîãx
)

	)

7756 #i‚de‡
GL_EXT_debug_m¨kî


7757 
	#GL_EXT_debug_m¨kî
 1

	)

7759 (
GLAPIENTRY
 * 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tm¨kî
);

7760 (
GLAPIENTRY
 * 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

7761 (
GLAPIENTRY
 * 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tm¨kî
);

7763 
	#glIn£πEvítM¨kîEXT
 
	`GLEW_GET_FUN
(
__gÀwIn£πEvítM¨kîEXT
)

	)

7764 
	#glP›GroupM¨kîEXT
 
	`GLEW_GET_FUN
(
__gÀwP›GroupM¨kîEXT
)

	)

7765 
	#glPushGroupM¨kîEXT
 
	`GLEW_GET_FUN
(
__gÀwPushGroupM¨kîEXT
)

	)

7767 
	#GLEW_EXT_debug_m¨kî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_debug_m¨kî
)

	)

7773 #i‚de‡
GL_EXT_dïth_bounds_ã°


7774 
	#GL_EXT_dïth_bounds_ã°
 1

	)

7776 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

7777 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

7779 (
GLAPIENTRY
 * 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

7781 
	#glDïthBoundsEXT
 
	`GLEW_GET_FUN
(
__gÀwDïthBoundsEXT
)

	)

7783 
	#GLEW_EXT_dïth_bounds_ã°
 
	`GLEW_GET_VAR
(
__GLEW_EXT_dïth_bounds_ã°
)

	)

7789 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


7790 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

7792 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

7793 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

7794 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

7796 (
GLAPIENTRY
 * 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

7797 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

7798 (
GLAPIENTRY
 * 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

7799 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7800 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7801 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7802 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7803 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7804 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7805 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7806 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7807 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7808 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7809 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7810 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° * 
	td©a
);

7811 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

7812 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

7813 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

7814 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7815 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7816 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

7817 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

7818 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

7819 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7820 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7821 (
GLAPIENTRY
 * 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

7822 (
GLAPIENTRY
 * 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

7823 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

7824 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

7825 (
GLAPIENTRY
 * 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

7826 (
GLAPIENTRY
 * 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

7827 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

7828 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

7829 (
GLAPIENTRY
 * 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

7830 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

7831 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

7832 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

7833 (
GLAPIENTRY
 * 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

7834 (
GLAPIENTRY
 * 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

7835 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, * 
	timg
);

7836 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, * 
	timg
);

7837 (
GLAPIENTRY
 * 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

7838 (
GLAPIENTRY
 * 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

7839 (
GLAPIENTRY
 * 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

7840 (
GLAPIENTRY
 * 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

7841 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

7842 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7843 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7844 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

7845 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7846 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7847 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	tpixñs
);

7848 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7849 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöt* 
	t∑øms
);

7850 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7851 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
* 
	t∑øms
);

7852 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7853 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7854 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7855 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, ** 
	t∑øms
);

7856 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, * 
	td©a
);

7857 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7858 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
* 
	t∑øms
);

7859 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöt* 
	t∑øms
);

7860 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

7861 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

7862 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, * 
	t°rög
);

7863 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7864 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7865 (
GLAPIENTRY
 * 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
** 
	t∑øms
);

7866 (
GLAPIENTRY
 * 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
** 
	t∑øms
);

7867 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	tpixñs
);

7868 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7869 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöt* 
	t∑øms
);

7870 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7871 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöt* 
	t∑øms
);

7872 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7873 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7874 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

7875 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

7876 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	t∑øm
);

7877 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	t∑øm
);

7878 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

7879 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

7880 (
GLAPIENTRY
 * 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tl
, GLdoubÀ 
	tr
, GLdoubÀ 
	tb
, GLdoubÀ 
	tt
, GLdoubÀ 
	tn
, GLdoubÀ 
	tf
);

7881 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
);

7882 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

7883 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

7884 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

7885 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

7886 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

7887 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

7888 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

7889 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

7890 (
GLAPIENTRY
 * 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tl
, GLdoubÀ 
	tr
, GLdoubÀ 
	tb
, GLdoubÀ 
	tt
, GLdoubÀ 
	tn
, GLdoubÀ 
	tf
);

7891 (
GLAPIENTRY
 * 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
);

7892 (
GLAPIENTRY
 * 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
);

7893 (
GLAPIENTRY
 * 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7894 (
GLAPIENTRY
 * 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7895 (
GLAPIENTRY
 * 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7896 (
GLAPIENTRY
 * 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7897 (
GLAPIENTRY
 * 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7898 (
GLAPIENTRY
 * 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7899 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7900 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

7901 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7902 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7903 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7904 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

7905 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

7906 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

7907 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7908 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7909 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7910 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

7911 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

7912 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

7913 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

7914 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

7915 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
* 
	t∑øms
);

7916 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7917 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øm
);

7918 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7919 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øm
);

7920 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7921 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

7922 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

7923 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

7924 (
GLAPIENTRY
 * 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° * 
	td©a
, 
	tGLíum
 
	tußge
);

7925 (
GLAPIENTRY
 * 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° * 
	td©a
);

7926 (
GLAPIENTRY
 * 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

7927 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

7928 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7929 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7930 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7931 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7932 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

7933 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7934 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7935 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

7936 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7937 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7938 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7939 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
* 
	t∑øms
);

7940 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

7941 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöt* 
	t∑øms
);

7942 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7943 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
* 
	t∑øms
);

7944 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	t∑øms
);

7945 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° * 
	t°rög
);

7946 (
GLAPIENTRY
 * 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7947 (
GLAPIENTRY
 * 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7948 (
GLAPIENTRY
 * 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7949 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

7950 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7951 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

7952 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7953 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

7954 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

7955 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

7956 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

7957 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7958 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7959 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

7960 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7961 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

7962 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

7963 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

7964 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

7965 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7966 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7967 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

7968 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7969 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

7970 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

7971 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

7972 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

7973 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7974 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7975 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

7976 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7977 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

7978 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

7979 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

7980 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

7981 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7982 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7983 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7984 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7985 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7986 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7987 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7988 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7989 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7990 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7991 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7992 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7993 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7994 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7995 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7996 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7997 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

7998 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7999 (
GLAPIENTRY
 * 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

8000 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

8001 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

8002 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

8003 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

8004 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8005 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöt* 
	t∑øms
);

8006 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8007 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øm
);

8008 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8009 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øm
);

8010 (
GLAPIENTRY
 * 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

8011 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

8012 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

8013 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

8014 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8015 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8016 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8017 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8018 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8019 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8020 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8021 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8022 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8023 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8024 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8025 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8027 
	#glBödMu…iTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwBödMu…iTextuªEXT
)

	)

8028 
	#glCheckNamedFømebuf„rSètusEXT
 
	`GLEW_GET_FUN
(
__gÀwCheckNamedFømebuf„rSètusEXT
)

	)

8029 
	#glClõ¡AâribDeÁu…EXT
 
	`GLEW_GET_FUN
(
__gÀwClõ¡AâribDeÁu…EXT
)

	)

8030 
	#glCom¥es£dMu…iTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexImage1DEXT
)

	)

8031 
	#glCom¥es£dMu…iTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexImage2DEXT
)

	)

8032 
	#glCom¥es£dMu…iTexImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexImage3DEXT
)

	)

8033 
	#glCom¥es£dMu…iTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexSubImage1DEXT
)

	)

8034 
	#glCom¥es£dMu…iTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexSubImage2DEXT
)

	)

8035 
	#glCom¥es£dMu…iTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexSubImage3DEXT
)

	)

8036 
	#glCom¥es£dTextuªImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªImage1DEXT
)

	)

8037 
	#glCom¥es£dTextuªImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªImage2DEXT
)

	)

8038 
	#glCom¥es£dTextuªImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªImage3DEXT
)

	)

8039 
	#glCom¥es£dTextuªSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªSubImage1DEXT
)

	)

8040 
	#glCom¥es£dTextuªSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªSubImage2DEXT
)

	)

8041 
	#glCom¥es£dTextuªSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªSubImage3DEXT
)

	)

8042 
	#glC›yMu…iTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexImage1DEXT
)

	)

8043 
	#glC›yMu…iTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexImage2DEXT
)

	)

8044 
	#glC›yMu…iTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexSubImage1DEXT
)

	)

8045 
	#glC›yMu…iTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexSubImage2DEXT
)

	)

8046 
	#glC›yMu…iTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexSubImage3DEXT
)

	)

8047 
	#glC›yTextuªImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªImage1DEXT
)

	)

8048 
	#glC›yTextuªImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªImage2DEXT
)

	)

8049 
	#glC›yTextuªSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªSubImage1DEXT
)

	)

8050 
	#glC›yTextuªSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªSubImage2DEXT
)

	)

8051 
	#glC›yTextuªSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªSubImage3DEXT
)

	)

8052 
	#glDißbÀClõ¡SèãIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀClõ¡SèãIndexedEXT
)

	)

8053 
	#glDißbÀClõ¡SèãiEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀClõ¡SèãiEXT
)

	)

8054 
	#glDißbÀVîãxAºayAâribEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAºayAâribEXT
)

	)

8055 
	#glDißbÀVîãxAºayEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAºayEXT
)

	)

8056 
	#glE«bÀClõ¡SèãIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀClõ¡SèãIndexedEXT
)

	)

8057 
	#glE«bÀClõ¡SèãiEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀClõ¡SèãiEXT
)

	)

8058 
	#glE«bÀVîãxAºayAâribEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAºayAâribEXT
)

	)

8059 
	#glE«bÀVîãxAºayEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAºayEXT
)

	)

8060 
	#glFlushM≠≥dNamedBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwFlushM≠≥dNamedBuf„rR™geEXT
)

	)

8061 
	#glFømebuf„rDøwBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rDøwBuf„rEXT
)

	)

8062 
	#glFømebuf„rDøwBuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rDøwBuf„rsEXT
)

	)

8063 
	#glFømebuf„rRódBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rRódBuf„rEXT
)

	)

8064 
	#glGíî©eMu…iTexMùm≠EXT
 
	`GLEW_GET_FUN
(
__gÀwGíî©eMu…iTexMùm≠EXT
)

	)

8065 
	#glGíî©eTextuªMùm≠EXT
 
	`GLEW_GET_FUN
(
__gÀwGíî©eTextuªMùm≠EXT
)

	)

8066 
	#glGëCom¥es£dMu…iTexImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dMu…iTexImageEXT
)

	)

8067 
	#glGëCom¥es£dTextuªImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dTextuªImageEXT
)

	)

8068 
	#glGëDoubÀIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëDoubÀIndexedvEXT
)

	)

8069 
	#glGëDoubÀi_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëDoubÀi_vEXT
)

	)

8070 
	#glGëFlﬂtIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFlﬂtIndexedvEXT
)

	)

8071 
	#glGëFlﬂti_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFlﬂti_vEXT
)

	)

8072 
	#glGëFømebuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rP¨amëîivEXT
)

	)

8073 
	#glGëMu…iTexEnvfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexEnvfvEXT
)

	)

8074 
	#glGëMu…iTexEnvivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexEnvivEXT
)

	)

8075 
	#glGëMu…iTexGídvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexGídvEXT
)

	)

8076 
	#glGëMu…iTexGífvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexGífvEXT
)

	)

8077 
	#glGëMu…iTexGíivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexGíivEXT
)

	)

8078 
	#glGëMu…iTexImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexImageEXT
)

	)

8079 
	#glGëMu…iTexLevñP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexLevñP¨amëîfvEXT
)

	)

8080 
	#glGëMu…iTexLevñP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexLevñP¨amëîivEXT
)

	)

8081 
	#glGëMu…iTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîIivEXT
)

	)

8082 
	#glGëMu…iTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîIuivEXT
)

	)

8083 
	#glGëMu…iTexP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîfvEXT
)

	)

8084 
	#glGëMu…iTexP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîivEXT
)

	)

8085 
	#glGëNamedBuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rP¨amëîivEXT
)

	)

8086 
	#glGëNamedBuf„rPoöãrvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rPoöãrvEXT
)

	)

8087 
	#glGëNamedBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rSubD©aEXT
)

	)

8088 
	#glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedFømebuf„rAâachmítP¨amëîivEXT
)

	)

8089 
	#glGëNamedProgømLoˇlP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîIivEXT
)

	)

8090 
	#glGëNamedProgømLoˇlP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîIuivEXT
)

	)

8091 
	#glGëNamedProgømLoˇlP¨amëîdvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîdvEXT
)

	)

8092 
	#glGëNamedProgømLoˇlP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîfvEXT
)

	)

8093 
	#glGëNamedProgømSåögEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømSåögEXT
)

	)

8094 
	#glGëNamedProgømivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømivEXT
)

	)

8095 
	#glGëNamedRídîbuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedRídîbuf„rP¨amëîivEXT
)

	)

8096 
	#glGëPoöãrIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPoöãrIndexedvEXT
)

	)

8097 
	#glGëPoöãri_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPoöãri_vEXT
)

	)

8098 
	#glGëTextuªImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªImageEXT
)

	)

8099 
	#glGëTextuªLevñP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªLevñP¨amëîfvEXT
)

	)

8100 
	#glGëTextuªLevñP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªLevñP¨amëîivEXT
)

	)

8101 
	#glGëTextuªP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîIivEXT
)

	)

8102 
	#glGëTextuªP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîIuivEXT
)

	)

8103 
	#glGëTextuªP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîfvEXT
)

	)

8104 
	#glGëTextuªP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîivEXT
)

	)

8105 
	#glGëVîãxAºayI¡egîi_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayI¡egîi_vEXT
)

	)

8106 
	#glGëVîãxAºayI¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayI¡egîvEXT
)

	)

8107 
	#glGëVîãxAºayPoöãri_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayPoöãri_vEXT
)

	)

8108 
	#glGëVîãxAºayPoöãrvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayPoöãrvEXT
)

	)

8109 
	#glM≠NamedBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwM≠NamedBuf„rEXT
)

	)

8110 
	#glM≠NamedBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwM≠NamedBuf„rR™geEXT
)

	)

8111 
	#glM©rixFru°umEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixFru°umEXT
)

	)

8112 
	#glM©rixLﬂdIdítôyEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdIdítôyEXT
)

	)

8113 
	#glM©rixLﬂdTøn•o£dEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdTøn•o£dEXT
)

	)

8114 
	#glM©rixLﬂdTøn•o£fEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdTøn•o£fEXT
)

	)

8115 
	#glM©rixLﬂddEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂddEXT
)

	)

8116 
	#glM©rixLﬂdfEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdfEXT
)

	)

8117 
	#glM©rixMu…Tøn•o£dEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…Tøn•o£dEXT
)

	)

8118 
	#glM©rixMu…Tøn•o£fEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…Tøn•o£fEXT
)

	)

8119 
	#glM©rixMu…dEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…dEXT
)

	)

8120 
	#glM©rixMu…fEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…fEXT
)

	)

8121 
	#glM©rixOπhoEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixOπhoEXT
)

	)

8122 
	#glM©rixP›EXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixP›EXT
)

	)

8123 
	#glM©rixPushEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixPushEXT
)

	)

8124 
	#glM©rixRŸ©edEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixRŸ©edEXT
)

	)

8125 
	#glM©rixRŸ©efEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixRŸ©efEXT
)

	)

8126 
	#glM©rixSˇÀdEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixSˇÀdEXT
)

	)

8127 
	#glM©rixSˇÀfEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixSˇÀfEXT
)

	)

8128 
	#glM©rixTøn¶©edEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixTøn¶©edEXT
)

	)

8129 
	#glM©rixTøn¶©efEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixTøn¶©efEXT
)

	)

8130 
	#glMu…iTexBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexBuf„rEXT
)

	)

8131 
	#glMu…iTexCo‹dPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dPoöãrEXT
)

	)

8132 
	#glMu…iTexEnvfEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnvfEXT
)

	)

8133 
	#glMu…iTexEnvfvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnvfvEXT
)

	)

8134 
	#glMu…iTexEnviEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnviEXT
)

	)

8135 
	#glMu…iTexEnvivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnvivEXT
)

	)

8136 
	#glMu…iTexGídEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGídEXT
)

	)

8137 
	#glMu…iTexGídvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGídvEXT
)

	)

8138 
	#glMu…iTexGífEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGífEXT
)

	)

8139 
	#glMu…iTexGífvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGífvEXT
)

	)

8140 
	#glMu…iTexGíiEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGíiEXT
)

	)

8141 
	#glMu…iTexGíivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGíivEXT
)

	)

8142 
	#glMu…iTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexImage1DEXT
)

	)

8143 
	#glMu…iTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexImage2DEXT
)

	)

8144 
	#glMu…iTexImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexImage3DEXT
)

	)

8145 
	#glMu…iTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîIivEXT
)

	)

8146 
	#glMu…iTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîIuivEXT
)

	)

8147 
	#glMu…iTexP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîfEXT
)

	)

8148 
	#glMu…iTexP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîfvEXT
)

	)

8149 
	#glMu…iTexP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîiEXT
)

	)

8150 
	#glMu…iTexP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîivEXT
)

	)

8151 
	#glMu…iTexRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexRídîbuf„rEXT
)

	)

8152 
	#glMu…iTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexSubImage1DEXT
)

	)

8153 
	#glMu…iTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexSubImage2DEXT
)

	)

8154 
	#glMu…iTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexSubImage3DEXT
)

	)

8155 
	#glNamedBuf„rD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedBuf„rD©aEXT
)

	)

8156 
	#glNamedBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedBuf„rSubD©aEXT
)

	)

8157 
	#glNamedC›yBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedC›yBuf„rSubD©aEXT
)

	)

8158 
	#glNamedFømebuf„rRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rRídîbuf„rEXT
)

	)

8159 
	#glNamedFømebuf„rTextuª1DEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuª1DEXT
)

	)

8160 
	#glNamedFømebuf„rTextuª2DEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuª2DEXT
)

	)

8161 
	#glNamedFømebuf„rTextuª3DEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuª3DEXT
)

	)

8162 
	#glNamedFømebuf„rTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuªEXT
)

	)

8163 
	#glNamedFømebuf„rTextuªFa˚EXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuªFa˚EXT
)

	)

8164 
	#glNamedFømebuf„rTextuªLayîEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuªLayîEXT
)

	)

8165 
	#glNamedProgømLoˇlP¨amëî4dEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4dEXT
)

	)

8166 
	#glNamedProgømLoˇlP¨amëî4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4dvEXT
)

	)

8167 
	#glNamedProgømLoˇlP¨amëî4fEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4fEXT
)

	)

8168 
	#glNamedProgømLoˇlP¨amëî4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4fvEXT
)

	)

8169 
	#glNamedProgømLoˇlP¨amëîI4iEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4iEXT
)

	)

8170 
	#glNamedProgømLoˇlP¨amëîI4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4ivEXT
)

	)

8171 
	#glNamedProgømLoˇlP¨amëîI4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4uiEXT
)

	)

8172 
	#glNamedProgømLoˇlP¨amëîI4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4uivEXT
)

	)

8173 
	#glNamedProgømLoˇlP¨amëîs4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîs4fvEXT
)

	)

8174 
	#glNamedProgømLoˇlP¨amëîsI4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîsI4ivEXT
)

	)

8175 
	#glNamedProgømLoˇlP¨amëîsI4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîsI4uivEXT
)

	)

8176 
	#glNamedProgømSåögEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømSåögEXT
)

	)

8177 
	#glNamedRídîbuf„rSt‹ageEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedRídîbuf„rSt‹ageEXT
)

	)

8178 
	#glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
)

	)

8179 
	#glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
)

	)

8180 
	#glProgømUnif‹m1dEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1dEXT
)

	)

8181 
	#glProgømUnif‹m1dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1dvEXT
)

	)

8182 
	#glProgømUnif‹m1fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1fEXT
)

	)

8183 
	#glProgømUnif‹m1fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1fvEXT
)

	)

8184 
	#glProgømUnif‹m1iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1iEXT
)

	)

8185 
	#glProgømUnif‹m1ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ivEXT
)

	)

8186 
	#glProgømUnif‹m1uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1uiEXT
)

	)

8187 
	#glProgømUnif‹m1uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1uivEXT
)

	)

8188 
	#glProgømUnif‹m2dEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2dEXT
)

	)

8189 
	#glProgømUnif‹m2dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2dvEXT
)

	)

8190 
	#glProgømUnif‹m2fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2fEXT
)

	)

8191 
	#glProgømUnif‹m2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2fvEXT
)

	)

8192 
	#glProgømUnif‹m2iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2iEXT
)

	)

8193 
	#glProgømUnif‹m2ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ivEXT
)

	)

8194 
	#glProgømUnif‹m2uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2uiEXT
)

	)

8195 
	#glProgømUnif‹m2uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2uivEXT
)

	)

8196 
	#glProgømUnif‹m3dEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3dEXT
)

	)

8197 
	#glProgømUnif‹m3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3dvEXT
)

	)

8198 
	#glProgømUnif‹m3fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3fEXT
)

	)

8199 
	#glProgømUnif‹m3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3fvEXT
)

	)

8200 
	#glProgømUnif‹m3iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3iEXT
)

	)

8201 
	#glProgømUnif‹m3ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ivEXT
)

	)

8202 
	#glProgømUnif‹m3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3uiEXT
)

	)

8203 
	#glProgømUnif‹m3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3uivEXT
)

	)

8204 
	#glProgømUnif‹m4dEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4dEXT
)

	)

8205 
	#glProgømUnif‹m4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4dvEXT
)

	)

8206 
	#glProgømUnif‹m4fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4fEXT
)

	)

8207 
	#glProgømUnif‹m4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4fvEXT
)

	)

8208 
	#glProgømUnif‹m4iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4iEXT
)

	)

8209 
	#glProgømUnif‹m4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ivEXT
)

	)

8210 
	#glProgømUnif‹m4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4uiEXT
)

	)

8211 
	#glProgømUnif‹m4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4uivEXT
)

	)

8212 
	#glProgømUnif‹mM©rix2dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2dvEXT
)

	)

8213 
	#glProgømUnif‹mM©rix2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2fvEXT
)

	)

8214 
	#glProgømUnif‹mM©rix2x3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3dvEXT
)

	)

8215 
	#glProgømUnif‹mM©rix2x3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3fvEXT
)

	)

8216 
	#glProgømUnif‹mM©rix2x4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4dvEXT
)

	)

8217 
	#glProgømUnif‹mM©rix2x4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4fvEXT
)

	)

8218 
	#glProgømUnif‹mM©rix3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3dvEXT
)

	)

8219 
	#glProgømUnif‹mM©rix3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3fvEXT
)

	)

8220 
	#glProgømUnif‹mM©rix3x2dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2dvEXT
)

	)

8221 
	#glProgømUnif‹mM©rix3x2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2fvEXT
)

	)

8222 
	#glProgømUnif‹mM©rix3x4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4dvEXT
)

	)

8223 
	#glProgømUnif‹mM©rix3x4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4fvEXT
)

	)

8224 
	#glProgømUnif‹mM©rix4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4dvEXT
)

	)

8225 
	#glProgømUnif‹mM©rix4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4fvEXT
)

	)

8226 
	#glProgømUnif‹mM©rix4x2dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2dvEXT
)

	)

8227 
	#glProgømUnif‹mM©rix4x2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2fvEXT
)

	)

8228 
	#glProgømUnif‹mM©rix4x3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3dvEXT
)

	)

8229 
	#glProgømUnif‹mM©rix4x3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3fvEXT
)

	)

8230 
	#glPushClõ¡AâribDeÁu…EXT
 
	`GLEW_GET_FUN
(
__gÀwPushClõ¡AâribDeÁu…EXT
)

	)

8231 
	#glTextuªBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªBuf„rEXT
)

	)

8232 
	#glTextuªImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage1DEXT
)

	)

8233 
	#glTextuªImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage2DEXT
)

	)

8234 
	#glTextuªImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage3DEXT
)

	)

8235 
	#glTextuªP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîIivEXT
)

	)

8236 
	#glTextuªP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîIuivEXT
)

	)

8237 
	#glTextuªP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîfEXT
)

	)

8238 
	#glTextuªP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîfvEXT
)

	)

8239 
	#glTextuªP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîiEXT
)

	)

8240 
	#glTextuªP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîivEXT
)

	)

8241 
	#glTextuªRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªRídîbuf„rEXT
)

	)

8242 
	#glTextuªSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSubImage1DEXT
)

	)

8243 
	#glTextuªSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSubImage2DEXT
)

	)

8244 
	#glTextuªSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSubImage3DEXT
)

	)

8245 
	#glUnm≠NamedBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwUnm≠NamedBuf„rEXT
)

	)

8246 
	#glVîãxAºayCﬁ‹Off£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayCﬁ‹Off£tEXT
)

	)

8247 
	#glVîãxAºayEdgeFœgOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayEdgeFœgOff£tEXT
)

	)

8248 
	#glVîãxAºayFogCo‹dOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayFogCo‹dOff£tEXT
)

	)

8249 
	#glVîãxAºayIndexOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayIndexOff£tEXT
)

	)

8250 
	#glVîãxAºayMu…iTexCo‹dOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayMu…iTexCo‹dOff£tEXT
)

	)

8251 
	#glVîãxAºayN‹mÆOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayN‹mÆOff£tEXT
)

	)

8252 
	#glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
)

	)

8253 
	#glVîãxAºayTexCo‹dOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayTexCo‹dOff£tEXT
)

	)

8254 
	#glVîãxAºayVîãxAâribIOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxAâribIOff£tEXT
)

	)

8255 
	#glVîãxAºayVîãxAâribOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxAâribOff£tEXT
)

	)

8256 
	#glVîãxAºayVîãxOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxOff£tEXT
)

	)

8258 
	#GLEW_EXT_dúe˘_°©e_ac˚ss
 
	`GLEW_GET_VAR
(
__GLEW_EXT_dúe˘_°©e_ac˚ss
)

	)

8264 #i‚de‡
GL_EXT_døw_buf„rs2


8265 
	#GL_EXT_døw_buf„rs2
 1

	)

8267 (
GLAPIENTRY
 * 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

8268 (
GLAPIENTRY
 * 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8269 (
GLAPIENTRY
 * 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8270 (
GLAPIENTRY
 * 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
* 
	td©a
);

8271 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLöt
* 
	td©a
);

8272 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8274 
	#glCﬁ‹MaskIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹MaskIndexedEXT
)

	)

8275 
	#glDißbÀIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀIndexedEXT
)

	)

8276 
	#glE«bÀIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀIndexedEXT
)

	)

8277 
	#glGëBoﬁónIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëBoﬁónIndexedvEXT
)

	)

8278 
	#glGëI¡egîIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîIndexedvEXT
)

	)

8279 
	#glIsE«bÀdIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwIsE«bÀdIndexedEXT
)

	)

8281 
	#GLEW_EXT_døw_buf„rs2
 
	`GLEW_GET_VAR
(
__GLEW_EXT_døw_buf„rs2
)

	)

8287 #i‚de‡
GL_EXT_døw_ö°™˚d


8288 
	#GL_EXT_døw_ö°™˚d
 1

	)

8290 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

8291 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

8293 
	#glDøwAºaysIn°™˚dEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dEXT
)

	)

8294 
	#glDøwEÀmítsIn°™˚dEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dEXT
)

	)

8296 
	#GLEW_EXT_døw_ö°™˚d
 
	`GLEW_GET_VAR
(
__GLEW_EXT_døw_ö°™˚d
)

	)

8302 #i‚de‡
GL_EXT_døw_ønge_ñemíts


8303 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

8305 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

8306 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

8308 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

8310 
	#glDøwR™geEÀmítsEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítsEXT
)

	)

8312 
	#GLEW_EXT_døw_ønge_ñemíts
 
	`GLEW_GET_VAR
(
__GLEW_EXT_døw_ønge_ñemíts
)

	)

8318 #i‚de‡
GL_EXT_fog_co‹d


8319 
	#GL_EXT_fog_co‹d
 1

	)

8321 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

8322 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

8323 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

8324 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

8325 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

8326 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

8327 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

8328 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

8330 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8331 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

8332 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

8333 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

8334 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

8336 
	#glFogCo‹dPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dPoöãrEXT
)

	)

8337 
	#glFogCo‹ddEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹ddEXT
)

	)

8338 
	#glFogCo‹ddvEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹ddvEXT
)

	)

8339 
	#glFogCo‹dfEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dfEXT
)

	)

8340 
	#glFogCo‹dfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dfvEXT
)

	)

8342 
	#GLEW_EXT_fog_co‹d
 
	`GLEW_GET_VAR
(
__GLEW_EXT_fog_co‹d
)

	)

8348 #i‚de‡
GL_EXT_‰agmít_lightög


8349 
	#GL_EXT_‰agmít_lightög
 1

	)

8351 
	#GL_FRAGMENT_LIGHTING_EXT
 0x8400

	)

8352 
	#GL_FRAGMENT_COLOR_MATERIAL_EXT
 0x8401

	)

8353 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT
 0x8402

	)

8354 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT
 0x8403

	)

8355 
	#GL_MAX_FRAGMENT_LIGHTS_EXT
 0x8404

	)

8356 
	#GL_MAX_ACTIVE_LIGHTS_EXT
 0x8405

	)

8357 
	#GL_CURRENT_RASTER_NORMAL_EXT
 0x8406

	)

8358 
	#GL_LIGHT_ENV_MODE_EXT
 0x8407

	)

8359 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT
 0x8408

	)

8360 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT
 0x8409

	)

8361 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT
 0x840A

	)

8362 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT
 0x840B

	)

8363 
	#GL_FRAGMENT_LIGHT0_EXT
 0x840C

	)

8364 
	#GL_FRAGMENT_LIGHT7_EXT
 0x8413

	)

8366 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTCOLORMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

8367 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8368 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8369 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELIEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8370 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELIVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8371 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8372 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8373 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTIEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8374 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTIVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8375 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

8376 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8377 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALIEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

8378 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALIVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8379 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTFVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8380 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTIVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8381 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALFVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8382 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALIVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8383 (
GLAPIENTRY
 * 
	tPFNGLLIGHTENVIEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8385 
	#glFøgmítCﬁ‹M©îülEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítCﬁ‹M©îülEXT
)

	)

8386 
	#glFøgmítLightModñfEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfEXT
)

	)

8387 
	#glFøgmítLightModñfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfvEXT
)

	)

8388 
	#glFøgmítLightModñiEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñiEXT
)

	)

8389 
	#glFøgmítLightModñivEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñivEXT
)

	)

8390 
	#glFøgmítLightfEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfEXT
)

	)

8391 
	#glFøgmítLightfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfvEXT
)

	)

8392 
	#glFøgmítLightiEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightiEXT
)

	)

8393 
	#glFøgmítLightivEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightivEXT
)

	)

8394 
	#glFøgmítM©îülfEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfEXT
)

	)

8395 
	#glFøgmítM©îülfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfvEXT
)

	)

8396 
	#glFøgmítM©îüliEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îüliEXT
)

	)

8397 
	#glFøgmítM©îülivEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülivEXT
)

	)

8398 
	#glGëFøgmítLightfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightfvEXT
)

	)

8399 
	#glGëFøgmítLightivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightivEXT
)

	)

8400 
	#glGëFøgmítM©îülfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülfvEXT
)

	)

8401 
	#glGëFøgmítM©îülivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülivEXT
)

	)

8402 
	#glLightEnviEXT
 
	`GLEW_GET_FUN
(
__gÀwLightEnviEXT
)

	)

8404 
	#GLEW_EXT_‰agmít_lightög
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰agmít_lightög
)

	)

8410 #i‚de‡
GL_EXT_‰amebuf„r_blô


8411 
	#GL_EXT_‰amebuf„r_blô
 1

	)

8413 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

8414 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

8415 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

8416 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

8418 (
GLAPIENTRY
 * 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

8420 
	#glBlôFømebuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwBlôFømebuf„rEXT
)

	)

8422 
	#GLEW_EXT_‰amebuf„r_blô
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_blô
)

	)

8428 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


8429 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

8431 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

8432 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

8433 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

8435 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8437 
	#glRídîbuf„rSt‹ageMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂eEXT
)

	)

8439 
	#GLEW_EXT_‰amebuf„r_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_mu…ißm∂e
)

	)

8445 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


8446 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

8448 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

8449 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

8451 
	#GLEW_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
)

	)

8457 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


8458 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

8460 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

8461 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

8462 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

8463 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

8464 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

8465 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

8466 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

8467 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

8468 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

8469 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

8470 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

8471 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

8472 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

8473 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

8474 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

8475 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

8476 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

8477 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

8478 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

8479 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

8480 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

8481 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

8482 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

8483 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

8484 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

8485 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

8486 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

8487 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

8488 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

8489 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

8490 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

8491 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

8492 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

8493 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

8494 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

8495 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

8496 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

8497 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

8498 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

8499 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

8500 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

8501 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

8502 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

8503 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

8504 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

8505 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

8506 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

8507 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

8508 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

8509 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

8510 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

8512 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

8513 (
GLAPIENTRY
 * 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

8514 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8515 (
GLAPIENTRY
 * 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t‰amebuf„rs
);

8516 (
GLAPIENTRY
 * 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tªndîbuf„rs
);

8517 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

8518 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8519 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8520 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

8521 (
GLAPIENTRY
 * 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t‰amebuf„rs
);

8522 (
GLAPIENTRY
 * 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tªndîbuf„rs
);

8523 (
GLAPIENTRY
 * 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8524 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8525 (
GLAPIENTRY
 * 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8526 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

8527 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

8528 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8530 
	#glBödFømebuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwBödFømebuf„rEXT
)

	)

8531 
	#glBödRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwBödRídîbuf„rEXT
)

	)

8532 
	#glCheckFømebuf„rSètusEXT
 
	`GLEW_GET_FUN
(
__gÀwCheckFømebuf„rSètusEXT
)

	)

8533 
	#glDñëeFømebuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeFømebuf„rsEXT
)

	)

8534 
	#glDñëeRídîbuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeRídîbuf„rsEXT
)

	)

8535 
	#glFømebuf„rRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rRídîbuf„rEXT
)

	)

8536 
	#glFømebuf„rTextuª1DEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª1DEXT
)

	)

8537 
	#glFømebuf„rTextuª2DEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª2DEXT
)

	)

8538 
	#glFømebuf„rTextuª3DEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª3DEXT
)

	)

8539 
	#glGíFømebuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíFømebuf„rsEXT
)

	)

8540 
	#glGíRídîbuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíRídîbuf„rsEXT
)

	)

8541 
	#glGíî©eMùm≠EXT
 
	`GLEW_GET_FUN
(
__gÀwGíî©eMùm≠EXT
)

	)

8542 
	#glGëFømebuf„rAâachmítP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rAâachmítP¨amëîivEXT
)

	)

8543 
	#glGëRídîbuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëRídîbuf„rP¨amëîivEXT
)

	)

8544 
	#glIsFømebuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwIsFømebuf„rEXT
)

	)

8545 
	#glIsRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwIsRídîbuf„rEXT
)

	)

8546 
	#glRídîbuf„rSt‹ageEXT
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageEXT
)

	)

8548 
	#GLEW_EXT_‰amebuf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_obje˘
)

	)

8554 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


8555 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

8557 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

8558 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

8560 
	#GLEW_EXT_‰amebuf„r_sRGB
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_sRGB
)

	)

8566 #i‚de‡
GL_EXT_geomëry_shadî4


8567 
	#GL_EXT_geomëry_shadî4
 1

	)

8569 
	#GL_LINES_ADJACENCY_EXT
 0xA

	)

8570 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0xB

	)

8571 
	#GL_TRIANGLES_ADJACENCY_EXT
 0xC

	)

8572 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0xD

	)

8573 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

8574 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

8575 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

8576 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

8577 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

8578 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

8579 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

8580 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

8581 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

8582 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

8583 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

8584 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

8585 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

8586 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

8587 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

8588 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

8590 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8591 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

8592 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8594 
	#glFømebuf„rTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªEXT
)

	)

8595 
	#glFømebuf„rTextuªFa˚EXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªFa˚EXT
)

	)

8596 
	#glProgømP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîiEXT
)

	)

8598 
	#GLEW_EXT_geomëry_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_EXT_geomëry_shadî4
)

	)

8604 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


8605 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

8607 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8608 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8610 
	#glProgømEnvP¨amëîs4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîs4fvEXT
)

	)

8611 
	#glProgømLoˇlP¨amëîs4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîs4fvEXT
)

	)

8613 
	#GLEW_EXT_gpu_¥ogøm_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_gpu_¥ogøm_∑ømëîs
)

	)

8619 #i‚de‡
GL_EXT_gpu_shadî4


8620 
	#GL_EXT_gpu_shadî4
 1

	)

8622 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

8623 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

8624 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

8625 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

8626 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

8627 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

8628 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

8629 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

8630 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

8631 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

8632 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

8633 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

8634 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

8635 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

8636 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

8637 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

8638 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

8639 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

8640 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

8641 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

8642 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

8643 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

8644 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

8645 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

8646 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

8647 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

8649 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

8650 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

8651 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

8652 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8653 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

8654 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

8655 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8656 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

8657 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8658 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

8659 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8660 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

8661 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8662 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

8663 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8664 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

8665 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8666 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

8667 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8668 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

8669 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8670 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8671 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8672 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

8673 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8674 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

8675 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8676 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8677 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

8678 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

8679 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8680 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8681 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

8682 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8684 
	#glBödFøgD©aLoˇti⁄EXT
 
	`GLEW_GET_FUN
(
__gÀwBödFøgD©aLoˇti⁄EXT
)

	)

8685 
	#glGëFøgD©aLoˇti⁄EXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgD©aLoˇti⁄EXT
)

	)

8686 
	#glGëUnif‹muivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹muivEXT
)

	)

8687 
	#glGëVîãxAâribIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIivEXT
)

	)

8688 
	#glGëVîãxAâribIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIuivEXT
)

	)

8689 
	#glUnif‹m1uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1uiEXT
)

	)

8690 
	#glUnif‹m1uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1uivEXT
)

	)

8691 
	#glUnif‹m2uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2uiEXT
)

	)

8692 
	#glUnif‹m2uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2uivEXT
)

	)

8693 
	#glUnif‹m3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3uiEXT
)

	)

8694 
	#glUnif‹m3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3uivEXT
)

	)

8695 
	#glUnif‹m4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4uiEXT
)

	)

8696 
	#glUnif‹m4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4uivEXT
)

	)

8697 
	#glVîãxAâribI1iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1iEXT
)

	)

8698 
	#glVîãxAâribI1ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1ivEXT
)

	)

8699 
	#glVîãxAâribI1uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1uiEXT
)

	)

8700 
	#glVîãxAâribI1uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1uivEXT
)

	)

8701 
	#glVîãxAâribI2iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2iEXT
)

	)

8702 
	#glVîãxAâribI2ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2ivEXT
)

	)

8703 
	#glVîãxAâribI2uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2uiEXT
)

	)

8704 
	#glVîãxAâribI2uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2uivEXT
)

	)

8705 
	#glVîãxAâribI3iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3iEXT
)

	)

8706 
	#glVîãxAâribI3ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3ivEXT
)

	)

8707 
	#glVîãxAâribI3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3uiEXT
)

	)

8708 
	#glVîãxAâribI3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3uivEXT
)

	)

8709 
	#glVîãxAâribI4bvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4bvEXT
)

	)

8710 
	#glVîãxAâribI4iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4iEXT
)

	)

8711 
	#glVîãxAâribI4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ivEXT
)

	)

8712 
	#glVîãxAâribI4svEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4svEXT
)

	)

8713 
	#glVîãxAâribI4ubvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ubvEXT
)

	)

8714 
	#glVîãxAâribI4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4uiEXT
)

	)

8715 
	#glVîãxAâribI4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4uivEXT
)

	)

8716 
	#glVîãxAâribI4usvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4usvEXT
)

	)

8717 
	#glVîãxAâribIPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIPoöãrEXT
)

	)

8719 
	#GLEW_EXT_gpu_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_EXT_gpu_shadî4
)

	)

8725 #i‚de‡
GL_EXT_hi°ogøm


8726 
	#GL_EXT_hi°ogøm
 1

	)

8728 
	#GL_HISTOGRAM_EXT
 0x8024

	)

8729 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

8730 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

8731 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

8732 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

8733 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

8734 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

8735 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

8736 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

8737 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

8738 
	#GL_MINMAX_EXT
 0x802E

	)

8739 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

8740 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

8742 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	tvÆues
);

8743 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8744 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8745 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	tvÆues
);

8746 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8747 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8748 (
GLAPIENTRY
 * 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8749 (
GLAPIENTRY
 * 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8750 (
GLAPIENTRY
 * 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8751 (
GLAPIENTRY
 * 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8753 
	#glGëHi°ogømEXT
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømEXT
)

	)

8754 
	#glGëHi°ogømP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîfvEXT
)

	)

8755 
	#glGëHi°ogømP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîivEXT
)

	)

8756 
	#glGëMömaxEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxEXT
)

	)

8757 
	#glGëMömaxP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîfvEXT
)

	)

8758 
	#glGëMömaxP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîivEXT
)

	)

8759 
	#glHi°ogømEXT
 
	`GLEW_GET_FUN
(
__gÀwHi°ogømEXT
)

	)

8760 
	#glMömaxEXT
 
	`GLEW_GET_FUN
(
__gÀwMömaxEXT
)

	)

8761 
	#glRe£tHi°ogømEXT
 
	`GLEW_GET_FUN
(
__gÀwRe£tHi°ogømEXT
)

	)

8762 
	#glRe£tMömaxEXT
 
	`GLEW_GET_FUN
(
__gÀwRe£tMömaxEXT
)

	)

8764 
	#GLEW_EXT_hi°ogøm
 
	`GLEW_GET_VAR
(
__GLEW_EXT_hi°ogøm
)

	)

8770 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


8771 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

8773 
	#GLEW_EXT_ödex_¨øy_f‹m©s
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_¨øy_f‹m©s
)

	)

8779 #i‚de‡
GL_EXT_ödex_func


8780 
	#GL_EXT_ödex_func
 1

	)

8782 (
GLAPIENTRY
 * 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLÊﬂt
 
	tªf
);

8784 
	#glIndexFuncEXT
 
	`GLEW_GET_FUN
(
__gÀwIndexFuncEXT
)

	)

8786 
	#GLEW_EXT_ödex_func
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_func
)

	)

8792 #i‚de‡
GL_EXT_ödex_m©îül


8793 
	#GL_EXT_ödex_m©îül
 1

	)

8795 (
GLAPIENTRY
 * 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

8797 
	#glIndexM©îülEXT
 
	`GLEW_GET_FUN
(
__gÀwIndexM©îülEXT
)

	)

8799 
	#GLEW_EXT_ödex_m©îül
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_m©îül
)

	)

8805 #i‚de‡
GL_EXT_ödex_ãxtuª


8806 
	#GL_EXT_ödex_ãxtuª
 1

	)

8808 
	#GLEW_EXT_ödex_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_ãxtuª
)

	)

8814 #i‚de‡
GL_EXT_light_ãxtuª


8815 
	#GL_EXT_light_ãxtuª
 1

	)

8817 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

8818 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

8819 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

8820 
	#GL_ATTENUATION_EXT
 0x834D

	)

8821 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

8822 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

8823 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

8824 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

8825 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

8827 (
GLAPIENTRY
 * 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

8828 (
GLAPIENTRY
 * 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

8829 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

8831 
	#glAµlyTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwAµlyTextuªEXT
)

	)

8832 
	#glTextuªLightEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªLightEXT
)

	)

8833 
	#glTextuªM©îülEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªM©îülEXT
)

	)

8835 
	#GLEW_EXT_light_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_light_ãxtuª
)

	)

8841 #i‚de‡
GL_EXT_misc_©åibuã


8842 
	#GL_EXT_misc_©åibuã
 1

	)

8844 
	#GLEW_EXT_misc_©åibuã
 
	`GLEW_GET_VAR
(
__GLEW_EXT_misc_©åibuã
)

	)

8850 #i‚de‡
GL_EXT_mu…i_døw_¨øys


8851 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

8853 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
* 
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

8854 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
* 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 **
	tödi˚s
, GLsizeò
	t¥imcou¡
);

8856 
	#glMu…iDøwAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysEXT
)

	)

8857 
	#glMu…iDøwEÀmítsEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsEXT
)

	)

8859 
	#GLEW_EXT_mu…i_døw_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_EXT_mu…i_døw_¨øys
)

	)

8865 #i‚de‡
GL_EXT_mu…ißm∂e


8866 
	#GL_EXT_mu…ißm∂e
 1

	)

8868 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

8869 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

8870 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

8871 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

8872 
	#GL_1PASS_EXT
 0x80A1

	)

8873 
	#GL_2PASS_0_EXT
 0x80A2

	)

8874 
	#GL_2PASS_1_EXT
 0x80A3

	)

8875 
	#GL_4PASS_0_EXT
 0x80A4

	)

8876 
	#GL_4PASS_1_EXT
 0x80A5

	)

8877 
	#GL_4PASS_2_EXT
 0x80A6

	)

8878 
	#GL_4PASS_3_EXT
 0x80A7

	)

8879 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

8880 
	#GL_SAMPLES_EXT
 0x80A9

	)

8881 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

8882 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

8883 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

8884 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

8886 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

8887 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

8889 
	#glSam∂eMaskEXT
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaskEXT
)

	)

8890 
	#glSam∂eP©ã∫EXT
 
	`GLEW_GET_FUN
(
__gÀwSam∂eP©ã∫EXT
)

	)

8892 
	#GLEW_EXT_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_EXT_mu…ißm∂e
)

	)

8898 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


8899 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

8901 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

8902 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

8903 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

8904 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

8906 
	#GLEW_EXT_∑cked_dïth_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑cked_dïth_°ícû
)

	)

8912 #i‚de‡
GL_EXT_∑cked_Êﬂt


8913 
	#GL_EXT_∑cked_Êﬂt
 1

	)

8915 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

8916 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

8917 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

8919 
	#GLEW_EXT_∑cked_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑cked_Êﬂt
)

	)

8925 #i‚de‡
GL_EXT_∑cked_pixñs


8926 
	#GL_EXT_∑cked_pixñs
 1

	)

8928 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

8929 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

8930 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

8931 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

8932 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

8934 
	#GLEW_EXT_∑cked_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑cked_pixñs
)

	)

8940 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


8941 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

8943 
	#GL_TEXTURE_1D
 0x0DE0

	)

8944 
	#GL_TEXTURE_2D
 0x0DE1

	)

8945 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

8946 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

8947 
	#GL_COLOR_TABLE_FORMAT_EXT
 0x80D8

	)

8948 
	#GL_COLOR_TABLE_WIDTH_EXT
 0x80D9

	)

8949 
	#GL_COLOR_TABLE_RED_SIZE_EXT
 0x80DA

	)

8950 
	#GL_COLOR_TABLE_GREEN_SIZE_EXT
 0x80DB

	)

8951 
	#GL_COLOR_TABLE_BLUE_SIZE_EXT
 0x80DC

	)

8952 
	#GL_COLOR_TABLE_ALPHA_SIZE_EXT
 0x80DD

	)

8953 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
 0x80DE

	)

8954 
	#GL_COLOR_TABLE_INTENSITY_SIZE_EXT
 0x80DF

	)

8955 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

8956 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

8957 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

8958 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

8959 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

8960 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

8961 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

8962 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

8963 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

8965 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	td©a
);

8966 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	td©a
);

8967 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8968 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8970 
	#glCﬁ‹TabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀEXT
)

	)

8971 
	#glGëCﬁ‹TabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀEXT
)

	)

8972 
	#glGëCﬁ‹TabÀP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîfvEXT
)

	)

8973 
	#glGëCﬁ‹TabÀP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîivEXT
)

	)

8975 
	#GLEW_EXT_∑Àâed_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑Àâed_ãxtuª
)

	)

8981 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


8982 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

8984 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

8985 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

8986 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

8987 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

8989 
	#GLEW_EXT_pixñ_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pixñ_buf„r_obje˘
)

	)

8995 #i‚de‡
GL_EXT_pixñ_å™sf‹m


8996 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

8998 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

8999 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

9000 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

9001 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

9002 
	#GL_CUBIC_EXT
 0x8334

	)

9003 
	#GL_AVERAGE_EXT
 0x8335

	)

9004 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

9005 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

9006 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

9008 (
GLAPIENTRY
 * 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9009 (
GLAPIENTRY
 * 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

9010 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

9011 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9012 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

9013 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

9015 
	#glGëPixñTønsf‹mP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPixñTønsf‹mP¨amëîfvEXT
)

	)

9016 
	#glGëPixñTønsf‹mP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPixñTønsf‹mP¨amëîivEXT
)

	)

9017 
	#glPixñTønsf‹mP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîfEXT
)

	)

9018 
	#glPixñTønsf‹mP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîfvEXT
)

	)

9019 
	#glPixñTønsf‹mP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîiEXT
)

	)

9020 
	#glPixñTønsf‹mP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîivEXT
)

	)

9022 
	#GLEW_EXT_pixñ_å™sf‹m
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pixñ_å™sf‹m
)

	)

9028 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


9029 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

9031 
	#GLEW_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
)

	)

9037 #i‚de‡
GL_EXT_poöt_∑ømëîs


9038 
	#GL_EXT_poöt_∑ømëîs
 1

	)

9040 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

9041 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

9042 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

9043 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

9045 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9046 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9048 
	#glPoötP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfEXT
)

	)

9049 
	#glPoötP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfvEXT
)

	)

9051 
	#GLEW_EXT_poöt_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_poöt_∑ømëîs
)

	)

9057 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


9058 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

9060 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

9061 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

9062 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

9064 (
GLAPIENTRY
 * 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

9066 
	#glPﬁyg⁄Off£tEXT
 
	`GLEW_GET_FUN
(
__gÀwPﬁyg⁄Off£tEXT
)

	)

9068 
	#GLEW_EXT_pﬁyg⁄_off£t
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pﬁyg⁄_off£t
)

	)

9074 #i‚de‡
GL_EXT_¥ovokög_vîãx


9075 
	#GL_EXT_¥ovokög_vîãx
 1

	)

9077 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

9078 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

9079 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

9080 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

9082 (
GLAPIENTRY
 * 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

9084 
	#glProvokögVîãxEXT
 
	`GLEW_GET_FUN
(
__gÀwProvokögVîãxEXT
)

	)

9086 
	#GLEW_EXT_¥ovokög_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_EXT_¥ovokög_vîãx
)

	)

9092 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


9093 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

9095 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

9097 
	#GLEW_EXT_ªsˇÀ_n‹mÆ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ªsˇÀ_n‹mÆ
)

	)

9103 #i‚de‡
GL_EXT_s˚√_m¨kî


9104 
	#GL_EXT_s˚√_m¨kî
 1

	)

9106 (
GLAPIENTRY
 * 
	tPFNGLBEGINSCENEEXTPROC
) ();

9107 (
GLAPIENTRY
 * 
	tPFNGLENDSCENEEXTPROC
) ();

9109 
	#glBegöS˚√EXT
 
	`GLEW_GET_FUN
(
__gÀwBegöS˚√EXT
)

	)

9110 
	#glEndS˚√EXT
 
	`GLEW_GET_FUN
(
__gÀwEndS˚√EXT
)

	)

9112 
	#GLEW_EXT_s˚√_m¨kî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_s˚√_m¨kî
)

	)

9118 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


9119 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

9121 
	#GL_COLOR_SUM_EXT
 0x8458

	)

9122 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

9123 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

9124 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

9125 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

9126 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

9127 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

9129 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

9130 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9131 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

9132 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9133 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

9134 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9135 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

9136 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9137 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

9138 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9139 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

9140 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

9141 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

9142 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

9143 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

9144 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

9145 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9147 
	#glSec⁄d¨yCﬁ‹3bEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3bEXT
)

	)

9148 
	#glSec⁄d¨yCﬁ‹3bvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3bvEXT
)

	)

9149 
	#glSec⁄d¨yCﬁ‹3dEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3dEXT
)

	)

9150 
	#glSec⁄d¨yCﬁ‹3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3dvEXT
)

	)

9151 
	#glSec⁄d¨yCﬁ‹3fEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3fEXT
)

	)

9152 
	#glSec⁄d¨yCﬁ‹3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3fvEXT
)

	)

9153 
	#glSec⁄d¨yCﬁ‹3iEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3iEXT
)

	)

9154 
	#glSec⁄d¨yCﬁ‹3ivEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ivEXT
)

	)

9155 
	#glSec⁄d¨yCﬁ‹3sEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3sEXT
)

	)

9156 
	#glSec⁄d¨yCﬁ‹3svEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3svEXT
)

	)

9157 
	#glSec⁄d¨yCﬁ‹3ubEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ubEXT
)

	)

9158 
	#glSec⁄d¨yCﬁ‹3ubvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ubvEXT
)

	)

9159 
	#glSec⁄d¨yCﬁ‹3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3uiEXT
)

	)

9160 
	#glSec⁄d¨yCﬁ‹3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3uivEXT
)

	)

9161 
	#glSec⁄d¨yCﬁ‹3usEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3usEXT
)

	)

9162 
	#glSec⁄d¨yCﬁ‹3usvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3usvEXT
)

	)

9163 
	#glSec⁄d¨yCﬁ‹PoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹PoöãrEXT
)

	)

9165 
	#GLEW_EXT_£c⁄d¨y_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_EXT_£c⁄d¨y_cﬁ‹
)

	)

9171 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


9172 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

9174 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

9176 (
GLAPIENTRY
 * 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

9177 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
* 
	t°rög
);

9178 (
GLAPIENTRY
 * 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

9180 
	#glA˘iveProgømEXT
 
	`GLEW_GET_FUN
(
__gÀwA˘iveProgømEXT
)

	)

9181 
	#glCª©eShadîProgømEXT
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadîProgømEXT
)

	)

9182 
	#glU£ShadîProgømEXT
 
	`GLEW_GET_FUN
(
__gÀwU£ShadîProgømEXT
)

	)

9184 
	#GLEW_EXT_£∑øã_shadî_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_EXT_£∑øã_shadî_obje˘s
)

	)

9190 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


9191 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

9193 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

9194 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

9195 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

9197 
	#GLEW_EXT_£∑øã_•ecuœr_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_EXT_£∑øã_•ecuœr_cﬁ‹
)

	)

9203 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


9204 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

9206 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

9207 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

9208 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

9209 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

9210 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

9211 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

9212 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

9213 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

9214 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

9215 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

9216 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

9217 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

9218 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

9219 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

9220 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

9221 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

9222 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

9223 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

9224 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

9225 
	#GL_IMAGE_1D_EXT
 0x904C

	)

9226 
	#GL_IMAGE_2D_EXT
 0x904D

	)

9227 
	#GL_IMAGE_3D_EXT
 0x904E

	)

9228 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

9229 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

9230 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

9231 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

9232 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

9233 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

9234 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

9235 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

9236 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

9237 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

9238 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

9239 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

9240 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

9241 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

9242 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

9243 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

9244 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

9245 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

9246 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

9247 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

9248 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

9249 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

9250 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

9251 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

9252 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

9253 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

9254 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

9255 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

9256 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

9257 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

9258 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

9259 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

9260 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

9262 (
GLAPIENTRY
 * 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

9263 (
GLAPIENTRY
 * 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

9265 
	#glBödImageTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwBödImageTextuªEXT
)

	)

9266 
	#glMem‹yB¨rõrEXT
 
	`GLEW_GET_FUN
(
__gÀwMem‹yB¨rõrEXT
)

	)

9268 
	#GLEW_EXT_shadî_image_lﬂd_°‹e
 
	`GLEW_GET_VAR
(
__GLEW_EXT_shadî_image_lﬂd_°‹e
)

	)

9274 #i‚de‡
GL_EXT_shadow_funcs


9275 
	#GL_EXT_shadow_funcs
 1

	)

9277 
	#GLEW_EXT_shadow_funcs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_shadow_funcs
)

	)

9283 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


9284 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

9286 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

9288 
	#GLEW_EXT_sh¨ed_ãxtuª_∑Àâe
 
	`GLEW_GET_VAR
(
__GLEW_EXT_sh¨ed_ãxtuª_∑Àâe
)

	)

9294 #i‚de‡
GL_EXT_°ícû_˛ór_èg


9295 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

9297 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

9298 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

9300 
	#GLEW_EXT_°ícû_˛ór_èg
 
	`GLEW_GET_VAR
(
__GLEW_EXT_°ícû_˛ór_èg
)

	)

9306 #i‚de‡
GL_EXT_°ícû_two_side


9307 
	#GL_EXT_°ícû_two_side
 1

	)

9309 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

9310 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

9312 (
GLAPIENTRY
 * 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

9314 
	#glA˘iveSãncûFa˚EXT
 
	`GLEW_GET_FUN
(
__gÀwA˘iveSãncûFa˚EXT
)

	)

9316 
	#GLEW_EXT_°ícû_two_side
 
	`GLEW_GET_VAR
(
__GLEW_EXT_°ícû_two_side
)

	)

9322 #i‚de‡
GL_EXT_°ícû_wøp


9323 
	#GL_EXT_°ícû_wøp
 1

	)

9325 
	#GL_INCR_WRAP_EXT
 0x8507

	)

9326 
	#GL_DECR_WRAP_EXT
 0x8508

	)

9328 
	#GLEW_EXT_°ícû_wøp
 
	`GLEW_GET_VAR
(
__GLEW_EXT_°ícû_wøp
)

	)

9334 #i‚de‡
GL_EXT_subãxtuª


9335 
	#GL_EXT_subãxtuª
 1

	)

9337 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

9338 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

9339 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

9341 
	#glTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage1DEXT
)

	)

9342 
	#glTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage2DEXT
)

	)

9343 
	#glTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage3DEXT
)

	)

9345 
	#GLEW_EXT_subãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_subãxtuª
)

	)

9351 #i‚de‡
GL_EXT_ãxtuª


9352 
	#GL_EXT_ãxtuª
 1

	)

9354 
	#GL_ALPHA4_EXT
 0x803B

	)

9355 
	#GL_ALPHA8_EXT
 0x803C

	)

9356 
	#GL_ALPHA12_EXT
 0x803D

	)

9357 
	#GL_ALPHA16_EXT
 0x803E

	)

9358 
	#GL_LUMINANCE4_EXT
 0x803F

	)

9359 
	#GL_LUMINANCE8_EXT
 0x8040

	)

9360 
	#GL_LUMINANCE12_EXT
 0x8041

	)

9361 
	#GL_LUMINANCE16_EXT
 0x8042

	)

9362 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

9363 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

9364 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

9365 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

9366 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

9367 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

9368 
	#GL_INTENSITY_EXT
 0x8049

	)

9369 
	#GL_INTENSITY4_EXT
 0x804A

	)

9370 
	#GL_INTENSITY8_EXT
 0x804B

	)

9371 
	#GL_INTENSITY12_EXT
 0x804C

	)

9372 
	#GL_INTENSITY16_EXT
 0x804D

	)

9373 
	#GL_RGB2_EXT
 0x804E

	)

9374 
	#GL_RGB4_EXT
 0x804F

	)

9375 
	#GL_RGB5_EXT
 0x8050

	)

9376 
	#GL_RGB8_EXT
 0x8051

	)

9377 
	#GL_RGB10_EXT
 0x8052

	)

9378 
	#GL_RGB12_EXT
 0x8053

	)

9379 
	#GL_RGB16_EXT
 0x8054

	)

9380 
	#GL_RGBA2_EXT
 0x8055

	)

9381 
	#GL_RGBA4_EXT
 0x8056

	)

9382 
	#GL_RGB5_A1_EXT
 0x8057

	)

9383 
	#GL_RGBA8_EXT
 0x8058

	)

9384 
	#GL_RGB10_A2_EXT
 0x8059

	)

9385 
	#GL_RGBA12_EXT
 0x805A

	)

9386 
	#GL_RGBA16_EXT
 0x805B

	)

9387 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

9388 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

9389 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

9390 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

9391 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

9392 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

9393 
	#GL_REPLACE_EXT
 0x8062

	)

9394 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

9395 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

9397 
	#GLEW_EXT_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª
)

	)

9403 #i‚de‡
GL_EXT_ãxtuª3D


9404 
	#GL_EXT_ãxtuª3D
 1

	)

9406 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

9407 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

9408 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

9409 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

9410 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

9411 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

9412 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

9413 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

9414 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

9416 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

9418 
	#glTexImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexImage3DEXT
)

	)

9420 
	#GLEW_EXT_ãxtuª3D
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª3D
)

	)

9426 #i‚de‡
GL_EXT_ãxtuª_¨øy


9427 
	#GL_EXT_ãxtuª_¨øy
 1

	)

9429 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

9430 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

9431 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

9432 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

9433 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

9434 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

9435 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

9436 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

9438 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

9440 
	#glFømebuf„rTextuªLayîEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªLayîEXT
)

	)

9442 
	#GLEW_EXT_ãxtuª_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_¨øy
)

	)

9448 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


9449 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

9451 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

9452 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

9453 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

9454 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

9455 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

9457 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

9459 
	#glTexBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„rEXT
)

	)

9461 
	#GLEW_EXT_ãxtuª_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_buf„r_obje˘
)

	)

9467 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


9468 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

9470 
	#GLEW_EXT_ãxtuª_com¥essi⁄_dxt1
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_dxt1
)

	)

9476 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


9477 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

9479 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

9480 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

9481 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

9482 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

9484 
	#GLEW_EXT_ãxtuª_com¥essi⁄_œtc
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_œtc
)

	)

9490 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


9491 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

9493 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

9494 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

9495 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

9496 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

9498 
	#GLEW_EXT_ãxtuª_com¥essi⁄_rgtc
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_rgtc
)

	)

9504 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


9505 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

9507 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

9508 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

9509 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

9510 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

9512 
	#GLEW_EXT_ãxtuª_com¥essi⁄_s3tc
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_s3tc
)

	)

9518 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


9519 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

9521 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

9522 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

9523 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

9524 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

9525 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

9526 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

9527 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

9528 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

9529 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

9530 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

9531 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

9532 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

9534 
	#GLEW_EXT_ãxtuª_cube_m≠
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_cube_m≠
)

	)

9540 #i‚de‡
GL_EXT_ãxtuª_edge_˛amp


9541 
	#GL_EXT_ãxtuª_edge_˛amp
 1

	)

9543 
	#GL_CLAMP_TO_EDGE_EXT
 0x812F

	)

9545 
	#GLEW_EXT_ãxtuª_edge_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_edge_˛amp
)

	)

9551 #i‚de‡
GL_EXT_ãxtuª_ív


9552 
	#GL_EXT_ãxtuª_ív
 1

	)

9554 
	#GL_TEXTURE_ENV0_EXT
 0

	)

9555 
	#GL_ENV_BLEND_EXT
 0

	)

9556 
	#GL_TEXTURE_ENV_SHIFT_EXT
 0

	)

9557 
	#GL_ENV_REPLACE_EXT
 0

	)

9558 
	#GL_ENV_ADD_EXT
 0

	)

9559 
	#GL_ENV_SUBTRACT_EXT
 0

	)

9560 
	#GL_TEXTURE_ENV_MODE_ALPHA_EXT
 0

	)

9561 
	#GL_ENV_REVERSE_SUBTRACT_EXT
 0

	)

9562 
	#GL_ENV_REVERSE_BLEND_EXT
 0

	)

9563 
	#GL_ENV_COPY_EXT
 0

	)

9564 
	#GL_ENV_MODULATE_EXT
 0

	)

9566 
	#GLEW_EXT_ãxtuª_ív
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív
)

	)

9572 #i‚de‡
GL_EXT_ãxtuª_ív_add


9573 
	#GL_EXT_ãxtuª_ív_add
 1

	)

9575 
	#GLEW_EXT_ãxtuª_ív_add
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív_add
)

	)

9581 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


9582 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

9584 
	#GL_COMBINE_EXT
 0x8570

	)

9585 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

9586 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

9587 
	#GL_RGB_SCALE_EXT
 0x8573

	)

9588 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

9589 
	#GL_INTERPOLATE_EXT
 0x8575

	)

9590 
	#GL_CONSTANT_EXT
 0x8576

	)

9591 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

9592 
	#GL_PREVIOUS_EXT
 0x8578

	)

9593 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

9594 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

9595 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

9596 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

9597 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

9598 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

9599 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

9600 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

9601 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

9602 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

9603 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

9604 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

9606 
	#GLEW_EXT_ãxtuª_ív_comböe
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív_comböe
)

	)

9612 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


9613 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

9615 
	#GL_DOT3_RGB_EXT
 0x8740

	)

9616 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

9618 
	#GLEW_EXT_ãxtuª_ív_dŸ3
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív_dŸ3
)

	)

9624 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


9625 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

9627 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

9628 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

9630 
	#GLEW_EXT_ãxtuª_fûãr_™isŸr›ic
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_fûãr_™isŸr›ic
)

	)

9636 #i‚de‡
GL_EXT_ãxtuª_öãgî


9637 
	#GL_EXT_ãxtuª_öãgî
 1

	)

9639 
	#GL_RGBA32UI_EXT
 0x8D70

	)

9640 
	#GL_RGB32UI_EXT
 0x8D71

	)

9641 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

9642 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

9643 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

9644 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

9645 
	#GL_RGBA16UI_EXT
 0x8D76

	)

9646 
	#GL_RGB16UI_EXT
 0x8D77

	)

9647 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

9648 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

9649 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

9650 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

9651 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

9652 
	#GL_RGB8UI_EXT
 0x8D7D

	)

9653 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

9654 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

9655 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

9656 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

9657 
	#GL_RGBA32I_EXT
 0x8D82

	)

9658 
	#GL_RGB32I_EXT
 0x8D83

	)

9659 
	#GL_ALPHA32I_EXT
 0x8D84

	)

9660 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

9661 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

9662 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

9663 
	#GL_RGBA16I_EXT
 0x8D88

	)

9664 
	#GL_RGB16I_EXT
 0x8D89

	)

9665 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

9666 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

9667 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

9668 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

9669 
	#GL_RGBA8I_EXT
 0x8D8E

	)

9670 
	#GL_RGB8I_EXT
 0x8D8F

	)

9671 
	#GL_ALPHA8I_EXT
 0x8D90

	)

9672 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

9673 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

9674 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

9675 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

9676 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

9677 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

9678 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

9679 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

9680 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

9681 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

9682 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

9683 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

9684 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

9685 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

9687 (
GLAPIENTRY
 * 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

9688 (
GLAPIENTRY
 * 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

9689 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9690 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

9691 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9692 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

9694 
	#glCÀ¨Cﬁ‹IiEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Cﬁ‹IiEXT
)

	)

9695 
	#glCÀ¨Cﬁ‹IuiEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Cﬁ‹IuiEXT
)

	)

9696 
	#glGëTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIivEXT
)

	)

9697 
	#glGëTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIuivEXT
)

	)

9698 
	#glTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIivEXT
)

	)

9699 
	#glTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIuivEXT
)

	)

9701 
	#GLEW_EXT_ãxtuª_öãgî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_öãgî
)

	)

9707 #i‚de‡
GL_EXT_ãxtuª_lod_büs


9708 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

9710 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

9711 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

9712 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

9714 
	#GLEW_EXT_ãxtuª_lod_büs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_lod_büs
)

	)

9720 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


9721 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

9723 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

9724 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

9725 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

9727 
	#GLEW_EXT_ãxtuª_múr‹_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_múr‹_˛amp
)

	)

9733 #i‚de‡
GL_EXT_ãxtuª_obje˘


9734 
	#GL_EXT_ãxtuª_obje˘
 1

	)

9736 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

9737 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

9738 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

9739 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

9740 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

9742 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tãxtuªs
, 
	tGLboﬁón
* 
	tªsidí˚s
);

9743 (
GLAPIENTRY
 * 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

9744 (
GLAPIENTRY
 * 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tãxtuªs
);

9745 (
GLAPIENTRY
 * 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tãxtuªs
);

9746 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9747 (
GLAPIENTRY
 * 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tãxtuªs
, c⁄° 
	tGL˛ampf
* 
	t¥i‹ôõs
);

9749 
	#glAªTextuªsResidítEXT
 
	`GLEW_GET_FUN
(
__gÀwAªTextuªsResidítEXT
)

	)

9750 
	#glBödTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwBödTextuªEXT
)

	)

9751 
	#glDñëeTextuªsEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeTextuªsEXT
)

	)

9752 
	#glGíTextuªsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíTextuªsEXT
)

	)

9753 
	#glIsTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwIsTextuªEXT
)

	)

9754 
	#glPri‹ôizeTextuªsEXT
 
	`GLEW_GET_FUN
(
__gÀwPri‹ôizeTextuªsEXT
)

	)

9756 
	#GLEW_EXT_ãxtuª_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_obje˘
)

	)

9762 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


9763 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

9765 
	#GL_PERTURB_EXT
 0x85AE

	)

9766 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

9768 (
GLAPIENTRY
 * 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

9770 
	#glTextuªN‹mÆEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªN‹mÆEXT
)

	)

9772 
	#GLEW_EXT_ãxtuª_≥πurb_n‹mÆ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_≥πurb_n‹mÆ
)

	)

9778 #i‚de‡
GL_EXT_ãxtuª_ª˘™gÀ


9779 
	#GL_EXT_ãxtuª_ª˘™gÀ
 1

	)

9781 
	#GL_TEXTURE_RECTANGLE_EXT
 0x84F5

	)

9782 
	#GL_TEXTURE_BINDING_RECTANGLE_EXT
 0x84F6

	)

9783 
	#GL_PROXY_TEXTURE_RECTANGLE_EXT
 0x84F7

	)

9784 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
 0x84F8

	)

9786 
	#GLEW_EXT_ãxtuª_ª˘™gÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ª˘™gÀ
)

	)

9792 #i‚de‡
GL_EXT_ãxtuª_sRGB


9793 
	#GL_EXT_ãxtuª_sRGB
 1

	)

9795 
	#GL_SRGB_EXT
 0x8C40

	)

9796 
	#GL_SRGB8_EXT
 0x8C41

	)

9797 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

9798 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

9799 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

9800 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

9801 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

9802 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

9803 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

9804 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

9805 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

9806 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

9807 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

9808 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

9809 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

9810 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

9812 
	#GLEW_EXT_ãxtuª_sRGB
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_sRGB
)

	)

9818 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


9819 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

9821 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

9822 
	#GL_DECODE_EXT
 0x8A49

	)

9823 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

9825 
	#GLEW_EXT_ãxtuª_sRGB_decode
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_sRGB_decode
)

	)

9831 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


9832 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

9834 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

9835 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

9836 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

9838 
	#GLEW_EXT_ãxtuª_sh¨ed_exp⁄ít
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_sh¨ed_exp⁄ít
)

	)

9844 #i‚de‡
GL_EXT_ãxtuª_¢‹m


9845 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

9847 
	#GL_RED_SNORM
 0x8F90

	)

9848 
	#GL_RG_SNORM
 0x8F91

	)

9849 
	#GL_RGB_SNORM
 0x8F92

	)

9850 
	#GL_RGBA_SNORM
 0x8F93

	)

9851 
	#GL_R8_SNORM
 0x8F94

	)

9852 
	#GL_RG8_SNORM
 0x8F95

	)

9853 
	#GL_RGB8_SNORM
 0x8F96

	)

9854 
	#GL_RGBA8_SNORM
 0x8F97

	)

9855 
	#GL_R16_SNORM
 0x8F98

	)

9856 
	#GL_RG16_SNORM
 0x8F99

	)

9857 
	#GL_RGB16_SNORM
 0x8F9A

	)

9858 
	#GL_RGBA16_SNORM
 0x8F9B

	)

9859 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

9860 
	#GL_ALPHA_SNORM
 0x9010

	)

9861 
	#GL_LUMINANCE_SNORM
 0x9011

	)

9862 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

9863 
	#GL_INTENSITY_SNORM
 0x9013

	)

9864 
	#GL_ALPHA8_SNORM
 0x9014

	)

9865 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

9866 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

9867 
	#GL_INTENSITY8_SNORM
 0x9017

	)

9868 
	#GL_ALPHA16_SNORM
 0x9018

	)

9869 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

9870 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

9871 
	#GL_INTENSITY16_SNORM
 0x901B

	)

9873 
	#GLEW_EXT_ãxtuª_¢‹m
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_¢‹m
)

	)

9879 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


9880 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

9882 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

9883 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

9884 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

9885 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

9886 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

9888 
	#GLEW_EXT_ãxtuª_swizzÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_swizzÀ
)

	)

9894 #i‚de‡
GL_EXT_timî_quîy


9895 
	#GL_EXT_timî_quîy
 1

	)

9897 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

9899 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

9900 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9902 
	#glGëQuîyObje˘i64vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘i64vEXT
)

	)

9903 
	#glGëQuîyObje˘ui64vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ui64vEXT
)

	)

9905 
	#GLEW_EXT_timî_quîy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_timî_quîy
)

	)

9911 #i‚de‡
GL_EXT_å™sf‹m_„edback


9912 
	#GL_EXT_å™sf‹m_„edback
 1

	)

9914 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

9915 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

9916 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

9917 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

9918 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

9919 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

9920 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

9921 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

9922 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

9923 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

9924 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

9925 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

9926 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

9927 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

9928 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

9930 (
GLAPIENTRY
 * 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

9931 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

9932 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

9933 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

9934 (
GLAPIENTRY
 * 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

9935 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

9936 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 ** 
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

9938 
	#glBegöTønsf‹mFìdbackEXT
 
	`GLEW_GET_FUN
(
__gÀwBegöTønsf‹mFìdbackEXT
)

	)

9939 
	#glBödBuf„rBa£EXT
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rBa£EXT
)

	)

9940 
	#glBödBuf„rOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rOff£tEXT
)

	)

9941 
	#glBödBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rR™geEXT
)

	)

9942 
	#glEndTønsf‹mFìdbackEXT
 
	`GLEW_GET_FUN
(
__gÀwEndTønsf‹mFìdbackEXT
)

	)

9943 
	#glGëTønsf‹mFìdbackV¨yögEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTønsf‹mFìdbackV¨yögEXT
)

	)

9944 
	#glTønsf‹mFìdbackV¨yögsEXT
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackV¨yögsEXT
)

	)

9946 
	#GLEW_EXT_å™sf‹m_„edback
 
	`GLEW_GET_VAR
(
__GLEW_EXT_å™sf‹m_„edback
)

	)

9952 #i‚de‡
GL_EXT_vîãx_¨øy


9953 
	#GL_EXT_vîãx_¨øy
 1

	)

9955 
	#GL_DOUBLE_EXT
 0x140A

	)

9956 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

9957 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

9958 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

9959 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

9960 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

9961 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

9962 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

9963 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

9964 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

9965 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

9966 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

9967 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

9968 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

9969 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

9970 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

9971 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

9972 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

9973 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

9974 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

9975 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

9976 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

9977 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

9978 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

9979 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

9980 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

9981 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

9982 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

9983 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

9984 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

9985 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

9986 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

9987 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

9989 (
GLAPIENTRY
 * 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

9990 (
GLAPIENTRY
 * 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° * 
	tpoöãr
);

9991 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9992 (
GLAPIENTRY
 * 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
* 
	tpoöãr
);

9993 (
GLAPIENTRY
 * 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° * 
	tpoöãr
);

9994 (
GLAPIENTRY
 * 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° * 
	tpoöãr
);

9995 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° * 
	tpoöãr
);

9996 (
GLAPIENTRY
 * 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° * 
	tpoöãr
);

9998 
	#glAºayEÀmítEXT
 
	`GLEW_GET_FUN
(
__gÀwAºayEÀmítEXT
)

	)

9999 
	#glCﬁ‹PoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹PoöãrEXT
)

	)

10000 
	#glDøwAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysEXT
)

	)

10001 
	#glEdgeFœgPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwEdgeFœgPoöãrEXT
)

	)

10002 
	#glIndexPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwIndexPoöãrEXT
)

	)

10003 
	#glN‹mÆPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆPoöãrEXT
)

	)

10004 
	#glTexCo‹dPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dPoöãrEXT
)

	)

10005 
	#glVîãxPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxPoöãrEXT
)

	)

10007 
	#GLEW_EXT_vîãx_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_¨øy
)

	)

10013 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


10014 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

10016 
	#GL_BGRA
 0x80E1

	)

10018 
	#GLEW_EXT_vîãx_¨øy_bgø
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_¨øy_bgø
)

	)

10024 #i‚de‡
GL_EXT_vîãx_©åib_64bô


10025 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

10027 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

10028 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

10029 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

10030 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

10031 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

10032 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

10033 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

10034 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

10035 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

10036 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

10037 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

10038 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

10040 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

10041 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

10042 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10043 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10044 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10045 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10046 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10047 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10048 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10049 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10050 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

10052 
	#glGëVîãxAâribLdvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLdvEXT
)

	)

10053 
	#glVîãxAºayVîãxAâribLOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxAâribLOff£tEXT
)

	)

10054 
	#glVîãxAâribL1dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1dEXT
)

	)

10055 
	#glVîãxAâribL1dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1dvEXT
)

	)

10056 
	#glVîãxAâribL2dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2dEXT
)

	)

10057 
	#glVîãxAâribL2dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2dvEXT
)

	)

10058 
	#glVîãxAâribL3dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3dEXT
)

	)

10059 
	#glVîãxAâribL3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3dvEXT
)

	)

10060 
	#glVîãxAâribL4dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4dEXT
)

	)

10061 
	#glVîãxAâribL4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4dvEXT
)

	)

10062 
	#glVîãxAâribLPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLPoöãrEXT
)

	)

10064 
	#GLEW_EXT_vîãx_©åib_64bô
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_©åib_64bô
)

	)

10070 #i‚de‡
GL_EXT_vîãx_shadî


10071 
	#GL_EXT_vîãx_shadî
 1

	)

10073 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

10074 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

10075 
	#GL_OP_INDEX_EXT
 0x8782

	)

10076 
	#GL_OP_NEGATE_EXT
 0x8783

	)

10077 
	#GL_OP_DOT3_EXT
 0x8784

	)

10078 
	#GL_OP_DOT4_EXT
 0x8785

	)

10079 
	#GL_OP_MUL_EXT
 0x8786

	)

10080 
	#GL_OP_ADD_EXT
 0x8787

	)

10081 
	#GL_OP_MADD_EXT
 0x8788

	)

10082 
	#GL_OP_FRAC_EXT
 0x8789

	)

10083 
	#GL_OP_MAX_EXT
 0x878A

	)

10084 
	#GL_OP_MIN_EXT
 0x878B

	)

10085 
	#GL_OP_SET_GE_EXT
 0x878C

	)

10086 
	#GL_OP_SET_LT_EXT
 0x878D

	)

10087 
	#GL_OP_CLAMP_EXT
 0x878E

	)

10088 
	#GL_OP_FLOOR_EXT
 0x878F

	)

10089 
	#GL_OP_ROUND_EXT
 0x8790

	)

10090 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

10091 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

10092 
	#GL_OP_POWER_EXT
 0x8793

	)

10093 
	#GL_OP_RECIP_EXT
 0x8794

	)

10094 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

10095 
	#GL_OP_SUB_EXT
 0x8796

	)

10096 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

10097 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

10098 
	#GL_OP_MOV_EXT
 0x8799

	)

10099 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

10100 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

10101 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

10102 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

10103 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

10104 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

10105 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

10106 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

10107 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

10108 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

10109 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

10110 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

10111 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

10112 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

10113 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

10114 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

10115 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

10116 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

10117 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

10118 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

10119 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

10120 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

10121 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

10122 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

10123 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

10124 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

10125 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

10126 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

10127 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

10128 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

10129 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

10130 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

10131 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

10132 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

10133 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

10134 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

10135 
	#GL_SCALAR_EXT
 0x87BE

	)

10136 
	#GL_VECTOR_EXT
 0x87BF

	)

10137 
	#GL_MATRIX_EXT
 0x87C0

	)

10138 
	#GL_VARIANT_EXT
 0x87C1

	)

10139 
	#GL_INVARIANT_EXT
 0x87C2

	)

10140 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

10141 
	#GL_LOCAL_EXT
 0x87C4

	)

10142 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

10143 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

10144 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

10145 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

10146 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

10147 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

10148 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

10149 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CC

	)

10150 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CD

	)

10151 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

10152 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

10153 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

10154 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

10155 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

10156 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

10157 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

10158 
	#GL_X_EXT
 0x87D5

	)

10159 
	#GL_Y_EXT
 0x87D6

	)

10160 
	#GL_Z_EXT
 0x87D7

	)

10161 
	#GL_W_EXT
 0x87D8

	)

10162 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

10163 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

10164 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

10165 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

10166 
	#GL_ZERO_EXT
 0x87DD

	)

10167 
	#GL_ONE_EXT
 0x87DE

	)

10168 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

10169 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

10170 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

10171 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

10172 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

10173 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

10174 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

10175 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

10176 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

10177 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

10178 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

10179 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

10180 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

10181 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

10182 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

10184 (
GLAPIENTRY
 * 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

10185 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

10186 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

10187 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

10188 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

10189 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

10190 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10191 (
GLAPIENTRY
 * 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10192 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10193 (
GLAPIENTRY
 * 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10194 (
GLAPIENTRY
 * 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

10195 (
GLAPIENTRY
 * 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10196 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©aTy≥
, GLíum 
	t°‹ageTy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

10197 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

10198 (
GLAPIENTRY
 * 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10199 (
GLAPIENTRY
 * 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10200 (
GLAPIENTRY
 * 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10201 (
GLAPIENTRY
 * 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10202 (
GLAPIENTRY
 * 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10203 (
GLAPIENTRY
 * 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10204 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10205 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10206 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10207 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
 **
	td©a
);

10208 (
GLAPIENTRY
 * 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10209 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

10210 (
GLAPIENTRY
 * 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLvoid
 *
	taddr
);

10211 (
GLAPIENTRY
 * 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLvoid
 *
	taddr
);

10212 (
GLAPIENTRY
 * 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

10213 (
GLAPIENTRY
 * 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

10214 (
GLAPIENTRY
 * 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

10215 (
GLAPIENTRY
 * 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10216 (
GLAPIENTRY
 * 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, 
	tGLvoid
 *
	taddr
);

10217 (
GLAPIENTRY
 * 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLbyã
 *
	taddr
);

10218 (
GLAPIENTRY
 * 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLdoubÀ
 *
	taddr
);

10219 (
GLAPIENTRY
 * 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLÊﬂt
 *
	taddr
);

10220 (
GLAPIENTRY
 * 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLöt
 *
	taddr
);

10221 (
GLAPIENTRY
 * 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsh‹t
 *
	taddr
);

10222 (
GLAPIENTRY
 * 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLubyã
 *
	taddr
);

10223 (
GLAPIENTRY
 * 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, GLuöà*
	taddr
);

10224 (
GLAPIENTRY
 * 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLush‹t
 *
	taddr
);

10225 (
GLAPIENTRY
 * 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10227 
	#glBegöVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwBegöVîãxShadîEXT
)

	)

10228 
	#glBödLightP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödLightP¨amëîEXT
)

	)

10229 
	#glBödM©îülP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödM©îülP¨amëîEXT
)

	)

10230 
	#glBödP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödP¨amëîEXT
)

	)

10231 
	#glBödTexGíP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödTexGíP¨amëîEXT
)

	)

10232 
	#glBödTextuªUnôP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödTextuªUnôP¨amëîEXT
)

	)

10233 
	#glBödVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxShadîEXT
)

	)

10234 
	#glDñëeVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeVîãxShadîEXT
)

	)

10235 
	#glDißbÀV¨ü¡Clõ¡SèãEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀV¨ü¡Clõ¡SèãEXT
)

	)

10236 
	#glE«bÀV¨ü¡Clõ¡SèãEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀV¨ü¡Clõ¡SèãEXT
)

	)

10237 
	#glEndVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwEndVîãxShadîEXT
)

	)

10238 
	#glExåa˘Comp⁄ítEXT
 
	`GLEW_GET_FUN
(
__gÀwExåa˘Comp⁄ítEXT
)

	)

10239 
	#glGíSymbﬁsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíSymbﬁsEXT
)

	)

10240 
	#glGíVîãxShadîsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíVîãxShadîsEXT
)

	)

10241 
	#glGëInv¨ü¡BoﬁónvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëInv¨ü¡BoﬁónvEXT
)

	)

10242 
	#glGëInv¨ü¡FlﬂtvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëInv¨ü¡FlﬂtvEXT
)

	)

10243 
	#glGëInv¨ü¡I¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëInv¨ü¡I¡egîvEXT
)

	)

10244 
	#glGëLoˇlC⁄°™tBoﬁónvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëLoˇlC⁄°™tBoﬁónvEXT
)

	)

10245 
	#glGëLoˇlC⁄°™tFlﬂtvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëLoˇlC⁄°™tFlﬂtvEXT
)

	)

10246 
	#glGëLoˇlC⁄°™tI¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëLoˇlC⁄°™tI¡egîvEXT
)

	)

10247 
	#glGëV¨ü¡BoﬁónvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡BoﬁónvEXT
)

	)

10248 
	#glGëV¨ü¡FlﬂtvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡FlﬂtvEXT
)

	)

10249 
	#glGëV¨ü¡I¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡I¡egîvEXT
)

	)

10250 
	#glGëV¨ü¡PoöãrvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡PoöãrvEXT
)

	)

10251 
	#glIn£πComp⁄ítEXT
 
	`GLEW_GET_FUN
(
__gÀwIn£πComp⁄ítEXT
)

	)

10252 
	#glIsV¨ü¡E«bÀdEXT
 
	`GLEW_GET_FUN
(
__gÀwIsV¨ü¡E«bÀdEXT
)

	)

10253 
	#glSëInv¨ü¡EXT
 
	`GLEW_GET_FUN
(
__gÀwSëInv¨ü¡EXT
)

	)

10254 
	#glSëLoˇlC⁄°™tEXT
 
	`GLEW_GET_FUN
(
__gÀwSëLoˇlC⁄°™tEXT
)

	)

10255 
	#glShadîOp1EXT
 
	`GLEW_GET_FUN
(
__gÀwShadîOp1EXT
)

	)

10256 
	#glShadîOp2EXT
 
	`GLEW_GET_FUN
(
__gÀwShadîOp2EXT
)

	)

10257 
	#glShadîOp3EXT
 
	`GLEW_GET_FUN
(
__gÀwShadîOp3EXT
)

	)

10258 
	#glSwizzÀEXT
 
	`GLEW_GET_FUN
(
__gÀwSwizzÀEXT
)

	)

10259 
	#glV¨ü¡PoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡PoöãrEXT
)

	)

10260 
	#glV¨ü¡bvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡bvEXT
)

	)

10261 
	#glV¨ü¡dvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡dvEXT
)

	)

10262 
	#glV¨ü¡fvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡fvEXT
)

	)

10263 
	#glV¨ü¡ivEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡ivEXT
)

	)

10264 
	#glV¨ü¡svEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡svEXT
)

	)

10265 
	#glV¨ü¡ubvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡ubvEXT
)

	)

10266 
	#glV¨ü¡uivEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡uivEXT
)

	)

10267 
	#glV¨ü¡usvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡usvEXT
)

	)

10268 
	#glWrôeMaskEXT
 
	`GLEW_GET_FUN
(
__gÀwWrôeMaskEXT
)

	)

10270 
	#GLEW_EXT_vîãx_shadî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_shadî
)

	)

10276 #i‚de‡
GL_EXT_vîãx_weightög


10277 
	#GL_EXT_vîãx_weightög
 1

	)

10279 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

10280 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

10281 
	#GL_MODELVIEW0_EXT
 0x1700

	)

10282 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

10283 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

10284 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

10285 
	#GL_MODELVIEW1_EXT
 0x850A

	)

10286 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

10287 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

10288 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

10289 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

10290 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

10291 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

10293 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, * 
	tpoöãr
);

10294 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

10295 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(
	tGLÊﬂt
* 
	tweight
);

10297 
	#glVîãxWeightPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeightPoöãrEXT
)

	)

10298 
	#glVîãxWeightfEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeightfEXT
)

	)

10299 
	#glVîãxWeightfvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeightfvEXT
)

	)

10301 
	#GLEW_EXT_vîãx_weightög
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_weightög
)

	)

10307 #i‚de‡
GL_EXT_x11_sync_obje˘


10308 
	#GL_EXT_x11_sync_obje˘
 1

	)

10310 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

10312 
GLsync
 (
	tGLAPIENTRY
 * 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

10314 
	#glImp‹tSyncEXT
 
	`GLEW_GET_FUN
(
__gÀwImp‹tSyncEXT
)

	)

10316 
	#GLEW_EXT_x11_sync_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_x11_sync_obje˘
)

	)

10322 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


10323 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

10325 (
GLAPIENTRY
 * 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

10327 
	#glFømeTîmö©‹GREMEDY
 
	`GLEW_GET_FUN
(
__gÀwFømeTîmö©‹GREMEDY
)

	)

10329 
	#GLEW_GREMEDY_‰ame_ãrmö©‹
 
	`GLEW_GET_VAR
(
__GLEW_GREMEDY_‰ame_ãrmö©‹
)

	)

10335 #i‚de‡
GL_GREMEDY_°rög_m¨kî


10336 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

10338 (
GLAPIENTRY
 * 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° * 
	t°rög
);

10340 
	#glSåögM¨kîGREMEDY
 
	`GLEW_GET_FUN
(
__gÀwSåögM¨kîGREMEDY
)

	)

10342 
	#GLEW_GREMEDY_°rög_m¨kî
 
	`GLEW_GET_VAR
(
__GLEW_GREMEDY_°rög_m¨kî
)

	)

10348 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


10349 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

10351 
	#GLEW_HP_c⁄vﬁuti⁄_b‹dî_modes
 
	`GLEW_GET_VAR
(
__GLEW_HP_c⁄vﬁuti⁄_b‹dî_modes
)

	)

10357 #i‚de‡
GL_HP_image_å™sf‹m


10358 
	#GL_HP_image_å™sf‹m
 1

	)

10360 (
GLAPIENTRY
 * 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

10361 (
GLAPIENTRY
 * 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

10362 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

10363 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

10364 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

10365 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

10367 
	#glGëImageTønsf‹mP¨amëîfvHP
 
	`GLEW_GET_FUN
(
__gÀwGëImageTønsf‹mP¨amëîfvHP
)

	)

10368 
	#glGëImageTønsf‹mP¨amëîivHP
 
	`GLEW_GET_FUN
(
__gÀwGëImageTønsf‹mP¨amëîivHP
)

	)

10369 
	#glImageTønsf‹mP¨amëîfHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîfHP
)

	)

10370 
	#glImageTønsf‹mP¨amëîfvHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîfvHP
)

	)

10371 
	#glImageTønsf‹mP¨amëîiHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîiHP
)

	)

10372 
	#glImageTønsf‹mP¨amëîivHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîivHP
)

	)

10374 
	#GLEW_HP_image_å™sf‹m
 
	`GLEW_GET_VAR
(
__GLEW_HP_image_å™sf‹m
)

	)

10380 #i‚de‡
GL_HP_oc˛usi⁄_ã°


10381 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

10383 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

10384 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

10386 
	#GLEW_HP_oc˛usi⁄_ã°
 
	`GLEW_GET_VAR
(
__GLEW_HP_oc˛usi⁄_ã°
)

	)

10392 #i‚de‡
GL_HP_ãxtuª_lightög


10393 
	#GL_HP_ãxtuª_lightög
 1

	)

10395 
	#GLEW_HP_ãxtuª_lightög
 
	`GLEW_GET_VAR
(
__GLEW_HP_ãxtuª_lightög
)

	)

10401 #i‚de‡
GL_IBM_cuŒ_vîãx


10402 
	#GL_IBM_cuŒ_vîãx
 1

	)

10404 
	#GL_CULL_VERTEX_IBM
 103050

	)

10406 
	#GLEW_IBM_cuŒ_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_IBM_cuŒ_vîãx
)

	)

10412 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


10413 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

10415 (
GLAPIENTRY
 * 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
* 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

10416 (
GLAPIENTRY
 * 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
* 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 * c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

10418 
	#glMu…iModeDøwAºaysIBM
 
	`GLEW_GET_FUN
(
__gÀwMu…iModeDøwAºaysIBM
)

	)

10419 
	#glMu…iModeDøwEÀmítsIBM
 
	`GLEW_GET_FUN
(
__gÀwMu…iModeDøwEÀmítsIBM
)

	)

10421 
	#GLEW_IBM_mu…imode_døw_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_IBM_mu…imode_døw_¨øys
)

	)

10427 #i‚de‡
GL_IBM_ø°îpos_˛ù


10428 
	#GL_IBM_ø°îpos_˛ù
 1

	)

10430 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 103010

	)

10432 
	#GLEW_IBM_ø°îpos_˛ù
 
	`GLEW_GET_VAR
(
__GLEW_IBM_ø°îpos_˛ù
)

	)

10438 #i‚de‡
GL_IBM_°©ic_d©a


10439 
	#GL_IBM_°©ic_d©a
 1

	)

10441 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

10442 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

10444 
	#GLEW_IBM_°©ic_d©a
 
	`GLEW_GET_VAR
(
__GLEW_IBM_°©ic_d©a
)

	)

10450 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


10451 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

10453 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

10455 
	#GLEW_IBM_ãxtuª_múr‹ed_ª≥©
 
	`GLEW_GET_VAR
(
__GLEW_IBM_ãxtuª_múr‹ed_ª≥©
)

	)

10461 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


10462 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

10464 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

10465 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

10466 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

10467 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

10468 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

10469 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

10470 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

10471 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

10472 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

10473 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

10474 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

10475 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

10476 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

10477 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

10478 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

10479 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

10481 (
GLAPIENTRY
 * 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10482 (
GLAPIENTRY
 * 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10483 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10484 (
GLAPIENTRY
 * 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10485 (
GLAPIENTRY
 * 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10486 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10487 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10488 (
GLAPIENTRY
 * 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10490 
	#glCﬁ‹PoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹PoöãrLi°IBM
)

	)

10491 
	#glEdgeFœgPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwEdgeFœgPoöãrLi°IBM
)

	)

10492 
	#glFogCo‹dPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dPoöãrLi°IBM
)

	)

10493 
	#glIndexPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwIndexPoöãrLi°IBM
)

	)

10494 
	#glN‹mÆPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆPoöãrLi°IBM
)

	)

10495 
	#glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹PoöãrLi°IBM
)

	)

10496 
	#glTexCo‹dPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dPoöãrLi°IBM
)

	)

10497 
	#glVîãxPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwVîãxPoöãrLi°IBM
)

	)

10499 
	#GLEW_IBM_vîãx_¨øy_li°s
 
	`GLEW_GET_VAR
(
__GLEW_IBM_vîãx_¨øy_li°s
)

	)

10505 #i‚de‡
GL_INGR_cﬁ‹_˛amp


10506 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

10508 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

10509 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

10510 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

10511 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

10512 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

10513 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

10514 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

10515 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

10517 
	#GLEW_INGR_cﬁ‹_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_INGR_cﬁ‹_˛amp
)

	)

10523 #i‚de‡
GL_INGR_öãæa˚_ªad


10524 
	#GL_INGR_öãæa˚_ªad
 1

	)

10526 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

10528 
	#GLEW_INGR_öãæa˚_ªad
 
	`GLEW_GET_VAR
(
__GLEW_INGR_öãæa˚_ªad
)

	)

10534 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


10535 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

10537 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

10538 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

10539 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

10540 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

10541 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

10543 (
GLAPIENTRY
 * 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

10544 (
GLAPIENTRY
 * 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

10545 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

10546 (
GLAPIENTRY
 * 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

10548 
	#glCﬁ‹PoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹PoöãrvINTEL
)

	)

10549 
	#glN‹mÆPoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆPoöãrvINTEL
)

	)

10550 
	#glTexCo‹dPoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dPoöãrvINTEL
)

	)

10551 
	#glVîãxPoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwVîãxPoöãrvINTEL
)

	)

10553 
	#GLEW_INTEL_∑øŒñ_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_INTEL_∑øŒñ_¨øys
)

	)

10559 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


10560 
	#GL_INTEL_ãxtuª_sciss‹
 1

	)

10562 (
GLAPIENTRY
 * 
	tPFNGLTEXSCISSORFUNCINTELPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tlfunc
, GLíum 
	thfunc
);

10563 (
GLAPIENTRY
 * 
	tPFNGLTEXSCISSORINTELPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGL˛ampf
 
	téow
, GL˛amp‡
	tthigh
);

10565 
	#glTexSciss‹FuncINTEL
 
	`GLEW_GET_FUN
(
__gÀwTexSciss‹FuncINTEL
)

	)

10566 
	#glTexSciss‹INTEL
 
	`GLEW_GET_FUN
(
__gÀwTexSciss‹INTEL
)

	)

10568 
	#GLEW_INTEL_ãxtuª_sciss‹
 
	`GLEW_GET_VAR
(
__GLEW_INTEL_ãxtuª_sciss‹
)

	)

10574 #i‚de‡
GL_KHR_debug


10575 
	#GL_KHR_debug
 1

	)

10577 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

10578 
	#GL_STACK_OVERFLOW
 0x0503

	)

10579 
	#GL_STACK_UNDERFLOW
 0x0504

	)

10580 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

10581 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

10582 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

10583 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

10584 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

10585 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

10586 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

10587 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

10588 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

10589 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

10590 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

10591 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

10592 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

10593 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

10594 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

10595 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

10596 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

10597 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

10598 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

10599 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

10600 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

10601 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

10602 
	#GL_BUFFER
 0x82E0

	)

10603 
	#GL_SHADER
 0x82E1

	)

10604 
	#GL_PROGRAM
 0x82E2

	)

10605 
	#GL_QUERY
 0x82E3

	)

10606 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

10607 
	#GL_SAMPLER
 0x82E6

	)

10608 
	#GL_DISPLAY_LIST
 0x82E7

	)

10609 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

10610 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

10611 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

10612 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

10613 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

10614 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

10615 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

10616 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

10618 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tmesßge
, 
	tGLvoid
* 
	tu£rP¨am
);

10620 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, * 
	tu£rP¨am
);

10621 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

10622 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tbuf
);

10623 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
* 
	tsour˚s
, GLíum* 
	tty≥s
, GLuöt* 
	tids
, GLíum* 
	t£vîôõs
, GLsizei* 
	tÀngths
, 
	tGLch¨
* 
	tmesßgeLog
);

10624 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

10625 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(* 
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

10626 (
GLAPIENTRY
 * 
	tPFNGLGETPOINTERVPROC
Ë(
	tGLíum
 
	t≤ame
, ** 
	t∑øms
);

10627 (
GLAPIENTRY
 * 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tœbñ
);

10628 (
GLAPIENTRY
 * 
	tPFNGLOBJECTPTRLABELPROC
Ë(* 
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tœbñ
);

10629 (
GLAPIENTRY
 * 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 * 
	tmesßge
);

10631 
	#glDebugMesßgeCÆlback
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeCÆlback
)

	)

10632 
	#glDebugMesßgeC⁄åﬁ
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeC⁄åﬁ
)

	)

10633 
	#glDebugMesßgeIn£π
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeIn£π
)

	)

10634 
	#glGëDebugMesßgeLog
 
	`GLEW_GET_FUN
(
__gÀwGëDebugMesßgeLog
)

	)

10635 
	#glGëObje˘Labñ
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘Labñ
)

	)

10636 
	#glGëObje˘PåLabñ
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘PåLabñ
)

	)

10637 
	#glGëPoöãrv
 
	`GLEW_GET_FUN
(
__gÀwGëPoöãrv
)

	)

10638 
	#glObje˘Labñ
 
	`GLEW_GET_FUN
(
__gÀwObje˘Labñ
)

	)

10639 
	#glObje˘PåLabñ
 
	`GLEW_GET_FUN
(
__gÀwObje˘PåLabñ
)

	)

10640 
	#glPushDebugGroup
 
	`GLEW_GET_FUN
(
__gÀwPushDebugGroup
)

	)

10642 
	#GLEW_KHR_debug
 
	`GLEW_GET_VAR
(
__GLEW_KHR_debug
)

	)

10648 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


10649 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

10651 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

10652 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

10653 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

10654 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

10655 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

10656 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

10657 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

10658 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

10659 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

10660 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

10661 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

10662 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

10663 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

10664 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

10665 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

10666 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

10667 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

10668 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

10669 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

10670 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

10671 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

10672 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

10673 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

10674 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

10675 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

10676 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

10677 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

10678 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

10680 
	#GLEW_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 
	`GLEW_GET_VAR
(
__GLEW_KHR_ãxtuª_com¥essi⁄_a°c_ldr
)

	)

10686 #i‚de‡
GL_KTX_buf„r_ªgi⁄


10687 
	#GL_KTX_buf„r_ªgi⁄
 1

	)

10689 
	#GL_KTX_FRONT_REGION
 0x0

	)

10690 
	#GL_KTX_BACK_REGION
 0x1

	)

10691 
	#GL_KTX_Z_REGION
 0x2

	)

10692 
	#GL_KTX_STENCIL_REGION
 0x3

	)

10694 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBUFFERREGIONENABLEDPROC
) ();

10695 (
GLAPIENTRY
 * 
	tPFNGLDELETEBUFFERREGIONPROC
Ë(
	tGLíum
 
	tªgi⁄
);

10696 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERREGIONPROC
Ë(
	tGLuöt
 
	tªgi⁄
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	txDe°
, GLöà
	tyDe°
);

10697 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLNEWBUFFERREGIONPROC
Ë(
	tGLíum
 
	tªgi⁄
);

10698 (
GLAPIENTRY
 * 
	tPFNGLREADBUFFERREGIONPROC
Ë(
	tGLuöt
 
	tªgi⁄
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

10700 
	#glBuf„rRegi⁄E«bÀd
 
	`GLEW_GET_FUN
(
__gÀwBuf„rRegi⁄E«bÀd
)

	)

10701 
	#glDñëeBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwDñëeBuf„rRegi⁄
)

	)

10702 
	#glDøwBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rRegi⁄
)

	)

10703 
	#glNewBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwNewBuf„rRegi⁄
)

	)

10704 
	#glRódBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwRódBuf„rRegi⁄
)

	)

10706 
	#GLEW_KTX_buf„r_ªgi⁄
 
	`GLEW_GET_VAR
(
__GLEW_KTX_buf„r_ªgi⁄
)

	)

10712 #i‚de‡
GL_MESAX_ãxtuª_°ack


10713 
	#GL_MESAX_ãxtuª_°ack
 1

	)

10715 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

10716 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

10717 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

10718 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

10719 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

10720 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

10722 
	#GLEW_MESAX_ãxtuª_°ack
 
	`GLEW_GET_VAR
(
__GLEW_MESAX_ãxtuª_°ack
)

	)

10728 #i‚de‡
GL_MESA_∑ck_övît


10729 
	#GL_MESA_∑ck_övît
 1

	)

10731 
	#GL_PACK_INVERT_MESA
 0x8758

	)

10733 
	#GLEW_MESA_∑ck_övît
 
	`GLEW_GET_VAR
(
__GLEW_MESA_∑ck_övît
)

	)

10739 #i‚de‡
GL_MESA_ªsize_buf„rs


10740 
	#GL_MESA_ªsize_buf„rs
 1

	)

10742 (
GLAPIENTRY
 * 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

10744 
	#glResizeBuf„rsMESA
 
	`GLEW_GET_FUN
(
__gÀwResizeBuf„rsMESA
)

	)

10746 
	#GLEW_MESA_ªsize_buf„rs
 
	`GLEW_GET_VAR
(
__GLEW_MESA_ªsize_buf„rs
)

	)

10752 #i‚de‡
GL_MESA_wödow_pos


10753 
	#GL_MESA_wödow_pos
 1

	)

10755 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10756 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

10757 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10758 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

10759 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

10760 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

10761 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10762 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

10763 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10764 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

10765 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10766 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

10767 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10768 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

10769 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10770 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

10771 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdouble);

10772 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

10773 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10774 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

10775 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10776 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

10777 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10778 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

10780 
	#glWödowPos2dMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dMESA
)

	)

10781 
	#glWödowPos2dvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dvMESA
)

	)

10782 
	#glWödowPos2fMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fMESA
)

	)

10783 
	#glWödowPos2fvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fvMESA
)

	)

10784 
	#glWödowPos2iMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2iMESA
)

	)

10785 
	#glWödowPos2ivMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2ivMESA
)

	)

10786 
	#glWödowPos2sMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2sMESA
)

	)

10787 
	#glWödowPos2svMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2svMESA
)

	)

10788 
	#glWödowPos3dMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dMESA
)

	)

10789 
	#glWödowPos3dvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dvMESA
)

	)

10790 
	#glWödowPos3fMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fMESA
)

	)

10791 
	#glWödowPos3fvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fvMESA
)

	)

10792 
	#glWödowPos3iMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3iMESA
)

	)

10793 
	#glWödowPos3ivMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3ivMESA
)

	)

10794 
	#glWödowPos3sMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3sMESA
)

	)

10795 
	#glWödowPos3svMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3svMESA
)

	)

10796 
	#glWödowPos4dMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4dMESA
)

	)

10797 
	#glWödowPos4dvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4dvMESA
)

	)

10798 
	#glWödowPos4fMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4fMESA
)

	)

10799 
	#glWödowPos4fvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4fvMESA
)

	)

10800 
	#glWödowPos4iMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4iMESA
)

	)

10801 
	#glWödowPos4ivMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4ivMESA
)

	)

10802 
	#glWödowPos4sMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4sMESA
)

	)

10803 
	#glWödowPos4svMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4svMESA
)

	)

10805 
	#GLEW_MESA_wödow_pos
 
	`GLEW_GET_VAR
(
__GLEW_MESA_wödow_pos
)

	)

10811 #i‚de‡
GL_MESA_ycb¸_ãxtuª


10812 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

10814 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

10815 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

10816 
	#GL_YCBCR_MESA
 0x8757

	)

10818 
	#GLEW_MESA_ycb¸_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_MESA_ycb¸_ãxtuª
)

	)

10824 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


10825 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

10827 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

10828 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

10829 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

10830 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

10831 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

10833 
	#GLEW_NVX_gpu_mem‹y_öfo
 
	`GLEW_GET_VAR
(
__GLEW_NVX_gpu_mem‹y_öfo
)

	)

10839 #i‚de‡
GL_NV_bödÀss_ãxtuª


10840 
	#GL_NV_bödÀss_ãxtuª
 1

	)

10842 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

10843 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

10844 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

10845 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

10846 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

10847 (
GLAPIENTRY
 * 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

10848 (
GLAPIENTRY
 * 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

10849 (
GLAPIENTRY
 * 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

10850 (
GLAPIENTRY
 * 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

10851 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

10852 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
* 
	tvÆues
);

10853 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

10854 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
* 
	tvÆue
);

10856 
	#glGëImageH™dÀNV
 
	`GLEW_GET_FUN
(
__gÀwGëImageH™dÀNV
)

	)

10857 
	#glGëTextuªH™dÀNV
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªH™dÀNV
)

	)

10858 
	#glGëTextuªSam∂îH™dÀNV
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªSam∂îH™dÀNV
)

	)

10859 
	#glIsImageH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsImageH™dÀResidítNV
)

	)

10860 
	#glIsTextuªH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsTextuªH™dÀResidítNV
)

	)

10861 
	#glMakeImageH™dÀN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeImageH™dÀN⁄ResidítNV
)

	)

10862 
	#glMakeImageH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeImageH™dÀResidítNV
)

	)

10863 
	#glMakeTextuªH™dÀN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeTextuªH™dÀN⁄ResidítNV
)

	)

10864 
	#glMakeTextuªH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeTextuªH™dÀResidítNV
)

	)

10865 
	#glProgømUnif‹mH™dÀui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mH™dÀui64NV
)

	)

10866 
	#glProgømUnif‹mH™dÀui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mH™dÀui64vNV
)

	)

10867 
	#glUnif‹mH™dÀui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mH™dÀui64NV
)

	)

10868 
	#glUnif‹mH™dÀui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mH™dÀui64vNV
)

	)

10870 
	#GLEW_NV_bödÀss_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_NV_bödÀss_ãxtuª
)

	)

10876 #i‚de‡
GL_NV_bÀnd_squ¨e


10877 
	#GL_NV_bÀnd_squ¨e
 1

	)

10879 
	#GLEW_NV_bÀnd_squ¨e
 
	`GLEW_GET_VAR
(
__GLEW_NV_bÀnd_squ¨e
)

	)

10885 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


10886 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

10888 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

10889 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

10890 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

10891 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

10893 (
GLAPIENTRY
 * 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

10894 (
GLAPIENTRY
 * 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

10896 
	#glBegöC⁄dôi⁄ÆRídîNV
 
	`GLEW_GET_FUN
(
__gÀwBegöC⁄dôi⁄ÆRídîNV
)

	)

10897 
	#glEndC⁄dôi⁄ÆRídîNV
 
	`GLEW_GET_FUN
(
__gÀwEndC⁄dôi⁄ÆRídîNV
)

	)

10899 
	#GLEW_NV_c⁄dôi⁄Æ_ªndî
 
	`GLEW_GET_VAR
(
__GLEW_NV_c⁄dôi⁄Æ_ªndî
)

	)

10905 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


10906 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

10908 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

10909 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

10911 
	#GLEW_NV_c›y_dïth_to_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_NV_c›y_dïth_to_cﬁ‹
)

	)

10917 #i‚de‡
GL_NV_c›y_image


10918 
	#GL_NV_c›y_image
 1

	)

10920 (
GLAPIENTRY
 * 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

10922 
	#glC›yImageSubD©aNV
 
	`GLEW_GET_FUN
(
__gÀwC›yImageSubD©aNV
)

	)

10924 
	#GLEW_NV_c›y_image
 
	`GLEW_GET_VAR
(
__GLEW_NV_c›y_image
)

	)

10930 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


10931 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

10933 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

10934 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

10935 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

10936 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

10938 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

10939 (
GLAPIENTRY
 * 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

10940 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

10942 
	#glCÀ¨DïthdNV
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨DïthdNV
)

	)

10943 
	#glDïthBoundsdNV
 
	`GLEW_GET_FUN
(
__gÀwDïthBoundsdNV
)

	)

10944 
	#glDïthR™gedNV
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gedNV
)

	)

10946 
	#GLEW_NV_dïth_buf„r_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_NV_dïth_buf„r_Êﬂt
)

	)

10952 #i‚de‡
GL_NV_dïth_˛amp


10953 
	#GL_NV_dïth_˛amp
 1

	)

10955 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

10957 
	#GLEW_NV_dïth_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_NV_dïth_˛amp
)

	)

10963 #i‚de‡
GL_NV_dïth_ønge_un˛am≥d


10964 
	#GL_NV_dïth_ønge_un˛am≥d
 1

	)

10966 
	#GL_SAMPLE_COUNT_BITS_NV
 0x8864

	)

10967 
	#GL_CURRENT_SAMPLE_COUNT_QUERY_NV
 0x8865

	)

10968 
	#GL_QUERY_RESULT_NV
 0x8866

	)

10969 
	#GL_QUERY_RESULT_AVAILABLE_NV
 0x8867

	)

10970 
	#GL_SAMPLE_COUNT_NV
 0x8914

	)

10972 
	#GLEW_NV_dïth_ønge_un˛am≥d
 
	`GLEW_GET_VAR
(
__GLEW_NV_dïth_ønge_un˛am≥d
)

	)

10978 #i‚de‡
GL_NV_evÆu©‹s


10979 
	#GL_NV_evÆu©‹s
 1

	)

10981 
	#GL_EVAL_2D_NV
 0x86C0

	)

10982 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

10983 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

10984 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

10985 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

10986 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

10987 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

10988 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

10989 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

10990 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

10991 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

10992 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

10993 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

10994 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

10995 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

10996 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

10997 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

10998 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

10999 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

11000 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

11001 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

11002 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

11003 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

11004 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

11006 (
GLAPIENTRY
 * 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

11007 (
GLAPIENTRY
 * 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

11008 (
GLAPIENTRY
 * 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11009 (
GLAPIENTRY
 * 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, * 
	tpoöts
);

11010 (
GLAPIENTRY
 * 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

11011 (
GLAPIENTRY
 * 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11012 (
GLAPIENTRY
 * 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° * 
	tpoöts
);

11013 (
GLAPIENTRY
 * 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

11014 (
GLAPIENTRY
 * 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

11016 
	#glEvÆM≠sNV
 
	`GLEW_GET_FUN
(
__gÀwEvÆM≠sNV
)

	)

11017 
	#glGëM≠AâribP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠AâribP¨amëîfvNV
)

	)

11018 
	#glGëM≠AâribP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠AâribP¨amëîivNV
)

	)

11019 
	#glGëM≠C⁄åﬁPoötsNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠C⁄åﬁPoötsNV
)

	)

11020 
	#glGëM≠P¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠P¨amëîfvNV
)

	)

11021 
	#glGëM≠P¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠P¨amëîivNV
)

	)

11022 
	#glM≠C⁄åﬁPoötsNV
 
	`GLEW_GET_FUN
(
__gÀwM≠C⁄åﬁPoötsNV
)

	)

11023 
	#glM≠P¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwM≠P¨amëîfvNV
)

	)

11024 
	#glM≠P¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwM≠P¨amëîivNV
)

	)

11026 
	#GLEW_NV_evÆu©‹s
 
	`GLEW_GET_VAR
(
__GLEW_NV_evÆu©‹s
)

	)

11032 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


11033 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

11035 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

11036 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

11037 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

11038 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

11039 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

11040 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

11041 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

11042 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

11043 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

11044 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

11046 (
GLAPIENTRY
 * 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	tvÆ
);

11047 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

11048 (
GLAPIENTRY
 * 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11050 
	#glGëMu…ißm∂efvNV
 
	`GLEW_GET_FUN
(
__gÀwGëMu…ißm∂efvNV
)

	)

11051 
	#glSam∂eMaskIndexedNV
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaskIndexedNV
)

	)

11052 
	#glTexRídîbuf„rNV
 
	`GLEW_GET_FUN
(
__gÀwTexRídîbuf„rNV
)

	)

11054 
	#GLEW_NV_ex∂icô_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_NV_ex∂icô_mu…ißm∂e
)

	)

11060 #i‚de‡
GL_NV_„n˚


11061 
	#GL_NV_„n˚
 1

	)

11063 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

11064 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

11065 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

11067 (
GLAPIENTRY
 * 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t„n˚s
);

11068 (
GLAPIENTRY
 * 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

11069 (
GLAPIENTRY
 * 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t„n˚s
);

11070 (
GLAPIENTRY
 * 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11071 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

11072 (
GLAPIENTRY
 * 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

11073 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

11075 
	#glDñëeFí˚sNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeFí˚sNV
)

	)

11076 
	#glFöishFí˚NV
 
	`GLEW_GET_FUN
(
__gÀwFöishFí˚NV
)

	)

11077 
	#glGíFí˚sNV
 
	`GLEW_GET_FUN
(
__gÀwGíFí˚sNV
)

	)

11078 
	#glGëFí˚ivNV
 
	`GLEW_GET_FUN
(
__gÀwGëFí˚ivNV
)

	)

11079 
	#glIsFí˚NV
 
	`GLEW_GET_FUN
(
__gÀwIsFí˚NV
)

	)

11080 
	#glSëFí˚NV
 
	`GLEW_GET_FUN
(
__gÀwSëFí˚NV
)

	)

11081 
	#glTe°Fí˚NV
 
	`GLEW_GET_FUN
(
__gÀwTe°Fí˚NV
)

	)

11083 
	#GLEW_NV_„n˚
 
	`GLEW_GET_VAR
(
__GLEW_NV_„n˚
)

	)

11089 #i‚de‡
GL_NV_Êﬂt_buf„r


11090 
	#GL_NV_Êﬂt_buf„r
 1

	)

11092 
	#GL_FLOAT_R_NV
 0x8880

	)

11093 
	#GL_FLOAT_RG_NV
 0x8881

	)

11094 
	#GL_FLOAT_RGB_NV
 0x8882

	)

11095 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

11096 
	#GL_FLOAT_R16_NV
 0x8884

	)

11097 
	#GL_FLOAT_R32_NV
 0x8885

	)

11098 
	#GL_FLOAT_RG16_NV
 0x8886

	)

11099 
	#GL_FLOAT_RG32_NV
 0x8887

	)

11100 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

11101 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

11102 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

11103 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

11104 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

11105 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

11106 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

11108 
	#GLEW_NV_Êﬂt_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_NV_Êﬂt_buf„r
)

	)

11114 #i‚de‡
GL_NV_fog_di°™˚


11115 
	#GL_NV_fog_di°™˚
 1

	)

11117 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

11118 
	#GL_EYE_RADIAL_NV
 0x855B

	)

11119 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

11121 
	#GLEW_NV_fog_di°™˚
 
	`GLEW_GET_VAR
(
__GLEW_NV_fog_di°™˚
)

	)

11127 #i‚de‡
GL_NV_‰agmít_¥ogøm


11128 
	#GL_NV_‰agmít_¥ogøm
 1

	)

11130 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

11131 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

11132 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

11133 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

11134 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

11135 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

11137 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

11138 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

11139 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11140 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, c⁄° 
	tGLdoubÀ
 
	tv
[]);

11141 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11142 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, c⁄° 
	tGLÊﬂt
 
	tv
[]);

11144 
	#glGëProgømNamedP¨amëîdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømNamedP¨amëîdvNV
)

	)

11145 
	#glGëProgømNamedP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømNamedP¨amëîfvNV
)

	)

11146 
	#glProgømNamedP¨amëî4dNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4dNV
)

	)

11147 
	#glProgømNamedP¨amëî4dvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4dvNV
)

	)

11148 
	#glProgømNamedP¨amëî4fNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4fNV
)

	)

11149 
	#glProgømNamedP¨amëî4fvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4fvNV
)

	)

11151 
	#GLEW_NV_‰agmít_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm
)

	)

11157 #i‚de‡
GL_NV_‰agmít_¥ogøm2


11158 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

11160 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

11161 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

11162 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

11163 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

11164 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

11166 
	#GLEW_NV_‰agmít_¥ogøm2
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm2
)

	)

11172 #i‚de‡
GL_NV_‰agmít_¥ogøm4


11173 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

11175 
	#GLEW_NV_‰agmít_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm4
)

	)

11181 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


11182 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

11184 
	#GLEW_NV_‰agmít_¥ogøm_›ti⁄
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm_›ti⁄
)

	)

11190 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


11191 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

11193 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

11194 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

11195 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

11196 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

11198 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11200 
	#glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
)

	)

11202 
	#GLEW_NV_‰amebuf„r_mu…ißm∂e_covîage
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰amebuf„r_mu…ißm∂e_covîage
)

	)

11208 #i‚de‡
GL_NV_geomëry_¥ogøm4


11209 
	#GL_NV_geomëry_¥ogøm4
 1

	)

11211 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

11212 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

11213 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

11215 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

11217 
	#glProgømVîãxLimôNV
 
	`GLEW_GET_FUN
(
__gÀwProgømVîãxLimôNV
)

	)

11219 
	#GLEW_NV_geomëry_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_geomëry_¥ogøm4
)

	)

11225 #i‚de‡
GL_NV_geomëry_shadî4


11226 
	#GL_NV_geomëry_shadî4
 1

	)

11228 
	#GLEW_NV_geomëry_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_NV_geomëry_shadî4
)

	)

11234 #i‚de‡
GL_NV_gpu_¥ogøm4


11235 
	#GL_NV_gpu_¥ogøm4
 1

	)

11237 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

11238 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

11239 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

11240 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

11241 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

11242 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

11243 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

11244 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

11246 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11247 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11248 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11249 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11250 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11251 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11252 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11253 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11254 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11255 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11256 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11257 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11259 
	#glProgømEnvP¨amëîI4iNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4iNV
)

	)

11260 
	#glProgømEnvP¨amëîI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4ivNV
)

	)

11261 
	#glProgømEnvP¨amëîI4uiNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4uiNV
)

	)

11262 
	#glProgømEnvP¨amëîI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4uivNV
)

	)

11263 
	#glProgømEnvP¨amëîsI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîsI4ivNV
)

	)

11264 
	#glProgømEnvP¨amëîsI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîsI4uivNV
)

	)

11265 
	#glProgømLoˇlP¨amëîI4iNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4iNV
)

	)

11266 
	#glProgømLoˇlP¨amëîI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4ivNV
)

	)

11267 
	#glProgømLoˇlP¨amëîI4uiNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4uiNV
)

	)

11268 
	#glProgømLoˇlP¨amëîI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4uivNV
)

	)

11269 
	#glProgømLoˇlP¨amëîsI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîsI4ivNV
)

	)

11270 
	#glProgømLoˇlP¨amëîsI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîsI4uivNV
)

	)

11272 
	#GLEW_NV_gpu_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm4
)

	)

11278 #i‚de‡
GL_NV_gpu_¥ogøm5


11279 
	#GL_NV_gpu_¥ogøm5
 1

	)

11281 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

11282 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

11283 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

11284 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

11285 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

11286 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

11288 
	#GLEW_NV_gpu_¥ogøm5
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm5
)

	)

11294 #i‚de‡
GL_NV_gpu_¥ogøm_Â64


11295 
	#GL_NV_gpu_¥ogøm_Â64
 1

	)

11297 
	#GLEW_NV_gpu_¥ogøm_Â64
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm_Â64
)

	)

11303 #i‚de‡
GL_NV_gpu_shadî5


11304 
	#GL_NV_gpu_shadî5
 1

	)

11306 
	#GL_INT64_NV
 0x140E

	)

11307 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

11308 
	#GL_INT8_NV
 0x8FE0

	)

11309 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

11310 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

11311 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

11312 
	#GL_INT16_NV
 0x8FE4

	)

11313 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

11314 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

11315 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

11316 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

11317 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

11318 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

11319 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

11320 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

11321 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

11322 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

11323 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

11324 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

11325 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

11326 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

11327 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

11328 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

11329 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

11330 
	#GL_FLOAT16_NV
 0x8FF8

	)

11331 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

11332 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

11333 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

11335 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
* 
	t∑øms
);

11336 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
* 
	t∑øms
);

11337 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

11338 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11339 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

11340 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11341 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

11342 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11343 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

11344 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11345 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

11346 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11347 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

11348 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11349 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

11350 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11351 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

11352 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11353 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

11354 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11355 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

11356 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11357 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

11358 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11359 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

11360 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11361 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

11362 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11363 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

11364 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11365 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

11366 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11367 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

11368 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11370 
	#glGëUnif‹mi64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mi64vNV
)

	)

11371 
	#glGëUnif‹mui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mui64vNV
)

	)

11372 
	#glProgømUnif‹m1i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1i64NV
)

	)

11373 
	#glProgømUnif‹m1i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1i64vNV
)

	)

11374 
	#glProgømUnif‹m1ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ui64NV
)

	)

11375 
	#glProgømUnif‹m1ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ui64vNV
)

	)

11376 
	#glProgømUnif‹m2i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2i64NV
)

	)

11377 
	#glProgømUnif‹m2i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2i64vNV
)

	)

11378 
	#glProgømUnif‹m2ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ui64NV
)

	)

11379 
	#glProgømUnif‹m2ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ui64vNV
)

	)

11380 
	#glProgømUnif‹m3i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3i64NV
)

	)

11381 
	#glProgømUnif‹m3i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3i64vNV
)

	)

11382 
	#glProgømUnif‹m3ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ui64NV
)

	)

11383 
	#glProgømUnif‹m3ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ui64vNV
)

	)

11384 
	#glProgømUnif‹m4i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4i64NV
)

	)

11385 
	#glProgømUnif‹m4i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4i64vNV
)

	)

11386 
	#glProgømUnif‹m4ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ui64NV
)

	)

11387 
	#glProgømUnif‹m4ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ui64vNV
)

	)

11388 
	#glUnif‹m1i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1i64NV
)

	)

11389 
	#glUnif‹m1i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1i64vNV
)

	)

11390 
	#glUnif‹m1ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ui64NV
)

	)

11391 
	#glUnif‹m1ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ui64vNV
)

	)

11392 
	#glUnif‹m2i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2i64NV
)

	)

11393 
	#glUnif‹m2i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2i64vNV
)

	)

11394 
	#glUnif‹m2ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ui64NV
)

	)

11395 
	#glUnif‹m2ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ui64vNV
)

	)

11396 
	#glUnif‹m3i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3i64NV
)

	)

11397 
	#glUnif‹m3i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3i64vNV
)

	)

11398 
	#glUnif‹m3ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ui64NV
)

	)

11399 
	#glUnif‹m3ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ui64vNV
)

	)

11400 
	#glUnif‹m4i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4i64NV
)

	)

11401 
	#glUnif‹m4i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4i64vNV
)

	)

11402 
	#glUnif‹m4ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ui64NV
)

	)

11403 
	#glUnif‹m4ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ui64vNV
)

	)

11405 
	#GLEW_NV_gpu_shadî5
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_shadî5
)

	)

11411 #i‚de‡
GL_NV_hÆf_Êﬂt


11412 
	#GL_NV_hÆf_Êﬂt
 1

	)

11414 
	#GL_HALF_FLOAT_NV
 0x140B

	)

11416 
	tGLhÆf
;

11418 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆf
 
	tªd
, GLhÆ‡
	tgªí
, GLhÆ‡
	tblue
);

11419 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11420 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆf
 
	tªd
, GLhÆ‡
	tgªí
, GLhÆ‡
	tblue
, GLhÆ‡
	tÆpha
);

11421 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11422 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆf
 
	tfog
);

11423 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tfog
);

11424 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
);

11425 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

11426 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
);

11427 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

11428 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
);

11429 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

11430 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
, GLhÆ‡
	tq
);

11431 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

11432 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆf
 
	tnx
, GLhÆ‡
	tny
, GLhÆ‡
	tnz
);

11433 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11434 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆf
 
	tªd
, GLhÆ‡
	tgªí
, GLhÆ‡
	tblue
);

11435 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11436 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆf
 
	ts
);

11437 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11438 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
);

11439 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11440 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
);

11441 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11442 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
, GLhÆ‡
	tq
);

11443 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11444 (
GLAPIENTRY
 * 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
);

11445 (
GLAPIENTRY
 * 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11446 (
GLAPIENTRY
 * 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
);

11447 (
GLAPIENTRY
 * 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11448 (
GLAPIENTRY
 * 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
, GLhÆ‡
	tw
);

11449 (
GLAPIENTRY
 * 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

11450 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
);

11451 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

11452 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
);

11453 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

11454 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
);

11455 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

11456 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
, GLhÆ‡
	tw
);

11457 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

11458 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

11459 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

11460 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

11461 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

11462 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆf
 
	tweight
);

11463 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tweight
);

11465 
	#glCﬁ‹3hNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3hNV
)

	)

11466 
	#glCﬁ‹3hvNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3hvNV
)

	)

11467 
	#glCﬁ‹4hNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4hNV
)

	)

11468 
	#glCﬁ‹4hvNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4hvNV
)

	)

11469 
	#glFogCo‹dhNV
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dhNV
)

	)

11470 
	#glFogCo‹dhvNV
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dhvNV
)

	)

11471 
	#glMu…iTexCo‹d1hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1hNV
)

	)

11472 
	#glMu…iTexCo‹d1hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1hvNV
)

	)

11473 
	#glMu…iTexCo‹d2hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2hNV
)

	)

11474 
	#glMu…iTexCo‹d2hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2hvNV
)

	)

11475 
	#glMu…iTexCo‹d3hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3hNV
)

	)

11476 
	#glMu…iTexCo‹d3hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3hvNV
)

	)

11477 
	#glMu…iTexCo‹d4hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4hNV
)

	)

11478 
	#glMu…iTexCo‹d4hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4hvNV
)

	)

11479 
	#glN‹mÆ3hNV
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3hNV
)

	)

11480 
	#glN‹mÆ3hvNV
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3hvNV
)

	)

11481 
	#glSec⁄d¨yCﬁ‹3hNV
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3hNV
)

	)

11482 
	#glSec⁄d¨yCﬁ‹3hvNV
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3hvNV
)

	)

11483 
	#glTexCo‹d1hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d1hNV
)

	)

11484 
	#glTexCo‹d1hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d1hvNV
)

	)

11485 
	#glTexCo‹d2hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2hNV
)

	)

11486 
	#glTexCo‹d2hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2hvNV
)

	)

11487 
	#glTexCo‹d3hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d3hNV
)

	)

11488 
	#glTexCo‹d3hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d3hvNV
)

	)

11489 
	#glTexCo‹d4hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4hNV
)

	)

11490 
	#glTexCo‹d4hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4hvNV
)

	)

11491 
	#glVîãx2hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx2hNV
)

	)

11492 
	#glVîãx2hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx2hvNV
)

	)

11493 
	#glVîãx3hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx3hNV
)

	)

11494 
	#glVîãx3hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx3hvNV
)

	)

11495 
	#glVîãx4hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx4hNV
)

	)

11496 
	#glVîãx4hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx4hvNV
)

	)

11497 
	#glVîãxAârib1hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1hNV
)

	)

11498 
	#glVîãxAârib1hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1hvNV
)

	)

11499 
	#glVîãxAârib2hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2hNV
)

	)

11500 
	#glVîãxAârib2hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2hvNV
)

	)

11501 
	#glVîãxAârib3hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3hNV
)

	)

11502 
	#glVîãxAârib3hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3hvNV
)

	)

11503 
	#glVîãxAârib4hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4hNV
)

	)

11504 
	#glVîãxAârib4hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4hvNV
)

	)

11505 
	#glVîãxAâribs1hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1hvNV
)

	)

11506 
	#glVîãxAâribs2hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2hvNV
)

	)

11507 
	#glVîãxAâribs3hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3hvNV
)

	)

11508 
	#glVîãxAâribs4hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4hvNV
)

	)

11509 
	#glVîãxWeighthNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeighthNV
)

	)

11510 
	#glVîãxWeighthvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeighthvNV
)

	)

11512 
	#GLEW_NV_hÆf_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_NV_hÆf_Êﬂt
)

	)

11518 #i‚de‡
GL_NV_light_max_exp⁄ít


11519 
	#GL_NV_light_max_exp⁄ít
 1

	)

11521 
	#GL_MAX_SHININESS_NV
 0x8504

	)

11522 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

11524 
	#GLEW_NV_light_max_exp⁄ít
 
	`GLEW_GET_VAR
(
__GLEW_NV_light_max_exp⁄ít
)

	)

11530 #i‚de‡
GL_NV_mu…ißm∂e_covîage


11531 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

11533 
	#GL_COVERAGE_SAMPLES_NV
 0x80A9

	)

11534 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

11536 
	#GLEW_NV_mu…ißm∂e_covîage
 
	`GLEW_GET_VAR
(
__GLEW_NV_mu…ißm∂e_covîage
)

	)

11542 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


11543 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

11545 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

11547 
	#GLEW_NV_mu…ißm∂e_fûãr_höt
 
	`GLEW_GET_VAR
(
__GLEW_NV_mu…ißm∂e_fûãr_höt
)

	)

11553 #i‚de‡
GL_NV_oc˛usi⁄_quîy


11554 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

11556 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

11557 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

11558 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

11559 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

11561 (
GLAPIENTRY
 * 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

11562 (
GLAPIENTRY
 * 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

11563 (
GLAPIENTRY
 * 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

11564 (
GLAPIENTRY
 * 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

11565 (
GLAPIENTRY
 * 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11566 (
GLAPIENTRY
 * 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

11567 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

11569 
	#glBegöOc˛usi⁄QuîyNV
 
	`GLEW_GET_FUN
(
__gÀwBegöOc˛usi⁄QuîyNV
)

	)

11570 
	#glDñëeOc˛usi⁄QuîõsNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeOc˛usi⁄QuîõsNV
)

	)

11571 
	#glEndOc˛usi⁄QuîyNV
 
	`GLEW_GET_FUN
(
__gÀwEndOc˛usi⁄QuîyNV
)

	)

11572 
	#glGíOc˛usi⁄QuîõsNV
 
	`GLEW_GET_FUN
(
__gÀwGíOc˛usi⁄QuîõsNV
)

	)

11573 
	#glGëOc˛usi⁄QuîyivNV
 
	`GLEW_GET_FUN
(
__gÀwGëOc˛usi⁄QuîyivNV
)

	)

11574 
	#glGëOc˛usi⁄QuîyuivNV
 
	`GLEW_GET_FUN
(
__gÀwGëOc˛usi⁄QuîyuivNV
)

	)

11575 
	#glIsOc˛usi⁄QuîyNV
 
	`GLEW_GET_FUN
(
__gÀwIsOc˛usi⁄QuîyNV
)

	)

11577 
	#GLEW_NV_oc˛usi⁄_quîy
 
	`GLEW_GET_VAR
(
__GLEW_NV_oc˛usi⁄_quîy
)

	)

11583 #i‚de‡
GL_NV_∑cked_dïth_°ícû


11584 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

11586 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

11587 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

11589 
	#GLEW_NV_∑cked_dïth_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑cked_dïth_°ícû
)

	)

11595 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


11596 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

11598 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

11599 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

11600 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

11601 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

11602 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

11604 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11605 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11606 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11608 
	#glProgømBuf„rP¨amëîsIivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømBuf„rP¨amëîsIivNV
)

	)

11609 
	#glProgømBuf„rP¨amëîsIuivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømBuf„rP¨amëîsIuivNV
)

	)

11610 
	#glProgømBuf„rP¨amëîsfvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømBuf„rP¨amëîsfvNV
)

	)

11612 
	#GLEW_NV_∑ømëî_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑ømëî_buf„r_obje˘
)

	)

11618 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


11619 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

11621 
	#GLEW_NV_∑ømëî_buf„r_obje˘2
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑ømëî_buf„r_obje˘2
)

	)

11627 #i‚de‡
GL_NV_∑th_ªndîög


11628 
	#GL_NV_∑th_ªndîög
 1

	)

11630 
	#GL_CLOSE_PATH_NV
 0x00

	)

11631 
	#GL_BOLD_BIT_NV
 0x01

	)

11632 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

11633 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

11634 
	#GL_ITALIC_BIT_NV
 0x02

	)

11635 
	#GL_MOVE_TO_NV
 0x02

	)

11636 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

11637 
	#GL_LINE_TO_NV
 0x04

	)

11638 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

11639 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

11640 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

11641 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

11642 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

11643 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

11644 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

11645 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

11646 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

11647 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

11648 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

11649 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

11650 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

11651 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

11652 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

11653 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

11654 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

11655 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

11656 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

11657 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

11658 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

11659 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

11660 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

11661 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

11662 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

11663 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

11664 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

11665 
	#GL_RESTART_PATH_NV
 0xF0

	)

11666 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

11667 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

11668 
	#GL_RECT_NV
 0xF6

	)

11669 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

11670 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

11671 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

11672 
	#GL_ARC_TO_NV
 0xFE

	)

11673 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

11674 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

11675 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

11676 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

11677 
	#GL_PRIMARY_COLOR
 0x8577

	)

11678 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

11679 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

11680 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

11681 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

11682 
	#GL_FILE_NAME_NV
 0x9074

	)

11683 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

11684 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

11685 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

11686 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

11687 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

11688 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

11689 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

11690 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

11691 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

11692 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

11693 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

11694 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

11695 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

11696 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

11697 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

11698 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

11699 
	#GL_COUNT_UP_NV
 0x9088

	)

11700 
	#GL_COUNT_DOWN_NV
 0x9089

	)

11701 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

11702 
	#GL_CONVEX_HULL_NV
 0x908B

	)

11703 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

11704 
	#GL_TRANSLATE_X_NV
 0x908E

	)

11705 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

11706 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

11707 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

11708 
	#GL_AFFINE_2D_NV
 0x9092

	)

11709 
	#GL_AFFINE_3D_NV
 0x9094

	)

11710 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

11711 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

11712 
	#GL_UTF8_NV
 0x909A

	)

11713 
	#GL_UTF16_NV
 0x909B

	)

11714 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

11715 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

11716 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

11717 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

11718 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

11719 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

11720 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

11721 
	#GL_SQUARE_NV
 0x90A3

	)

11722 
	#GL_ROUND_NV
 0x90A4

	)

11723 
	#GL_TRIANGULAR_NV
 0x90A5

	)

11724 
	#GL_BEVEL_NV
 0x90A6

	)

11725 
	#GL_MITER_REVERT_NV
 0x90A7

	)

11726 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

11727 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

11728 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

11729 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

11730 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

11731 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

11732 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

11733 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

11734 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

11735 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

11736 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

11737 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

11738 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

11739 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

11740 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

11741 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

11742 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

11743 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

11744 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

11745 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

11746 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

11747 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

11748 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

11749 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

11750 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

11751 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

11752 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

11753 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

11754 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

11755 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

11756 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

11757 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

11758 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

11759 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

11761 (
GLAPIENTRY
 * 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

11762 (
GLAPIENTRY
 * 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

11763 (
GLAPIENTRY
 * 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

11764 (
GLAPIENTRY
 * 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

11765 (
GLAPIENTRY
 * 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLíum
 
	tcovîMode
);

11766 (
GLAPIENTRY
 * 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

11767 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

11768 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	tvÆue
);

11769 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆue
);

11770 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLubyã
* 
	tcomm™ds
);

11771 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLÊﬂt
* 
	tco‹ds
);

11772 (
GLAPIENTRY
 * 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLÊﬂt
* 
	tdashAºay
);

11773 
GLÊﬂt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

11774 (
GLAPIENTRY
 * 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfi°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
* 
	tmërics
);

11775 (
GLAPIENTRY
 * 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

11776 (
GLAPIENTRY
 * 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLíum
 
	t∑øm
, 
	tGLÊﬂt
* 
	tvÆue
);

11777 (
GLAPIENTRY
 * 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLíum
 
	t∑øm
, 
	tGLöt
* 
	tvÆue
);

11778 (
GLAPIENTRY
 * 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

11779 (
GLAPIENTRY
 * 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	tvÆue
);

11780 (
GLAPIENTRY
 * 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆue
);

11781 (
GLAPIENTRY
 * 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

11782 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

11783 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

11784 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

11785 (
GLAPIENTRY
 * 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
* 
	tc€ffs
);

11786 (
GLAPIENTRY
 * 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
* 
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
*
	tco‹ds
);

11787 (
GLAPIENTRY
 * 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° * 
	tco‹ds
);

11788 (
GLAPIENTRY
 * 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tzfunc
);

11789 (
GLAPIENTRY
 * 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
* 
	tdashAºay
);

11790 (
GLAPIENTRY
 * 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

11791 (
GLAPIENTRY
 * 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° * 
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

11792 (
GLAPIENTRY
 * 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° * 
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
*
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

11793 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

11794 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

11795 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

11796 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	tvÆue
);

11797 (
GLAPIENTRY
 * 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

11798 (
GLAPIENTRY
 * 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

11799 (
GLAPIENTRY
 * 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° * 
	t∑thSåög
);

11800 (
GLAPIENTRY
 * 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
* 
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
*
	tco‹ds
);

11801 (
GLAPIENTRY
 * 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° * 
	tco‹ds
);

11802 (
GLAPIENTRY
 * 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
* 
	tc€ffs
);

11803 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂt* 
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

11804 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

11805 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

11806 (
GLAPIENTRY
 * 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

11807 (
GLAPIENTRY
 * 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

11808 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
* 
	tå™sf‹mVÆues
);

11809 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà
	t∑ths
[], c⁄° 
	tGLÊﬂt
 
	tweights
[]);

11811 
	#glC›yP©hNV
 
	`GLEW_GET_FUN
(
__gÀwC›yP©hNV
)

	)

11812 
	#glCovîFûlP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwCovîFûlP©hIn°™˚dNV
)

	)

11813 
	#glCovîFûlP©hNV
 
	`GLEW_GET_FUN
(
__gÀwCovîFûlP©hNV
)

	)

11814 
	#glCovîSåokeP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwCovîSåokeP©hIn°™˚dNV
)

	)

11815 
	#glCovîSåokeP©hNV
 
	`GLEW_GET_FUN
(
__gÀwCovîSåokeP©hNV
)

	)

11816 
	#glDñëeP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeP©hsNV
)

	)

11817 
	#glGíP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwGíP©hsNV
)

	)

11818 
	#glGëP©hCﬁ‹GífvNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hCﬁ‹GífvNV
)

	)

11819 
	#glGëP©hCﬁ‹GíivNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hCﬁ‹GíivNV
)

	)

11820 
	#glGëP©hComm™dsNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hComm™dsNV
)

	)

11821 
	#glGëP©hCo‹dsNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hCo‹dsNV
)

	)

11822 
	#glGëP©hDashAºayNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hDashAºayNV
)

	)

11823 
	#glGëP©hLígthNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hLígthNV
)

	)

11824 
	#glGëP©hMëricR™geNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hMëricR™geNV
)

	)

11825 
	#glGëP©hMëricsNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hMëricsNV
)

	)

11826 
	#glGëP©hP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hP¨amëîfvNV
)

	)

11827 
	#glGëP©hP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hP¨amëîivNV
)

	)

11828 
	#glGëP©hS∑cögNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hS∑cögNV
)

	)

11829 
	#glGëP©hTexGífvNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hTexGífvNV
)

	)

11830 
	#glGëP©hTexGíivNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hTexGíivNV
)

	)

11831 
	#glI¡îpﬁ©eP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwI¡îpﬁ©eP©hsNV
)

	)

11832 
	#glIsP©hNV
 
	`GLEW_GET_FUN
(
__gÀwIsP©hNV
)

	)

11833 
	#glIsPoötInFûlP©hNV
 
	`GLEW_GET_FUN
(
__gÀwIsPoötInFûlP©hNV
)

	)

11834 
	#glIsPoötInSåokeP©hNV
 
	`GLEW_GET_FUN
(
__gÀwIsPoötInSåokeP©hNV
)

	)

11835 
	#glP©hCﬁ‹GíNV
 
	`GLEW_GET_FUN
(
__gÀwP©hCﬁ‹GíNV
)

	)

11836 
	#glP©hComm™dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hComm™dsNV
)

	)

11837 
	#glP©hCo‹dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hCo‹dsNV
)

	)

11838 
	#glP©hCovîDïthFuncNV
 
	`GLEW_GET_FUN
(
__gÀwP©hCovîDïthFuncNV
)

	)

11839 
	#glP©hDashAºayNV
 
	`GLEW_GET_FUN
(
__gÀwP©hDashAºayNV
)

	)

11840 
	#glP©hFogGíNV
 
	`GLEW_GET_FUN
(
__gÀwP©hFogGíNV
)

	)

11841 
	#glP©hGlyphR™geNV
 
	`GLEW_GET_FUN
(
__gÀwP©hGlyphR™geNV
)

	)

11842 
	#glP©hGlyphsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hGlyphsNV
)

	)

11843 
	#glP©hP¨amëîfNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîfNV
)

	)

11844 
	#glP©hP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîfvNV
)

	)

11845 
	#glP©hP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîiNV
)

	)

11846 
	#glP©hP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîivNV
)

	)

11847 
	#glP©hSãncûDïthOff£tNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSãncûDïthOff£tNV
)

	)

11848 
	#glP©hSãncûFuncNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSãncûFuncNV
)

	)

11849 
	#glP©hSåögNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSåögNV
)

	)

11850 
	#glP©hSubComm™dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSubComm™dsNV
)

	)

11851 
	#glP©hSubCo‹dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSubCo‹dsNV
)

	)

11852 
	#glP©hTexGíNV
 
	`GLEW_GET_FUN
(
__gÀwP©hTexGíNV
)

	)

11853 
	#glPoötAl⁄gP©hNV
 
	`GLEW_GET_FUN
(
__gÀwPoötAl⁄gP©hNV
)

	)

11854 
	#glSãncûFûlP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûFûlP©hIn°™˚dNV
)

	)

11855 
	#glSãncûFûlP©hNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûFûlP©hNV
)

	)

11856 
	#glSãncûSåokeP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûSåokeP©hIn°™˚dNV
)

	)

11857 
	#glSãncûSåokeP©hNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûSåokeP©hNV
)

	)

11858 
	#glTønsf‹mP©hNV
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mP©hNV
)

	)

11859 
	#glWeightP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwWeightP©hsNV
)

	)

11861 
	#GLEW_NV_∑th_ªndîög
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑th_ªndîög
)

	)

11867 #i‚de‡
GL_NV_pixñ_d©a_ønge


11868 
	#GL_NV_pixñ_d©a_ønge
 1

	)

11870 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

11871 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

11872 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

11873 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

11874 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

11875 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

11877 (
GLAPIENTRY
 * 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

11878 (
GLAPIENTRY
 * 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, * 
	tpoöãr
);

11880 
	#glFlushPixñD©aR™geNV
 
	`GLEW_GET_FUN
(
__gÀwFlushPixñD©aR™geNV
)

	)

11881 
	#glPixñD©aR™geNV
 
	`GLEW_GET_FUN
(
__gÀwPixñD©aR™geNV
)

	)

11883 
	#GLEW_NV_pixñ_d©a_ønge
 
	`GLEW_GET_VAR
(
__GLEW_NV_pixñ_d©a_ønge
)

	)

11889 #i‚de‡
GL_NV_poöt_•rôe


11890 
	#GL_NV_poöt_•rôe
 1

	)

11892 
	#GL_POINT_SPRITE_NV
 0x8861

	)

11893 
	#GL_COORD_REPLACE_NV
 0x8862

	)

11894 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

11896 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11897 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

11899 
	#glPoötP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîiNV
)

	)

11900 
	#glPoötP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîivNV
)

	)

11902 
	#GLEW_NV_poöt_•rôe
 
	`GLEW_GET_VAR
(
__GLEW_NV_poöt_•rôe
)

	)

11908 #i‚de‡
GL_NV_¥e£¡_video


11909 
	#GL_NV_¥e£¡_video
 1

	)

11911 
	#GL_FRAME_NV
 0x8E26

	)

11912 
	#GL_FIELDS_NV
 0x8E27

	)

11913 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

11914 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

11915 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

11916 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

11918 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
* 
	t∑øms
);

11919 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11920 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

11921 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

11922 (
GLAPIENTRY
 * 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

11923 (
GLAPIENTRY
 * 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

11925 
	#glGëVideoi64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoi64vNV
)

	)

11926 
	#glGëVideoivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoivNV
)

	)

11927 
	#glGëVideoui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoui64vNV
)

	)

11928 
	#glGëVideouivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideouivNV
)

	)

11929 
	#glPª£¡FømeDuÆFûlNV
 
	`GLEW_GET_FUN
(
__gÀwPª£¡FømeDuÆFûlNV
)

	)

11930 
	#glPª£¡FømeKeyedNV
 
	`GLEW_GET_FUN
(
__gÀwPª£¡FømeKeyedNV
)

	)

11932 
	#GLEW_NV_¥e£¡_video
 
	`GLEW_GET_VAR
(
__GLEW_NV_¥e£¡_video
)

	)

11938 #i‚de‡
GL_NV_¥imôive_ª°¨t


11939 
	#GL_NV_¥imôive_ª°¨t
 1

	)

11941 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

11942 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

11944 (
GLAPIENTRY
 * 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

11945 (
GLAPIENTRY
 * 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

11947 
	#glPrimôiveRe°¨tIndexNV
 
	`GLEW_GET_FUN
(
__gÀwPrimôiveRe°¨tIndexNV
)

	)

11948 
	#glPrimôiveRe°¨tNV
 
	`GLEW_GET_FUN
(
__gÀwPrimôiveRe°¨tNV
)

	)

11950 
	#GLEW_NV_¥imôive_ª°¨t
 
	`GLEW_GET_VAR
(
__GLEW_NV_¥imôive_ª°¨t
)

	)

11956 #i‚de‡
GL_NV_ªgi°î_comböîs


11957 
	#GL_NV_ªgi°î_comböîs
 1

	)

11959 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

11960 
	#GL_VARIABLE_A_NV
 0x8523

	)

11961 
	#GL_VARIABLE_B_NV
 0x8524

	)

11962 
	#GL_VARIABLE_C_NV
 0x8525

	)

11963 
	#GL_VARIABLE_D_NV
 0x8526

	)

11964 
	#GL_VARIABLE_E_NV
 0x8527

	)

11965 
	#GL_VARIABLE_F_NV
 0x8528

	)

11966 
	#GL_VARIABLE_G_NV
 0x8529

	)

11967 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

11968 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

11969 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

11970 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

11971 
	#GL_SPARE0_NV
 0x852E

	)

11972 
	#GL_SPARE1_NV
 0x852F

	)

11973 
	#GL_DISCARD_NV
 0x8530

	)

11974 
	#GL_E_TIMES_F_NV
 0x8531

	)

11975 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

11976 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

11977 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

11978 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

11979 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

11980 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

11981 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

11982 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

11983 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

11984 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

11985 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

11986 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

11987 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

11988 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

11989 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

11990 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

11991 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

11992 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

11993 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

11994 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

11995 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

11996 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

11997 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

11998 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

11999 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

12000 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

12001 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

12002 
	#GL_COMBINER0_NV
 0x8550

	)

12003 
	#GL_COMBINER1_NV
 0x8551

	)

12004 
	#GL_COMBINER2_NV
 0x8552

	)

12005 
	#GL_COMBINER3_NV
 0x8553

	)

12006 
	#GL_COMBINER4_NV
 0x8554

	)

12007 
	#GL_COMBINER5_NV
 0x8555

	)

12008 
	#GL_COMBINER6_NV
 0x8556

	)

12009 
	#GL_COMBINER7_NV
 0x8557

	)

12011 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

12012 (
GLAPIENTRY
 * 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

12013 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

12014 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12015 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

12016 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

12017 (
GLAPIENTRY
 * 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

12018 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12019 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12020 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12021 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12022 (
GLAPIENTRY
 * 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12023 (
GLAPIENTRY
 * 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12025 
	#glComböîI≈utNV
 
	`GLEW_GET_FUN
(
__gÀwComböîI≈utNV
)

	)

12026 
	#glComböîOuçutNV
 
	`GLEW_GET_FUN
(
__gÀwComböîOuçutNV
)

	)

12027 
	#glComböîP¨amëîfNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîfNV
)

	)

12028 
	#glComböîP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîfvNV
)

	)

12029 
	#glComböîP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîiNV
)

	)

12030 
	#glComböîP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîivNV
)

	)

12031 
	#glFöÆComböîI≈utNV
 
	`GLEW_GET_FUN
(
__gÀwFöÆComböîI≈utNV
)

	)

12032 
	#glGëComböîI≈utP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîI≈utP¨amëîfvNV
)

	)

12033 
	#glGëComböîI≈utP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîI≈utP¨amëîivNV
)

	)

12034 
	#glGëComböîOuçutP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîOuçutP¨amëîfvNV
)

	)

12035 
	#glGëComböîOuçutP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîOuçutP¨amëîivNV
)

	)

12036 
	#glGëFöÆComböîI≈utP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëFöÆComböîI≈utP¨amëîfvNV
)

	)

12037 
	#glGëFöÆComböîI≈utP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëFöÆComböîI≈utP¨amëîivNV
)

	)

12039 
	#GLEW_NV_ªgi°î_comböîs
 
	`GLEW_GET_VAR
(
__GLEW_NV_ªgi°î_comböîs
)

	)

12045 #i‚de‡
GL_NV_ªgi°î_comböîs2


12046 
	#GL_NV_ªgi°î_comböîs2
 1

	)

12048 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

12050 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12051 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12053 
	#glComböîSègeP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwComböîSègeP¨amëîfvNV
)

	)

12054 
	#glGëComböîSègeP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîSègeP¨amëîfvNV
)

	)

12056 
	#GLEW_NV_ªgi°î_comböîs2
 
	`GLEW_GET_VAR
(
__GLEW_NV_ªgi°î_comböîs2
)

	)

12062 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


12063 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

12065 
	#GLEW_NV_shadî_©omic_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_NV_shadî_©omic_Êﬂt
)

	)

12071 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


12072 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

12074 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

12075 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

12076 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

12078 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

12079 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
* 
	tªsu…
);

12080 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

12081 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12082 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12083 (
GLAPIENTRY
 * 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12084 (
GLAPIENTRY
 * 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

12085 (
GLAPIENTRY
 * 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12086 (
GLAPIENTRY
 * 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

12087 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12088 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

12089 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12090 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

12092 
	#glGëBuf„rP¨amëîui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîui64vNV
)

	)

12093 
	#glGëI¡egîui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîui64vNV
)

	)

12094 
	#glGëNamedBuf„rP¨amëîui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rP¨amëîui64vNV
)

	)

12095 
	#glIsBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsBuf„rResidítNV
)

	)

12096 
	#glIsNamedBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsNamedBuf„rResidítNV
)

	)

12097 
	#glMakeBuf„rN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeBuf„rN⁄ResidítNV
)

	)

12098 
	#glMakeBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeBuf„rResidítNV
)

	)

12099 
	#glMakeNamedBuf„rN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeNamedBuf„rN⁄ResidítNV
)

	)

12100 
	#glMakeNamedBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeNamedBuf„rResidítNV
)

	)

12101 
	#glProgømUnif‹mui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mui64NV
)

	)

12102 
	#glProgømUnif‹mui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mui64vNV
)

	)

12103 
	#glUnif‹mui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mui64NV
)

	)

12104 
	#glUnif‹mui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mui64vNV
)

	)

12106 
	#GLEW_NV_shadî_buf„r_lﬂd
 
	`GLEW_GET_VAR
(
__GLEW_NV_shadî_buf„r_lﬂd
)

	)

12112 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


12113 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

12115 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

12116 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

12117 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

12118 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

12119 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

12121 
	#GLEW_NV_ãs£Œ©i⁄_¥ogøm5
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãs£Œ©i⁄_¥ogøm5
)

	)

12127 #i‚de‡
GL_NV_ãxgí_emboss


12128 
	#GL_NV_ãxgí_emboss
 1

	)

12130 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

12131 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

12132 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

12134 
	#GLEW_NV_ãxgí_emboss
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxgí_emboss
)

	)

12140 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


12141 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

12143 
	#GL_NORMAL_MAP_NV
 0x8511

	)

12144 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

12146 
	#GLEW_NV_ãxgí_ªÊe˘i⁄
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxgí_ªÊe˘i⁄
)

	)

12152 #i‚de‡
GL_NV_ãxtuª_b¨rõr


12153 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

12155 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

12157 
	#glTextuªB¨rõrNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªB¨rõrNV
)

	)

12159 
	#GLEW_NV_ãxtuª_b¨rõr
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_b¨rõr
)

	)

12165 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


12166 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

12168 
	#GLEW_NV_ãxtuª_com¥essi⁄_vtc
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_com¥essi⁄_vtc
)

	)

12174 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


12175 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

12177 
	#GL_COMBINE4_NV
 0x8503

	)

12178 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

12179 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

12180 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

12181 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

12183 
	#GLEW_NV_ãxtuª_ív_comböe4
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_ív_comböe4
)

	)

12189 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


12190 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

12192 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

12194 
	#GLEW_NV_ãxtuª_ex∑nd_n‹mÆ
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_ex∑nd_n‹mÆ
)

	)

12200 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


12201 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

12203 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

12204 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

12206 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12207 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12208 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12209 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12210 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12211 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12213 
	#glTexImage2DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTexImage2DMu…ißm∂eCovîageNV
)

	)

12214 
	#glTexImage3DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTexImage3DMu…ißm∂eCovîageNV
)

	)

12215 
	#glTextuªImage2DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage2DMu…ißm∂eCovîageNV
)

	)

12216 
	#glTextuªImage2DMu…ißm∂eNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage2DMu…ißm∂eNV
)

	)

12217 
	#glTextuªImage3DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage3DMu…ißm∂eCovîageNV
)

	)

12218 
	#glTextuªImage3DMu…ißm∂eNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage3DMu…ißm∂eNV
)

	)

12220 
	#GLEW_NV_ãxtuª_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_mu…ißm∂e
)

	)

12226 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


12227 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

12229 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

12230 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

12231 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

12232 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

12234 
	#GLEW_NV_ãxtuª_ª˘™gÀ
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_ª˘™gÀ
)

	)

12240 #i‚de‡
GL_NV_ãxtuª_shadî


12241 
	#GL_NV_ãxtuª_shadî
 1

	)

12243 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

12244 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

12245 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

12246 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

12247 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

12248 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

12249 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

12250 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

12251 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

12252 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

12253 
	#GL_CULL_MODES_NV
 0x86E0

	)

12254 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

12255 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

12256 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

12257 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

12258 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

12259 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

12260 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

12261 
	#GL_CONST_EYE_NV
 0x86E5

	)

12262 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

12263 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

12264 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

12265 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

12266 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

12267 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

12268 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

12269 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

12270 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

12271 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

12272 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

12273 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

12274 
	#GL_HILO_NV
 0x86F4

	)

12275 
	#GL_DSDT_NV
 0x86F5

	)

12276 
	#GL_DSDT_MAG_NV
 0x86F6

	)

12277 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

12278 
	#GL_HILO16_NV
 0x86F8

	)

12279 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

12280 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

12281 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

12282 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

12283 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

12284 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

12285 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

12286 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

12287 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

12288 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

12289 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

12290 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

12291 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

12292 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

12293 
	#GL_DSDT8_NV
 0x8709

	)

12294 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

12295 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

12296 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

12297 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

12298 
	#GL_HI_SCALE_NV
 0x870E

	)

12299 
	#GL_LO_SCALE_NV
 0x870F

	)

12300 
	#GL_DS_SCALE_NV
 0x8710

	)

12301 
	#GL_DT_SCALE_NV
 0x8711

	)

12302 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

12303 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

12304 
	#GL_HI_BIAS_NV
 0x8714

	)

12305 
	#GL_LO_BIAS_NV
 0x8715

	)

12306 
	#GL_DS_BIAS_NV
 0x8716

	)

12307 
	#GL_DT_BIAS_NV
 0x8717

	)

12308 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

12309 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

12310 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

12311 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

12312 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

12313 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

12314 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

12315 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

12317 
	#GLEW_NV_ãxtuª_shadî
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_shadî
)

	)

12323 #i‚de‡
GL_NV_ãxtuª_shadî2


12324 
	#GL_NV_ãxtuª_shadî2
 1

	)

12326 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

12327 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

12328 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

12329 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

12330 
	#GL_HILO_NV
 0x86F4

	)

12331 
	#GL_DSDT_NV
 0x86F5

	)

12332 
	#GL_DSDT_MAG_NV
 0x86F6

	)

12333 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

12334 
	#GL_HILO16_NV
 0x86F8

	)

12335 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

12336 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

12337 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

12338 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

12339 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

12340 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

12341 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

12342 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

12343 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

12344 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

12345 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

12346 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

12347 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

12348 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

12349 
	#GL_DSDT8_NV
 0x8709

	)

12350 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

12351 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

12352 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

12353 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

12355 
	#GLEW_NV_ãxtuª_shadî2
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_shadî2
)

	)

12361 #i‚de‡
GL_NV_ãxtuª_shadî3


12362 
	#GL_NV_ãxtuª_shadî3
 1

	)

12364 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

12365 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

12366 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

12367 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

12368 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

12369 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

12370 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

12371 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

12372 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

12373 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

12374 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

12375 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

12376 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

12377 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

12378 
	#GL_HILO8_NV
 0x885E

	)

12379 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

12380 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

12382 
	#GLEW_NV_ãxtuª_shadî3
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_shadî3
)

	)

12388 #i‚de‡
GL_NV_å™sf‹m_„edback


12389 
	#GL_NV_å™sf‹m_„edback
 1

	)

12391 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

12392 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

12393 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

12394 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

12395 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

12396 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

12397 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

12398 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

12399 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

12400 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

12401 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

12402 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

12403 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

12404 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

12405 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

12406 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

12407 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

12408 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

12409 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

12410 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

12411 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

12412 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

12413 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

12414 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

12415 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

12417 (
GLAPIENTRY
 * 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

12418 (
GLAPIENTRY
 * 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

12419 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

12420 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

12421 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

12422 (
GLAPIENTRY
 * 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

12423 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

12424 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

12425 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

12426 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

12427 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

12429 
	#glA˘iveV¨yögNV
 
	`GLEW_GET_FUN
(
__gÀwA˘iveV¨yögNV
)

	)

12430 
	#glBegöTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwBegöTønsf‹mFìdbackNV
)

	)

12431 
	#glBödBuf„rBa£NV
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rBa£NV
)

	)

12432 
	#glBödBuf„rOff£tNV
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rOff£tNV
)

	)

12433 
	#glBödBuf„rR™geNV
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rR™geNV
)

	)

12434 
	#glEndTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwEndTønsf‹mFìdbackNV
)

	)

12435 
	#glGëA˘iveV¨yögNV
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveV¨yögNV
)

	)

12436 
	#glGëTønsf‹mFìdbackV¨yögNV
 
	`GLEW_GET_FUN
(
__gÀwGëTønsf‹mFìdbackV¨yögNV
)

	)

12437 
	#glGëV¨yögLoˇti⁄NV
 
	`GLEW_GET_FUN
(
__gÀwGëV¨yögLoˇti⁄NV
)

	)

12438 
	#glTønsf‹mFìdbackAâribsNV
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackAâribsNV
)

	)

12439 
	#glTønsf‹mFìdbackV¨yögsNV
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackV¨yögsNV
)

	)

12441 
	#GLEW_NV_å™sf‹m_„edback
 
	`GLEW_GET_VAR
(
__GLEW_NV_å™sf‹m_„edback
)

	)

12447 #i‚de‡
GL_NV_å™sf‹m_„edback2


12448 
	#GL_NV_å™sf‹m_„edback2
 1

	)

12450 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

12451 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

12452 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

12453 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

12455 (
GLAPIENTRY
 * 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

12456 (
GLAPIENTRY
 * 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

12457 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

12458 (
GLAPIENTRY
 * 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

12459 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

12460 (
GLAPIENTRY
 * 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

12461 (
GLAPIENTRY
 * 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

12463 
	#glBödTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwBödTønsf‹mFìdbackNV
)

	)

12464 
	#glDñëeTønsf‹mFìdbacksNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeTønsf‹mFìdbacksNV
)

	)

12465 
	#glDøwTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackNV
)

	)

12466 
	#glGíTønsf‹mFìdbacksNV
 
	`GLEW_GET_FUN
(
__gÀwGíTønsf‹mFìdbacksNV
)

	)

12467 
	#glIsTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwIsTønsf‹mFìdbackNV
)

	)

12468 
	#glPau£Tønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwPau£Tønsf‹mFìdbackNV
)

	)

12469 
	#glResumeTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwResumeTønsf‹mFìdbackNV
)

	)

12471 
	#GLEW_NV_å™sf‹m_„edback2
 
	`GLEW_GET_VAR
(
__GLEW_NV_å™sf‹m_„edback2
)

	)

12477 #i‚de‡
GL_NV_vd∑u_öãr›


12478 
	#GL_NV_vd∑u_öãr›
 1

	)

12480 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

12481 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

12482 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

12483 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

12485 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

12487 (
GLAPIENTRY
 * 
	tPFNGLVDPAUFININVPROC
) ();

12488 (
GLAPIENTRY
 * 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

12489 (
GLAPIENTRY
 * 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° * 
	tvdpDevi˚
, c⁄° 
	tGLvoid
*
	tgëProcAddªss
);

12490 (
GLAPIENTRY
 * 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12491 (
GLAPIENTRY
 * 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
* 
	tsurÁ˚s
);

12492 
GLvd∑uSurÁ˚NV
 (
	tGLAPIENTRY
 * 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° * 
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12493 
GLvd∑uSurÁ˚NV
 (
	tGLAPIENTRY
 * 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° * 
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12494 (
GLAPIENTRY
 * 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

12495 (
GLAPIENTRY
 * 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
* 
	tsurÁ˚s
);

12496 (
GLAPIENTRY
 * 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12498 
	#glVDPAUFöiNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUFöiNV
)

	)

12499 
	#glVDPAUGëSurÁ˚ivNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUGëSurÁ˚ivNV
)

	)

12500 
	#glVDPAUInôNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUInôNV
)

	)

12501 
	#glVDPAUIsSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUIsSurÁ˚NV
)

	)

12502 
	#glVDPAUM≠SurÁ˚sNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUM≠SurÁ˚sNV
)

	)

12503 
	#glVDPAURegi°îOuçutSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAURegi°îOuçutSurÁ˚NV
)

	)

12504 
	#glVDPAURegi°îVideoSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAURegi°îVideoSurÁ˚NV
)

	)

12505 
	#glVDPAUSurÁ˚Ac˚ssNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUSurÁ˚Ac˚ssNV
)

	)

12506 
	#glVDPAUUnm≠SurÁ˚sNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUUnm≠SurÁ˚sNV
)

	)

12507 
	#glVDPAUUƒegi°îSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUUƒegi°îSurÁ˚NV
)

	)

12509 
	#GLEW_NV_vd∑u_öãr›
 
	`GLEW_GET_VAR
(
__GLEW_NV_vd∑u_öãr›
)

	)

12515 #i‚de‡
GL_NV_vîãx_¨øy_ønge


12516 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

12518 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

12519 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

12520 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

12521 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

12522 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

12524 (
GLAPIENTRY
 * 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

12525 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, * 
	tpoöãr
);

12527 
	#glFlushVîãxAºayR™geNV
 
	`GLEW_GET_FUN
(
__gÀwFlushVîãxAºayR™geNV
)

	)

12528 
	#glVîãxAºayR™geNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayR™geNV
)

	)

12530 
	#GLEW_NV_vîãx_¨øy_ønge
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¨øy_ønge
)

	)

12536 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


12537 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

12539 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

12541 
	#GLEW_NV_vîãx_¨øy_ønge2
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¨øy_ønge2
)

	)

12547 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


12548 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

12550 
	#GL_INT64_NV
 0x140E

	)

12551 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

12553 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
* 
	t∑øms
);

12554 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

12555 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

12556 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

12557 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

12558 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

12559 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12560 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

12561 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12562 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

12563 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12564 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

12565 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12566 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

12567 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12568 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

12569 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12570 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

12571 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12573 
	#glGëVîãxAâribLi64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLi64vNV
)

	)

12574 
	#glGëVîãxAâribLui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLui64vNV
)

	)

12575 
	#glVîãxAâribL1i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1i64NV
)

	)

12576 
	#glVîãxAâribL1i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1i64vNV
)

	)

12577 
	#glVîãxAâribL1ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1ui64NV
)

	)

12578 
	#glVîãxAâribL1ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1ui64vNV
)

	)

12579 
	#glVîãxAâribL2i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2i64NV
)

	)

12580 
	#glVîãxAâribL2i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2i64vNV
)

	)

12581 
	#glVîãxAâribL2ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2ui64NV
)

	)

12582 
	#glVîãxAâribL2ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2ui64vNV
)

	)

12583 
	#glVîãxAâribL3i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3i64NV
)

	)

12584 
	#glVîãxAâribL3i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3i64vNV
)

	)

12585 
	#glVîãxAâribL3ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3ui64NV
)

	)

12586 
	#glVîãxAâribL3ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3ui64vNV
)

	)

12587 
	#glVîãxAâribL4i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4i64NV
)

	)

12588 
	#glVîãxAâribL4i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4i64vNV
)

	)

12589 
	#glVîãxAâribL4ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4ui64NV
)

	)

12590 
	#glVîãxAâribL4ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4ui64vNV
)

	)

12591 
	#glVîãxAâribLF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLF‹m©NV
)

	)

12593 
	#GLEW_NV_vîãx_©åib_öãgî_64bô
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_©åib_öãgî_64bô
)

	)

12599 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


12600 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

12602 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

12603 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

12604 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

12605 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

12606 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

12607 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

12608 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

12609 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

12610 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

12611 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

12612 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

12613 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

12614 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

12615 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

12616 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

12617 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

12618 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

12619 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

12620 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

12621 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

12622 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

12623 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

12624 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

12625 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

12626 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

12628 (
GLAPIENTRY
 * 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

12629 (
GLAPIENTRY
 * 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12630 (
GLAPIENTRY
 * 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

12631 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12632 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tªsu…
[]);

12633 (
GLAPIENTRY
 * 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12634 (
GLAPIENTRY
 * 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12635 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12636 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12637 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

12638 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12639 (
GLAPIENTRY
 * 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12641 
	#glBuf„rAddªssR™geNV
 
	`GLEW_GET_FUN
(
__gÀwBuf„rAddªssR™geNV
)

	)

12642 
	#glCﬁ‹F‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹F‹m©NV
)

	)

12643 
	#glEdgeFœgF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwEdgeFœgF‹m©NV
)

	)

12644 
	#glFogCo‹dF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dF‹m©NV
)

	)

12645 
	#glGëI¡egîui64i_vNV
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîui64i_vNV
)

	)

12646 
	#glIndexF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwIndexF‹m©NV
)

	)

12647 
	#glN‹mÆF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆF‹m©NV
)

	)

12648 
	#glSec⁄d¨yCﬁ‹F‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹F‹m©NV
)

	)

12649 
	#glTexCo‹dF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dF‹m©NV
)

	)

12650 
	#glVîãxAâribF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribF‹m©NV
)

	)

12651 
	#glVîãxAâribIF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIF‹m©NV
)

	)

12652 
	#glVîãxF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxF‹m©NV
)

	)

12654 
	#GLEW_NV_vîãx_buf„r_unifõd_mem‹y
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_buf„r_unifõd_mem‹y
)

	)

12660 #i‚de‡
GL_NV_vîãx_¥ogøm


12661 
	#GL_NV_vîãx_¥ogøm
 1

	)

12663 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

12664 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

12665 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

12666 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

12667 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

12668 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

12669 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

12670 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

12671 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

12672 
	#GL_IDENTITY_NV
 0x862A

	)

12673 
	#GL_INVERSE_NV
 0x862B

	)

12674 
	#GL_TRANSPOSE_NV
 0x862C

	)

12675 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

12676 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

12677 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

12678 
	#GL_MATRIX0_NV
 0x8630

	)

12679 
	#GL_MATRIX1_NV
 0x8631

	)

12680 
	#GL_MATRIX2_NV
 0x8632

	)

12681 
	#GL_MATRIX3_NV
 0x8633

	)

12682 
	#GL_MATRIX4_NV
 0x8634

	)

12683 
	#GL_MATRIX5_NV
 0x8635

	)

12684 
	#GL_MATRIX6_NV
 0x8636

	)

12685 
	#GL_MATRIX7_NV
 0x8637

	)

12686 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

12687 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

12688 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

12689 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

12690 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

12691 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

12692 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

12693 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

12694 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

12695 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

12696 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

12697 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

12698 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

12699 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

12700 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

12701 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

12702 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

12703 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

12704 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

12705 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

12706 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

12707 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

12708 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

12709 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

12710 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

12711 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

12712 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

12713 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

12714 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

12715 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

12716 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

12717 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

12718 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

12719 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

12720 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

12721 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

12722 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

12723 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

12724 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

12725 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

12726 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

12727 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

12728 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

12729 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

12730 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

12731 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

12732 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

12733 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

12734 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

12735 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

12736 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

12737 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

12738 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

12739 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

12740 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

12741 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

12742 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

12743 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

12744 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

12745 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

12747 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 *
	tªsidí˚s
);

12748 (
GLAPIENTRY
 * 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

12749 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

12750 (
GLAPIENTRY
 * 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12751 (
GLAPIENTRY
 * 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

12752 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

12753 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12754 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
* 
	t¥ogøm
);

12755 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12756 (
GLAPIENTRY
 * 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12757 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	tpoöãr
);

12758 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

12759 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12760 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12761 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

12762 (
GLAPIENTRY
 * 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t¥ogøm
);

12763 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

12764 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

12765 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12766 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12767 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tnum
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

12768 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tnum
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12769 (
GLAPIENTRY
 * 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

12770 (
GLAPIENTRY
 * 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

12771 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

12772 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12773 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

12774 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12775 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

12776 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

12777 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

12778 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12779 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12780 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12781 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

12782 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

12783 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

12784 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12785 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12786 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12787 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

12788 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

12789 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

12790 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12791 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12792 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12793 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

12794 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

12795 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

12796 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

12797 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

12798 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12799 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12800 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

12801 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12802 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12803 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

12804 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12805 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12806 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

12807 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

12808 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

12809 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

12810 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLubyã
* 
	tv
);

12812 
	#glAªProgømsResidítNV
 
	`GLEW_GET_FUN
(
__gÀwAªProgømsResidítNV
)

	)

12813 
	#glBödProgømNV
 
	`GLEW_GET_FUN
(
__gÀwBödProgømNV
)

	)

12814 
	#glDñëeProgømsNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgømsNV
)

	)

12815 
	#glExecuãProgømNV
 
	`GLEW_GET_FUN
(
__gÀwExecuãProgømNV
)

	)

12816 
	#glGíProgømsNV
 
	`GLEW_GET_FUN
(
__gÀwGíProgømsNV
)

	)

12817 
	#glGëProgømP¨amëîdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømP¨amëîdvNV
)

	)

12818 
	#glGëProgømP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømP¨amëîfvNV
)

	)

12819 
	#glGëProgømSåögNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømSåögNV
)

	)

12820 
	#glGëProgømivNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømivNV
)

	)

12821 
	#glGëTøckM©rixivNV
 
	`GLEW_GET_FUN
(
__gÀwGëTøckM©rixivNV
)

	)

12822 
	#glGëVîãxAâribPoöãrvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribPoöãrvNV
)

	)

12823 
	#glGëVîãxAâribdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribdvNV
)

	)

12824 
	#glGëVîãxAâribfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribfvNV
)

	)

12825 
	#glGëVîãxAâribivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribivNV
)

	)

12826 
	#glIsProgømNV
 
	`GLEW_GET_FUN
(
__gÀwIsProgømNV
)

	)

12827 
	#glLﬂdProgømNV
 
	`GLEW_GET_FUN
(
__gÀwLﬂdProgømNV
)

	)

12828 
	#glProgømP¨amëî4dNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4dNV
)

	)

12829 
	#glProgømP¨amëî4dvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4dvNV
)

	)

12830 
	#glProgømP¨amëî4fNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4fNV
)

	)

12831 
	#glProgømP¨amëî4fvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4fvNV
)

	)

12832 
	#glProgømP¨amëîs4dvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîs4dvNV
)

	)

12833 
	#glProgømP¨amëîs4fvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîs4fvNV
)

	)

12834 
	#glReque°ResidítProgømsNV
 
	`GLEW_GET_FUN
(
__gÀwReque°ResidítProgømsNV
)

	)

12835 
	#glTøckM©rixNV
 
	`GLEW_GET_FUN
(
__gÀwTøckM©rixNV
)

	)

12836 
	#glVîãxAârib1dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dNV
)

	)

12837 
	#glVîãxAârib1dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dvNV
)

	)

12838 
	#glVîãxAârib1fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fNV
)

	)

12839 
	#glVîãxAârib1fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fvNV
)

	)

12840 
	#glVîãxAârib1sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1sNV
)

	)

12841 
	#glVîãxAârib1svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1svNV
)

	)

12842 
	#glVîãxAârib2dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dNV
)

	)

12843 
	#glVîãxAârib2dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dvNV
)

	)

12844 
	#glVîãxAârib2fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fNV
)

	)

12845 
	#glVîãxAârib2fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fvNV
)

	)

12846 
	#glVîãxAârib2sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2sNV
)

	)

12847 
	#glVîãxAârib2svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2svNV
)

	)

12848 
	#glVîãxAârib3dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dNV
)

	)

12849 
	#glVîãxAârib3dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dvNV
)

	)

12850 
	#glVîãxAârib3fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fNV
)

	)

12851 
	#glVîãxAârib3fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fvNV
)

	)

12852 
	#glVîãxAârib3sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3sNV
)

	)

12853 
	#glVîãxAârib3svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3svNV
)

	)

12854 
	#glVîãxAârib4dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dNV
)

	)

12855 
	#glVîãxAârib4dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dvNV
)

	)

12856 
	#glVîãxAârib4fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fNV
)

	)

12857 
	#glVîãxAârib4fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fvNV
)

	)

12858 
	#glVîãxAârib4sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4sNV
)

	)

12859 
	#glVîãxAârib4svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4svNV
)

	)

12860 
	#glVîãxAârib4ubNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubNV
)

	)

12861 
	#glVîãxAârib4ubvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubvNV
)

	)

12862 
	#glVîãxAâribPoöãrNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribPoöãrNV
)

	)

12863 
	#glVîãxAâribs1dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1dvNV
)

	)

12864 
	#glVîãxAâribs1fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1fvNV
)

	)

12865 
	#glVîãxAâribs1svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1svNV
)

	)

12866 
	#glVîãxAâribs2dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2dvNV
)

	)

12867 
	#glVîãxAâribs2fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2fvNV
)

	)

12868 
	#glVîãxAâribs2svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2svNV
)

	)

12869 
	#glVîãxAâribs3dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3dvNV
)

	)

12870 
	#glVîãxAâribs3fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3fvNV
)

	)

12871 
	#glVîãxAâribs3svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3svNV
)

	)

12872 
	#glVîãxAâribs4dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4dvNV
)

	)

12873 
	#glVîãxAâribs4fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4fvNV
)

	)

12874 
	#glVîãxAâribs4svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4svNV
)

	)

12875 
	#glVîãxAâribs4ubvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4ubvNV
)

	)

12877 
	#GLEW_NV_vîãx_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm
)

	)

12883 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


12884 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

12886 
	#GLEW_NV_vîãx_¥ogøm1_1
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm1_1
)

	)

12892 #i‚de‡
GL_NV_vîãx_¥ogøm2


12893 
	#GL_NV_vîãx_¥ogøm2
 1

	)

12895 
	#GLEW_NV_vîãx_¥ogøm2
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm2
)

	)

12901 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


12902 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

12904 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

12905 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

12907 
	#GLEW_NV_vîãx_¥ogøm2_›ti⁄
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm2_›ti⁄
)

	)

12913 #i‚de‡
GL_NV_vîãx_¥ogøm3


12914 
	#GL_NV_vîãx_¥ogøm3
 1

	)

12916 
	#MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

12918 
	#GLEW_NV_vîãx_¥ogøm3
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm3
)

	)

12924 #i‚de‡
GL_NV_vîãx_¥ogøm4


12925 
	#GL_NV_vîãx_¥ogøm4
 1

	)

12927 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

12929 
	#GLEW_NV_vîãx_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm4
)

	)

12935 #i‚de‡
GL_NV_video_ˇ±uª


12936 
	#GL_NV_video_ˇ±uª
 1

	)

12938 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

12939 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

12940 
	#GL_FIELD_UPPER_NV
 0x9022

	)

12941 
	#GL_FIELD_LOWER_NV
 0x9023

	)

12942 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

12943 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

12944 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

12945 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

12946 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

12947 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

12948 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

12949 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

12950 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

12951 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

12952 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

12953 
	#GL_SUCCESS_NV
 0x902F

	)

12954 
	#GL_FAILURE_NV
 0x9030

	)

12955 
	#GL_YCBYCR8_422_NV
 0x9031

	)

12956 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

12957 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

12958 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

12959 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

12960 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

12961 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

12962 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

12963 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

12964 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

12965 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

12966 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

12968 (
GLAPIENTRY
 * 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12969 (
GLAPIENTRY
 * 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

12970 (
GLAPIENTRY
 * 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

12971 (
GLAPIENTRY
 * 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12972 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

12973 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12974 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12975 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12976 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöt* 
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

12977 (
GLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

12978 (
GLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12979 (
GLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

12981 
	#glBegöVideoC≠tuªNV
 
	`GLEW_GET_FUN
(
__gÀwBegöVideoC≠tuªNV
)

	)

12982 
	#glBödVideoC≠tuªSåómBuf„rNV
 
	`GLEW_GET_FUN
(
__gÀwBödVideoC≠tuªSåómBuf„rNV
)

	)

12983 
	#glBödVideoC≠tuªSåómTextuªNV
 
	`GLEW_GET_FUN
(
__gÀwBödVideoC≠tuªSåómTextuªNV
)

	)

12984 
	#glEndVideoC≠tuªNV
 
	`GLEW_GET_FUN
(
__gÀwEndVideoC≠tuªNV
)

	)

12985 
	#glGëVideoC≠tuªSåómdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªSåómdvNV
)

	)

12986 
	#glGëVideoC≠tuªSåómfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªSåómfvNV
)

	)

12987 
	#glGëVideoC≠tuªSåómivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªSåómivNV
)

	)

12988 
	#glGëVideoC≠tuªivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªivNV
)

	)

12989 
	#glVideoC≠tuªNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªNV
)

	)

12990 
	#glVideoC≠tuªSåómP¨amëîdvNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªSåómP¨amëîdvNV
)

	)

12991 
	#glVideoC≠tuªSåómP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªSåómP¨amëîfvNV
)

	)

12992 
	#glVideoC≠tuªSåómP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªSåómP¨amëîivNV
)

	)

12994 
	#GLEW_NV_video_ˇ±uª
 
	`GLEW_GET_VAR
(
__GLEW_NV_video_ˇ±uª
)

	)

13000 #i‚de‡
GL_OES_byã_co‹dö©es


13001 
	#GL_OES_byã_co‹dö©es
 1

	)

13003 
	#GL_BYTE
 0x1400

	)

13005 
	#GLEW_OES_byã_co‹dö©es
 
	`GLEW_GET_VAR
(
__GLEW_OES_byã_co‹dö©es
)

	)

13011 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


13012 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

13014 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

13015 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

13016 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

13017 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

13018 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

13019 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

13020 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

13021 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

13022 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

13023 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

13025 
	#GLEW_OES_com¥es£d_∑Àâed_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_OES_com¥es£d_∑Àâed_ãxtuª
)

	)

13031 #i‚de‡
GL_OES_ªad_f‹m©


13032 
	#GL_OES_ªad_f‹m©
 1

	)

13034 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

13035 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

13037 
	#GLEW_OES_ªad_f‹m©
 
	`GLEW_GET_VAR
(
__GLEW_OES_ªad_f‹m©
)

	)

13043 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


13044 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

13046 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampd
 
	tdïth
);

13047 (
GLAPIENTRY
 * 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
* 
	tequ©i⁄
);

13048 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

13049 (
GLAPIENTRY
 * 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

13050 (
GLAPIENTRY
 * 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
* 
	tequ©i⁄
);

13051 (
GLAPIENTRY
 * 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

13053 
	#glCÀ¨DïthfOES
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨DïthfOES
)

	)

13054 
	#glClùPœ√fOES
 
	`GLEW_GET_FUN
(
__gÀwClùPœ√fOES
)

	)

13055 
	#glDïthR™gefOES
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gefOES
)

	)

13056 
	#glFru°umfOES
 
	`GLEW_GET_FUN
(
__gÀwFru°umfOES
)

	)

13057 
	#glGëClùPœ√fOES
 
	`GLEW_GET_FUN
(
__gÀwGëClùPœ√fOES
)

	)

13058 
	#glOπhofOES
 
	`GLEW_GET_FUN
(
__gÀwOπhofOES
)

	)

13060 
	#GLEW_OES_sögÀ_¥ecisi⁄
 
	`GLEW_GET_VAR
(
__GLEW_OES_sögÀ_¥ecisi⁄
)

	)

13066 #i‚de‡
GL_OML_öãæa˚


13067 
	#GL_OML_öãæa˚
 1

	)

13069 
	#GL_INTERLACE_OML
 0x8980

	)

13070 
	#GL_INTERLACE_READ_OML
 0x8981

	)

13072 
	#GLEW_OML_öãæa˚
 
	`GLEW_GET_VAR
(
__GLEW_OML_öãæa˚
)

	)

13078 #i‚de‡
GL_OML_ªßm∂e


13079 
	#GL_OML_ªßm∂e
 1

	)

13081 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

13082 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

13083 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

13084 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

13085 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

13086 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

13088 
	#GLEW_OML_ªßm∂e
 
	`GLEW_GET_VAR
(
__GLEW_OML_ªßm∂e
)

	)

13094 #i‚de‡
GL_OML_subßm∂e


13095 
	#GL_OML_subßm∂e
 1

	)

13097 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

13098 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

13100 
	#GLEW_OML_subßm∂e
 
	`GLEW_GET_VAR
(
__GLEW_OML_subßm∂e
)

	)

13106 #i‚de‡
GL_PGI_misc_höts


13107 
	#GL_PGI_misc_höts
 1

	)

13109 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 107000

	)

13110 
	#GL_CONSERVE_MEMORY_HINT_PGI
 107005

	)

13111 
	#GL_RECLAIM_MEMORY_HINT_PGI
 107006

	)

13112 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 107010

	)

13113 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 107011

	)

13114 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 107012

	)

13115 
	#GL_ALWAYS_FAST_HINT_PGI
 107020

	)

13116 
	#GL_ALWAYS_SOFT_HINT_PGI
 107021

	)

13117 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 107022

	)

13118 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 107023

	)

13119 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 107024

	)

13120 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 107025

	)

13121 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 107030

	)

13122 
	#GL_STRICT_LIGHTING_HINT_PGI
 107031

	)

13123 
	#GL_STRICT_SCISSOR_HINT_PGI
 107032

	)

13124 
	#GL_FULL_STIPPLE_HINT_PGI
 107033

	)

13125 
	#GL_CLIP_NEAR_HINT_PGI
 107040

	)

13126 
	#GL_CLIP_FAR_HINT_PGI
 107041

	)

13127 
	#GL_WIDE_LINE_HINT_PGI
 107042

	)

13128 
	#GL_BACK_NORMALS_HINT_PGI
 107043

	)

13130 
	#GLEW_PGI_misc_höts
 
	`GLEW_GET_VAR
(
__GLEW_PGI_misc_höts
)

	)

13136 #i‚de‡
GL_PGI_vîãx_höts


13137 
	#GL_PGI_vîãx_höts
 1

	)

13139 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

13140 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

13141 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

13142 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

13143 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

13144 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

13145 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

13146 
	#GL_VERTEX_DATA_HINT_PGI
 107050

	)

13147 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 107051

	)

13148 
	#GL_MATERIAL_SIDE_HINT_PGI
 107052

	)

13149 
	#GL_MAX_VERTEX_HINT_PGI
 107053

	)

13150 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

13151 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

13152 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

13153 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

13154 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

13155 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

13156 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

13157 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

13158 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

13159 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

13160 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

13162 
	#GLEW_PGI_vîãx_höts
 
	`GLEW_GET_VAR
(
__GLEW_PGI_vîãx_höts
)

	)

13168 #i‚de‡
GL_REGAL_îr‹_°rög


13169 
	#GL_REGAL_îr‹_°rög
 1

	)

13171 c⁄° 
	tGLch¨
* (
	tGLAPIENTRY
 * 
	tPFNGLERRORSTRINGREGALPROC
Ë(
	tGLíum
 
	tîr‹
);

13173 
	#glEº‹SåögREGAL
 
	`GLEW_GET_FUN
(
__gÀwEº‹SåögREGAL
)

	)

13175 
	#GLEW_REGAL_îr‹_°rög
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_îr‹_°rög
)

	)

13181 #i‚de‡
GL_REGAL_exãnsi⁄_quîy


13182 
	#GL_REGAL_exãnsi⁄_quîy
 1

	)

13184 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLGETEXTENSIONREGALPROC
Ë(c⁄° 
	tGLch¨
* 
	text
);

13185 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSUPPORTEDREGALPROC
Ë(c⁄° 
	tGLch¨
* 
	text
);

13187 
	#glGëExãnsi⁄REGAL
 
	`GLEW_GET_FUN
(
__gÀwGëExãnsi⁄REGAL
)

	)

13188 
	#glIsSuµ‹ãdREGAL
 
	`GLEW_GET_FUN
(
__gÀwIsSuµ‹ãdREGAL
)

	)

13190 
	#GLEW_REGAL_exãnsi⁄_quîy
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_exãnsi⁄_quîy
)

	)

13196 #i‚de‡
GL_REGAL_log


13197 
	#GL_REGAL_log
 1

	)

13199 
	#GL_LOG_ERROR_REGAL
 0x9319

	)

13200 
	#GL_LOG_WARNING_REGAL
 0x931A

	)

13201 
	#GL_LOG_INFO_REGAL
 0x931B

	)

13202 
	#GL_LOG_APP_REGAL
 0x931C

	)

13203 
	#GL_LOG_DRIVER_REGAL
 0x931D

	)

13204 
	#GL_LOG_INTERNAL_REGAL
 0x931E

	)

13205 
	#GL_LOG_DEBUG_REGAL
 0x931F

	)

13206 
	#GL_LOG_STATUS_REGAL
 0x9320

	)

13207 
	#GL_LOG_HTTP_REGAL
 0x9321

	)

13209 
	#GLEW_REGAL_log
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_log
)

	)

13215 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


13216 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

13218 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

13219 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

13221 
	#GLEW_REND_s¸ìn_co‹dö©es
 
	`GLEW_GET_VAR
(
__GLEW_REND_s¸ìn_co‹dö©es
)

	)

13227 #i‚de‡
GL_S3_s3tc


13228 
	#GL_S3_s3tc
 1

	)

13230 
	#GL_RGB_S3TC
 0x83A0

	)

13231 
	#GL_RGB4_S3TC
 0x83A1

	)

13232 
	#GL_RGBA_S3TC
 0x83A2

	)

13233 
	#GL_RGBA4_S3TC
 0x83A3

	)

13234 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

13235 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

13237 
	#GLEW_S3_s3tc
 
	`GLEW_GET_VAR
(
__GLEW_S3_s3tc
)

	)

13243 #i‚de‡
GL_SGIS_cﬁ‹_ønge


13244 
	#GL_SGIS_cﬁ‹_ønge
 1

	)

13246 
	#GL_EXTENDED_RANGE_SGIS
 0x85A5

	)

13247 
	#GL_MIN_RED_SGIS
 0x85A6

	)

13248 
	#GL_MAX_RED_SGIS
 0x85A7

	)

13249 
	#GL_MIN_GREEN_SGIS
 0x85A8

	)

13250 
	#GL_MAX_GREEN_SGIS
 0x85A9

	)

13251 
	#GL_MIN_BLUE_SGIS
 0x85AA

	)

13252 
	#GL_MAX_BLUE_SGIS
 0x85AB

	)

13253 
	#GL_MIN_ALPHA_SGIS
 0x85AC

	)

13254 
	#GL_MAX_ALPHA_SGIS
 0x85AD

	)

13256 
	#GLEW_SGIS_cﬁ‹_ønge
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_cﬁ‹_ønge
)

	)

13262 #i‚de‡
GL_SGIS_dëaû_ãxtuª


13263 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

13265 (
GLAPIENTRY
 * 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tpoöts
);

13266 (
GLAPIENTRY
 * 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
* 
	tpoöts
);

13268 
	#glDëaûTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwDëaûTexFuncSGIS
)

	)

13269 
	#glGëDëaûTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëDëaûTexFuncSGIS
)

	)

13271 
	#GLEW_SGIS_dëaû_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_dëaû_ãxtuª
)

	)

13277 #i‚de‡
GL_SGIS_fog_fun˘i⁄


13278 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

13280 (
GLAPIENTRY
 * 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tpoöts
);

13281 (
GLAPIENTRY
 * 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
* 
	tpoöts
);

13283 
	#glFogFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwFogFuncSGIS
)

	)

13284 
	#glGëFogFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëFogFuncSGIS
)

	)

13286 
	#GLEW_SGIS_fog_fun˘i⁄
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_fog_fun˘i⁄
)

	)

13292 #i‚de‡
GL_SGIS_gíî©e_mùm≠


13293 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

13295 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

13296 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

13298 
	#GLEW_SGIS_gíî©e_mùm≠
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_gíî©e_mùm≠
)

	)

13304 #i‚de‡
GL_SGIS_mu…ißm∂e


13305 
	#GL_SGIS_mu…ißm∂e
 1

	)

13307 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

13308 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

13309 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

13310 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

13311 
	#GL_1PASS_SGIS
 0x80A1

	)

13312 
	#GL_2PASS_0_SGIS
 0x80A2

	)

13313 
	#GL_2PASS_1_SGIS
 0x80A3

	)

13314 
	#GL_4PASS_0_SGIS
 0x80A4

	)

13315 
	#GL_4PASS_1_SGIS
 0x80A5

	)

13316 
	#GL_4PASS_2_SGIS
 0x80A6

	)

13317 
	#GL_4PASS_3_SGIS
 0x80A7

	)

13318 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

13319 
	#GL_SAMPLES_SGIS
 0x80A9

	)

13320 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

13321 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

13322 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

13324 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

13325 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

13327 
	#glSam∂eMaskSGIS
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaskSGIS
)

	)

13328 
	#glSam∂eP©ã∫SGIS
 
	`GLEW_GET_FUN
(
__gÀwSam∂eP©ã∫SGIS
)

	)

13330 
	#GLEW_SGIS_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_mu…ißm∂e
)

	)

13336 #i‚de‡
GL_SGIS_pixñ_ãxtuª


13337 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

13339 
	#GLEW_SGIS_pixñ_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_pixñ_ãxtuª
)

	)

13345 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


13346 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

13348 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

13349 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

13350 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

13351 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

13352 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

13353 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

13354 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

13355 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

13357 
	#GLEW_SGIS_poöt_löe_ãxgí
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_poöt_löe_ãxgí
)

	)

13363 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


13364 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

13366 (
GLAPIENTRY
 * 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
* 
	tpoöts
);

13367 (
GLAPIENTRY
 * 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tpoöts
);

13369 
	#glGëSh¨≥nTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëSh¨≥nTexFuncSGIS
)

	)

13370 
	#glSh¨≥nTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwSh¨≥nTexFuncSGIS
)

	)

13372 
	#GLEW_SGIS_sh¨≥n_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_sh¨≥n_ãxtuª
)

	)

13378 #i‚de‡
GL_SGIS_ãxtuª4D


13379 
	#GL_SGIS_ãxtuª4D
 1

	)

13381 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	texã¡
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

13382 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	texã¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tpixñs
);

13384 
	#glTexImage4DSGIS
 
	`GLEW_GET_FUN
(
__gÀwTexImage4DSGIS
)

	)

13385 
	#glTexSubImage4DSGIS
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage4DSGIS
)

	)

13387 
	#GLEW_SGIS_ãxtuª4D
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª4D
)

	)

13393 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


13394 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

13396 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

13398 
	#GLEW_SGIS_ãxtuª_b‹dî_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_b‹dî_˛amp
)

	)

13404 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


13405 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

13407 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

13409 
	#GLEW_SGIS_ãxtuª_edge_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_edge_˛amp
)

	)

13415 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


13416 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

13418 (
GLAPIENTRY
 * 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
* 
	tweights
);

13419 (
GLAPIENTRY
 * 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tweights
);

13421 
	#glGëTexFûãrFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëTexFûãrFuncSGIS
)

	)

13422 
	#glTexFûãrFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwTexFûãrFuncSGIS
)

	)

13424 
	#GLEW_SGIS_ãxtuª_fûãr4
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_fûãr4
)

	)

13430 #i‚de‡
GL_SGIS_ãxtuª_lod


13431 
	#GL_SGIS_ãxtuª_lod
 1

	)

13433 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

13434 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

13435 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

13436 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

13438 
	#GLEW_SGIS_ãxtuª_lod
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_lod
)

	)

13444 #i‚de‡
GL_SGIS_ãxtuª_£À˘


13445 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

13447 
	#GLEW_SGIS_ãxtuª_£À˘
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_£À˘
)

	)

13453 #i‚de‡
GL_SGIX_async


13454 
	#GL_SGIX_async
 1

	)

13456 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

13458 (
GLAPIENTRY
 * 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

13459 (
GLAPIENTRY
 * 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

13460 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
* 
	tm¨kîp
);

13461 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

13462 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

13463 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
* 
	tm¨kîp
);

13465 
	#glAsyncM¨kîSGIX
 
	`GLEW_GET_FUN
(
__gÀwAsyncM¨kîSGIX
)

	)

13466 
	#glDñëeAsyncM¨kîsSGIX
 
	`GLEW_GET_FUN
(
__gÀwDñëeAsyncM¨kîsSGIX
)

	)

13467 
	#glFöishAsyncSGIX
 
	`GLEW_GET_FUN
(
__gÀwFöishAsyncSGIX
)

	)

13468 
	#glGíAsyncM¨kîsSGIX
 
	`GLEW_GET_FUN
(
__gÀwGíAsyncM¨kîsSGIX
)

	)

13469 
	#glIsAsyncM¨kîSGIX
 
	`GLEW_GET_FUN
(
__gÀwIsAsyncM¨kîSGIX
)

	)

13470 
	#glPﬁlAsyncSGIX
 
	`GLEW_GET_FUN
(
__gÀwPﬁlAsyncSGIX
)

	)

13472 
	#GLEW_SGIX_async
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_async
)

	)

13478 #i‚de‡
GL_SGIX_async_hi°ogøm


13479 
	#GL_SGIX_async_hi°ogøm
 1

	)

13481 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

13482 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

13484 
	#GLEW_SGIX_async_hi°ogøm
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_async_hi°ogøm
)

	)

13490 #i‚de‡
GL_SGIX_async_pixñ


13491 
	#GL_SGIX_async_pixñ
 1

	)

13493 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

13494 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

13495 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

13496 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

13497 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

13498 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

13500 
	#GLEW_SGIX_async_pixñ
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_async_pixñ
)

	)

13506 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


13507 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

13509 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

13510 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

13512 
	#GLEW_SGIX_bÀnd_Æpha_mömax
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_bÀnd_Æpha_mömax
)

	)

13518 #i‚de‡
GL_SGIX_˛ùm≠


13519 
	#GL_SGIX_˛ùm≠
 1

	)

13521 
	#GLEW_SGIX_˛ùm≠
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_˛ùm≠
)

	)

13527 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


13528 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

13530 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

13532 
	#GLEW_SGIX_c⁄vﬁuti⁄_accuøcy
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_c⁄vﬁuti⁄_accuøcy
)

	)

13538 #i‚de‡
GL_SGIX_dïth_ãxtuª


13539 
	#GL_SGIX_dïth_ãxtuª
 1

	)

13541 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

13542 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

13543 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

13545 
	#GLEW_SGIX_dïth_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_dïth_ãxtuª
)

	)

13551 #i‚de‡
GL_SGIX_Êush_ø°î


13552 
	#GL_SGIX_Êush_ø°î
 1

	)

13554 (
GLAPIENTRY
 * 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

13556 
	#glFlushRa°îSGIX
 
	`GLEW_GET_FUN
(
__gÀwFlushRa°îSGIX
)

	)

13558 
	#GLEW_SGIX_Êush_ø°î
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_Êush_ø°î
)

	)

13564 #i‚de‡
GL_SGIX_fog_off£t


13565 
	#GL_SGIX_fog_off£t
 1

	)

13567 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

13568 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

13570 
	#GLEW_SGIX_fog_off£t
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_fog_off£t
)

	)

13576 #i‚de‡
GL_SGIX_fog_ãxtuª


13577 
	#GL_SGIX_fog_ãxtuª
 1

	)

13579 
	#GL_TEXTURE_FOG_SGIX
 0

	)

13580 
	#GL_FOG_PATCHY_FACTOR_SGIX
 0

	)

13581 
	#GL_FRAGMENT_FOG_SGIX
 0

	)

13583 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREFOGSGIXPROC
Ë(
	tGLíum
 
	t≤ame
);

13585 
	#glTextuªFogSGIX
 
	`GLEW_GET_FUN
(
__gÀwTextuªFogSGIX
)

	)

13587 
	#GLEW_SGIX_fog_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_fog_ãxtuª
)

	)

13593 #i‚de‡
GL_SGIX_‰agmít_•ecuœr_lightög


13594 
	#GL_SGIX_‰agmít_•ecuœr_lightög
 1

	)

13596 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

13597 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

13598 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13599 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

13600 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13601 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

13602 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13603 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

13604 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13605 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

13606 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

13607 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

13608 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

13609 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
, 
	tGLÊﬂt
* 
	td©a
);

13610 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
, 
	tGLöt
* 
	td©a
);

13611 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	td©a
);

13612 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	td©a
);

13614 
	#glFøgmítCﬁ‹M©îülSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítCﬁ‹M©îülSGIX
)

	)

13615 
	#glFøgmítLightModñfSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfSGIX
)

	)

13616 
	#glFøgmítLightModñfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfvSGIX
)

	)

13617 
	#glFøgmítLightModñiSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñiSGIX
)

	)

13618 
	#glFøgmítLightModñivSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñivSGIX
)

	)

13619 
	#glFøgmítLightfSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfSGIX
)

	)

13620 
	#glFøgmítLightfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfvSGIX
)

	)

13621 
	#glFøgmítLightiSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightiSGIX
)

	)

13622 
	#glFøgmítLightivSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightivSGIX
)

	)

13623 
	#glFøgmítM©îülfSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfSGIX
)

	)

13624 
	#glFøgmítM©îülfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfvSGIX
)

	)

13625 
	#glFøgmítM©îüliSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îüliSGIX
)

	)

13626 
	#glFøgmítM©îülivSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülivSGIX
)

	)

13627 
	#glGëFøgmítLightfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightfvSGIX
)

	)

13628 
	#glGëFøgmítLightivSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightivSGIX
)

	)

13629 
	#glGëFøgmítM©îülfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülfvSGIX
)

	)

13630 
	#glGëFøgmítM©îülivSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülivSGIX
)

	)

13632 
	#GLEW_SGIX_‰agmít_•ecuœr_lightög
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_‰agmít_•ecuœr_lightög
)

	)

13638 #i‚de‡
GL_SGIX_‰amezoom


13639 
	#GL_SGIX_‰amezoom
 1

	)

13641 (
GLAPIENTRY
 * 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

13643 
	#glFømeZoomSGIX
 
	`GLEW_GET_FUN
(
__gÀwFømeZoomSGIX
)

	)

13645 
	#GLEW_SGIX_‰amezoom
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_‰amezoom
)

	)

13651 #i‚de‡
GL_SGIX_öãæa˚


13652 
	#GL_SGIX_öãæa˚
 1

	)

13654 
	#GL_INTERLACE_SGIX
 0x8094

	)

13656 
	#GLEW_SGIX_öãæa˚
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_öãæa˚
)

	)

13662 #i‚de‡
GL_SGIX_ú_ö°rumít1


13663 
	#GL_SGIX_ú_ö°rumít1
 1

	)

13665 
	#GLEW_SGIX_ú_ö°rumít1
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ú_ö°rumít1
)

	)

13671 #i‚de‡
GL_SGIX_li°_¥i‹ôy


13672 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

13674 
	#GLEW_SGIX_li°_¥i‹ôy
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_li°_¥i‹ôy
)

	)

13680 #i‚de‡
GL_SGIX_pixñ_ãxtuª


13681 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

13683 (
GLAPIENTRY
 * 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

13685 
	#glPixñTexGíSGIX
 
	`GLEW_GET_FUN
(
__gÀwPixñTexGíSGIX
)

	)

13687 
	#GLEW_SGIX_pixñ_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_pixñ_ãxtuª
)

	)

13693 #i‚de‡
GL_SGIX_pixñ_ãxtuª_bôs


13694 
	#GL_SGIX_pixñ_ãxtuª_bôs
 1

	)

13696 
	#GLEW_SGIX_pixñ_ãxtuª_bôs
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_pixñ_ãxtuª_bôs
)

	)

13702 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


13703 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

13705 (
GLAPIENTRY
 * 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tequ©i⁄
);

13707 
	#glRe„ªn˚Pœ√SGIX
 
	`GLEW_GET_FUN
(
__gÀwRe„ªn˚Pœ√SGIX
)

	)

13709 
	#GLEW_SGIX_ª„ªn˚_∂™e
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ª„ªn˚_∂™e
)

	)

13715 #i‚de‡
GL_SGIX_ªßm∂e


13716 
	#GL_SGIX_ªßm∂e
 1

	)

13718 
	#GL_PACK_RESAMPLE_SGIX
 0x842E

	)

13719 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842F

	)

13720 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

13721 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x8433

	)

13722 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x8434

	)

13724 
	#GLEW_SGIX_ªßm∂e
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ªßm∂e
)

	)

13730 #i‚de‡
GL_SGIX_shadow


13731 
	#GL_SGIX_shadow
 1

	)

13733 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

13734 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

13735 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

13736 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

13738 
	#GLEW_SGIX_shadow
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_shadow
)

	)

13744 #i‚de‡
GL_SGIX_shadow_ambõ¡


13745 
	#GL_SGIX_shadow_ambõ¡
 1

	)

13747 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

13749 
	#GLEW_SGIX_shadow_ambõ¡
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_shadow_ambõ¡
)

	)

13755 #i‚de‡
GL_SGIX_•rôe


13756 
	#GL_SGIX_•rôe
 1

	)

13758 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

13759 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13760 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

13761 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13763 
	#glS¥ôeP¨amëîfSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîfSGIX
)

	)

13764 
	#glS¥ôeP¨amëîfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîfvSGIX
)

	)

13765 
	#glS¥ôeP¨amëîiSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîiSGIX
)

	)

13766 
	#glS¥ôeP¨amëîivSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîivSGIX
)

	)

13768 
	#GLEW_SGIX_•rôe
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_•rôe
)

	)

13774 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


13775 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

13777 (
GLAPIENTRY
 * 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

13779 
	#glTagSam∂eBuf„rSGIX
 
	`GLEW_GET_FUN
(
__gÀwTagSam∂eBuf„rSGIX
)

	)

13781 
	#GLEW_SGIX_èg_ßm∂e_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_èg_ßm∂e_buf„r
)

	)

13787 #i‚de‡
GL_SGIX_ãxtuª_add_ív


13788 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

13790 
	#GLEW_SGIX_ãxtuª_add_ív
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_add_ív
)

	)

13796 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


13797 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

13799 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

13800 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

13801 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

13803 
	#GLEW_SGIX_ãxtuª_co‹dö©e_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_co‹dö©e_˛amp
)

	)

13809 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


13810 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

13812 
	#GLEW_SGIX_ãxtuª_lod_büs
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_lod_büs
)

	)

13818 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


13819 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

13821 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

13823 
	#GLEW_SGIX_ãxtuª_mu…i_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_mu…i_buf„r
)

	)

13829 #i‚de‡
GL_SGIX_ãxtuª_ønge


13830 
	#GL_SGIX_ãxtuª_ønge
 1

	)

13832 
	#GL_RGB_SIGNED_SGIX
 0x85E0

	)

13833 
	#GL_RGBA_SIGNED_SGIX
 0x85E1

	)

13834 
	#GL_ALPHA_SIGNED_SGIX
 0x85E2

	)

13835 
	#GL_LUMINANCE_SIGNED_SGIX
 0x85E3

	)

13836 
	#GL_INTENSITY_SIGNED_SGIX
 0x85E4

	)

13837 
	#GL_LUMINANCE_ALPHA_SIGNED_SGIX
 0x85E5

	)

13838 
	#GL_RGB16_SIGNED_SGIX
 0x85E6

	)

13839 
	#GL_RGBA16_SIGNED_SGIX
 0x85E7

	)

13840 
	#GL_ALPHA16_SIGNED_SGIX
 0x85E8

	)

13841 
	#GL_LUMINANCE16_SIGNED_SGIX
 0x85E9

	)

13842 
	#GL_INTENSITY16_SIGNED_SGIX
 0x85EA

	)

13843 
	#GL_LUMINANCE16_ALPHA16_SIGNED_SGIX
 0x85EB

	)

13844 
	#GL_RGB_EXTENDED_RANGE_SGIX
 0x85EC

	)

13845 
	#GL_RGBA_EXTENDED_RANGE_SGIX
 0x85ED

	)

13846 
	#GL_ALPHA_EXTENDED_RANGE_SGIX
 0x85EE

	)

13847 
	#GL_LUMINANCE_EXTENDED_RANGE_SGIX
 0x85EF

	)

13848 
	#GL_INTENSITY_EXTENDED_RANGE_SGIX
 0x85F0

	)

13849 
	#GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX
 0x85F1

	)

13850 
	#GL_RGB16_EXTENDED_RANGE_SGIX
 0x85F2

	)

13851 
	#GL_RGBA16_EXTENDED_RANGE_SGIX
 0x85F3

	)

13852 
	#GL_ALPHA16_EXTENDED_RANGE_SGIX
 0x85F4

	)

13853 
	#GL_LUMINANCE16_EXTENDED_RANGE_SGIX
 0x85F5

	)

13854 
	#GL_INTENSITY16_EXTENDED_RANGE_SGIX
 0x85F6

	)

13855 
	#GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX
 0x85F7

	)

13856 
	#GL_MIN_LUMINANCE_SGIS
 0x85F8

	)

13857 
	#GL_MAX_LUMINANCE_SGIS
 0x85F9

	)

13858 
	#GL_MIN_INTENSITY_SGIS
 0x85FA

	)

13859 
	#GL_MAX_INTENSITY_SGIS
 0x85FB

	)

13861 
	#GLEW_SGIX_ãxtuª_ønge
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_ønge
)

	)

13867 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


13868 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

13870 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

13871 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

13872 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

13873 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

13875 
	#GLEW_SGIX_ãxtuª_sˇÀ_büs
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_sˇÀ_büs
)

	)

13881 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


13882 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

13884 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

13885 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

13887 
	#GLEW_SGIX_vîãx_¥e˛ù
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_vîãx_¥e˛ù
)

	)

13893 #i‚de‡
GL_SGIX_vîãx_¥e˛ù_höt


13894 
	#GL_SGIX_vîãx_¥e˛ù_höt
 1

	)

13896 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

13897 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

13899 
	#GLEW_SGIX_vîãx_¥e˛ù_höt
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_vîãx_¥e˛ù_höt
)

	)

13905 #i‚de‡
GL_SGIX_y¸cb


13906 
	#GL_SGIX_y¸cb
 1

	)

13908 
	#GLEW_SGIX_y¸cb
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_y¸cb
)

	)

13914 #i‚de‡
GL_SGI_cﬁ‹_m©rix


13915 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

13917 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

13918 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

13919 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

13920 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

13921 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

13922 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

13923 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

13924 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

13925 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

13926 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

13927 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

13929 
	#GLEW_SGI_cﬁ‹_m©rix
 
	`GLEW_GET_VAR
(
__GLEW_SGI_cﬁ‹_m©rix
)

	)

13935 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


13936 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

13938 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

13939 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

13940 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

13941 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

13942 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

13943 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

13944 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

13945 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

13946 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

13947 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

13948 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

13949 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

13950 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

13951 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

13952 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

13953 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

13955 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

13956 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

13957 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° * 
	tèbÀ
);

13958 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

13959 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13960 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13961 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, * 
	tèbÀ
);

13963 
	#glCﬁ‹TabÀP¨amëîfvSGI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîfvSGI
)

	)

13964 
	#glCﬁ‹TabÀP¨amëîivSGI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîivSGI
)

	)

13965 
	#glCﬁ‹TabÀSGI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀSGI
)

	)

13966 
	#glC›yCﬁ‹TabÀSGI
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹TabÀSGI
)

	)

13967 
	#glGëCﬁ‹TabÀP¨amëîfvSGI
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîfvSGI
)

	)

13968 
	#glGëCﬁ‹TabÀP¨amëîivSGI
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîivSGI
)

	)

13969 
	#glGëCﬁ‹TabÀSGI
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀSGI
)

	)

13971 
	#GLEW_SGI_cﬁ‹_èbÀ
 
	`GLEW_GET_VAR
(
__GLEW_SGI_cﬁ‹_èbÀ
)

	)

13977 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


13978 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

13980 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

13981 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

13983 
	#GLEW_SGI_ãxtuª_cﬁ‹_èbÀ
 
	`GLEW_GET_VAR
(
__GLEW_SGI_ãxtuª_cﬁ‹_èbÀ
)

	)

13989 #i‚de‡
GL_SUNX_c⁄°™t_d©a


13990 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

13992 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

13993 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

13995 (
GLAPIENTRY
 * 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

13997 
	#glFöishTextuªSUNX
 
	`GLEW_GET_FUN
(
__gÀwFöishTextuªSUNX
)

	)

13999 
	#GLEW_SUNX_c⁄°™t_d©a
 
	`GLEW_GET_VAR
(
__GLEW_SUNX_c⁄°™t_d©a
)

	)

14005 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


14006 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

14008 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

14010 
	#GLEW_SUN_c⁄vﬁuti⁄_b‹dî_modes
 
	`GLEW_GET_VAR
(
__GLEW_SUN_c⁄vﬁuti⁄_b‹dî_modes
)

	)

14016 #i‚de‡
GL_SUN_globÆ_Æpha


14017 
	#GL_SUN_globÆ_Æpha
 1

	)

14019 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

14020 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

14022 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

14023 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

14024 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

14025 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

14026 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

14027 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

14028 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

14029 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

14031 
	#glGlobÆAÕhaFa˘‹bSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹bSUN
)

	)

14032 
	#glGlobÆAÕhaFa˘‹dSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹dSUN
)

	)

14033 
	#glGlobÆAÕhaFa˘‹fSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹fSUN
)

	)

14034 
	#glGlobÆAÕhaFa˘‹iSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹iSUN
)

	)

14035 
	#glGlobÆAÕhaFa˘‹sSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹sSUN
)

	)

14036 
	#glGlobÆAÕhaFa˘‹ubSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹ubSUN
)

	)

14037 
	#glGlobÆAÕhaFa˘‹uiSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹uiSUN
)

	)

14038 
	#glGlobÆAÕhaFa˘‹usSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹usSUN
)

	)

14040 
	#GLEW_SUN_globÆ_Æpha
 
	`GLEW_GET_VAR
(
__GLEW_SUN_globÆ_Æpha
)

	)

14046 #i‚de‡
GL_SUN_mesh_¨øy


14047 
	#GL_SUN_mesh_¨øy
 1

	)

14049 
	#GL_QUAD_MESH_SUN
 0x8614

	)

14050 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

14052 
	#GLEW_SUN_mesh_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_SUN_mesh_¨øy
)

	)

14058 #i‚de‡
GL_SUN_ªad_video_pixñs


14059 
	#GL_SUN_ªad_video_pixñs
 1

	)

14061 (
GLAPIENTRY
 * 
	tPFNGLREADVIDEOPIXELSSUNPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
* 
	tpixñs
);

14063 
	#glRódVideoPixñsSUN
 
	`GLEW_GET_FUN
(
__gÀwRódVideoPixñsSUN
)

	)

14065 
	#GLEW_SUN_ªad_video_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_SUN_ªad_video_pixñs
)

	)

14071 #i‚de‡
GL_SUN_¶i˚_accum


14072 
	#GL_SUN_¶i˚_accum
 1

	)

14074 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

14076 
	#GLEW_SUN_¶i˚_accum
 
	`GLEW_GET_VAR
(
__GLEW_SUN_¶i˚_accum
)

	)

14082 #i‚de‡
GL_SUN_åüngÀ_li°


14083 
	#GL_SUN_åüngÀ_li°
 1

	)

14085 
	#GL_RESTART_SUN
 0x01

	)

14086 
	#GL_REPLACE_MIDDLE_SUN
 0x02

	)

14087 
	#GL_REPLACE_OLDEST_SUN
 0x03

	)

14088 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

14089 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

14090 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

14091 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

14092 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

14093 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

14094 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

14095 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

14096 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

14097 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

14098 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

14099 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

14100 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

14101 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

14103 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

14104 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

14105 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
* 
	tcode
);

14106 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

14107 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	tcode
);

14108 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

14109 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
* 
	tcode
);

14111 
	#glRïœ˚mítCodePoöãrSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodePoöãrSUN
)

	)

14112 
	#glRïœ˚mítCodeubSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeubSUN
)

	)

14113 
	#glRïœ˚mítCodeubvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeubvSUN
)

	)

14114 
	#glRïœ˚mítCodeuiSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiSUN
)

	)

14115 
	#glRïœ˚mítCodeuivSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuivSUN
)

	)

14116 
	#glRïœ˚mítCodeusSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeusSUN
)

	)

14117 
	#glRïœ˚mítCodeusvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeusvSUN
)

	)

14119 
	#GLEW_SUN_åüngÀ_li°
 
	`GLEW_GET_VAR
(
__GLEW_SUN_åüngÀ_li°
)

	)

14125 #i‚de‡
GL_SUN_vîãx


14126 
	#GL_SUN_vîãx
 1

	)

14128 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14129 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tc
, c⁄° GLÊﬂà*
	tv
);

14130 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14131 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14132 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

14133 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
* 
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14134 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14135 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
* 
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14136 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14137 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tn
, c⁄° GLÊﬂà*
	tv
);

14138 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14139 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

14140 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14141 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14142 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14143 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14144 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14145 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

14146 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14147 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14148 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14149 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14150 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14151 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

14152 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14153 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14154 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14155 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

14156 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14157 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14158 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14159 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

14160 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14161 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14162 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14163 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tv
);

14164 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

14165 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14166 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

14167 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tv
);

14169 
	#glCﬁ‹3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3fVîãx3fSUN
)

	)

14170 
	#glCﬁ‹3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3fVîãx3fvSUN
)

	)

14171 
	#glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14172 
	#glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14173 
	#glCﬁ‹4ubVîãx2fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx2fSUN
)

	)

14174 
	#glCﬁ‹4ubVîãx2fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx2fvSUN
)

	)

14175 
	#glCﬁ‹4ubVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx3fSUN
)

	)

14176 
	#glCﬁ‹4ubVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx3fvSUN
)

	)

14177 
	#glN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3fVîãx3fSUN
)

	)

14178 
	#glN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3fVîãx3fvSUN
)

	)

14179 
	#glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
)

	)

14180 
	#glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
)

	)

14181 
	#glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14182 
	#glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14183 
	#glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
)

	)

14184 
	#glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
)

	)

14185 
	#glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
)

	)

14186 
	#glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
)

	)

14187 
	#glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14188 
	#glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14189 
	#glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
)

	)

14190 
	#glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
)

	)

14191 
	#glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
)

	)

14192 
	#glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
)

	)

14193 
	#glRïœ˚mítCodeuiVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiVîãx3fSUN
)

	)

14194 
	#glRïœ˚mítCodeuiVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiVîãx3fvSUN
)

	)

14195 
	#glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹3fVîãx3fSUN
)

	)

14196 
	#glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹3fVîãx3fvSUN
)

	)

14197 
	#glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14198 
	#glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14199 
	#glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fSUN
)

	)

14200 
	#glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
)

	)

14201 
	#glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fN‹mÆ3fVîãx3fSUN
)

	)

14202 
	#glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fN‹mÆ3fVîãx3fvSUN
)

	)

14203 
	#glTexCo‹d2fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fVîãx3fSUN
)

	)

14204 
	#glTexCo‹d2fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fVîãx3fvSUN
)

	)

14205 
	#glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
)

	)

14206 
	#glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
)

	)

14207 
	#glTexCo‹d4fVîãx4fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fVîãx4fSUN
)

	)

14208 
	#glTexCo‹d4fVîãx4fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fVîãx4fvSUN
)

	)

14210 
	#GLEW_SUN_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_SUN_vîãx
)

	)

14216 #i‚de‡
GL_WIN_ph⁄g_shadög


14217 
	#GL_WIN_ph⁄g_shadög
 1

	)

14219 
	#GL_PHONG_WIN
 0x80EA

	)

14220 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

14222 
	#GLEW_WIN_ph⁄g_shadög
 
	`GLEW_GET_VAR
(
__GLEW_WIN_ph⁄g_shadög
)

	)

14228 #i‚de‡
GL_WIN_•ecuœr_fog


14229 
	#GL_WIN_•ecuœr_fog
 1

	)

14231 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

14233 
	#GLEW_WIN_•ecuœr_fog
 
	`GLEW_GET_VAR
(
__GLEW_WIN_•ecuœr_fog
)

	)

14239 #i‚de‡
GL_WIN_sw≠_höt


14240 
	#GL_WIN_sw≠_höt
 1

	)

14242 (
GLAPIENTRY
 * 
	tPFNGLADDSWAPHINTRECTWINPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

14244 
	#glAddSw≠HötRe˘WIN
 
	`GLEW_GET_FUN
(
__gÀwAddSw≠HötRe˘WIN
)

	)

14246 
	#GLEW_WIN_sw≠_höt
 
	`GLEW_GET_VAR
(
__GLEW_WIN_sw≠_höt
)

	)

14252 #i‡
deföed
(
GLEW_MX
Ë&& deföed(
_WIN32
)

14253 
	#GLEW_FUN_EXPORT


	)

14255 
	#GLEW_FUN_EXPORT
 
GLEWAPI


	)

14258 #i‡
deföed
(
GLEW_MX
)

14259 
	#GLEW_VAR_EXPORT


	)

14261 
	#GLEW_VAR_EXPORT
 
GLEWAPI


	)

14264 #i‡
deföed
(
GLEW_MX
Ë&& deföed(
_WIN32
)

14265 
	sGLEWC⁄ãxtSåu˘


14269 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE3DPROC
 
	g__gÀwC›yTexSubImage3D
;

14270 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTSPROC
 
	g__gÀwDøwR™geEÀmíts
;

14271 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DPROC
 
	g__gÀwTexImage3D
;

14272 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE3DPROC
 
	g__gÀwTexSubImage3D
;

14274 
GLEW_FUN_EXPORT
 
PFNGLACTIVETEXTUREPROC
 
	g__gÀwA˘iveTextuª
;

14275 
GLEW_FUN_EXPORT
 
PFNGLCLIENTACTIVETEXTUREPROC
 
	g__gÀwClõ¡A˘iveTextuª
;

14276 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE1DPROC
 
	g__gÀwCom¥es£dTexImage1D
;

14277 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE2DPROC
 
	g__gÀwCom¥es£dTexImage2D
;

14278 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE3DPROC
 
	g__gÀwCom¥es£dTexImage3D
;

14279 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
 
	g__gÀwCom¥es£dTexSubImage1D
;

14280 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
 
	g__gÀwCom¥es£dTexSubImage2D
;

14281 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
 
	g__gÀwCom¥es£dTexSubImage3D
;

14282 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDTEXIMAGEPROC
 
	g__gÀwGëCom¥es£dTexImage
;

14283 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXDPROC
 
	g__gÀwLﬂdTøn•o£M©rixd
;

14284 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXFPROC
 
	g__gÀwLﬂdTøn•o£M©rixf
;

14285 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXDPROC
 
	g__gÀwMu…Tøn•o£M©rixd
;

14286 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXFPROC
 
	g__gÀwMu…Tøn•o£M©rixf
;

14287 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DPROC
 
	g__gÀwMu…iTexCo‹d1d
;

14288 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DVPROC
 
	g__gÀwMu…iTexCo‹d1dv
;

14289 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FPROC
 
	g__gÀwMu…iTexCo‹d1f
;

14290 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FVPROC
 
	g__gÀwMu…iTexCo‹d1fv
;

14291 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IPROC
 
	g__gÀwMu…iTexCo‹d1i
;

14292 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IVPROC
 
	g__gÀwMu…iTexCo‹d1iv
;

14293 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SPROC
 
	g__gÀwMu…iTexCo‹d1s
;

14294 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SVPROC
 
	g__gÀwMu…iTexCo‹d1sv
;

14295 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DPROC
 
	g__gÀwMu…iTexCo‹d2d
;

14296 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DVPROC
 
	g__gÀwMu…iTexCo‹d2dv
;

14297 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FPROC
 
	g__gÀwMu…iTexCo‹d2f
;

14298 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FVPROC
 
	g__gÀwMu…iTexCo‹d2fv
;

14299 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IPROC
 
	g__gÀwMu…iTexCo‹d2i
;

14300 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IVPROC
 
	g__gÀwMu…iTexCo‹d2iv
;

14301 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SPROC
 
	g__gÀwMu…iTexCo‹d2s
;

14302 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SVPROC
 
	g__gÀwMu…iTexCo‹d2sv
;

14303 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DPROC
 
	g__gÀwMu…iTexCo‹d3d
;

14304 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DVPROC
 
	g__gÀwMu…iTexCo‹d3dv
;

14305 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FPROC
 
	g__gÀwMu…iTexCo‹d3f
;

14306 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FVPROC
 
	g__gÀwMu…iTexCo‹d3fv
;

14307 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IPROC
 
	g__gÀwMu…iTexCo‹d3i
;

14308 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IVPROC
 
	g__gÀwMu…iTexCo‹d3iv
;

14309 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SPROC
 
	g__gÀwMu…iTexCo‹d3s
;

14310 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SVPROC
 
	g__gÀwMu…iTexCo‹d3sv
;

14311 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DPROC
 
	g__gÀwMu…iTexCo‹d4d
;

14312 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DVPROC
 
	g__gÀwMu…iTexCo‹d4dv
;

14313 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FPROC
 
	g__gÀwMu…iTexCo‹d4f
;

14314 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FVPROC
 
	g__gÀwMu…iTexCo‹d4fv
;

14315 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IPROC
 
	g__gÀwMu…iTexCo‹d4i
;

14316 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IVPROC
 
	g__gÀwMu…iTexCo‹d4iv
;

14317 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SPROC
 
	g__gÀwMu…iTexCo‹d4s
;

14318 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SVPROC
 
	g__gÀwMu…iTexCo‹d4sv
;

14319 
GLEW_FUN_EXPORT
 
PFNGLSAMPLECOVERAGEPROC
 
	g__gÀwSam∂eCovîage
;

14321 
GLEW_FUN_EXPORT
 
PFNGLBLENDCOLORPROC
 
	g__gÀwBÀndCﬁ‹
;

14322 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONPROC
 
	g__gÀwBÀndEqu©i⁄
;

14323 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEPROC
 
	g__gÀwBÀndFuncSï¨©e
;

14324 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDPOINTERPROC
 
	g__gÀwFogCo‹dPoöãr
;

14325 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDPROC
 
	g__gÀwFogCo‹dd
;

14326 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDVPROC
 
	g__gÀwFogCo‹ddv
;

14327 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFPROC
 
	g__gÀwFogCo‹df
;

14328 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFVPROC
 
	g__gÀwFogCo‹dfv
;

14329 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSPROC
 
	g__gÀwMu…iDøwAºays
;

14330 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSPROC
 
	g__gÀwMu…iDøwEÀmíts
;

14331 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFPROC
 
	g__gÀwPoötP¨amëîf
;

14332 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFVPROC
 
	g__gÀwPoötP¨amëîfv
;

14333 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERIPROC
 
	g__gÀwPoötP¨amëîi
;

14334 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERIVPROC
 
	g__gÀwPoötP¨amëîiv
;

14335 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3b
;

14336 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3bv
;

14337 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3d
;

14338 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3dv
;

14339 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3f
;

14340 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3fv
;

14341 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3i
;

14342 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3iv
;

14343 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3s
;

14344 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3sv
;

14345 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ub
;

14346 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ubv
;

14347 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ui
;

14348 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3uiv
;

14349 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3us
;

14350 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3usv
;

14351 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORPOINTERPROC
 
	g__gÀwSec⁄d¨yCﬁ‹Poöãr
;

14352 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DPROC
 
	g__gÀwWödowPos2d
;

14353 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DVPROC
 
	g__gÀwWödowPos2dv
;

14354 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FPROC
 
	g__gÀwWödowPos2f
;

14355 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FVPROC
 
	g__gÀwWödowPos2fv
;

14356 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IPROC
 
	g__gÀwWödowPos2i
;

14357 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IVPROC
 
	g__gÀwWödowPos2iv
;

14358 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SPROC
 
	g__gÀwWödowPos2s
;

14359 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SVPROC
 
	g__gÀwWödowPos2sv
;

14360 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DPROC
 
	g__gÀwWödowPos3d
;

14361 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DVPROC
 
	g__gÀwWödowPos3dv
;

14362 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FPROC
 
	g__gÀwWödowPos3f
;

14363 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FVPROC
 
	g__gÀwWödowPos3fv
;

14364 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IPROC
 
	g__gÀwWödowPos3i
;

14365 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IVPROC
 
	g__gÀwWödowPos3iv
;

14366 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SPROC
 
	g__gÀwWödowPos3s
;

14367 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SVPROC
 
	g__gÀwWödowPos3sv
;

14369 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYPROC
 
	g__gÀwBegöQuîy
;

14370 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERPROC
 
	g__gÀwBödBuf„r
;

14371 
GLEW_FUN_EXPORT
 
PFNGLBUFFERDATAPROC
 
	g__gÀwBuf„rD©a
;

14372 
GLEW_FUN_EXPORT
 
PFNGLBUFFERSUBDATAPROC
 
	g__gÀwBuf„rSubD©a
;

14373 
GLEW_FUN_EXPORT
 
PFNGLDELETEBUFFERSPROC
 
	g__gÀwDñëeBuf„rs
;

14374 
GLEW_FUN_EXPORT
 
PFNGLDELETEQUERIESPROC
 
	g__gÀwDñëeQuîõs
;

14375 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYPROC
 
	g__gÀwEndQuîy
;

14376 
GLEW_FUN_EXPORT
 
PFNGLGENBUFFERSPROC
 
	g__gÀwGíBuf„rs
;

14377 
GLEW_FUN_EXPORT
 
PFNGLGENQUERIESPROC
 
	g__gÀwGíQuîõs
;

14378 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERIVPROC
 
	g__gÀwGëBuf„rP¨amëîiv
;

14379 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPOINTERVPROC
 
	g__gÀwGëBuf„rPoöãrv
;

14380 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERSUBDATAPROC
 
	g__gÀwGëBuf„rSubD©a
;

14381 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTIVPROC
 
	g__gÀwGëQuîyObje˘iv
;

14382 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUIVPROC
 
	g__gÀwGëQuîyObje˘uiv
;

14383 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYIVPROC
 
	g__gÀwGëQuîyiv
;

14384 
GLEW_FUN_EXPORT
 
PFNGLISBUFFERPROC
 
	g__gÀwIsBuf„r
;

14385 
GLEW_FUN_EXPORT
 
PFNGLISQUERYPROC
 
	g__gÀwIsQuîy
;

14386 
GLEW_FUN_EXPORT
 
PFNGLMAPBUFFERPROC
 
	g__gÀwM≠Buf„r
;

14387 
GLEW_FUN_EXPORT
 
PFNGLUNMAPBUFFERPROC
 
	g__gÀwUnm≠Buf„r
;

14389 
GLEW_FUN_EXPORT
 
PFNGLATTACHSHADERPROC
 
	g__gÀwAâachShadî
;

14390 
GLEW_FUN_EXPORT
 
PFNGLBINDATTRIBLOCATIONPROC
 
	g__gÀwBödAâribLoˇti⁄
;

14391 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©e
;

14392 
GLEW_FUN_EXPORT
 
PFNGLCOMPILESHADERPROC
 
	g__gÀwCompûeShadî
;

14393 
GLEW_FUN_EXPORT
 
PFNGLCREATEPROGRAMPROC
 
	g__gÀwCª©eProgøm
;

14394 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADERPROC
 
	g__gÀwCª©eShadî
;

14395 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMPROC
 
	g__gÀwDñëeProgøm
;

14396 
GLEW_FUN_EXPORT
 
PFNGLDELETESHADERPROC
 
	g__gÀwDñëeShadî
;

14397 
GLEW_FUN_EXPORT
 
PFNGLDETACHSHADERPROC
 
	g__gÀwDëachShadî
;

14398 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXATTRIBARRAYPROC
 
	g__gÀwDißbÀVîãxAâribAºay
;

14399 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERSPROC
 
	g__gÀwDøwBuf„rs
;

14400 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXATTRIBARRAYPROC
 
	g__gÀwE«bÀVîãxAâribAºay
;

14401 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEATTRIBPROC
 
	g__gÀwGëA˘iveAârib
;

14402 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMPROC
 
	g__gÀwGëA˘iveUnif‹m
;

14403 
GLEW_FUN_EXPORT
 
PFNGLGETATTACHEDSHADERSPROC
 
	g__gÀwGëAâachedShadîs
;

14404 
GLEW_FUN_EXPORT
 
PFNGLGETATTRIBLOCATIONPROC
 
	g__gÀwGëAâribLoˇti⁄
;

14405 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMINFOLOGPROC
 
	g__gÀwGëProgømInfoLog
;

14406 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMIVPROC
 
	g__gÀwGëProgømiv
;

14407 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERINFOLOGPROC
 
	g__gÀwGëShadîInfoLog
;

14408 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERSOURCEPROC
 
	g__gÀwGëShadîSour˚
;

14409 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERIVPROC
 
	g__gÀwGëShadîiv
;

14410 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMLOCATIONPROC
 
	g__gÀwGëUnif‹mLoˇti⁄
;

14411 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMFVPROC
 
	g__gÀwGëUnif‹mfv
;

14412 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMIVPROC
 
	g__gÀwGëUnif‹miv
;

14413 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBPOINTERVPROC
 
	g__gÀwGëVîãxAâribPoöãrv
;

14414 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBDVPROC
 
	g__gÀwGëVîãxAâribdv
;

14415 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBFVPROC
 
	g__gÀwGëVîãxAâribfv
;

14416 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIVPROC
 
	g__gÀwGëVîãxAâribiv
;

14417 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMPROC
 
	g__gÀwIsProgøm
;

14418 
GLEW_FUN_EXPORT
 
PFNGLISSHADERPROC
 
	g__gÀwIsShadî
;

14419 
GLEW_FUN_EXPORT
 
PFNGLLINKPROGRAMPROC
 
	g__gÀwLökProgøm
;

14420 
GLEW_FUN_EXPORT
 
PFNGLSHADERSOURCEPROC
 
	g__gÀwShadîSour˚
;

14421 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFUNCSEPARATEPROC
 
	g__gÀwSãncûFuncSï¨©e
;

14422 
GLEW_FUN_EXPORT
 
PFNGLSTENCILMASKSEPARATEPROC
 
	g__gÀwSãncûMaskSï¨©e
;

14423 
GLEW_FUN_EXPORT
 
PFNGLSTENCILOPSEPARATEPROC
 
	g__gÀwSãncûOpSï¨©e
;

14424 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FPROC
 
	g__gÀwUnif‹m1f
;

14425 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FVPROC
 
	g__gÀwUnif‹m1fv
;

14426 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IPROC
 
	g__gÀwUnif‹m1i
;

14427 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IVPROC
 
	g__gÀwUnif‹m1iv
;

14428 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FPROC
 
	g__gÀwUnif‹m2f
;

14429 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FVPROC
 
	g__gÀwUnif‹m2fv
;

14430 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IPROC
 
	g__gÀwUnif‹m2i
;

14431 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IVPROC
 
	g__gÀwUnif‹m2iv
;

14432 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FPROC
 
	g__gÀwUnif‹m3f
;

14433 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FVPROC
 
	g__gÀwUnif‹m3fv
;

14434 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IPROC
 
	g__gÀwUnif‹m3i
;

14435 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IVPROC
 
	g__gÀwUnif‹m3iv
;

14436 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FPROC
 
	g__gÀwUnif‹m4f
;

14437 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FVPROC
 
	g__gÀwUnif‹m4fv
;

14438 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IPROC
 
	g__gÀwUnif‹m4i
;

14439 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IVPROC
 
	g__gÀwUnif‹m4iv
;

14440 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2FVPROC
 
	g__gÀwUnif‹mM©rix2fv
;

14441 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3FVPROC
 
	g__gÀwUnif‹mM©rix3fv
;

14442 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4FVPROC
 
	g__gÀwUnif‹mM©rix4fv
;

14443 
GLEW_FUN_EXPORT
 
PFNGLUSEPROGRAMPROC
 
	g__gÀwU£Progøm
;

14444 
GLEW_FUN_EXPORT
 
PFNGLVALIDATEPROGRAMPROC
 
	g__gÀwVÆid©eProgøm
;

14445 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DPROC
 
	g__gÀwVîãxAârib1d
;

14446 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DVPROC
 
	g__gÀwVîãxAârib1dv
;

14447 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FPROC
 
	g__gÀwVîãxAârib1f
;

14448 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FVPROC
 
	g__gÀwVîãxAârib1fv
;

14449 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SPROC
 
	g__gÀwVîãxAârib1s
;

14450 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SVPROC
 
	g__gÀwVîãxAârib1sv
;

14451 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DPROC
 
	g__gÀwVîãxAârib2d
;

14452 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DVPROC
 
	g__gÀwVîãxAârib2dv
;

14453 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FPROC
 
	g__gÀwVîãxAârib2f
;

14454 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FVPROC
 
	g__gÀwVîãxAârib2fv
;

14455 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SPROC
 
	g__gÀwVîãxAârib2s
;

14456 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SVPROC
 
	g__gÀwVîãxAârib2sv
;

14457 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DPROC
 
	g__gÀwVîãxAârib3d
;

14458 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DVPROC
 
	g__gÀwVîãxAârib3dv
;

14459 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FPROC
 
	g__gÀwVîãxAârib3f
;

14460 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FVPROC
 
	g__gÀwVîãxAârib3fv
;

14461 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SPROC
 
	g__gÀwVîãxAârib3s
;

14462 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SVPROC
 
	g__gÀwVîãxAârib3sv
;

14463 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NBVPROC
 
	g__gÀwVîãxAârib4Nbv
;

14464 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NIVPROC
 
	g__gÀwVîãxAârib4Niv
;

14465 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NSVPROC
 
	g__gÀwVîãxAârib4Nsv
;

14466 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBPROC
 
	g__gÀwVîãxAârib4Nub
;

14467 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBVPROC
 
	g__gÀwVîãxAârib4Nubv
;

14468 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUIVPROC
 
	g__gÀwVîãxAârib4Nuiv
;

14469 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUSVPROC
 
	g__gÀwVîãxAârib4Nusv
;

14470 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4BVPROC
 
	g__gÀwVîãxAârib4bv
;

14471 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DPROC
 
	g__gÀwVîãxAârib4d
;

14472 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DVPROC
 
	g__gÀwVîãxAârib4dv
;

14473 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FPROC
 
	g__gÀwVîãxAârib4f
;

14474 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FVPROC
 
	g__gÀwVîãxAârib4fv
;

14475 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4IVPROC
 
	g__gÀwVîãxAârib4iv
;

14476 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SPROC
 
	g__gÀwVîãxAârib4s
;

14477 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SVPROC
 
	g__gÀwVîãxAârib4sv
;

14478 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBVPROC
 
	g__gÀwVîãxAârib4ubv
;

14479 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UIVPROC
 
	g__gÀwVîãxAârib4uiv
;

14480 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4USVPROC
 
	g__gÀwVîãxAârib4usv
;

14481 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPOINTERPROC
 
	g__gÀwVîãxAâribPoöãr
;

14483 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X3FVPROC
 
	g__gÀwUnif‹mM©rix2x3fv
;

14484 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X4FVPROC
 
	g__gÀwUnif‹mM©rix2x4fv
;

14485 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X2FVPROC
 
	g__gÀwUnif‹mM©rix3x2fv
;

14486 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X4FVPROC
 
	g__gÀwUnif‹mM©rix3x4fv
;

14487 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X2FVPROC
 
	g__gÀwUnif‹mM©rix4x2fv
;

14488 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X3FVPROC
 
	g__gÀwUnif‹mM©rix4x3fv
;

14490 
GLEW_FUN_EXPORT
 
PFNGLBEGINCONDITIONALRENDERPROC
 
	g__gÀwBegöC⁄dôi⁄ÆRídî
;

14491 
GLEW_FUN_EXPORT
 
PFNGLBEGINTRANSFORMFEEDBACKPROC
 
	g__gÀwBegöTønsf‹mFìdback
;

14492 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGDATALOCATIONPROC
 
	g__gÀwBödFøgD©aLoˇti⁄
;

14493 
GLEW_FUN_EXPORT
 
PFNGLCLAMPCOLORPROC
 
	g__gÀwCœmpCﬁ‹
;

14494 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERFIPROC
 
	g__gÀwCÀ¨Buf„rfi
;

14495 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERFVPROC
 
	g__gÀwCÀ¨Buf„rfv
;

14496 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERIVPROC
 
	g__gÀwCÀ¨Buf„riv
;

14497 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERUIVPROC
 
	g__gÀwCÀ¨Buf„ruiv
;

14498 
GLEW_FUN_EXPORT
 
PFNGLCOLORMASKIPROC
 
	g__gÀwCﬁ‹Maski
;

14499 
GLEW_FUN_EXPORT
 
PFNGLDISABLEIPROC
 
	g__gÀwDißbÀi
;

14500 
GLEW_FUN_EXPORT
 
PFNGLENABLEIPROC
 
	g__gÀwE«bÀi
;

14501 
GLEW_FUN_EXPORT
 
PFNGLENDCONDITIONALRENDERPROC
 
	g__gÀwEndC⁄dôi⁄ÆRídî
;

14502 
GLEW_FUN_EXPORT
 
PFNGLENDTRANSFORMFEEDBACKPROC
 
	g__gÀwEndTønsf‹mFìdback
;

14503 
GLEW_FUN_EXPORT
 
PFNGLGETBOOLEANI_VPROC
 
	g__gÀwGëBoﬁóni_v
;

14504 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGDATALOCATIONPROC
 
	g__gÀwGëFøgD©aLoˇti⁄
;

14505 
GLEW_FUN_EXPORT
 
PFNGLGETSTRINGIPROC
 
	g__gÀwGëSåögi
;

14506 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIIVPROC
 
	g__gÀwGëTexP¨amëîIiv
;

14507 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIUIVPROC
 
	g__gÀwGëTexP¨amëîIuiv
;

14508 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
 
	g__gÀwGëTønsf‹mFìdbackV¨yög
;

14509 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMUIVPROC
 
	g__gÀwGëUnif‹muiv
;

14510 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIIVPROC
 
	g__gÀwGëVîãxAâribIiv
;

14511 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIUIVPROC
 
	g__gÀwGëVîãxAâribIuiv
;

14512 
GLEW_FUN_EXPORT
 
PFNGLISENABLEDIPROC
 
	g__gÀwIsE«bÀdi
;

14513 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIIVPROC
 
	g__gÀwTexP¨amëîIiv
;

14514 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIUIVPROC
 
	g__gÀwTexP¨amëîIuiv
;

14515 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKVARYINGSPROC
 
	g__gÀwTønsf‹mFìdbackV¨yögs
;

14516 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIPROC
 
	g__gÀwUnif‹m1ui
;

14517 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIVPROC
 
	g__gÀwUnif‹m1uiv
;

14518 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIPROC
 
	g__gÀwUnif‹m2ui
;

14519 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIVPROC
 
	g__gÀwUnif‹m2uiv
;

14520 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIPROC
 
	g__gÀwUnif‹m3ui
;

14521 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIVPROC
 
	g__gÀwUnif‹m3uiv
;

14522 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIPROC
 
	g__gÀwUnif‹m4ui
;

14523 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIVPROC
 
	g__gÀwUnif‹m4uiv
;

14524 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IPROC
 
	g__gÀwVîãxAâribI1i
;

14525 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IVPROC
 
	g__gÀwVîãxAâribI1iv
;

14526 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIPROC
 
	g__gÀwVîãxAâribI1ui
;

14527 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIVPROC
 
	g__gÀwVîãxAâribI1uiv
;

14528 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IPROC
 
	g__gÀwVîãxAâribI2i
;

14529 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IVPROC
 
	g__gÀwVîãxAâribI2iv
;

14530 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIPROC
 
	g__gÀwVîãxAâribI2ui
;

14531 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIVPROC
 
	g__gÀwVîãxAâribI2uiv
;

14532 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IPROC
 
	g__gÀwVîãxAâribI3i
;

14533 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IVPROC
 
	g__gÀwVîãxAâribI3iv
;

14534 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIPROC
 
	g__gÀwVîãxAâribI3ui
;

14535 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIVPROC
 
	g__gÀwVîãxAâribI3uiv
;

14536 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4BVPROC
 
	g__gÀwVîãxAâribI4bv
;

14537 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IPROC
 
	g__gÀwVîãxAâribI4i
;

14538 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IVPROC
 
	g__gÀwVîãxAâribI4iv
;

14539 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4SVPROC
 
	g__gÀwVîãxAâribI4sv
;

14540 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UBVPROC
 
	g__gÀwVîãxAâribI4ubv
;

14541 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIPROC
 
	g__gÀwVîãxAâribI4ui
;

14542 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIVPROC
 
	g__gÀwVîãxAâribI4uiv
;

14543 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4USVPROC
 
	g__gÀwVîãxAâribI4usv
;

14544 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIPOINTERPROC
 
	g__gÀwVîãxAâribIPoöãr
;

14546 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDPROC
 
	g__gÀwDøwAºaysIn°™˚d
;

14547 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDPROC
 
	g__gÀwDøwEÀmítsIn°™˚d
;

14548 
GLEW_FUN_EXPORT
 
PFNGLPRIMITIVERESTARTINDEXPROC
 
	g__gÀwPrimôiveRe°¨tIndex
;

14549 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFERPROC
 
	g__gÀwTexBuf„r
;

14551 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREPROC
 
	g__gÀwFømebuf„rTextuª
;

14552 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERI64VPROC
 
	g__gÀwGëBuf„rP¨amëîi64v
;

14553 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGER64I_VPROC
 
	g__gÀwGëI¡egî64i_v
;

14555 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBDIVISORPROC
 
	g__gÀwVîãxAâribDivis‹
;

14557 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEIPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©ei
;

14558 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONIPROC
 
	g__gÀwBÀndEqu©i⁄i
;

14559 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEIPROC
 
	g__gÀwBÀndFuncSï¨©ei
;

14560 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCIPROC
 
	g__gÀwBÀndFunci
;

14561 
GLEW_FUN_EXPORT
 
PFNGLMINSAMPLESHADINGPROC
 
	g__gÀwMöSam∂eShadög
;

14563 
GLEW_FUN_EXPORT
 
PFNGLTBUFFERMASK3DFXPROC
 
	g__gÀwTbuf„rMask3DFX
;

14565 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECALLBACKAMDPROC
 
	g__gÀwDebugMesßgeCÆlbackAMD
;

14566 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEENABLEAMDPROC
 
	g__gÀwDebugMesßgeE«bÀAMD
;

14567 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEINSERTAMDPROC
 
	g__gÀwDebugMesßgeIn£πAMD
;

14568 
GLEW_FUN_EXPORT
 
PFNGLGETDEBUGMESSAGELOGAMDPROC
 
	g__gÀwGëDebugMesßgeLogAMD
;

14570 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONINDEXEDAMDPROC
 
	g__gÀwBÀndEqu©i⁄IndexedAMD
;

14571 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©eIndexedAMD
;

14572 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCINDEXEDAMDPROC
 
	g__gÀwBÀndFuncIndexedAMD
;

14573 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
 
	g__gÀwBÀndFuncSï¨©eIndexedAMD
;

14575 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
 
	g__gÀwMu…iDøwAºaysIndúe˘AMD
;

14576 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
 
	g__gÀwMu…iDøwEÀmítsIndúe˘AMD
;

14578 
GLEW_FUN_EXPORT
 
PFNGLDELETENAMESAMDPROC
 
	g__gÀwDñëeNamesAMD
;

14579 
GLEW_FUN_EXPORT
 
PFNGLGENNAMESAMDPROC
 
	g__gÀwGíNamesAMD
;

14580 
GLEW_FUN_EXPORT
 
PFNGLISNAMEAMDPROC
 
	g__gÀwIsNameAMD
;

14582 
GLEW_FUN_EXPORT
 
PFNGLBEGINPERFMONITORAMDPROC
 
	g__gÀwBegöPîfM⁄ô‹AMD
;

14583 
GLEW_FUN_EXPORT
 
PFNGLDELETEPERFMONITORSAMDPROC
 
	g__gÀwDñëePîfM⁄ô‹sAMD
;

14584 
GLEW_FUN_EXPORT
 
PFNGLENDPERFMONITORAMDPROC
 
	g__gÀwEndPîfM⁄ô‹AMD
;

14585 
GLEW_FUN_EXPORT
 
PFNGLGENPERFMONITORSAMDPROC
 
	g__gÀwGíPîfM⁄ô‹sAMD
;

14586 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îD©aAMD
;

14587 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îInfoAMD
;

14588 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îSåögAMD
;

14589 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERSAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îsAMD
;

14590 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC
 
	g__gÀwGëPîfM⁄ô‹GroupSåögAMD
;

14591 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORGROUPSAMDPROC
 
	g__gÀwGëPîfM⁄ô‹GroupsAMD
;

14592 
GLEW_FUN_EXPORT
 
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC
 
	g__gÀwSñe˘PîfM⁄ô‹Cou¡îsAMD
;

14594 
GLEW_FUN_EXPORT
 
PFNGLSETMULTISAMPLEFVAMDPROC
 
	g__gÀwSëMu…ißm∂efvAMD
;

14596 
GLEW_FUN_EXPORT
 
PFNGLSTENCILOPVALUEAMDPROC
 
	g__gÀwSãncûOpVÆueAMD
;

14598 
GLEW_FUN_EXPORT
 
PFNGLTESSELLATIONFACTORAMDPROC
 
	g__gÀwTes£Œ©i⁄Fa˘‹AMD
;

14599 
GLEW_FUN_EXPORT
 
PFNGLTESSELLATIONMODEAMDPROC
 
	g__gÀwTes£Œ©i⁄ModeAMD
;

14601 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTARRAYAPPLEPROC
 
	g__gÀwDøwEÀmítAºayAPPLE
;

14602 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
 
	g__gÀwDøwR™geEÀmítAºayAPPLE
;

14603 
GLEW_FUN_EXPORT
 
PFNGLELEMENTPOINTERAPPLEPROC
 
	g__gÀwEÀmítPoöãrAPPLE
;

14604 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
 
	g__gÀwMu…iDøwEÀmítAºayAPPLE
;

14605 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
 
	g__gÀwMu…iDøwR™geEÀmítAºayAPPLE
;

14607 
GLEW_FUN_EXPORT
 
PFNGLDELETEFENCESAPPLEPROC
 
	g__gÀwDñëeFí˚sAPPLE
;

14608 
GLEW_FUN_EXPORT
 
PFNGLFINISHFENCEAPPLEPROC
 
	g__gÀwFöishFí˚APPLE
;

14609 
GLEW_FUN_EXPORT
 
PFNGLFINISHOBJECTAPPLEPROC
 
	g__gÀwFöishObje˘APPLE
;

14610 
GLEW_FUN_EXPORT
 
PFNGLGENFENCESAPPLEPROC
 
	g__gÀwGíFí˚sAPPLE
;

14611 
GLEW_FUN_EXPORT
 
PFNGLISFENCEAPPLEPROC
 
	g__gÀwIsFí˚APPLE
;

14612 
GLEW_FUN_EXPORT
 
PFNGLSETFENCEAPPLEPROC
 
	g__gÀwSëFí˚APPLE
;

14613 
GLEW_FUN_EXPORT
 
PFNGLTESTFENCEAPPLEPROC
 
	g__gÀwTe°Fí˚APPLE
;

14614 
GLEW_FUN_EXPORT
 
PFNGLTESTOBJECTAPPLEPROC
 
	g__gÀwTe°Obje˘APPLE
;

14616 
GLEW_FUN_EXPORT
 
PFNGLBUFFERPARAMETERIAPPLEPROC
 
	g__gÀwBuf„rP¨amëîiAPPLE
;

14617 
GLEW_FUN_EXPORT
 
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
 
	g__gÀwFlushM≠≥dBuf„rR™geAPPLE
;

14619 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPARAMETERIVAPPLEPROC
 
	g__gÀwGëObje˘P¨amëîivAPPLE
;

14620 
GLEW_FUN_EXPORT
 
PFNGLOBJECTPURGEABLEAPPLEPROC
 
	g__gÀwObje˘PurgóbÀAPPLE
;

14621 
GLEW_FUN_EXPORT
 
PFNGLOBJECTUNPURGEABLEAPPLEPROC
 
	g__gÀwObje˘U≈urgóbÀAPPLE
;

14623 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
 
	g__gÀwGëTexP¨amëîPoöãrvAPPLE
;

14624 
GLEW_FUN_EXPORT
 
PFNGLTEXTURERANGEAPPLEPROC
 
	g__gÀwTextuªR™geAPPLE
;

14626 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXARRAYAPPLEPROC
 
	g__gÀwBödVîãxAºayAPPLE
;

14627 
GLEW_FUN_EXPORT
 
PFNGLDELETEVERTEXARRAYSAPPLEPROC
 
	g__gÀwDñëeVîãxAºaysAPPLE
;

14628 
GLEW_FUN_EXPORT
 
PFNGLGENVERTEXARRAYSAPPLEPROC
 
	g__gÀwGíVîãxAºaysAPPLE
;

14629 
GLEW_FUN_EXPORT
 
PFNGLISVERTEXARRAYAPPLEPROC
 
	g__gÀwIsVîãxAºayAPPLE
;

14631 
GLEW_FUN_EXPORT
 
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
 
	g__gÀwFlushVîãxAºayR™geAPPLE
;

14632 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC
 
	g__gÀwVîãxAºayP¨amëîiAPPLE
;

14633 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYRANGEAPPLEPROC
 
	g__gÀwVîãxAºayR™geAPPLE
;

14635 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXATTRIBAPPLEPROC
 
	g__gÀwDißbÀVîãxAâribAPPLE
;

14636 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXATTRIBAPPLEPROC
 
	g__gÀwE«bÀVîãxAâribAPPLE
;

14637 
GLEW_FUN_EXPORT
 
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC
 
	g__gÀwIsVîãxAâribE«bÀdAPPLE
;

14638 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB1DAPPLEPROC
 
	g__gÀwM≠VîãxAârib1dAPPLE
;

14639 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB1FAPPLEPROC
 
	g__gÀwM≠VîãxAârib1fAPPLE
;

14640 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB2DAPPLEPROC
 
	g__gÀwM≠VîãxAârib2dAPPLE
;

14641 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB2FAPPLEPROC
 
	g__gÀwM≠VîãxAârib2fAPPLE
;

14643 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHFPROC
 
	g__gÀwCÀ¨Dïthf
;

14644 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEFPROC
 
	g__gÀwDïthR™gef
;

14645 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERPRECISIONFORMATPROC
 
	g__gÀwGëShadîPªcisi⁄F‹m©
;

14646 
GLEW_FUN_EXPORT
 
PFNGLRELEASESHADERCOMPILERPROC
 
	g__gÀwRñó£ShadîCompûî
;

14647 
GLEW_FUN_EXPORT
 
PFNGLSHADERBINARYPROC
 
	g__gÀwShadîBö¨y
;

14649 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
 
	g__gÀwDøwAºaysIn°™˚dBa£In°™˚
;

14650 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
 
	g__gÀwDøwEÀmítsIn°™˚dBa£In°™˚
;

14651 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
 
	g__gÀwDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
;

14653 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
 
	g__gÀwBödFøgD©aLoˇti⁄Indexed
;

14654 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGDATAINDEXPROC
 
	g__gÀwGëFøgD©aIndex
;

14656 
GLEW_FUN_EXPORT
 
PFNGLCREATESYNCFROMCLEVENTARBPROC
 
	g__gÀwCª©eSyncFromCLevítARB
;

14658 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERDATAPROC
 
	g__gÀwCÀ¨Buf„rD©a
;

14659 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERSUBDATAPROC
 
	g__gÀwCÀ¨Buf„rSubD©a
;

14660 
GLEW_FUN_EXPORT
 
PFNGLCLEARNAMEDBUFFERDATAEXTPROC
 
	g__gÀwCÀ¨NamedBuf„rD©aEXT
;

14661 
GLEW_FUN_EXPORT
 
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
 
	g__gÀwCÀ¨NamedBuf„rSubD©aEXT
;

14663 
GLEW_FUN_EXPORT
 
PFNGLCLAMPCOLORARBPROC
 
	g__gÀwCœmpCﬁ‹ARB
;

14665 
GLEW_FUN_EXPORT
 
PFNGLDISPATCHCOMPUTEPROC
 
	g__gÀwDi•©chCompuã
;

14666 
GLEW_FUN_EXPORT
 
PFNGLDISPATCHCOMPUTEINDIRECTPROC
 
	g__gÀwDi•©chCompuãIndúe˘
;

14668 
GLEW_FUN_EXPORT
 
PFNGLCOPYBUFFERSUBDATAPROC
 
	g__gÀwC›yBuf„rSubD©a
;

14670 
GLEW_FUN_EXPORT
 
PFNGLCOPYIMAGESUBDATAPROC
 
	g__gÀwC›yImageSubD©a
;

14672 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECALLBACKARBPROC
 
	g__gÀwDebugMesßgeCÆlbackARB
;

14673 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECONTROLARBPROC
 
	g__gÀwDebugMesßgeC⁄åﬁARB
;

14674 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEINSERTARBPROC
 
	g__gÀwDebugMesßgeIn£πARB
;

14675 
GLEW_FUN_EXPORT
 
PFNGLGETDEBUGMESSAGELOGARBPROC
 
	g__gÀwGëDebugMesßgeLogARB
;

14677 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERSARBPROC
 
	g__gÀwDøwBuf„rsARB
;

14679 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEIARBPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©eiARB
;

14680 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONIARBPROC
 
	g__gÀwBÀndEqu©i⁄iARB
;

14681 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEIARBPROC
 
	g__gÀwBÀndFuncSï¨©eiARB
;

14682 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCIARBPROC
 
	g__gÀwBÀndFunciARB
;

14684 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSBASEVERTEXPROC
 
	g__gÀwDøwEÀmítsBa£Vîãx
;

14685 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
 
	g__gÀwDøwEÀmítsIn°™˚dBa£Vîãx
;

14686 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
 
	g__gÀwDøwR™geEÀmítsBa£Vîãx
;

14687 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
 
	g__gÀwMu…iDøwEÀmítsBa£Vîãx
;

14689 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINDIRECTPROC
 
	g__gÀwDøwAºaysIndúe˘
;

14690 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINDIRECTPROC
 
	g__gÀwDøwEÀmítsIndúe˘
;

14692 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERPARAMETERIPROC
 
	g__gÀwFømebuf„rP¨amëîi
;

14693 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERPARAMETERIVPROC
 
	g__gÀwGëFømebuf„rP¨amëîiv
;

14694 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëNamedFømebuf„rP¨amëîivEXT
;

14695 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
 
	g__gÀwNamedFømebuf„rP¨amëîiEXT
;

14697 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAMEBUFFERPROC
 
	g__gÀwBödFømebuf„r
;

14698 
GLEW_FUN_EXPORT
 
PFNGLBINDRENDERBUFFERPROC
 
	g__gÀwBödRídîbuf„r
;

14699 
GLEW_FUN_EXPORT
 
PFNGLBLITFRAMEBUFFERPROC
 
	g__gÀwBlôFømebuf„r
;

14700 
GLEW_FUN_EXPORT
 
PFNGLCHECKFRAMEBUFFERSTATUSPROC
 
	g__gÀwCheckFømebuf„rSètus
;

14701 
GLEW_FUN_EXPORT
 
PFNGLDELETEFRAMEBUFFERSPROC
 
	g__gÀwDñëeFømebuf„rs
;

14702 
GLEW_FUN_EXPORT
 
PFNGLDELETERENDERBUFFERSPROC
 
	g__gÀwDñëeRídîbuf„rs
;

14703 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERRENDERBUFFERPROC
 
	g__gÀwFømebuf„rRídîbuf„r
;

14704 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE1DPROC
 
	g__gÀwFømebuf„rTextuª1D
;

14705 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE2DPROC
 
	g__gÀwFømebuf„rTextuª2D
;

14706 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE3DPROC
 
	g__gÀwFømebuf„rTextuª3D
;

14707 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURELAYERPROC
 
	g__gÀwFømebuf„rTextuªLayî
;

14708 
GLEW_FUN_EXPORT
 
PFNGLGENFRAMEBUFFERSPROC
 
	g__gÀwGíFømebuf„rs
;

14709 
GLEW_FUN_EXPORT
 
PFNGLGENRENDERBUFFERSPROC
 
	g__gÀwGíRídîbuf„rs
;

14710 
GLEW_FUN_EXPORT
 
PFNGLGENERATEMIPMAPPROC
 
	g__gÀwGíî©eMùm≠
;

14711 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
 
	g__gÀwGëFømebuf„rAâachmítP¨amëîiv
;

14712 
GLEW_FUN_EXPORT
 
PFNGLGETRENDERBUFFERPARAMETERIVPROC
 
	g__gÀwGëRídîbuf„rP¨amëîiv
;

14713 
GLEW_FUN_EXPORT
 
PFNGLISFRAMEBUFFERPROC
 
	g__gÀwIsFømebuf„r
;

14714 
GLEW_FUN_EXPORT
 
PFNGLISRENDERBUFFERPROC
 
	g__gÀwIsRídîbuf„r
;

14715 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEPROC
 
	g__gÀwRídîbuf„rSt‹age
;

14716 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂e
;

14718 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREARBPROC
 
	g__gÀwFømebuf„rTextuªARB
;

14719 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC
 
	g__gÀwFømebuf„rTextuªFa˚ARB
;

14720 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC
 
	g__gÀwFømebuf„rTextuªLayîARB
;

14721 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERIARBPROC
 
	g__gÀwProgømP¨amëîiARB
;

14723 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMBINARYPROC
 
	g__gÀwGëProgømBö¨y
;

14724 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBINARYPROC
 
	g__gÀwProgømBö¨y
;

14725 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERIPROC
 
	g__gÀwProgømP¨amëîi
;

14727 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMDVPROC
 
	g__gÀwGëUnif‹mdv
;

14728 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1DPROC
 
	g__gÀwUnif‹m1d
;

14729 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1DVPROC
 
	g__gÀwUnif‹m1dv
;

14730 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2DPROC
 
	g__gÀwUnif‹m2d
;

14731 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2DVPROC
 
	g__gÀwUnif‹m2dv
;

14732 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3DPROC
 
	g__gÀwUnif‹m3d
;

14733 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3DVPROC
 
	g__gÀwUnif‹m3dv
;

14734 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4DPROC
 
	g__gÀwUnif‹m4d
;

14735 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4DVPROC
 
	g__gÀwUnif‹m4dv
;

14736 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2DVPROC
 
	g__gÀwUnif‹mM©rix2dv
;

14737 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X3DVPROC
 
	g__gÀwUnif‹mM©rix2x3dv
;

14738 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X4DVPROC
 
	g__gÀwUnif‹mM©rix2x4dv
;

14739 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3DVPROC
 
	g__gÀwUnif‹mM©rix3dv
;

14740 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X2DVPROC
 
	g__gÀwUnif‹mM©rix3x2dv
;

14741 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X4DVPROC
 
	g__gÀwUnif‹mM©rix3x4dv
;

14742 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4DVPROC
 
	g__gÀwUnif‹mM©rix4dv
;

14743 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X2DVPROC
 
	g__gÀwUnif‹mM©rix4x2dv
;

14744 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X3DVPROC
 
	g__gÀwUnif‹mM©rix4x3dv
;

14746 
GLEW_FUN_EXPORT
 
PFNGLCOLORSUBTABLEPROC
 
	g__gÀwCﬁ‹SubTabÀ
;

14747 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPROC
 
	g__gÀwCﬁ‹TabÀ
;

14748 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERFVPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîfv
;

14749 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERIVPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîiv
;

14750 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER1DPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr1D
;

14751 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER2DPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr2D
;

14752 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîf
;

14753 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFVPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîfv
;

14754 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîi
;

14755 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIVPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîiv
;

14756 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORSUBTABLEPROC
 
	g__gÀwC›yCﬁ‹SubTabÀ
;

14757 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORTABLEPROC
 
	g__gÀwC›yCﬁ‹TabÀ
;

14758 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER1DPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr1D
;

14759 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER2DPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr2D
;

14760 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPROC
 
	g__gÀwGëCﬁ‹TabÀ
;

14761 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERFVPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîfv
;

14762 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERIVPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîiv
;

14763 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONFILTERPROC
 
	g__gÀwGëC⁄vﬁuti⁄Fûãr
;

14764 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERFVPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîfv
;

14765 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERIVPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîiv
;

14766 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPROC
 
	g__gÀwGëHi°ogøm
;

14767 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERFVPROC
 
	g__gÀwGëHi°ogømP¨amëîfv
;

14768 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERIVPROC
 
	g__gÀwGëHi°ogømP¨amëîiv
;

14769 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPROC
 
	g__gÀwGëMömax
;

14770 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERFVPROC
 
	g__gÀwGëMömaxP¨amëîfv
;

14771 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERIVPROC
 
	g__gÀwGëMömaxP¨amëîiv
;

14772 
GLEW_FUN_EXPORT
 
PFNGLGETSEPARABLEFILTERPROC
 
	g__gÀwGëSï¨abÀFûãr
;

14773 
GLEW_FUN_EXPORT
 
PFNGLHISTOGRAMPROC
 
	g__gÀwHi°ogøm
;

14774 
GLEW_FUN_EXPORT
 
PFNGLMINMAXPROC
 
	g__gÀwMömax
;

14775 
GLEW_FUN_EXPORT
 
PFNGLRESETHISTOGRAMPROC
 
	g__gÀwRe£tHi°ogøm
;

14776 
GLEW_FUN_EXPORT
 
PFNGLRESETMINMAXPROC
 
	g__gÀwRe£tMömax
;

14777 
GLEW_FUN_EXPORT
 
PFNGLSEPARABLEFILTER2DPROC
 
	g__gÀwSï¨abÀFûãr2D
;

14779 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDARBPROC
 
	g__gÀwDøwAºaysIn°™˚dARB
;

14780 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDARBPROC
 
	g__gÀwDøwEÀmítsIn°™˚dARB
;

14781 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBDIVISORARBPROC
 
	g__gÀwVîãxAâribDivis‹ARB
;

14783 
GLEW_FUN_EXPORT
 
PFNGLGETINTERNALFORMATIVPROC
 
	g__gÀwGëI¡î«lf‹m©iv
;

14785 
GLEW_FUN_EXPORT
 
PFNGLGETINTERNALFORMATI64VPROC
 
	g__gÀwGëI¡î«lf‹m©i64v
;

14787 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATEBUFFERDATAPROC
 
	g__gÀwInvÆid©eBuf„rD©a
;

14788 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATEBUFFERSUBDATAPROC
 
	g__gÀwInvÆid©eBuf„rSubD©a
;

14789 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATEFRAMEBUFFERPROC
 
	g__gÀwInvÆid©eFømebuf„r
;

14790 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATESUBFRAMEBUFFERPROC
 
	g__gÀwInvÆid©eSubFømebuf„r
;

14791 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATETEXIMAGEPROC
 
	g__gÀwInvÆid©eTexImage
;

14792 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATETEXSUBIMAGEPROC
 
	g__gÀwInvÆid©eTexSubImage
;

14794 
GLEW_FUN_EXPORT
 
PFNGLFLUSHMAPPEDBUFFERRANGEPROC
 
	g__gÀwFlushM≠≥dBuf„rR™ge
;

14795 
GLEW_FUN_EXPORT
 
PFNGLMAPBUFFERRANGEPROC
 
	g__gÀwM≠Buf„rR™ge
;

14797 
GLEW_FUN_EXPORT
 
PFNGLCURRENTPALETTEMATRIXARBPROC
 
	g__gÀwCuºítPÆëãM©rixARB
;

14798 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXPOINTERARBPROC
 
	g__gÀwM©rixIndexPoöãrARB
;

14799 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXUBVARBPROC
 
	g__gÀwM©rixIndexubvARB
;

14800 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXUIVARBPROC
 
	g__gÀwM©rixIndexuivARB
;

14801 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXUSVARBPROC
 
	g__gÀwM©rixIndexusvARB
;

14803 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSINDIRECTPROC
 
	g__gÀwMu…iDøwAºaysIndúe˘
;

14804 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSINDIRECTPROC
 
	g__gÀwMu…iDøwEÀmítsIndúe˘
;

14806 
GLEW_FUN_EXPORT
 
PFNGLSAMPLECOVERAGEARBPROC
 
	g__gÀwSam∂eCovîageARB
;

14808 
GLEW_FUN_EXPORT
 
PFNGLACTIVETEXTUREARBPROC
 
	g__gÀwA˘iveTextuªARB
;

14809 
GLEW_FUN_EXPORT
 
PFNGLCLIENTACTIVETEXTUREARBPROC
 
	g__gÀwClõ¡A˘iveTextuªARB
;

14810 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DARBPROC
 
	g__gÀwMu…iTexCo‹d1dARB
;

14811 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DVARBPROC
 
	g__gÀwMu…iTexCo‹d1dvARB
;

14812 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FARBPROC
 
	g__gÀwMu…iTexCo‹d1fARB
;

14813 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FVARBPROC
 
	g__gÀwMu…iTexCo‹d1fvARB
;

14814 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IARBPROC
 
	g__gÀwMu…iTexCo‹d1iARB
;

14815 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IVARBPROC
 
	g__gÀwMu…iTexCo‹d1ivARB
;

14816 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SARBPROC
 
	g__gÀwMu…iTexCo‹d1sARB
;

14817 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SVARBPROC
 
	g__gÀwMu…iTexCo‹d1svARB
;

14818 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DARBPROC
 
	g__gÀwMu…iTexCo‹d2dARB
;

14819 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DVARBPROC
 
	g__gÀwMu…iTexCo‹d2dvARB
;

14820 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FARBPROC
 
	g__gÀwMu…iTexCo‹d2fARB
;

14821 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FVARBPROC
 
	g__gÀwMu…iTexCo‹d2fvARB
;

14822 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IARBPROC
 
	g__gÀwMu…iTexCo‹d2iARB
;

14823 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IVARBPROC
 
	g__gÀwMu…iTexCo‹d2ivARB
;

14824 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SARBPROC
 
	g__gÀwMu…iTexCo‹d2sARB
;

14825 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SVARBPROC
 
	g__gÀwMu…iTexCo‹d2svARB
;

14826 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DARBPROC
 
	g__gÀwMu…iTexCo‹d3dARB
;

14827 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DVARBPROC
 
	g__gÀwMu…iTexCo‹d3dvARB
;

14828 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FARBPROC
 
	g__gÀwMu…iTexCo‹d3fARB
;

14829 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FVARBPROC
 
	g__gÀwMu…iTexCo‹d3fvARB
;

14830 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IARBPROC
 
	g__gÀwMu…iTexCo‹d3iARB
;

14831 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IVARBPROC
 
	g__gÀwMu…iTexCo‹d3ivARB
;

14832 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SARBPROC
 
	g__gÀwMu…iTexCo‹d3sARB
;

14833 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SVARBPROC
 
	g__gÀwMu…iTexCo‹d3svARB
;

14834 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DARBPROC
 
	g__gÀwMu…iTexCo‹d4dARB
;

14835 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DVARBPROC
 
	g__gÀwMu…iTexCo‹d4dvARB
;

14836 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FARBPROC
 
	g__gÀwMu…iTexCo‹d4fARB
;

14837 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FVARBPROC
 
	g__gÀwMu…iTexCo‹d4fvARB
;

14838 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IARBPROC
 
	g__gÀwMu…iTexCo‹d4iARB
;

14839 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IVARBPROC
 
	g__gÀwMu…iTexCo‹d4ivARB
;

14840 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SARBPROC
 
	g__gÀwMu…iTexCo‹d4sARB
;

14841 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SVARBPROC
 
	g__gÀwMu…iTexCo‹d4svARB
;

14843 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYARBPROC
 
	g__gÀwBegöQuîyARB
;

14844 
GLEW_FUN_EXPORT
 
PFNGLDELETEQUERIESARBPROC
 
	g__gÀwDñëeQuîõsARB
;

14845 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYARBPROC
 
	g__gÀwEndQuîyARB
;

14846 
GLEW_FUN_EXPORT
 
PFNGLGENQUERIESARBPROC
 
	g__gÀwGíQuîõsARB
;

14847 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTIVARBPROC
 
	g__gÀwGëQuîyObje˘ivARB
;

14848 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUIVARBPROC
 
	g__gÀwGëQuîyObje˘uivARB
;

14849 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYIVARBPROC
 
	g__gÀwGëQuîyivARB
;

14850 
GLEW_FUN_EXPORT
 
PFNGLISQUERYARBPROC
 
	g__gÀwIsQuîyARB
;

14852 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFARBPROC
 
	g__gÀwPoötP¨amëîfARB
;

14853 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFVARBPROC
 
	g__gÀwPoötP¨amëîfvARB
;

14855 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMINTERFACEIVPROC
 
	g__gÀwGëProgømI¡îÁ˚iv
;

14856 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCEINDEXPROC
 
	g__gÀwGëProgømResour˚Index
;

14857 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCELOCATIONPROC
 
	g__gÀwGëProgømResour˚Loˇti⁄
;

14858 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
 
	g__gÀwGëProgømResour˚Loˇti⁄Index
;

14859 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCENAMEPROC
 
	g__gÀwGëProgømResour˚Name
;

14860 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCEIVPROC
 
	g__gÀwGëProgømResour˚iv
;

14862 
GLEW_FUN_EXPORT
 
PFNGLPROVOKINGVERTEXPROC
 
	g__gÀwProvokögVîãx
;

14864 
GLEW_FUN_EXPORT
 
PFNGLGETGRAPHICSRESETSTATUSARBPROC
 
	g__gÀwGëGøphicsRe£tSètusARB
;

14865 
GLEW_FUN_EXPORT
 
PFNGLGETNCOLORTABLEARBPROC
 
	g__gÀwGënCﬁ‹TabÀARB
;

14866 
GLEW_FUN_EXPORT
 
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
 
	g__gÀwGënCom¥es£dTexImageARB
;

14867 
GLEW_FUN_EXPORT
 
PFNGLGETNCONVOLUTIONFILTERARBPROC
 
	g__gÀwGënC⁄vﬁuti⁄FûãrARB
;

14868 
GLEW_FUN_EXPORT
 
PFNGLGETNHISTOGRAMARBPROC
 
	g__gÀwGënHi°ogømARB
;

14869 
GLEW_FUN_EXPORT
 
PFNGLGETNMAPDVARBPROC
 
	g__gÀwGënM≠dvARB
;

14870 
GLEW_FUN_EXPORT
 
PFNGLGETNMAPFVARBPROC
 
	g__gÀwGënM≠fvARB
;

14871 
GLEW_FUN_EXPORT
 
PFNGLGETNMAPIVARBPROC
 
	g__gÀwGënM≠ivARB
;

14872 
GLEW_FUN_EXPORT
 
PFNGLGETNMINMAXARBPROC
 
	g__gÀwGënMömaxARB
;

14873 
GLEW_FUN_EXPORT
 
PFNGLGETNPIXELMAPFVARBPROC
 
	g__gÀwGënPixñM≠fvARB
;

14874 
GLEW_FUN_EXPORT
 
PFNGLGETNPIXELMAPUIVARBPROC
 
	g__gÀwGënPixñM≠uivARB
;

14875 
GLEW_FUN_EXPORT
 
PFNGLGETNPIXELMAPUSVARBPROC
 
	g__gÀwGënPixñM≠usvARB
;

14876 
GLEW_FUN_EXPORT
 
PFNGLGETNPOLYGONSTIPPLEARBPROC
 
	g__gÀwGënPﬁyg⁄Stù∂eARB
;

14877 
GLEW_FUN_EXPORT
 
PFNGLGETNSEPARABLEFILTERARBPROC
 
	g__gÀwGënSï¨abÀFûãrARB
;

14878 
GLEW_FUN_EXPORT
 
PFNGLGETNTEXIMAGEARBPROC
 
	g__gÀwGënTexImageARB
;

14879 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMDVARBPROC
 
	g__gÀwGënUnif‹mdvARB
;

14880 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMFVARBPROC
 
	g__gÀwGënUnif‹mfvARB
;

14881 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMIVARBPROC
 
	g__gÀwGënUnif‹mivARB
;

14882 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMUIVARBPROC
 
	g__gÀwGënUnif‹muivARB
;

14883 
GLEW_FUN_EXPORT
 
PFNGLREADNPIXELSARBPROC
 
	g__gÀwRódnPixñsARB
;

14885 
GLEW_FUN_EXPORT
 
PFNGLMINSAMPLESHADINGARBPROC
 
	g__gÀwMöSam∂eShadögARB
;

14887 
GLEW_FUN_EXPORT
 
PFNGLBINDSAMPLERPROC
 
	g__gÀwBödSam∂î
;

14888 
GLEW_FUN_EXPORT
 
PFNGLDELETESAMPLERSPROC
 
	g__gÀwDñëeSam∂îs
;

14889 
GLEW_FUN_EXPORT
 
PFNGLGENSAMPLERSPROC
 
	g__gÀwGíSam∂îs
;

14890 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERIIVPROC
 
	g__gÀwGëSam∂îP¨amëîIiv
;

14891 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERIUIVPROC
 
	g__gÀwGëSam∂îP¨amëîIuiv
;

14892 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERFVPROC
 
	g__gÀwGëSam∂îP¨amëîfv
;

14893 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERIVPROC
 
	g__gÀwGëSam∂îP¨amëîiv
;

14894 
GLEW_FUN_EXPORT
 
PFNGLISSAMPLERPROC
 
	g__gÀwIsSam∂î
;

14895 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIIVPROC
 
	g__gÀwSam∂îP¨amëîIiv
;

14896 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIUIVPROC
 
	g__gÀwSam∂îP¨amëîIuiv
;

14897 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERFPROC
 
	g__gÀwSam∂îP¨amëîf
;

14898 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERFVPROC
 
	g__gÀwSam∂îP¨amëîfv
;

14899 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIPROC
 
	g__gÀwSam∂îP¨amëîi
;

14900 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIVPROC
 
	g__gÀwSam∂îP¨amëîiv
;

14902 
GLEW_FUN_EXPORT
 
PFNGLACTIVESHADERPROGRAMPROC
 
	g__gÀwA˘iveShadîProgøm
;

14903 
GLEW_FUN_EXPORT
 
PFNGLBINDPROGRAMPIPELINEPROC
 
	g__gÀwBödProgømPùñöe
;

14904 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADERPROGRAMVPROC
 
	g__gÀwCª©eShadîProgømv
;

14905 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMPIPELINESPROC
 
	g__gÀwDñëeProgømPùñöes
;

14906 
GLEW_FUN_EXPORT
 
PFNGLGENPROGRAMPIPELINESPROC
 
	g__gÀwGíProgømPùñöes
;

14907 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPIPELINEINFOLOGPROC
 
	g__gÀwGëProgømPùñöeInfoLog
;

14908 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPIPELINEIVPROC
 
	g__gÀwGëProgømPùñöeiv
;

14909 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMPIPELINEPROC
 
	g__gÀwIsProgømPùñöe
;

14910 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1DPROC
 
	g__gÀwProgømUnif‹m1d
;

14911 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1DVPROC
 
	g__gÀwProgømUnif‹m1dv
;

14912 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FPROC
 
	g__gÀwProgømUnif‹m1f
;

14913 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FVPROC
 
	g__gÀwProgømUnif‹m1fv
;

14914 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IPROC
 
	g__gÀwProgømUnif‹m1i
;

14915 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IVPROC
 
	g__gÀwProgømUnif‹m1iv
;

14916 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIPROC
 
	g__gÀwProgømUnif‹m1ui
;

14917 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIVPROC
 
	g__gÀwProgømUnif‹m1uiv
;

14918 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2DPROC
 
	g__gÀwProgømUnif‹m2d
;

14919 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2DVPROC
 
	g__gÀwProgømUnif‹m2dv
;

14920 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FPROC
 
	g__gÀwProgømUnif‹m2f
;

14921 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FVPROC
 
	g__gÀwProgømUnif‹m2fv
;

14922 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IPROC
 
	g__gÀwProgømUnif‹m2i
;

14923 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IVPROC
 
	g__gÀwProgømUnif‹m2iv
;

14924 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIPROC
 
	g__gÀwProgømUnif‹m2ui
;

14925 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIVPROC
 
	g__gÀwProgømUnif‹m2uiv
;

14926 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3DPROC
 
	g__gÀwProgømUnif‹m3d
;

14927 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3DVPROC
 
	g__gÀwProgømUnif‹m3dv
;

14928 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FPROC
 
	g__gÀwProgømUnif‹m3f
;

14929 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FVPROC
 
	g__gÀwProgømUnif‹m3fv
;

14930 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IPROC
 
	g__gÀwProgømUnif‹m3i
;

14931 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IVPROC
 
	g__gÀwProgømUnif‹m3iv
;

14932 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIPROC
 
	g__gÀwProgømUnif‹m3ui
;

14933 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIVPROC
 
	g__gÀwProgømUnif‹m3uiv
;

14934 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4DPROC
 
	g__gÀwProgømUnif‹m4d
;

14935 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4DVPROC
 
	g__gÀwProgømUnif‹m4dv
;

14936 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FPROC
 
	g__gÀwProgømUnif‹m4f
;

14937 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FVPROC
 
	g__gÀwProgømUnif‹m4fv
;

14938 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IPROC
 
	g__gÀwProgømUnif‹m4i
;

14939 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IVPROC
 
	g__gÀwProgømUnif‹m4iv
;

14940 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIPROC
 
	g__gÀwProgømUnif‹m4ui
;

14941 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIVPROC
 
	g__gÀwProgømUnif‹m4uiv
;

14942 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2DVPROC
 
	g__gÀwProgømUnif‹mM©rix2dv
;

14943 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2FVPROC
 
	g__gÀwProgømUnif‹mM©rix2fv
;

14944 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
 
	g__gÀwProgømUnif‹mM©rix2x3dv
;

14945 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
 
	g__gÀwProgømUnif‹mM©rix2x3fv
;

14946 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
 
	g__gÀwProgømUnif‹mM©rix2x4dv
;

14947 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
 
	g__gÀwProgømUnif‹mM©rix2x4fv
;

14948 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3DVPROC
 
	g__gÀwProgømUnif‹mM©rix3dv
;

14949 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3FVPROC
 
	g__gÀwProgømUnif‹mM©rix3fv
;

14950 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
 
	g__gÀwProgømUnif‹mM©rix3x2dv
;

14951 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
 
	g__gÀwProgømUnif‹mM©rix3x2fv
;

14952 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
 
	g__gÀwProgømUnif‹mM©rix3x4dv
;

14953 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
 
	g__gÀwProgømUnif‹mM©rix3x4fv
;

14954 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4DVPROC
 
	g__gÀwProgømUnif‹mM©rix4dv
;

14955 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4FVPROC
 
	g__gÀwProgømUnif‹mM©rix4fv
;

14956 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
 
	g__gÀwProgømUnif‹mM©rix4x2dv
;

14957 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
 
	g__gÀwProgømUnif‹mM©rix4x2fv
;

14958 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
 
	g__gÀwProgømUnif‹mM©rix4x3dv
;

14959 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
 
	g__gÀwProgømUnif‹mM©rix4x3fv
;

14960 
GLEW_FUN_EXPORT
 
PFNGLUSEPROGRAMSTAGESPROC
 
	g__gÀwU£ProgømSèges
;

14961 
GLEW_FUN_EXPORT
 
PFNGLVALIDATEPROGRAMPIPELINEPROC
 
	g__gÀwVÆid©eProgømPùñöe
;

14963 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
 
	g__gÀwGëA˘iveAtomicCou¡îBuf„riv
;

14965 
GLEW_FUN_EXPORT
 
PFNGLBINDIMAGETEXTUREPROC
 
	g__gÀwBödImageTextuª
;

14966 
GLEW_FUN_EXPORT
 
PFNGLMEMORYBARRIERPROC
 
	g__gÀwMem‹yB¨rõr
;

14968 
GLEW_FUN_EXPORT
 
PFNGLATTACHOBJECTARBPROC
 
	g__gÀwAâachObje˘ARB
;

14969 
GLEW_FUN_EXPORT
 
PFNGLCOMPILESHADERARBPROC
 
	g__gÀwCompûeShadîARB
;

14970 
GLEW_FUN_EXPORT
 
PFNGLCREATEPROGRAMOBJECTARBPROC
 
	g__gÀwCª©eProgømObje˘ARB
;

14971 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADEROBJECTARBPROC
 
	g__gÀwCª©eShadîObje˘ARB
;

14972 
GLEW_FUN_EXPORT
 
PFNGLDELETEOBJECTARBPROC
 
	g__gÀwDñëeObje˘ARB
;

14973 
GLEW_FUN_EXPORT
 
PFNGLDETACHOBJECTARBPROC
 
	g__gÀwDëachObje˘ARB
;

14974 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMARBPROC
 
	g__gÀwGëA˘iveUnif‹mARB
;

14975 
GLEW_FUN_EXPORT
 
PFNGLGETATTACHEDOBJECTSARBPROC
 
	g__gÀwGëAâachedObje˘sARB
;

14976 
GLEW_FUN_EXPORT
 
PFNGLGETHANDLEARBPROC
 
	g__gÀwGëH™dÀARB
;

14977 
GLEW_FUN_EXPORT
 
PFNGLGETINFOLOGARBPROC
 
	g__gÀwGëInfoLogARB
;

14978 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPARAMETERFVARBPROC
 
	g__gÀwGëObje˘P¨amëîfvARB
;

14979 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPARAMETERIVARBPROC
 
	g__gÀwGëObje˘P¨amëîivARB
;

14980 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERSOURCEARBPROC
 
	g__gÀwGëShadîSour˚ARB
;

14981 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMLOCATIONARBPROC
 
	g__gÀwGëUnif‹mLoˇti⁄ARB
;

14982 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMFVARBPROC
 
	g__gÀwGëUnif‹mfvARB
;

14983 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMIVARBPROC
 
	g__gÀwGëUnif‹mivARB
;

14984 
GLEW_FUN_EXPORT
 
PFNGLLINKPROGRAMARBPROC
 
	g__gÀwLökProgømARB
;

14985 
GLEW_FUN_EXPORT
 
PFNGLSHADERSOURCEARBPROC
 
	g__gÀwShadîSour˚ARB
;

14986 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FARBPROC
 
	g__gÀwUnif‹m1fARB
;

14987 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FVARBPROC
 
	g__gÀwUnif‹m1fvARB
;

14988 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IARBPROC
 
	g__gÀwUnif‹m1iARB
;

14989 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IVARBPROC
 
	g__gÀwUnif‹m1ivARB
;

14990 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FARBPROC
 
	g__gÀwUnif‹m2fARB
;

14991 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FVARBPROC
 
	g__gÀwUnif‹m2fvARB
;

14992 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IARBPROC
 
	g__gÀwUnif‹m2iARB
;

14993 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IVARBPROC
 
	g__gÀwUnif‹m2ivARB
;

14994 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FARBPROC
 
	g__gÀwUnif‹m3fARB
;

14995 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FVARBPROC
 
	g__gÀwUnif‹m3fvARB
;

14996 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IARBPROC
 
	g__gÀwUnif‹m3iARB
;

14997 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IVARBPROC
 
	g__gÀwUnif‹m3ivARB
;

14998 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FARBPROC
 
	g__gÀwUnif‹m4fARB
;

14999 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FVARBPROC
 
	g__gÀwUnif‹m4fvARB
;

15000 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IARBPROC
 
	g__gÀwUnif‹m4iARB
;

15001 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IVARBPROC
 
	g__gÀwUnif‹m4ivARB
;

15002 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2FVARBPROC
 
	g__gÀwUnif‹mM©rix2fvARB
;

15003 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3FVARBPROC
 
	g__gÀwUnif‹mM©rix3fvARB
;

15004 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4FVARBPROC
 
	g__gÀwUnif‹mM©rix4fvARB
;

15005 
GLEW_FUN_EXPORT
 
PFNGLUSEPROGRAMOBJECTARBPROC
 
	g__gÀwU£ProgømObje˘ARB
;

15006 
GLEW_FUN_EXPORT
 
PFNGLVALIDATEPROGRAMARBPROC
 
	g__gÀwVÆid©eProgømARB
;

15008 
GLEW_FUN_EXPORT
 
PFNGLSHADERSTORAGEBLOCKBINDINGPROC
 
	g__gÀwShadîSt‹ageBlockBödög
;

15010 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVESUBROUTINENAMEPROC
 
	g__gÀwGëA˘iveSubroutöeName
;

15011 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
 
	g__gÀwGëA˘iveSubroutöeUnif‹mName
;

15012 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
 
	g__gÀwGëA˘iveSubroutöeUnif‹miv
;

15013 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMSTAGEIVPROC
 
	g__gÀwGëProgømSègeiv
;

15014 
GLEW_FUN_EXPORT
 
PFNGLGETSUBROUTINEINDEXPROC
 
	g__gÀwGëSubroutöeIndex
;

15015 
GLEW_FUN_EXPORT
 
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
 
	g__gÀwGëSubroutöeUnif‹mLoˇti⁄
;

15016 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMSUBROUTINEUIVPROC
 
	g__gÀwGëUnif‹mSubroutöeuiv
;

15017 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMSUBROUTINESUIVPROC
 
	g__gÀwUnif‹mSubroutöesuiv
;

15019 
GLEW_FUN_EXPORT
 
PFNGLCOMPILESHADERINCLUDEARBPROC
 
	g__gÀwCompûeShadîIn˛udeARB
;

15020 
GLEW_FUN_EXPORT
 
PFNGLDELETENAMEDSTRINGARBPROC
 
	g__gÀwDñëeNamedSåögARB
;

15021 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDSTRINGARBPROC
 
	g__gÀwGëNamedSåögARB
;

15022 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDSTRINGIVARBPROC
 
	g__gÀwGëNamedSåögivARB
;

15023 
GLEW_FUN_EXPORT
 
PFNGLISNAMEDSTRINGARBPROC
 
	g__gÀwIsNamedSåögARB
;

15024 
GLEW_FUN_EXPORT
 
PFNGLNAMEDSTRINGARBPROC
 
	g__gÀwNamedSåögARB
;

15026 
GLEW_FUN_EXPORT
 
PFNGLCLIENTWAITSYNCPROC
 
	g__gÀwClõ¡WaôSync
;

15027 
GLEW_FUN_EXPORT
 
PFNGLDELETESYNCPROC
 
	g__gÀwDñëeSync
;

15028 
GLEW_FUN_EXPORT
 
PFNGLFENCESYNCPROC
 
	g__gÀwFí˚Sync
;

15029 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGER64VPROC
 
	g__gÀwGëI¡egî64v
;

15030 
GLEW_FUN_EXPORT
 
PFNGLGETSYNCIVPROC
 
	g__gÀwGëSynciv
;

15031 
GLEW_FUN_EXPORT
 
PFNGLISSYNCPROC
 
	g__gÀwIsSync
;

15032 
GLEW_FUN_EXPORT
 
PFNGLWAITSYNCPROC
 
	g__gÀwWaôSync
;

15034 
GLEW_FUN_EXPORT
 
PFNGLPATCHPARAMETERFVPROC
 
	g__gÀwP©chP¨amëîfv
;

15035 
GLEW_FUN_EXPORT
 
PFNGLPATCHPARAMETERIPROC
 
	g__gÀwP©chP¨amëîi
;

15037 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFERARBPROC
 
	g__gÀwTexBuf„rARB
;

15039 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFERRANGEPROC
 
	g__gÀwTexBuf„rR™ge
;

15040 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREBUFFERRANGEEXTPROC
 
	g__gÀwTextuªBuf„rR™geEXT
;

15042 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC
 
	g__gÀwCom¥es£dTexImage1DARB
;

15043 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC
 
	g__gÀwCom¥es£dTexImage2DARB
;

15044 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC
 
	g__gÀwCom¥es£dTexImage3DARB
;

15045 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
 
	g__gÀwCom¥es£dTexSubImage1DARB
;

15046 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
 
	g__gÀwCom¥es£dTexSubImage2DARB
;

15047 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
 
	g__gÀwCom¥es£dTexSubImage3DARB
;

15048 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC
 
	g__gÀwGëCom¥es£dTexImageARB
;

15050 
GLEW_FUN_EXPORT
 
PFNGLGETMULTISAMPLEFVPROC
 
	g__gÀwGëMu…ißm∂efv
;

15051 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKIPROC
 
	g__gÀwSam∂eMaski
;

15052 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE2DMULTISAMPLEPROC
 
	g__gÀwTexImage2DMu…ißm∂e
;

15053 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DMULTISAMPLEPROC
 
	g__gÀwTexImage3DMu…ißm∂e
;

15055 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE1DPROC
 
	g__gÀwTexSt‹age1D
;

15056 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE2DPROC
 
	g__gÀwTexSt‹age2D
;

15057 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE3DPROC
 
	g__gÀwTexSt‹age3D
;

15058 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE1DEXTPROC
 
	g__gÀwTextuªSt‹age1DEXT
;

15059 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE2DEXTPROC
 
	g__gÀwTextuªSt‹age2DEXT
;

15060 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE3DEXTPROC
 
	g__gÀwTextuªSt‹age3DEXT
;

15062 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE2DMULTISAMPLEPROC
 
	g__gÀwTexSt‹age2DMu…ißm∂e
;

15063 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE3DMULTISAMPLEPROC
 
	g__gÀwTexSt‹age3DMu…ißm∂e
;

15064 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
 
	g__gÀwTextuªSt‹age2DMu…ißm∂eEXT
;

15065 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
 
	g__gÀwTextuªSt‹age3DMu…ißm∂eEXT
;

15067 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREVIEWPROC
 
	g__gÀwTextuªVõw
;

15069 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTI64VPROC
 
	g__gÀwGëQuîyObje˘i64v
;

15070 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUI64VPROC
 
	g__gÀwGëQuîyObje˘ui64v
;

15071 
GLEW_FUN_EXPORT
 
PFNGLQUERYCOUNTERPROC
 
	g__gÀwQuîyCou¡î
;

15073 
GLEW_FUN_EXPORT
 
PFNGLBINDTRANSFORMFEEDBACKPROC
 
	g__gÀwBödTønsf‹mFìdback
;

15074 
GLEW_FUN_EXPORT
 
PFNGLDELETETRANSFORMFEEDBACKSPROC
 
	g__gÀwDñëeTønsf‹mFìdbacks
;

15075 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKPROC
 
	g__gÀwDøwTønsf‹mFìdback
;

15076 
GLEW_FUN_EXPORT
 
PFNGLGENTRANSFORMFEEDBACKSPROC
 
	g__gÀwGíTønsf‹mFìdbacks
;

15077 
GLEW_FUN_EXPORT
 
PFNGLISTRANSFORMFEEDBACKPROC
 
	g__gÀwIsTønsf‹mFìdback
;

15078 
GLEW_FUN_EXPORT
 
PFNGLPAUSETRANSFORMFEEDBACKPROC
 
	g__gÀwPau£Tønsf‹mFìdback
;

15079 
GLEW_FUN_EXPORT
 
PFNGLRESUMETRANSFORMFEEDBACKPROC
 
	g__gÀwResumeTønsf‹mFìdback
;

15081 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYINDEXEDPROC
 
	g__gÀwBegöQuîyIndexed
;

15082 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
 
	g__gÀwDøwTønsf‹mFìdbackSåóm
;

15083 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYINDEXEDPROC
 
	g__gÀwEndQuîyIndexed
;

15084 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYINDEXEDIVPROC
 
	g__gÀwGëQuîyIndexediv
;

15086 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
 
	g__gÀwDøwTønsf‹mFìdbackIn°™˚d
;

15087 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
 
	g__gÀwDøwTønsf‹mFìdbackSåómIn°™˚d
;

15089 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXDARBPROC
 
	g__gÀwLﬂdTøn•o£M©rixdARB
;

15090 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXFARBPROC
 
	g__gÀwLﬂdTøn•o£M©rixfARB
;

15091 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXDARBPROC
 
	g__gÀwMu…Tøn•o£M©rixdARB
;

15092 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXFARBPROC
 
	g__gÀwMu…Tøn•o£M©rixfARB
;

15094 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERBASEPROC
 
	g__gÀwBödBuf„rBa£
;

15095 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERRANGEPROC
 
	g__gÀwBödBuf„rR™ge
;

15096 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
 
	g__gÀwGëA˘iveUnif‹mBlockName
;

15097 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMBLOCKIVPROC
 
	g__gÀwGëA˘iveUnif‹mBlockiv
;

15098 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMNAMEPROC
 
	g__gÀwGëA˘iveUnif‹mName
;

15099 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMSIVPROC
 
	g__gÀwGëA˘iveUnif‹msiv
;

15100 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERI_VPROC
 
	g__gÀwGëI¡egîi_v
;

15101 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMBLOCKINDEXPROC
 
	g__gÀwGëUnif‹mBlockIndex
;

15102 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMINDICESPROC
 
	g__gÀwGëUnif‹mIndi˚s
;

15103 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMBLOCKBINDINGPROC
 
	g__gÀwUnif‹mBlockBödög
;

15105 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXARRAYPROC
 
	g__gÀwBödVîãxAºay
;

15106 
GLEW_FUN_EXPORT
 
PFNGLDELETEVERTEXARRAYSPROC
 
	g__gÀwDñëeVîãxAºays
;

15107 
GLEW_FUN_EXPORT
 
PFNGLGENVERTEXARRAYSPROC
 
	g__gÀwGíVîãxAºays
;

15108 
GLEW_FUN_EXPORT
 
PFNGLISVERTEXARRAYPROC
 
	g__gÀwIsVîãxAºay
;

15110 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLDVPROC
 
	g__gÀwGëVîãxAâribLdv
;

15111 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DPROC
 
	g__gÀwVîãxAâribL1d
;

15112 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DVPROC
 
	g__gÀwVîãxAâribL1dv
;

15113 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DPROC
 
	g__gÀwVîãxAâribL2d
;

15114 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DVPROC
 
	g__gÀwVîãxAâribL2dv
;

15115 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DPROC
 
	g__gÀwVîãxAâribL3d
;

15116 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DVPROC
 
	g__gÀwVîãxAâribL3dv
;

15117 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DPROC
 
	g__gÀwVîãxAâribL4d
;

15118 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DVPROC
 
	g__gÀwVîãxAâribL4dv
;

15119 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLPOINTERPROC
 
	g__gÀwVîãxAâribLPoöãr
;

15121 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXBUFFERPROC
 
	g__gÀwBödVîãxBuf„r
;

15122 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBBINDINGPROC
 
	g__gÀwVîãxAâribBödög
;

15123 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBFORMATPROC
 
	g__gÀwVîãxAâribF‹m©
;

15124 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIFORMATPROC
 
	g__gÀwVîãxAâribIF‹m©
;

15125 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLFORMATPROC
 
	g__gÀwVîãxAâribLF‹m©
;

15126 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBINDINGDIVISORPROC
 
	g__gÀwVîãxBödögDivis‹
;

15128 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBLENDARBPROC
 
	g__gÀwVîãxBÀndARB
;

15129 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTPOINTERARBPROC
 
	g__gÀwWeightPoöãrARB
;

15130 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTBVARBPROC
 
	g__gÀwWeightbvARB
;

15131 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTDVARBPROC
 
	g__gÀwWeightdvARB
;

15132 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTFVARBPROC
 
	g__gÀwWeightfvARB
;

15133 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTIVARBPROC
 
	g__gÀwWeightivARB
;

15134 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTSVARBPROC
 
	g__gÀwWeightsvARB
;

15135 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTUBVARBPROC
 
	g__gÀwWeightubvARB
;

15136 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTUIVARBPROC
 
	g__gÀwWeightuivARB
;

15137 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTUSVARBPROC
 
	g__gÀwWeightusvARB
;

15139 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERARBPROC
 
	g__gÀwBödBuf„rARB
;

15140 
GLEW_FUN_EXPORT
 
PFNGLBUFFERDATAARBPROC
 
	g__gÀwBuf„rD©aARB
;

15141 
GLEW_FUN_EXPORT
 
PFNGLBUFFERSUBDATAARBPROC
 
	g__gÀwBuf„rSubD©aARB
;

15142 
GLEW_FUN_EXPORT
 
PFNGLDELETEBUFFERSARBPROC
 
	g__gÀwDñëeBuf„rsARB
;

15143 
GLEW_FUN_EXPORT
 
PFNGLGENBUFFERSARBPROC
 
	g__gÀwGíBuf„rsARB
;

15144 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERIVARBPROC
 
	g__gÀwGëBuf„rP¨amëîivARB
;

15145 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPOINTERVARBPROC
 
	g__gÀwGëBuf„rPoöãrvARB
;

15146 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERSUBDATAARBPROC
 
	g__gÀwGëBuf„rSubD©aARB
;

15147 
GLEW_FUN_EXPORT
 
PFNGLISBUFFERARBPROC
 
	g__gÀwIsBuf„rARB
;

15148 
GLEW_FUN_EXPORT
 
PFNGLMAPBUFFERARBPROC
 
	g__gÀwM≠Buf„rARB
;

15149 
GLEW_FUN_EXPORT
 
PFNGLUNMAPBUFFERARBPROC
 
	g__gÀwUnm≠Buf„rARB
;

15151 
GLEW_FUN_EXPORT
 
PFNGLBINDPROGRAMARBPROC
 
	g__gÀwBödProgømARB
;

15152 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMSARBPROC
 
	g__gÀwDñëeProgømsARB
;

15153 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC
 
	g__gÀwDißbÀVîãxAâribAºayARB
;

15154 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXATTRIBARRAYARBPROC
 
	g__gÀwE«bÀVîãxAâribAºayARB
;

15155 
GLEW_FUN_EXPORT
 
PFNGLGENPROGRAMSARBPROC
 
	g__gÀwGíProgømsARB
;

15156 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMENVPARAMETERDVARBPROC
 
	g__gÀwGëProgømEnvP¨amëîdvARB
;

15157 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMENVPARAMETERFVARBPROC
 
	g__gÀwGëProgømEnvP¨amëîfvARB
;

15158 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
 
	g__gÀwGëProgømLoˇlP¨amëîdvARB
;

15159 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
 
	g__gÀwGëProgømLoˇlP¨amëîfvARB
;

15160 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMSTRINGARBPROC
 
	g__gÀwGëProgømSåögARB
;

15161 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMIVARBPROC
 
	g__gÀwGëProgømivARB
;

15162 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBPOINTERVARBPROC
 
	g__gÀwGëVîãxAâribPoöãrvARB
;

15163 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBDVARBPROC
 
	g__gÀwGëVîãxAâribdvARB
;

15164 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBFVARBPROC
 
	g__gÀwGëVîãxAâribfvARB
;

15165 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIVARBPROC
 
	g__gÀwGëVîãxAâribivARB
;

15166 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMARBPROC
 
	g__gÀwIsProgømARB
;

15167 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4DARBPROC
 
	g__gÀwProgømEnvP¨amëî4dARB
;

15168 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4DVARBPROC
 
	g__gÀwProgømEnvP¨amëî4dvARB
;

15169 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4FARBPROC
 
	g__gÀwProgømEnvP¨amëî4fARB
;

15170 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4FVARBPROC
 
	g__gÀwProgømEnvP¨amëî4fvARB
;

15171 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4DARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4dARB
;

15172 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4dvARB
;

15173 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4FARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4fARB
;

15174 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4fvARB
;

15175 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMSTRINGARBPROC
 
	g__gÀwProgømSåögARB
;

15176 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DARBPROC
 
	g__gÀwVîãxAârib1dARB
;

15177 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DVARBPROC
 
	g__gÀwVîãxAârib1dvARB
;

15178 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FARBPROC
 
	g__gÀwVîãxAârib1fARB
;

15179 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FVARBPROC
 
	g__gÀwVîãxAârib1fvARB
;

15180 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SARBPROC
 
	g__gÀwVîãxAârib1sARB
;

15181 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SVARBPROC
 
	g__gÀwVîãxAârib1svARB
;

15182 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DARBPROC
 
	g__gÀwVîãxAârib2dARB
;

15183 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DVARBPROC
 
	g__gÀwVîãxAârib2dvARB
;

15184 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FARBPROC
 
	g__gÀwVîãxAârib2fARB
;

15185 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FVARBPROC
 
	g__gÀwVîãxAârib2fvARB
;

15186 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SARBPROC
 
	g__gÀwVîãxAârib2sARB
;

15187 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SVARBPROC
 
	g__gÀwVîãxAârib2svARB
;

15188 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DARBPROC
 
	g__gÀwVîãxAârib3dARB
;

15189 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DVARBPROC
 
	g__gÀwVîãxAârib3dvARB
;

15190 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FARBPROC
 
	g__gÀwVîãxAârib3fARB
;

15191 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FVARBPROC
 
	g__gÀwVîãxAârib3fvARB
;

15192 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SARBPROC
 
	g__gÀwVîãxAârib3sARB
;

15193 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SVARBPROC
 
	g__gÀwVîãxAârib3svARB
;

15194 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NBVARBPROC
 
	g__gÀwVîãxAârib4NbvARB
;

15195 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NIVARBPROC
 
	g__gÀwVîãxAârib4NivARB
;

15196 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NSVARBPROC
 
	g__gÀwVîãxAârib4NsvARB
;

15197 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBARBPROC
 
	g__gÀwVîãxAârib4NubARB
;

15198 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBVARBPROC
 
	g__gÀwVîãxAârib4NubvARB
;

15199 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUIVARBPROC
 
	g__gÀwVîãxAârib4NuivARB
;

15200 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUSVARBPROC
 
	g__gÀwVîãxAârib4NusvARB
;

15201 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4BVARBPROC
 
	g__gÀwVîãxAârib4bvARB
;

15202 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DARBPROC
 
	g__gÀwVîãxAârib4dARB
;

15203 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DVARBPROC
 
	g__gÀwVîãxAârib4dvARB
;

15204 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FARBPROC
 
	g__gÀwVîãxAârib4fARB
;

15205 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FVARBPROC
 
	g__gÀwVîãxAârib4fvARB
;

15206 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4IVARBPROC
 
	g__gÀwVîãxAârib4ivARB
;

15207 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SARBPROC
 
	g__gÀwVîãxAârib4sARB
;

15208 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SVARBPROC
 
	g__gÀwVîãxAârib4svARB
;

15209 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBVARBPROC
 
	g__gÀwVîãxAârib4ubvARB
;

15210 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UIVARBPROC
 
	g__gÀwVîãxAârib4uivARB
;

15211 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4USVARBPROC
 
	g__gÀwVîãxAârib4usvARB
;

15212 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPOINTERARBPROC
 
	g__gÀwVîãxAâribPoöãrARB
;

15214 
GLEW_FUN_EXPORT
 
PFNGLBINDATTRIBLOCATIONARBPROC
 
	g__gÀwBödAâribLoˇti⁄ARB
;

15215 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEATTRIBARBPROC
 
	g__gÀwGëA˘iveAâribARB
;

15216 
GLEW_FUN_EXPORT
 
PFNGLGETATTRIBLOCATIONARBPROC
 
	g__gÀwGëAâribLoˇti⁄ARB
;

15218 
GLEW_FUN_EXPORT
 
PFNGLCOLORP3UIPROC
 
	g__gÀwCﬁ‹P3ui
;

15219 
GLEW_FUN_EXPORT
 
PFNGLCOLORP3UIVPROC
 
	g__gÀwCﬁ‹P3uiv
;

15220 
GLEW_FUN_EXPORT
 
PFNGLCOLORP4UIPROC
 
	g__gÀwCﬁ‹P4ui
;

15221 
GLEW_FUN_EXPORT
 
PFNGLCOLORP4UIVPROC
 
	g__gÀwCﬁ‹P4uiv
;

15222 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP1UIPROC
 
	g__gÀwMu…iTexCo‹dP1ui
;

15223 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP1UIVPROC
 
	g__gÀwMu…iTexCo‹dP1uiv
;

15224 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP2UIPROC
 
	g__gÀwMu…iTexCo‹dP2ui
;

15225 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP2UIVPROC
 
	g__gÀwMu…iTexCo‹dP2uiv
;

15226 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP3UIPROC
 
	g__gÀwMu…iTexCo‹dP3ui
;

15227 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP3UIVPROC
 
	g__gÀwMu…iTexCo‹dP3uiv
;

15228 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP4UIPROC
 
	g__gÀwMu…iTexCo‹dP4ui
;

15229 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP4UIVPROC
 
	g__gÀwMu…iTexCo‹dP4uiv
;

15230 
GLEW_FUN_EXPORT
 
PFNGLNORMALP3UIPROC
 
	g__gÀwN‹mÆP3ui
;

15231 
GLEW_FUN_EXPORT
 
PFNGLNORMALP3UIVPROC
 
	g__gÀwN‹mÆP3uiv
;

15232 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORP3UIPROC
 
	g__gÀwSec⁄d¨yCﬁ‹P3ui
;

15233 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORP3UIVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹P3uiv
;

15234 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP1UIPROC
 
	g__gÀwTexCo‹dP1ui
;

15235 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP1UIVPROC
 
	g__gÀwTexCo‹dP1uiv
;

15236 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP2UIPROC
 
	g__gÀwTexCo‹dP2ui
;

15237 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP2UIVPROC
 
	g__gÀwTexCo‹dP2uiv
;

15238 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP3UIPROC
 
	g__gÀwTexCo‹dP3ui
;

15239 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP3UIVPROC
 
	g__gÀwTexCo‹dP3uiv
;

15240 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP4UIPROC
 
	g__gÀwTexCo‹dP4ui
;

15241 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP4UIVPROC
 
	g__gÀwTexCo‹dP4uiv
;

15242 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP1UIPROC
 
	g__gÀwVîãxAâribP1ui
;

15243 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP1UIVPROC
 
	g__gÀwVîãxAâribP1uiv
;

15244 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP2UIPROC
 
	g__gÀwVîãxAâribP2ui
;

15245 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP2UIVPROC
 
	g__gÀwVîãxAâribP2uiv
;

15246 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP3UIPROC
 
	g__gÀwVîãxAâribP3ui
;

15247 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP3UIVPROC
 
	g__gÀwVîãxAâribP3uiv
;

15248 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP4UIPROC
 
	g__gÀwVîãxAâribP4ui
;

15249 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP4UIVPROC
 
	g__gÀwVîãxAâribP4uiv
;

15250 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP2UIPROC
 
	g__gÀwVîãxP2ui
;

15251 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP2UIVPROC
 
	g__gÀwVîãxP2uiv
;

15252 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP3UIPROC
 
	g__gÀwVîãxP3ui
;

15253 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP3UIVPROC
 
	g__gÀwVîãxP3uiv
;

15254 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP4UIPROC
 
	g__gÀwVîãxP4ui
;

15255 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP4UIVPROC
 
	g__gÀwVîãxP4uiv
;

15257 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEARRAYVPROC
 
	g__gÀwDïthR™geAºayv
;

15258 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEINDEXEDPROC
 
	g__gÀwDïthR™geIndexed
;

15259 
GLEW_FUN_EXPORT
 
PFNGLGETDOUBLEI_VPROC
 
	g__gÀwGëDoubÀi_v
;

15260 
GLEW_FUN_EXPORT
 
PFNGLGETFLOATI_VPROC
 
	g__gÀwGëFlﬂti_v
;

15261 
GLEW_FUN_EXPORT
 
PFNGLSCISSORARRAYVPROC
 
	g__gÀwSciss‹Aºayv
;

15262 
GLEW_FUN_EXPORT
 
PFNGLSCISSORINDEXEDPROC
 
	g__gÀwSciss‹Indexed
;

15263 
GLEW_FUN_EXPORT
 
PFNGLSCISSORINDEXEDVPROC
 
	g__gÀwSciss‹Indexedv
;

15264 
GLEW_FUN_EXPORT
 
PFNGLVIEWPORTARRAYVPROC
 
	g__gÀwVõwp‹tAºayv
;

15265 
GLEW_FUN_EXPORT
 
PFNGLVIEWPORTINDEXEDFPROC
 
	g__gÀwVõwp‹tIndexedf
;

15266 
GLEW_FUN_EXPORT
 
PFNGLVIEWPORTINDEXEDFVPROC
 
	g__gÀwVõwp‹tIndexedfv
;

15268 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DARBPROC
 
	g__gÀwWödowPos2dARB
;

15269 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DVARBPROC
 
	g__gÀwWödowPos2dvARB
;

15270 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FARBPROC
 
	g__gÀwWödowPos2fARB
;

15271 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FVARBPROC
 
	g__gÀwWödowPos2fvARB
;

15272 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IARBPROC
 
	g__gÀwWödowPos2iARB
;

15273 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IVARBPROC
 
	g__gÀwWödowPos2ivARB
;

15274 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SARBPROC
 
	g__gÀwWödowPos2sARB
;

15275 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SVARBPROC
 
	g__gÀwWödowPos2svARB
;

15276 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DARBPROC
 
	g__gÀwWödowPos3dARB
;

15277 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DVARBPROC
 
	g__gÀwWödowPos3dvARB
;

15278 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FARBPROC
 
	g__gÀwWödowPos3fARB
;

15279 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FVARBPROC
 
	g__gÀwWödowPos3fvARB
;

15280 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IARBPROC
 
	g__gÀwWödowPos3iARB
;

15281 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IVARBPROC
 
	g__gÀwWödowPos3ivARB
;

15282 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SARBPROC
 
	g__gÀwWödowPos3sARB
;

15283 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SVARBPROC
 
	g__gÀwWödowPos3svARB
;

15285 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERSATIPROC
 
	g__gÀwDøwBuf„rsATI
;

15287 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTARRAYATIPROC
 
	g__gÀwDøwEÀmítAºayATI
;

15288 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTARRAYATIPROC
 
	g__gÀwDøwR™geEÀmítAºayATI
;

15289 
GLEW_FUN_EXPORT
 
PFNGLELEMENTPOINTERATIPROC
 
	g__gÀwEÀmítPoöãrATI
;

15291 
GLEW_FUN_EXPORT
 
PFNGLGETTEXBUMPPARAMETERFVATIPROC
 
	g__gÀwGëTexBumpP¨amëîfvATI
;

15292 
GLEW_FUN_EXPORT
 
PFNGLGETTEXBUMPPARAMETERIVATIPROC
 
	g__gÀwGëTexBumpP¨amëîivATI
;

15293 
GLEW_FUN_EXPORT
 
PFNGLTEXBUMPPARAMETERFVATIPROC
 
	g__gÀwTexBumpP¨amëîfvATI
;

15294 
GLEW_FUN_EXPORT
 
PFNGLTEXBUMPPARAMETERIVATIPROC
 
	g__gÀwTexBumpP¨amëîivATI
;

15296 
GLEW_FUN_EXPORT
 
PFNGLALPHAFRAGMENTOP1ATIPROC
 
	g__gÀwAÕhaFøgmítOp1ATI
;

15297 
GLEW_FUN_EXPORT
 
PFNGLALPHAFRAGMENTOP2ATIPROC
 
	g__gÀwAÕhaFøgmítOp2ATI
;

15298 
GLEW_FUN_EXPORT
 
PFNGLALPHAFRAGMENTOP3ATIPROC
 
	g__gÀwAÕhaFøgmítOp3ATI
;

15299 
GLEW_FUN_EXPORT
 
PFNGLBEGINFRAGMENTSHADERATIPROC
 
	g__gÀwBegöFøgmítShadîATI
;

15300 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGMENTSHADERATIPROC
 
	g__gÀwBödFøgmítShadîATI
;

15301 
GLEW_FUN_EXPORT
 
PFNGLCOLORFRAGMENTOP1ATIPROC
 
	g__gÀwCﬁ‹FøgmítOp1ATI
;

15302 
GLEW_FUN_EXPORT
 
PFNGLCOLORFRAGMENTOP2ATIPROC
 
	g__gÀwCﬁ‹FøgmítOp2ATI
;

15303 
GLEW_FUN_EXPORT
 
PFNGLCOLORFRAGMENTOP3ATIPROC
 
	g__gÀwCﬁ‹FøgmítOp3ATI
;

15304 
GLEW_FUN_EXPORT
 
PFNGLDELETEFRAGMENTSHADERATIPROC
 
	g__gÀwDñëeFøgmítShadîATI
;

15305 
GLEW_FUN_EXPORT
 
PFNGLENDFRAGMENTSHADERATIPROC
 
	g__gÀwEndFøgmítShadîATI
;

15306 
GLEW_FUN_EXPORT
 
PFNGLGENFRAGMENTSHADERSATIPROC
 
	g__gÀwGíFøgmítShadîsATI
;

15307 
GLEW_FUN_EXPORT
 
PFNGLPASSTEXCOORDATIPROC
 
	g__gÀwPassTexCo‹dATI
;

15308 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMAPATIPROC
 
	g__gÀwSam∂eM≠ATI
;

15309 
GLEW_FUN_EXPORT
 
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC
 
	g__gÀwSëFøgmítShadîC⁄°™tATI
;

15311 
GLEW_FUN_EXPORT
 
PFNGLMAPOBJECTBUFFERATIPROC
 
	g__gÀwM≠Obje˘Buf„rATI
;

15312 
GLEW_FUN_EXPORT
 
PFNGLUNMAPOBJECTBUFFERATIPROC
 
	g__gÀwUnm≠Obje˘Buf„rATI
;

15314 
GLEW_FUN_EXPORT
 
PFNGLPNTRIANGLESFATIPROC
 
	g__gÀwPNTrüngÀsfATI
;

15315 
GLEW_FUN_EXPORT
 
PFNGLPNTRIANGLESIATIPROC
 
	g__gÀwPNTrüngÀsiATI
;

15317 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFUNCSEPARATEATIPROC
 
	g__gÀwSãncûFuncSï¨©eATI
;

15318 
GLEW_FUN_EXPORT
 
PFNGLSTENCILOPSEPARATEATIPROC
 
	g__gÀwSãncûOpSï¨©eATI
;

15320 
GLEW_FUN_EXPORT
 
PFNGLARRAYOBJECTATIPROC
 
	g__gÀwAºayObje˘ATI
;

15321 
GLEW_FUN_EXPORT
 
PFNGLFREEOBJECTBUFFERATIPROC
 
	g__gÀwFªeObje˘Buf„rATI
;

15322 
GLEW_FUN_EXPORT
 
PFNGLGETARRAYOBJECTFVATIPROC
 
	g__gÀwGëAºayObje˘fvATI
;

15323 
GLEW_FUN_EXPORT
 
PFNGLGETARRAYOBJECTIVATIPROC
 
	g__gÀwGëAºayObje˘ivATI
;

15324 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTBUFFERFVATIPROC
 
	g__gÀwGëObje˘Buf„rfvATI
;

15325 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTBUFFERIVATIPROC
 
	g__gÀwGëObje˘Buf„rivATI
;

15326 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTARRAYOBJECTFVATIPROC
 
	g__gÀwGëV¨ü¡AºayObje˘fvATI
;

15327 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTARRAYOBJECTIVATIPROC
 
	g__gÀwGëV¨ü¡AºayObje˘ivATI
;

15328 
GLEW_FUN_EXPORT
 
PFNGLISOBJECTBUFFERATIPROC
 
	g__gÀwIsObje˘Buf„rATI
;

15329 
GLEW_FUN_EXPORT
 
PFNGLNEWOBJECTBUFFERATIPROC
 
	g__gÀwNewObje˘Buf„rATI
;

15330 
GLEW_FUN_EXPORT
 
PFNGLUPDATEOBJECTBUFFERATIPROC
 
	g__gÀwUpd©eObje˘Buf„rATI
;

15331 
GLEW_FUN_EXPORT
 
PFNGLVARIANTARRAYOBJECTATIPROC
 
	g__gÀwV¨ü¡AºayObje˘ATI
;

15333 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
 
	g__gÀwGëVîãxAâribAºayObje˘fvATI
;

15334 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
 
	g__gÀwGëVîãxAâribAºayObje˘ivATI
;

15335 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC
 
	g__gÀwVîãxAâribAºayObje˘ATI
;

15337 
GLEW_FUN_EXPORT
 
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
 
	g__gÀwClõ¡A˘iveVîãxSåómATI
;

15338 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3BATIPROC
 
	g__gÀwN‹mÆSåóm3bATI
;

15339 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3BVATIPROC
 
	g__gÀwN‹mÆSåóm3bvATI
;

15340 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3DATIPROC
 
	g__gÀwN‹mÆSåóm3dATI
;

15341 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3DVATIPROC
 
	g__gÀwN‹mÆSåóm3dvATI
;

15342 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3FATIPROC
 
	g__gÀwN‹mÆSåóm3fATI
;

15343 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3FVATIPROC
 
	g__gÀwN‹mÆSåóm3fvATI
;

15344 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3IATIPROC
 
	g__gÀwN‹mÆSåóm3iATI
;

15345 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3IVATIPROC
 
	g__gÀwN‹mÆSåóm3ivATI
;

15346 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3SATIPROC
 
	g__gÀwN‹mÆSåóm3sATI
;

15347 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3SVATIPROC
 
	g__gÀwN‹mÆSåóm3svATI
;

15348 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBLENDENVFATIPROC
 
	g__gÀwVîãxBÀndEnvfATI
;

15349 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBLENDENVIATIPROC
 
	g__gÀwVîãxBÀndEnviATI
;

15350 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1DATIPROC
 
	g__gÀwVîãxSåóm1dATI
;

15351 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1DVATIPROC
 
	g__gÀwVîãxSåóm1dvATI
;

15352 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1FATIPROC
 
	g__gÀwVîãxSåóm1fATI
;

15353 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1FVATIPROC
 
	g__gÀwVîãxSåóm1fvATI
;

15354 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1IATIPROC
 
	g__gÀwVîãxSåóm1iATI
;

15355 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1IVATIPROC
 
	g__gÀwVîãxSåóm1ivATI
;

15356 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1SATIPROC
 
	g__gÀwVîãxSåóm1sATI
;

15357 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1SVATIPROC
 
	g__gÀwVîãxSåóm1svATI
;

15358 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2DATIPROC
 
	g__gÀwVîãxSåóm2dATI
;

15359 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2DVATIPROC
 
	g__gÀwVîãxSåóm2dvATI
;

15360 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2FATIPROC
 
	g__gÀwVîãxSåóm2fATI
;

15361 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2FVATIPROC
 
	g__gÀwVîãxSåóm2fvATI
;

15362 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2IATIPROC
 
	g__gÀwVîãxSåóm2iATI
;

15363 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2IVATIPROC
 
	g__gÀwVîãxSåóm2ivATI
;

15364 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2SATIPROC
 
	g__gÀwVîãxSåóm2sATI
;

15365 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2SVATIPROC
 
	g__gÀwVîãxSåóm2svATI
;

15366 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3DATIPROC
 
	g__gÀwVîãxSåóm3dATI
;

15367 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3DVATIPROC
 
	g__gÀwVîãxSåóm3dvATI
;

15368 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3FATIPROC
 
	g__gÀwVîãxSåóm3fATI
;

15369 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3FVATIPROC
 
	g__gÀwVîãxSåóm3fvATI
;

15370 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3IATIPROC
 
	g__gÀwVîãxSåóm3iATI
;

15371 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3IVATIPROC
 
	g__gÀwVîãxSåóm3ivATI
;

15372 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3SATIPROC
 
	g__gÀwVîãxSåóm3sATI
;

15373 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3SVATIPROC
 
	g__gÀwVîãxSåóm3svATI
;

15374 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4DATIPROC
 
	g__gÀwVîãxSåóm4dATI
;

15375 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4DVATIPROC
 
	g__gÀwVîãxSåóm4dvATI
;

15376 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4FATIPROC
 
	g__gÀwVîãxSåóm4fATI
;

15377 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4FVATIPROC
 
	g__gÀwVîãxSåóm4fvATI
;

15378 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4IATIPROC
 
	g__gÀwVîãxSåóm4iATI
;

15379 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4IVATIPROC
 
	g__gÀwVîãxSåóm4ivATI
;

15380 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4SATIPROC
 
	g__gÀwVîãxSåóm4sATI
;

15381 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4SVATIPROC
 
	g__gÀwVîãxSåóm4svATI
;

15383 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMBUFFERSIZEEXTPROC
 
	g__gÀwGëUnif‹mBuf„rSizeEXT
;

15384 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMOFFSETEXTPROC
 
	g__gÀwGëUnif‹mOff£tEXT
;

15385 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMBUFFEREXTPROC
 
	g__gÀwUnif‹mBuf„rEXT
;

15387 
GLEW_FUN_EXPORT
 
PFNGLBLENDCOLOREXTPROC
 
	g__gÀwBÀndCﬁ‹EXT
;

15389 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEEXTPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©eEXT
;

15391 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEEXTPROC
 
	g__gÀwBÀndFuncSï¨©eEXT
;

15393 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONEXTPROC
 
	g__gÀwBÀndEqu©i⁄EXT
;

15395 
GLEW_FUN_EXPORT
 
PFNGLCOLORSUBTABLEEXTPROC
 
	g__gÀwCﬁ‹SubTabÀEXT
;

15396 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORSUBTABLEEXTPROC
 
	g__gÀwC›yCﬁ‹SubTabÀEXT
;

15398 
GLEW_FUN_EXPORT
 
PFNGLLOCKARRAYSEXTPROC
 
	g__gÀwLockAºaysEXT
;

15399 
GLEW_FUN_EXPORT
 
PFNGLUNLOCKARRAYSEXTPROC
 
	g__gÀwU∆ockAºaysEXT
;

15401 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER1DEXTPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr1DEXT
;

15402 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER2DEXTPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr2DEXT
;

15403 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîfEXT
;

15404 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFVEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîfvEXT
;

15405 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîiEXT
;

15406 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIVEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîivEXT
;

15407 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr1DEXT
;

15408 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr2DEXT
;

15409 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONFILTEREXTPROC
 
	g__gÀwGëC⁄vﬁuti⁄FûãrEXT
;

15410 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîfvEXT
;

15411 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîivEXT
;

15412 
GLEW_FUN_EXPORT
 
PFNGLGETSEPARABLEFILTEREXTPROC
 
	g__gÀwGëSï¨abÀFûãrEXT
;

15413 
GLEW_FUN_EXPORT
 
PFNGLSEPARABLEFILTER2DEXTPROC
 
	g__gÀwSï¨abÀFûãr2DEXT
;

15415 
GLEW_FUN_EXPORT
 
PFNGLBINORMALPOINTEREXTPROC
 
	g__gÀwBö‹mÆPoöãrEXT
;

15416 
GLEW_FUN_EXPORT
 
PFNGLTANGENTPOINTEREXTPROC
 
	g__gÀwT™gítPoöãrEXT
;

15418 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXIMAGE1DEXTPROC
 
	g__gÀwC›yTexImage1DEXT
;

15419 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXIMAGE2DEXTPROC
 
	g__gÀwC›yTexImage2DEXT
;

15420 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE1DEXTPROC
 
	g__gÀwC›yTexSubImage1DEXT
;

15421 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE2DEXTPROC
 
	g__gÀwC›yTexSubImage2DEXT
;

15422 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE3DEXTPROC
 
	g__gÀwC›yTexSubImage3DEXT
;

15424 
GLEW_FUN_EXPORT
 
PFNGLCULLPARAMETERDVEXTPROC
 
	g__gÀwCuŒP¨amëîdvEXT
;

15425 
GLEW_FUN_EXPORT
 
PFNGLCULLPARAMETERFVEXTPROC
 
	g__gÀwCuŒP¨amëîfvEXT
;

15427 
GLEW_FUN_EXPORT
 
PFNGLINSERTEVENTMARKEREXTPROC
 
	g__gÀwIn£πEvítM¨kîEXT
;

15428 
GLEW_FUN_EXPORT
 
PFNGLPOPGROUPMARKEREXTPROC
 
	g__gÀwP›GroupM¨kîEXT
;

15429 
GLEW_FUN_EXPORT
 
PFNGLPUSHGROUPMARKEREXTPROC
 
	g__gÀwPushGroupM¨kîEXT
;

15431 
GLEW_FUN_EXPORT
 
PFNGLDEPTHBOUNDSEXTPROC
 
	g__gÀwDïthBoundsEXT
;

15433 
GLEW_FUN_EXPORT
 
PFNGLBINDMULTITEXTUREEXTPROC
 
	g__gÀwBödMu…iTextuªEXT
;

15434 
GLEW_FUN_EXPORT
 
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
 
	g__gÀwCheckNamedFømebuf„rSètusEXT
;

15435 
GLEW_FUN_EXPORT
 
PFNGLCLIENTATTRIBDEFAULTEXTPROC
 
	g__gÀwClõ¡AâribDeÁu…EXT
;

15436 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexImage1DEXT
;

15437 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexImage2DEXT
;

15438 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexImage3DEXT
;

15439 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexSubImage1DEXT
;

15440 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexSubImage2DEXT
;

15441 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexSubImage3DEXT
;

15442 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dTextuªImage1DEXT
;

15443 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dTextuªImage2DEXT
;

15444 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dTextuªImage3DEXT
;

15445 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dTextuªSubImage1DEXT
;

15446 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dTextuªSubImage2DEXT
;

15447 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dTextuªSubImage3DEXT
;

15448 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXIMAGE1DEXTPROC
 
	g__gÀwC›yMu…iTexImage1DEXT
;

15449 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXIMAGE2DEXTPROC
 
	g__gÀwC›yMu…iTexImage2DEXT
;

15450 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
 
	g__gÀwC›yMu…iTexSubImage1DEXT
;

15451 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
 
	g__gÀwC›yMu…iTexSubImage2DEXT
;

15452 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
 
	g__gÀwC›yMu…iTexSubImage3DEXT
;

15453 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTUREIMAGE1DEXTPROC
 
	g__gÀwC›yTextuªImage1DEXT
;

15454 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTUREIMAGE2DEXTPROC
 
	g__gÀwC›yTextuªImage2DEXT
;

15455 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
 
	g__gÀwC›yTextuªSubImage1DEXT
;

15456 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
 
	g__gÀwC›yTextuªSubImage2DEXT
;

15457 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
 
	g__gÀwC›yTextuªSubImage3DEXT
;

15458 
GLEW_FUN_EXPORT
 
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
 
	g__gÀwDißbÀClõ¡SèãIndexedEXT
;

15459 
GLEW_FUN_EXPORT
 
PFNGLDISABLECLIENTSTATEIEXTPROC
 
	g__gÀwDißbÀClõ¡SèãiEXT
;

15460 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
 
	g__gÀwDißbÀVîãxAºayAâribEXT
;

15461 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXARRAYEXTPROC
 
	g__gÀwDißbÀVîãxAºayEXT
;

15462 
GLEW_FUN_EXPORT
 
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC
 
	g__gÀwE«bÀClõ¡SèãIndexedEXT
;

15463 
GLEW_FUN_EXPORT
 
PFNGLENABLECLIENTSTATEIEXTPROC
 
	g__gÀwE«bÀClõ¡SèãiEXT
;

15464 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC
 
	g__gÀwE«bÀVîãxAºayAâribEXT
;

15465 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXARRAYEXTPROC
 
	g__gÀwE«bÀVîãxAºayEXT
;

15466 
GLEW_FUN_EXPORT
 
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
 
	g__gÀwFlushM≠≥dNamedBuf„rR™geEXT
;

15467 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
 
	g__gÀwFømebuf„rDøwBuf„rEXT
;

15468 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
 
	g__gÀwFømebuf„rDøwBuf„rsEXT
;

15469 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERREADBUFFEREXTPROC
 
	g__gÀwFømebuf„rRódBuf„rEXT
;

15470 
GLEW_FUN_EXPORT
 
PFNGLGENERATEMULTITEXMIPMAPEXTPROC
 
	g__gÀwGíî©eMu…iTexMùm≠EXT
;

15471 
GLEW_FUN_EXPORT
 
PFNGLGENERATETEXTUREMIPMAPEXTPROC
 
	g__gÀwGíî©eTextuªMùm≠EXT
;

15472 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
 
	g__gÀwGëCom¥es£dMu…iTexImageEXT
;

15473 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
 
	g__gÀwGëCom¥es£dTextuªImageEXT
;

15474 
GLEW_FUN_EXPORT
 
PFNGLGETDOUBLEINDEXEDVEXTPROC
 
	g__gÀwGëDoubÀIndexedvEXT
;

15475 
GLEW_FUN_EXPORT
 
PFNGLGETDOUBLEI_VEXTPROC
 
	g__gÀwGëDoubÀi_vEXT
;

15476 
GLEW_FUN_EXPORT
 
PFNGLGETFLOATINDEXEDVEXTPROC
 
	g__gÀwGëFlﬂtIndexedvEXT
;

15477 
GLEW_FUN_EXPORT
 
PFNGLGETFLOATI_VEXTPROC
 
	g__gÀwGëFlﬂti_vEXT
;

15478 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëFømebuf„rP¨amëîivEXT
;

15479 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXENVFVEXTPROC
 
	g__gÀwGëMu…iTexEnvfvEXT
;

15480 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXENVIVEXTPROC
 
	g__gÀwGëMu…iTexEnvivEXT
;

15481 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXGENDVEXTPROC
 
	g__gÀwGëMu…iTexGídvEXT
;

15482 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXGENFVEXTPROC
 
	g__gÀwGëMu…iTexGífvEXT
;

15483 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXGENIVEXTPROC
 
	g__gÀwGëMu…iTexGíivEXT
;

15484 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXIMAGEEXTPROC
 
	g__gÀwGëMu…iTexImageEXT
;

15485 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
 
	g__gÀwGëMu…iTexLevñP¨amëîfvEXT
;

15486 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
 
	g__gÀwGëMu…iTexLevñP¨amëîivEXT
;

15487 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERIIVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîIivEXT
;

15488 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîIuivEXT
;

15489 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERFVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîfvEXT
;

15490 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERIVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîivEXT
;

15491 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëNamedBuf„rP¨amëîivEXT
;

15492 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC
 
	g__gÀwGëNamedBuf„rPoöãrvEXT
;

15493 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC
 
	g__gÀwGëNamedBuf„rSubD©aEXT
;

15494 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
 
	g__gÀwGëNamedFømebuf„rAâachmítP¨amëîivEXT
;

15495 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîIivEXT
;

15496 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîIuivEXT
;

15497 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîdvEXT
;

15498 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîfvEXT
;

15499 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC
 
	g__gÀwGëNamedProgømSåögEXT
;

15500 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMIVEXTPROC
 
	g__gÀwGëNamedProgømivEXT
;

15501 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëNamedRídîbuf„rP¨amëîivEXT
;

15502 
GLEW_FUN_EXPORT
 
PFNGLGETPOINTERINDEXEDVEXTPROC
 
	g__gÀwGëPoöãrIndexedvEXT
;

15503 
GLEW_FUN_EXPORT
 
PFNGLGETPOINTERI_VEXTPROC
 
	g__gÀwGëPoöãri_vEXT
;

15504 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREIMAGEEXTPROC
 
	g__gÀwGëTextuªImageEXT
;

15505 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
 
	g__gÀwGëTextuªLevñP¨amëîfvEXT
;

15506 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
 
	g__gÀwGëTextuªLevñP¨amëîivEXT
;

15507 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERIIVEXTPROC
 
	g__gÀwGëTextuªP¨amëîIivEXT
;

15508 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC
 
	g__gÀwGëTextuªP¨amëîIuivEXT
;

15509 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERFVEXTPROC
 
	g__gÀwGëTextuªP¨amëîfvEXT
;

15510 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERIVEXTPROC
 
	g__gÀwGëTextuªP¨amëîivEXT
;

15511 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
 
	g__gÀwGëVîãxAºayI¡egîi_vEXT
;

15512 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYINTEGERVEXTPROC
 
	g__gÀwGëVîãxAºayI¡egîvEXT
;

15513 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
 
	g__gÀwGëVîãxAºayPoöãri_vEXT
;

15514 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYPOINTERVEXTPROC
 
	g__gÀwGëVîãxAºayPoöãrvEXT
;

15515 
GLEW_FUN_EXPORT
 
PFNGLMAPNAMEDBUFFEREXTPROC
 
	g__gÀwM≠NamedBuf„rEXT
;

15516 
GLEW_FUN_EXPORT
 
PFNGLMAPNAMEDBUFFERRANGEEXTPROC
 
	g__gÀwM≠NamedBuf„rR™geEXT
;

15517 
GLEW_FUN_EXPORT
 
PFNGLMATRIXFRUSTUMEXTPROC
 
	g__gÀwM©rixFru°umEXT
;

15518 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADIDENTITYEXTPROC
 
	g__gÀwM©rixLﬂdIdítôyEXT
;

15519 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADTRANSPOSEDEXTPROC
 
	g__gÀwM©rixLﬂdTøn•o£dEXT
;

15520 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADTRANSPOSEFEXTPROC
 
	g__gÀwM©rixLﬂdTøn•o£fEXT
;

15521 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADDEXTPROC
 
	g__gÀwM©rixLﬂddEXT
;

15522 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADFEXTPROC
 
	g__gÀwM©rixLﬂdfEXT
;

15523 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTTRANSPOSEDEXTPROC
 
	g__gÀwM©rixMu…Tøn•o£dEXT
;

15524 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTTRANSPOSEFEXTPROC
 
	g__gÀwM©rixMu…Tøn•o£fEXT
;

15525 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTDEXTPROC
 
	g__gÀwM©rixMu…dEXT
;

15526 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTFEXTPROC
 
	g__gÀwM©rixMu…fEXT
;

15527 
GLEW_FUN_EXPORT
 
PFNGLMATRIXORTHOEXTPROC
 
	g__gÀwM©rixOπhoEXT
;

15528 
GLEW_FUN_EXPORT
 
PFNGLMATRIXPOPEXTPROC
 
	g__gÀwM©rixP›EXT
;

15529 
GLEW_FUN_EXPORT
 
PFNGLMATRIXPUSHEXTPROC
 
	g__gÀwM©rixPushEXT
;

15530 
GLEW_FUN_EXPORT
 
PFNGLMATRIXROTATEDEXTPROC
 
	g__gÀwM©rixRŸ©edEXT
;

15531 
GLEW_FUN_EXPORT
 
PFNGLMATRIXROTATEFEXTPROC
 
	g__gÀwM©rixRŸ©efEXT
;

15532 
GLEW_FUN_EXPORT
 
PFNGLMATRIXSCALEDEXTPROC
 
	g__gÀwM©rixSˇÀdEXT
;

15533 
GLEW_FUN_EXPORT
 
PFNGLMATRIXSCALEFEXTPROC
 
	g__gÀwM©rixSˇÀfEXT
;

15534 
GLEW_FUN_EXPORT
 
PFNGLMATRIXTRANSLATEDEXTPROC
 
	g__gÀwM©rixTøn¶©edEXT
;

15535 
GLEW_FUN_EXPORT
 
PFNGLMATRIXTRANSLATEFEXTPROC
 
	g__gÀwM©rixTøn¶©efEXT
;

15536 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXBUFFEREXTPROC
 
	g__gÀwMu…iTexBuf„rEXT
;

15537 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDPOINTEREXTPROC
 
	g__gÀwMu…iTexCo‹dPoöãrEXT
;

15538 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVFEXTPROC
 
	g__gÀwMu…iTexEnvfEXT
;

15539 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVFVEXTPROC
 
	g__gÀwMu…iTexEnvfvEXT
;

15540 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVIEXTPROC
 
	g__gÀwMu…iTexEnviEXT
;

15541 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVIVEXTPROC
 
	g__gÀwMu…iTexEnvivEXT
;

15542 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENDEXTPROC
 
	g__gÀwMu…iTexGídEXT
;

15543 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENDVEXTPROC
 
	g__gÀwMu…iTexGídvEXT
;

15544 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENFEXTPROC
 
	g__gÀwMu…iTexGífEXT
;

15545 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENFVEXTPROC
 
	g__gÀwMu…iTexGífvEXT
;

15546 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENIEXTPROC
 
	g__gÀwMu…iTexGíiEXT
;

15547 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENIVEXTPROC
 
	g__gÀwMu…iTexGíivEXT
;

15548 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXIMAGE1DEXTPROC
 
	g__gÀwMu…iTexImage1DEXT
;

15549 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXIMAGE2DEXTPROC
 
	g__gÀwMu…iTexImage2DEXT
;

15550 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXIMAGE3DEXTPROC
 
	g__gÀwMu…iTexImage3DEXT
;

15551 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIIVEXTPROC
 
	g__gÀwMu…iTexP¨amëîIivEXT
;

15552 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIUIVEXTPROC
 
	g__gÀwMu…iTexP¨amëîIuivEXT
;

15553 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERFEXTPROC
 
	g__gÀwMu…iTexP¨amëîfEXT
;

15554 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERFVEXTPROC
 
	g__gÀwMu…iTexP¨amëîfvEXT
;

15555 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIEXTPROC
 
	g__gÀwMu…iTexP¨amëîiEXT
;

15556 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIVEXTPROC
 
	g__gÀwMu…iTexP¨amëîivEXT
;

15557 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXRENDERBUFFEREXTPROC
 
	g__gÀwMu…iTexRídîbuf„rEXT
;

15558 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXSUBIMAGE1DEXTPROC
 
	g__gÀwMu…iTexSubImage1DEXT
;

15559 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXSUBIMAGE2DEXTPROC
 
	g__gÀwMu…iTexSubImage2DEXT
;

15560 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXSUBIMAGE3DEXTPROC
 
	g__gÀwMu…iTexSubImage3DEXT
;

15561 
GLEW_FUN_EXPORT
 
PFNGLNAMEDBUFFERDATAEXTPROC
 
	g__gÀwNamedBuf„rD©aEXT
;

15562 
GLEW_FUN_EXPORT
 
PFNGLNAMEDBUFFERSUBDATAEXTPROC
 
	g__gÀwNamedBuf„rSubD©aEXT
;

15563 
GLEW_FUN_EXPORT
 
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
 
	g__gÀwNamedC›yBuf„rSubD©aEXT
;

15564 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
 
	g__gÀwNamedFømebuf„rRídîbuf„rEXT
;

15565 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
 
	g__gÀwNamedFømebuf„rTextuª1DEXT
;

15566 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
 
	g__gÀwNamedFømebuf„rTextuª2DEXT
;

15567 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
 
	g__gÀwNamedFømebuf„rTextuª3DEXT
;

15568 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
 
	g__gÀwNamedFømebuf„rTextuªEXT
;

15569 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
 
	g__gÀwNamedFømebuf„rTextuªFa˚EXT
;

15570 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
 
	g__gÀwNamedFømebuf„rTextuªLayîEXT
;

15571 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4dEXT
;

15572 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4dvEXT
;

15573 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4fEXT
;

15574 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4fvEXT
;

15575 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4iEXT
;

15576 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4ivEXT
;

15577 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4uiEXT
;

15578 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4uivEXT
;

15579 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîs4fvEXT
;

15580 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîsI4ivEXT
;

15581 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîsI4uivEXT
;

15582 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMSTRINGEXTPROC
 
	g__gÀwNamedProgømSåögEXT
;

15583 
GLEW_FUN_EXPORT
 
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
 
	g__gÀwNamedRídîbuf„rSt‹ageEXT
;

15584 
GLEW_FUN_EXPORT
 
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
 
	g__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
;

15585 
GLEW_FUN_EXPORT
 
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
 
	g__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
;

15586 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1DEXTPROC
 
	g__gÀwProgømUnif‹m1dEXT
;

15587 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1DVEXTPROC
 
	g__gÀwProgømUnif‹m1dvEXT
;

15588 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FEXTPROC
 
	g__gÀwProgømUnif‹m1fEXT
;

15589 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FVEXTPROC
 
	g__gÀwProgømUnif‹m1fvEXT
;

15590 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IEXTPROC
 
	g__gÀwProgømUnif‹m1iEXT
;

15591 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IVEXTPROC
 
	g__gÀwProgømUnif‹m1ivEXT
;

15592 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIEXTPROC
 
	g__gÀwProgømUnif‹m1uiEXT
;

15593 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIVEXTPROC
 
	g__gÀwProgømUnif‹m1uivEXT
;

15594 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2DEXTPROC
 
	g__gÀwProgømUnif‹m2dEXT
;

15595 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2DVEXTPROC
 
	g__gÀwProgømUnif‹m2dvEXT
;

15596 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FEXTPROC
 
	g__gÀwProgømUnif‹m2fEXT
;

15597 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FVEXTPROC
 
	g__gÀwProgømUnif‹m2fvEXT
;

15598 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IEXTPROC
 
	g__gÀwProgømUnif‹m2iEXT
;

15599 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IVEXTPROC
 
	g__gÀwProgømUnif‹m2ivEXT
;

15600 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIEXTPROC
 
	g__gÀwProgømUnif‹m2uiEXT
;

15601 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIVEXTPROC
 
	g__gÀwProgømUnif‹m2uivEXT
;

15602 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3DEXTPROC
 
	g__gÀwProgømUnif‹m3dEXT
;

15603 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3DVEXTPROC
 
	g__gÀwProgømUnif‹m3dvEXT
;

15604 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FEXTPROC
 
	g__gÀwProgømUnif‹m3fEXT
;

15605 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FVEXTPROC
 
	g__gÀwProgømUnif‹m3fvEXT
;

15606 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IEXTPROC
 
	g__gÀwProgømUnif‹m3iEXT
;

15607 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IVEXTPROC
 
	g__gÀwProgømUnif‹m3ivEXT
;

15608 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIEXTPROC
 
	g__gÀwProgømUnif‹m3uiEXT
;

15609 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIVEXTPROC
 
	g__gÀwProgømUnif‹m3uivEXT
;

15610 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4DEXTPROC
 
	g__gÀwProgømUnif‹m4dEXT
;

15611 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4DVEXTPROC
 
	g__gÀwProgømUnif‹m4dvEXT
;

15612 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FEXTPROC
 
	g__gÀwProgømUnif‹m4fEXT
;

15613 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FVEXTPROC
 
	g__gÀwProgømUnif‹m4fvEXT
;

15614 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IEXTPROC
 
	g__gÀwProgømUnif‹m4iEXT
;

15615 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IVEXTPROC
 
	g__gÀwProgømUnif‹m4ivEXT
;

15616 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIEXTPROC
 
	g__gÀwProgømUnif‹m4uiEXT
;

15617 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIVEXTPROC
 
	g__gÀwProgømUnif‹m4uivEXT
;

15618 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2dvEXT
;

15619 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2fvEXT
;

15620 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2x3dvEXT
;

15621 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2x3fvEXT
;

15622 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2x4dvEXT
;

15623 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2x4fvEXT
;

15624 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3dvEXT
;

15625 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3fvEXT
;

15626 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3x2dvEXT
;

15627 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3x2fvEXT
;

15628 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3x4dvEXT
;

15629 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3x4fvEXT
;

15630 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4dvEXT
;

15631 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4fvEXT
;

15632 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4x2dvEXT
;

15633 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4x2fvEXT
;

15634 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4x3dvEXT
;

15635 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4x3fvEXT
;

15636 
GLEW_FUN_EXPORT
 
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
 
	g__gÀwPushClõ¡AâribDeÁu…EXT
;

15637 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREBUFFEREXTPROC
 
	g__gÀwTextuªBuf„rEXT
;

15638 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE1DEXTPROC
 
	g__gÀwTextuªImage1DEXT
;

15639 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE2DEXTPROC
 
	g__gÀwTextuªImage2DEXT
;

15640 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE3DEXTPROC
 
	g__gÀwTextuªImage3DEXT
;

15641 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIIVEXTPROC
 
	g__gÀwTextuªP¨amëîIivEXT
;

15642 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIUIVEXTPROC
 
	g__gÀwTextuªP¨amëîIuivEXT
;

15643 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERFEXTPROC
 
	g__gÀwTextuªP¨amëîfEXT
;

15644 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERFVEXTPROC
 
	g__gÀwTextuªP¨amëîfvEXT
;

15645 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIEXTPROC
 
	g__gÀwTextuªP¨amëîiEXT
;

15646 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIVEXTPROC
 
	g__gÀwTextuªP¨amëîivEXT
;

15647 
GLEW_FUN_EXPORT
 
PFNGLTEXTURERENDERBUFFEREXTPROC
 
	g__gÀwTextuªRídîbuf„rEXT
;

15648 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESUBIMAGE1DEXTPROC
 
	g__gÀwTextuªSubImage1DEXT
;

15649 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESUBIMAGE2DEXTPROC
 
	g__gÀwTextuªSubImage2DEXT
;

15650 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESUBIMAGE3DEXTPROC
 
	g__gÀwTextuªSubImage3DEXT
;

15651 
GLEW_FUN_EXPORT
 
PFNGLUNMAPNAMEDBUFFEREXTPROC
 
	g__gÀwUnm≠NamedBuf„rEXT
;

15652 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC
 
	g__gÀwVîãxAºayCﬁ‹Off£tEXT
;

15653 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
 
	g__gÀwVîãxAºayEdgeFœgOff£tEXT
;

15654 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
 
	g__gÀwVîãxAºayFogCo‹dOff£tEXT
;

15655 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC
 
	g__gÀwVîãxAºayIndexOff£tEXT
;

15656 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
 
	g__gÀwVîãxAºayMu…iTexCo‹dOff£tEXT
;

15657 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC
 
	g__gÀwVîãxAºayN‹mÆOff£tEXT
;

15658 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
 
	g__gÀwVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
;

15659 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
 
	g__gÀwVîãxAºayTexCo‹dOff£tEXT
;

15660 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxAâribIOff£tEXT
;

15661 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxAâribOff£tEXT
;

15662 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxOff£tEXT
;

15664 
GLEW_FUN_EXPORT
 
PFNGLCOLORMASKINDEXEDEXTPROC
 
	g__gÀwCﬁ‹MaskIndexedEXT
;

15665 
GLEW_FUN_EXPORT
 
PFNGLDISABLEINDEXEDEXTPROC
 
	g__gÀwDißbÀIndexedEXT
;

15666 
GLEW_FUN_EXPORT
 
PFNGLENABLEINDEXEDEXTPROC
 
	g__gÀwE«bÀIndexedEXT
;

15667 
GLEW_FUN_EXPORT
 
PFNGLGETBOOLEANINDEXEDVEXTPROC
 
	g__gÀwGëBoﬁónIndexedvEXT
;

15668 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERINDEXEDVEXTPROC
 
	g__gÀwGëI¡egîIndexedvEXT
;

15669 
GLEW_FUN_EXPORT
 
PFNGLISENABLEDINDEXEDEXTPROC
 
	g__gÀwIsE«bÀdIndexedEXT
;

15671 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDEXTPROC
 
	g__gÀwDøwAºaysIn°™˚dEXT
;

15672 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDEXTPROC
 
	g__gÀwDøwEÀmítsIn°™˚dEXT
;

15674 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTSEXTPROC
 
	g__gÀwDøwR™geEÀmítsEXT
;

15676 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDPOINTEREXTPROC
 
	g__gÀwFogCo‹dPoöãrEXT
;

15677 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDEXTPROC
 
	g__gÀwFogCo‹ddEXT
;

15678 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDVEXTPROC
 
	g__gÀwFogCo‹ddvEXT
;

15679 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFEXTPROC
 
	g__gÀwFogCo‹dfEXT
;

15680 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFVEXTPROC
 
	g__gÀwFogCo‹dfvEXT
;

15682 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTCOLORMATERIALEXTPROC
 
	g__gÀwFøgmítCﬁ‹M©îülEXT
;

15683 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFEXTPROC
 
	g__gÀwFøgmítLightModñfEXT
;

15684 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFVEXTPROC
 
	g__gÀwFøgmítLightModñfvEXT
;

15685 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELIEXTPROC
 
	g__gÀwFøgmítLightModñiEXT
;

15686 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELIVEXTPROC
 
	g__gÀwFøgmítLightModñivEXT
;

15687 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFEXTPROC
 
	g__gÀwFøgmítLightfEXT
;

15688 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFVEXTPROC
 
	g__gÀwFøgmítLightfvEXT
;

15689 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTIEXTPROC
 
	g__gÀwFøgmítLightiEXT
;

15690 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTIVEXTPROC
 
	g__gÀwFøgmítLightivEXT
;

15691 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFEXTPROC
 
	g__gÀwFøgmítM©îülfEXT
;

15692 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFVEXTPROC
 
	g__gÀwFøgmítM©îülfvEXT
;

15693 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALIEXTPROC
 
	g__gÀwFøgmítM©îüliEXT
;

15694 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALIVEXTPROC
 
	g__gÀwFøgmítM©îülivEXT
;

15695 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTFVEXTPROC
 
	g__gÀwGëFøgmítLightfvEXT
;

15696 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTIVEXTPROC
 
	g__gÀwGëFøgmítLightivEXT
;

15697 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALFVEXTPROC
 
	g__gÀwGëFøgmítM©îülfvEXT
;

15698 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALIVEXTPROC
 
	g__gÀwGëFøgmítM©îülivEXT
;

15699 
GLEW_FUN_EXPORT
 
PFNGLLIGHTENVIEXTPROC
 
	g__gÀwLightEnviEXT
;

15701 
GLEW_FUN_EXPORT
 
PFNGLBLITFRAMEBUFFEREXTPROC
 
	g__gÀwBlôFømebuf„rEXT
;

15703 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂eEXT
;

15705 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAMEBUFFEREXTPROC
 
	g__gÀwBödFømebuf„rEXT
;

15706 
GLEW_FUN_EXPORT
 
PFNGLBINDRENDERBUFFEREXTPROC
 
	g__gÀwBödRídîbuf„rEXT
;

15707 
GLEW_FUN_EXPORT
 
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
 
	g__gÀwCheckFømebuf„rSètusEXT
;

15708 
GLEW_FUN_EXPORT
 
PFNGLDELETEFRAMEBUFFERSEXTPROC
 
	g__gÀwDñëeFømebuf„rsEXT
;

15709 
GLEW_FUN_EXPORT
 
PFNGLDELETERENDERBUFFERSEXTPROC
 
	g__gÀwDñëeRídîbuf„rsEXT
;

15710 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
 
	g__gÀwFømebuf„rRídîbuf„rEXT
;

15711 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC
 
	g__gÀwFømebuf„rTextuª1DEXT
;

15712 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC
 
	g__gÀwFømebuf„rTextuª2DEXT
;

15713 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC
 
	g__gÀwFømebuf„rTextuª3DEXT
;

15714 
GLEW_FUN_EXPORT
 
PFNGLGENFRAMEBUFFERSEXTPROC
 
	g__gÀwGíFømebuf„rsEXT
;

15715 
GLEW_FUN_EXPORT
 
PFNGLGENRENDERBUFFERSEXTPROC
 
	g__gÀwGíRídîbuf„rsEXT
;

15716 
GLEW_FUN_EXPORT
 
PFNGLGENERATEMIPMAPEXTPROC
 
	g__gÀwGíî©eMùm≠EXT
;

15717 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
 
	g__gÀwGëFømebuf„rAâachmítP¨amëîivEXT
;

15718 
GLEW_FUN_EXPORT
 
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëRídîbuf„rP¨amëîivEXT
;

15719 
GLEW_FUN_EXPORT
 
PFNGLISFRAMEBUFFEREXTPROC
 
	g__gÀwIsFømebuf„rEXT
;

15720 
GLEW_FUN_EXPORT
 
PFNGLISRENDERBUFFEREXTPROC
 
	g__gÀwIsRídîbuf„rEXT
;

15721 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEEXTPROC
 
	g__gÀwRídîbuf„rSt‹ageEXT
;

15723 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREEXTPROC
 
	g__gÀwFømebuf„rTextuªEXT
;

15724 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
 
	g__gÀwFømebuf„rTextuªFa˚EXT
;

15725 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERIEXTPROC
 
	g__gÀwProgømP¨amëîiEXT
;

15727 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC
 
	g__gÀwProgømEnvP¨amëîs4fvEXT
;

15728 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
 
	g__gÀwProgømLoˇlP¨amëîs4fvEXT
;

15730 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGDATALOCATIONEXTPROC
 
	g__gÀwBödFøgD©aLoˇti⁄EXT
;

15731 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGDATALOCATIONEXTPROC
 
	g__gÀwGëFøgD©aLoˇti⁄EXT
;

15732 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMUIVEXTPROC
 
	g__gÀwGëUnif‹muivEXT
;

15733 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIIVEXTPROC
 
	g__gÀwGëVîãxAâribIivEXT
;

15734 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIUIVEXTPROC
 
	g__gÀwGëVîãxAâribIuivEXT
;

15735 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIEXTPROC
 
	g__gÀwUnif‹m1uiEXT
;

15736 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIVEXTPROC
 
	g__gÀwUnif‹m1uivEXT
;

15737 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIEXTPROC
 
	g__gÀwUnif‹m2uiEXT
;

15738 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIVEXTPROC
 
	g__gÀwUnif‹m2uivEXT
;

15739 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIEXTPROC
 
	g__gÀwUnif‹m3uiEXT
;

15740 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIVEXTPROC
 
	g__gÀwUnif‹m3uivEXT
;

15741 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIEXTPROC
 
	g__gÀwUnif‹m4uiEXT
;

15742 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIVEXTPROC
 
	g__gÀwUnif‹m4uivEXT
;

15743 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IEXTPROC
 
	g__gÀwVîãxAâribI1iEXT
;

15744 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IVEXTPROC
 
	g__gÀwVîãxAâribI1ivEXT
;

15745 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIEXTPROC
 
	g__gÀwVîãxAâribI1uiEXT
;

15746 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIVEXTPROC
 
	g__gÀwVîãxAâribI1uivEXT
;

15747 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IEXTPROC
 
	g__gÀwVîãxAâribI2iEXT
;

15748 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IVEXTPROC
 
	g__gÀwVîãxAâribI2ivEXT
;

15749 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIEXTPROC
 
	g__gÀwVîãxAâribI2uiEXT
;

15750 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIVEXTPROC
 
	g__gÀwVîãxAâribI2uivEXT
;

15751 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IEXTPROC
 
	g__gÀwVîãxAâribI3iEXT
;

15752 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IVEXTPROC
 
	g__gÀwVîãxAâribI3ivEXT
;

15753 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIEXTPROC
 
	g__gÀwVîãxAâribI3uiEXT
;

15754 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIVEXTPROC
 
	g__gÀwVîãxAâribI3uivEXT
;

15755 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4BVEXTPROC
 
	g__gÀwVîãxAâribI4bvEXT
;

15756 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IEXTPROC
 
	g__gÀwVîãxAâribI4iEXT
;

15757 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IVEXTPROC
 
	g__gÀwVîãxAâribI4ivEXT
;

15758 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4SVEXTPROC
 
	g__gÀwVîãxAâribI4svEXT
;

15759 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UBVEXTPROC
 
	g__gÀwVîãxAâribI4ubvEXT
;

15760 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIEXTPROC
 
	g__gÀwVîãxAâribI4uiEXT
;

15761 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIVEXTPROC
 
	g__gÀwVîãxAâribI4uivEXT
;

15762 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4USVEXTPROC
 
	g__gÀwVîãxAâribI4usvEXT
;

15763 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIPOINTEREXTPROC
 
	g__gÀwVîãxAâribIPoöãrEXT
;

15765 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMEXTPROC
 
	g__gÀwGëHi°ogømEXT
;

15766 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC
 
	g__gÀwGëHi°ogømP¨amëîfvEXT
;

15767 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC
 
	g__gÀwGëHi°ogømP¨amëîivEXT
;

15768 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXEXTPROC
 
	g__gÀwGëMömaxEXT
;

15769 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERFVEXTPROC
 
	g__gÀwGëMömaxP¨amëîfvEXT
;

15770 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERIVEXTPROC
 
	g__gÀwGëMömaxP¨amëîivEXT
;

15771 
GLEW_FUN_EXPORT
 
PFNGLHISTOGRAMEXTPROC
 
	g__gÀwHi°ogømEXT
;

15772 
GLEW_FUN_EXPORT
 
PFNGLMINMAXEXTPROC
 
	g__gÀwMömaxEXT
;

15773 
GLEW_FUN_EXPORT
 
PFNGLRESETHISTOGRAMEXTPROC
 
	g__gÀwRe£tHi°ogømEXT
;

15774 
GLEW_FUN_EXPORT
 
PFNGLRESETMINMAXEXTPROC
 
	g__gÀwRe£tMömaxEXT
;

15776 
GLEW_FUN_EXPORT
 
PFNGLINDEXFUNCEXTPROC
 
	g__gÀwIndexFuncEXT
;

15778 
GLEW_FUN_EXPORT
 
PFNGLINDEXMATERIALEXTPROC
 
	g__gÀwIndexM©îülEXT
;

15780 
GLEW_FUN_EXPORT
 
PFNGLAPPLYTEXTUREEXTPROC
 
	g__gÀwAµlyTextuªEXT
;

15781 
GLEW_FUN_EXPORT
 
PFNGLTEXTURELIGHTEXTPROC
 
	g__gÀwTextuªLightEXT
;

15782 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREMATERIALEXTPROC
 
	g__gÀwTextuªM©îülEXT
;

15784 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSEXTPROC
 
	g__gÀwMu…iDøwAºaysEXT
;

15785 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSEXTPROC
 
	g__gÀwMu…iDøwEÀmítsEXT
;

15787 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKEXTPROC
 
	g__gÀwSam∂eMaskEXT
;

15788 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEPATTERNEXTPROC
 
	g__gÀwSam∂eP©ã∫EXT
;

15790 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEEXTPROC
 
	g__gÀwCﬁ‹TabÀEXT
;

15791 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEEXTPROC
 
	g__gÀwGëCﬁ‹TabÀEXT
;

15792 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîfvEXT
;

15793 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîivEXT
;

15795 
GLEW_FUN_EXPORT
 
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
 
	g__gÀwGëPixñTønsf‹mP¨amëîfvEXT
;

15796 
GLEW_FUN_EXPORT
 
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
 
	g__gÀwGëPixñTønsf‹mP¨amëîivEXT
;

15797 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîfEXT
;

15798 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîfvEXT
;

15799 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîiEXT
;

15800 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîivEXT
;

15802 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFEXTPROC
 
	g__gÀwPoötP¨amëîfEXT
;

15803 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFVEXTPROC
 
	g__gÀwPoötP¨amëîfvEXT
;

15805 
GLEW_FUN_EXPORT
 
PFNGLPOLYGONOFFSETEXTPROC
 
	g__gÀwPﬁyg⁄Off£tEXT
;

15807 
GLEW_FUN_EXPORT
 
PFNGLPROVOKINGVERTEXEXTPROC
 
	g__gÀwProvokögVîãxEXT
;

15809 
GLEW_FUN_EXPORT
 
PFNGLBEGINSCENEEXTPROC
 
	g__gÀwBegöS˚√EXT
;

15810 
GLEW_FUN_EXPORT
 
PFNGLENDSCENEEXTPROC
 
	g__gÀwEndS˚√EXT
;

15812 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3bEXT
;

15813 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3bvEXT
;

15814 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3dEXT
;

15815 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3dvEXT
;

15816 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3fEXT
;

15817 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3fvEXT
;

15818 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3iEXT
;

15819 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ivEXT
;

15820 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3sEXT
;

15821 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3svEXT
;

15822 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ubEXT
;

15823 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ubvEXT
;

15824 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3uiEXT
;

15825 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3uivEXT
;

15826 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3usEXT
;

15827 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3usvEXT
;

15828 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORPOINTEREXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹PoöãrEXT
;

15830 
GLEW_FUN_EXPORT
 
PFNGLACTIVEPROGRAMEXTPROC
 
	g__gÀwA˘iveProgømEXT
;

15831 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADERPROGRAMEXTPROC
 
	g__gÀwCª©eShadîProgømEXT
;

15832 
GLEW_FUN_EXPORT
 
PFNGLUSESHADERPROGRAMEXTPROC
 
	g__gÀwU£ShadîProgømEXT
;

15834 
GLEW_FUN_EXPORT
 
PFNGLBINDIMAGETEXTUREEXTPROC
 
	g__gÀwBödImageTextuªEXT
;

15835 
GLEW_FUN_EXPORT
 
PFNGLMEMORYBARRIEREXTPROC
 
	g__gÀwMem‹yB¨rõrEXT
;

15837 
GLEW_FUN_EXPORT
 
PFNGLACTIVESTENCILFACEEXTPROC
 
	g__gÀwA˘iveSãncûFa˚EXT
;

15839 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE1DEXTPROC
 
	g__gÀwTexSubImage1DEXT
;

15840 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE2DEXTPROC
 
	g__gÀwTexSubImage2DEXT
;

15841 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE3DEXTPROC
 
	g__gÀwTexSubImage3DEXT
;

15843 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DEXTPROC
 
	g__gÀwTexImage3DEXT
;

15845 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
 
	g__gÀwFømebuf„rTextuªLayîEXT
;

15847 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFEREXTPROC
 
	g__gÀwTexBuf„rEXT
;

15849 
GLEW_FUN_EXPORT
 
PFNGLCLEARCOLORIIEXTPROC
 
	g__gÀwCÀ¨Cﬁ‹IiEXT
;

15850 
GLEW_FUN_EXPORT
 
PFNGLCLEARCOLORIUIEXTPROC
 
	g__gÀwCÀ¨Cﬁ‹IuiEXT
;

15851 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIIVEXTPROC
 
	g__gÀwGëTexP¨amëîIivEXT
;

15852 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIUIVEXTPROC
 
	g__gÀwGëTexP¨amëîIuivEXT
;

15853 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIIVEXTPROC
 
	g__gÀwTexP¨amëîIivEXT
;

15854 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIUIVEXTPROC
 
	g__gÀwTexP¨amëîIuivEXT
;

15856 
GLEW_FUN_EXPORT
 
PFNGLARETEXTURESRESIDENTEXTPROC
 
	g__gÀwAªTextuªsResidítEXT
;

15857 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXTUREEXTPROC
 
	g__gÀwBödTextuªEXT
;

15858 
GLEW_FUN_EXPORT
 
PFNGLDELETETEXTURESEXTPROC
 
	g__gÀwDñëeTextuªsEXT
;

15859 
GLEW_FUN_EXPORT
 
PFNGLGENTEXTURESEXTPROC
 
	g__gÀwGíTextuªsEXT
;

15860 
GLEW_FUN_EXPORT
 
PFNGLISTEXTUREEXTPROC
 
	g__gÀwIsTextuªEXT
;

15861 
GLEW_FUN_EXPORT
 
PFNGLPRIORITIZETEXTURESEXTPROC
 
	g__gÀwPri‹ôizeTextuªsEXT
;

15863 
GLEW_FUN_EXPORT
 
PFNGLTEXTURENORMALEXTPROC
 
	g__gÀwTextuªN‹mÆEXT
;

15865 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTI64VEXTPROC
 
	g__gÀwGëQuîyObje˘i64vEXT
;

15866 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUI64VEXTPROC
 
	g__gÀwGëQuîyObje˘ui64vEXT
;

15868 
GLEW_FUN_EXPORT
 
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC
 
	g__gÀwBegöTønsf‹mFìdbackEXT
;

15869 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERBASEEXTPROC
 
	g__gÀwBödBuf„rBa£EXT
;

15870 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFEROFFSETEXTPROC
 
	g__gÀwBödBuf„rOff£tEXT
;

15871 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERRANGEEXTPROC
 
	g__gÀwBödBuf„rR™geEXT
;

15872 
GLEW_FUN_EXPORT
 
PFNGLENDTRANSFORMFEEDBACKEXTPROC
 
	g__gÀwEndTønsf‹mFìdbackEXT
;

15873 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
 
	g__gÀwGëTønsf‹mFìdbackV¨yögEXT
;

15874 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
 
	g__gÀwTønsf‹mFìdbackV¨yögsEXT
;

15876 
GLEW_FUN_EXPORT
 
PFNGLARRAYELEMENTEXTPROC
 
	g__gÀwAºayEÀmítEXT
;

15877 
GLEW_FUN_EXPORT
 
PFNGLCOLORPOINTEREXTPROC
 
	g__gÀwCﬁ‹PoöãrEXT
;

15878 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSEXTPROC
 
	g__gÀwDøwAºaysEXT
;

15879 
GLEW_FUN_EXPORT
 
PFNGLEDGEFLAGPOINTEREXTPROC
 
	g__gÀwEdgeFœgPoöãrEXT
;

15880 
GLEW_FUN_EXPORT
 
PFNGLINDEXPOINTEREXTPROC
 
	g__gÀwIndexPoöãrEXT
;

15881 
GLEW_FUN_EXPORT
 
PFNGLNORMALPOINTEREXTPROC
 
	g__gÀwN‹mÆPoöãrEXT
;

15882 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDPOINTEREXTPROC
 
	g__gÀwTexCo‹dPoöãrEXT
;

15883 
GLEW_FUN_EXPORT
 
PFNGLVERTEXPOINTEREXTPROC
 
	g__gÀwVîãxPoöãrEXT
;

15885 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLDVEXTPROC
 
	g__gÀwGëVîãxAâribLdvEXT
;

15886 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxAâribLOff£tEXT
;

15887 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DEXTPROC
 
	g__gÀwVîãxAâribL1dEXT
;

15888 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DVEXTPROC
 
	g__gÀwVîãxAâribL1dvEXT
;

15889 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DEXTPROC
 
	g__gÀwVîãxAâribL2dEXT
;

15890 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DVEXTPROC
 
	g__gÀwVîãxAâribL2dvEXT
;

15891 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DEXTPROC
 
	g__gÀwVîãxAâribL3dEXT
;

15892 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DVEXTPROC
 
	g__gÀwVîãxAâribL3dvEXT
;

15893 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DEXTPROC
 
	g__gÀwVîãxAâribL4dEXT
;

15894 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DVEXTPROC
 
	g__gÀwVîãxAâribL4dvEXT
;

15895 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLPOINTEREXTPROC
 
	g__gÀwVîãxAâribLPoöãrEXT
;

15897 
GLEW_FUN_EXPORT
 
PFNGLBEGINVERTEXSHADEREXTPROC
 
	g__gÀwBegöVîãxShadîEXT
;

15898 
GLEW_FUN_EXPORT
 
PFNGLBINDLIGHTPARAMETEREXTPROC
 
	g__gÀwBödLightP¨amëîEXT
;

15899 
GLEW_FUN_EXPORT
 
PFNGLBINDMATERIALPARAMETEREXTPROC
 
	g__gÀwBödM©îülP¨amëîEXT
;

15900 
GLEW_FUN_EXPORT
 
PFNGLBINDPARAMETEREXTPROC
 
	g__gÀwBödP¨amëîEXT
;

15901 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXGENPARAMETEREXTPROC
 
	g__gÀwBödTexGíP¨amëîEXT
;

15902 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC
 
	g__gÀwBödTextuªUnôP¨amëîEXT
;

15903 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXSHADEREXTPROC
 
	g__gÀwBödVîãxShadîEXT
;

15904 
GLEW_FUN_EXPORT
 
PFNGLDELETEVERTEXSHADEREXTPROC
 
	g__gÀwDñëeVîãxShadîEXT
;

15905 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
 
	g__gÀwDißbÀV¨ü¡Clõ¡SèãEXT
;

15906 
GLEW_FUN_EXPORT
 
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC
 
	g__gÀwE«bÀV¨ü¡Clõ¡SèãEXT
;

15907 
GLEW_FUN_EXPORT
 
PFNGLENDVERTEXSHADEREXTPROC
 
	g__gÀwEndVîãxShadîEXT
;

15908 
GLEW_FUN_EXPORT
 
PFNGLEXTRACTCOMPONENTEXTPROC
 
	g__gÀwExåa˘Comp⁄ítEXT
;

15909 
GLEW_FUN_EXPORT
 
PFNGLGENSYMBOLSEXTPROC
 
	g__gÀwGíSymbﬁsEXT
;

15910 
GLEW_FUN_EXPORT
 
PFNGLGENVERTEXSHADERSEXTPROC
 
	g__gÀwGíVîãxShadîsEXT
;

15911 
GLEW_FUN_EXPORT
 
PFNGLGETINVARIANTBOOLEANVEXTPROC
 
	g__gÀwGëInv¨ü¡BoﬁónvEXT
;

15912 
GLEW_FUN_EXPORT
 
PFNGLGETINVARIANTFLOATVEXTPROC
 
	g__gÀwGëInv¨ü¡FlﬂtvEXT
;

15913 
GLEW_FUN_EXPORT
 
PFNGLGETINVARIANTINTEGERVEXTPROC
 
	g__gÀwGëInv¨ü¡I¡egîvEXT
;

15914 
GLEW_FUN_EXPORT
 
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
 
	g__gÀwGëLoˇlC⁄°™tBoﬁónvEXT
;

15915 
GLEW_FUN_EXPORT
 
PFNGLGETLOCALCONSTANTFLOATVEXTPROC
 
	g__gÀwGëLoˇlC⁄°™tFlﬂtvEXT
;

15916 
GLEW_FUN_EXPORT
 
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC
 
	g__gÀwGëLoˇlC⁄°™tI¡egîvEXT
;

15917 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTBOOLEANVEXTPROC
 
	g__gÀwGëV¨ü¡BoﬁónvEXT
;

15918 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTFLOATVEXTPROC
 
	g__gÀwGëV¨ü¡FlﬂtvEXT
;

15919 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTINTEGERVEXTPROC
 
	g__gÀwGëV¨ü¡I¡egîvEXT
;

15920 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTPOINTERVEXTPROC
 
	g__gÀwGëV¨ü¡PoöãrvEXT
;

15921 
GLEW_FUN_EXPORT
 
PFNGLINSERTCOMPONENTEXTPROC
 
	g__gÀwIn£πComp⁄ítEXT
;

15922 
GLEW_FUN_EXPORT
 
PFNGLISVARIANTENABLEDEXTPROC
 
	g__gÀwIsV¨ü¡E«bÀdEXT
;

15923 
GLEW_FUN_EXPORT
 
PFNGLSETINVARIANTEXTPROC
 
	g__gÀwSëInv¨ü¡EXT
;

15924 
GLEW_FUN_EXPORT
 
PFNGLSETLOCALCONSTANTEXTPROC
 
	g__gÀwSëLoˇlC⁄°™tEXT
;

15925 
GLEW_FUN_EXPORT
 
PFNGLSHADEROP1EXTPROC
 
	g__gÀwShadîOp1EXT
;

15926 
GLEW_FUN_EXPORT
 
PFNGLSHADEROP2EXTPROC
 
	g__gÀwShadîOp2EXT
;

15927 
GLEW_FUN_EXPORT
 
PFNGLSHADEROP3EXTPROC
 
	g__gÀwShadîOp3EXT
;

15928 
GLEW_FUN_EXPORT
 
PFNGLSWIZZLEEXTPROC
 
	g__gÀwSwizzÀEXT
;

15929 
GLEW_FUN_EXPORT
 
PFNGLVARIANTPOINTEREXTPROC
 
	g__gÀwV¨ü¡PoöãrEXT
;

15930 
GLEW_FUN_EXPORT
 
PFNGLVARIANTBVEXTPROC
 
	g__gÀwV¨ü¡bvEXT
;

15931 
GLEW_FUN_EXPORT
 
PFNGLVARIANTDVEXTPROC
 
	g__gÀwV¨ü¡dvEXT
;

15932 
GLEW_FUN_EXPORT
 
PFNGLVARIANTFVEXTPROC
 
	g__gÀwV¨ü¡fvEXT
;

15933 
GLEW_FUN_EXPORT
 
PFNGLVARIANTIVEXTPROC
 
	g__gÀwV¨ü¡ivEXT
;

15934 
GLEW_FUN_EXPORT
 
PFNGLVARIANTSVEXTPROC
 
	g__gÀwV¨ü¡svEXT
;

15935 
GLEW_FUN_EXPORT
 
PFNGLVARIANTUBVEXTPROC
 
	g__gÀwV¨ü¡ubvEXT
;

15936 
GLEW_FUN_EXPORT
 
PFNGLVARIANTUIVEXTPROC
 
	g__gÀwV¨ü¡uivEXT
;

15937 
GLEW_FUN_EXPORT
 
PFNGLVARIANTUSVEXTPROC
 
	g__gÀwV¨ü¡usvEXT
;

15938 
GLEW_FUN_EXPORT
 
PFNGLWRITEMASKEXTPROC
 
	g__gÀwWrôeMaskEXT
;

15940 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTPOINTEREXTPROC
 
	g__gÀwVîãxWeightPoöãrEXT
;

15941 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTFEXTPROC
 
	g__gÀwVîãxWeightfEXT
;

15942 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTFVEXTPROC
 
	g__gÀwVîãxWeightfvEXT
;

15944 
GLEW_FUN_EXPORT
 
PFNGLIMPORTSYNCEXTPROC
 
	g__gÀwImp‹tSyncEXT
;

15946 
GLEW_FUN_EXPORT
 
PFNGLFRAMETERMINATORGREMEDYPROC
 
	g__gÀwFømeTîmö©‹GREMEDY
;

15948 
GLEW_FUN_EXPORT
 
PFNGLSTRINGMARKERGREMEDYPROC
 
	g__gÀwSåögM¨kîGREMEDY
;

15950 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
 
	g__gÀwGëImageTønsf‹mP¨amëîfvHP
;

15951 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
 
	g__gÀwGëImageTønsf‹mP¨amëîivHP
;

15952 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERFHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîfHP
;

15953 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîfvHP
;

15954 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERIHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîiHP
;

15955 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîivHP
;

15957 
GLEW_FUN_EXPORT
 
PFNGLMULTIMODEDRAWARRAYSIBMPROC
 
	g__gÀwMu…iModeDøwAºaysIBM
;

15958 
GLEW_FUN_EXPORT
 
PFNGLMULTIMODEDRAWELEMENTSIBMPROC
 
	g__gÀwMu…iModeDøwEÀmítsIBM
;

15960 
GLEW_FUN_EXPORT
 
PFNGLCOLORPOINTERLISTIBMPROC
 
	g__gÀwCﬁ‹PoöãrLi°IBM
;

15961 
GLEW_FUN_EXPORT
 
PFNGLEDGEFLAGPOINTERLISTIBMPROC
 
	g__gÀwEdgeFœgPoöãrLi°IBM
;

15962 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDPOINTERLISTIBMPROC
 
	g__gÀwFogCo‹dPoöãrLi°IBM
;

15963 
GLEW_FUN_EXPORT
 
PFNGLINDEXPOINTERLISTIBMPROC
 
	g__gÀwIndexPoöãrLi°IBM
;

15964 
GLEW_FUN_EXPORT
 
PFNGLNORMALPOINTERLISTIBMPROC
 
	g__gÀwN‹mÆPoöãrLi°IBM
;

15965 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC
 
	g__gÀwSec⁄d¨yCﬁ‹PoöãrLi°IBM
;

15966 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDPOINTERLISTIBMPROC
 
	g__gÀwTexCo‹dPoöãrLi°IBM
;

15967 
GLEW_FUN_EXPORT
 
PFNGLVERTEXPOINTERLISTIBMPROC
 
	g__gÀwVîãxPoöãrLi°IBM
;

15969 
GLEW_FUN_EXPORT
 
PFNGLCOLORPOINTERVINTELPROC
 
	g__gÀwCﬁ‹PoöãrvINTEL
;

15970 
GLEW_FUN_EXPORT
 
PFNGLNORMALPOINTERVINTELPROC
 
	g__gÀwN‹mÆPoöãrvINTEL
;

15971 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDPOINTERVINTELPROC
 
	g__gÀwTexCo‹dPoöãrvINTEL
;

15972 
GLEW_FUN_EXPORT
 
PFNGLVERTEXPOINTERVINTELPROC
 
	g__gÀwVîãxPoöãrvINTEL
;

15974 
GLEW_FUN_EXPORT
 
PFNGLTEXSCISSORFUNCINTELPROC
 
	g__gÀwTexSciss‹FuncINTEL
;

15975 
GLEW_FUN_EXPORT
 
PFNGLTEXSCISSORINTELPROC
 
	g__gÀwTexSciss‹INTEL
;

15977 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECALLBACKPROC
 
	g__gÀwDebugMesßgeCÆlback
;

15978 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECONTROLPROC
 
	g__gÀwDebugMesßgeC⁄åﬁ
;

15979 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEINSERTPROC
 
	g__gÀwDebugMesßgeIn£π
;

15980 
GLEW_FUN_EXPORT
 
PFNGLGETDEBUGMESSAGELOGPROC
 
	g__gÀwGëDebugMesßgeLog
;

15981 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTLABELPROC
 
	g__gÀwGëObje˘Labñ
;

15982 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPTRLABELPROC
 
	g__gÀwGëObje˘PåLabñ
;

15983 
GLEW_FUN_EXPORT
 
PFNGLGETPOINTERVPROC
 
	g__gÀwGëPoöãrv
;

15984 
GLEW_FUN_EXPORT
 
PFNGLOBJECTLABELPROC
 
	g__gÀwObje˘Labñ
;

15985 
GLEW_FUN_EXPORT
 
PFNGLOBJECTPTRLABELPROC
 
	g__gÀwObje˘PåLabñ
;

15986 
GLEW_FUN_EXPORT
 
PFNGLPUSHDEBUGGROUPPROC
 
	g__gÀwPushDebugGroup
;

15988 
GLEW_FUN_EXPORT
 
PFNGLBUFFERREGIONENABLEDPROC
 
	g__gÀwBuf„rRegi⁄E«bÀd
;

15989 
GLEW_FUN_EXPORT
 
PFNGLDELETEBUFFERREGIONPROC
 
	g__gÀwDñëeBuf„rRegi⁄
;

15990 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERREGIONPROC
 
	g__gÀwDøwBuf„rRegi⁄
;

15991 
GLEW_FUN_EXPORT
 
PFNGLNEWBUFFERREGIONPROC
 
	g__gÀwNewBuf„rRegi⁄
;

15992 
GLEW_FUN_EXPORT
 
PFNGLREADBUFFERREGIONPROC
 
	g__gÀwRódBuf„rRegi⁄
;

15994 
GLEW_FUN_EXPORT
 
PFNGLRESIZEBUFFERSMESAPROC
 
	g__gÀwResizeBuf„rsMESA
;

15996 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DMESAPROC
 
	g__gÀwWödowPos2dMESA
;

15997 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DVMESAPROC
 
	g__gÀwWödowPos2dvMESA
;

15998 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FMESAPROC
 
	g__gÀwWödowPos2fMESA
;

15999 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FVMESAPROC
 
	g__gÀwWödowPos2fvMESA
;

16000 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IMESAPROC
 
	g__gÀwWödowPos2iMESA
;

16001 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IVMESAPROC
 
	g__gÀwWödowPos2ivMESA
;

16002 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SMESAPROC
 
	g__gÀwWödowPos2sMESA
;

16003 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SVMESAPROC
 
	g__gÀwWödowPos2svMESA
;

16004 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DMESAPROC
 
	g__gÀwWödowPos3dMESA
;

16005 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DVMESAPROC
 
	g__gÀwWödowPos3dvMESA
;

16006 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FMESAPROC
 
	g__gÀwWödowPos3fMESA
;

16007 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FVMESAPROC
 
	g__gÀwWödowPos3fvMESA
;

16008 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IMESAPROC
 
	g__gÀwWödowPos3iMESA
;

16009 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IVMESAPROC
 
	g__gÀwWödowPos3ivMESA
;

16010 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SMESAPROC
 
	g__gÀwWödowPos3sMESA
;

16011 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SVMESAPROC
 
	g__gÀwWödowPos3svMESA
;

16012 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4DMESAPROC
 
	g__gÀwWödowPos4dMESA
;

16013 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4DVMESAPROC
 
	g__gÀwWödowPos4dvMESA
;

16014 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4FMESAPROC
 
	g__gÀwWödowPos4fMESA
;

16015 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4FVMESAPROC
 
	g__gÀwWödowPos4fvMESA
;

16016 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4IMESAPROC
 
	g__gÀwWödowPos4iMESA
;

16017 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4IVMESAPROC
 
	g__gÀwWödowPos4ivMESA
;

16018 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4SMESAPROC
 
	g__gÀwWödowPos4sMESA
;

16019 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4SVMESAPROC
 
	g__gÀwWödowPos4svMESA
;

16021 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGEHANDLENVPROC
 
	g__gÀwGëImageH™dÀNV
;

16022 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREHANDLENVPROC
 
	g__gÀwGëTextuªH™dÀNV
;

16023 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURESAMPLERHANDLENVPROC
 
	g__gÀwGëTextuªSam∂îH™dÀNV
;

16024 
GLEW_FUN_EXPORT
 
PFNGLISIMAGEHANDLERESIDENTNVPROC
 
	g__gÀwIsImageH™dÀResidítNV
;

16025 
GLEW_FUN_EXPORT
 
PFNGLISTEXTUREHANDLERESIDENTNVPROC
 
	g__gÀwIsTextuªH™dÀResidítNV
;

16026 
GLEW_FUN_EXPORT
 
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
 
	g__gÀwMakeImageH™dÀN⁄ResidítNV
;

16027 
GLEW_FUN_EXPORT
 
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC
 
	g__gÀwMakeImageH™dÀResidítNV
;

16028 
GLEW_FUN_EXPORT
 
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
 
	g__gÀwMakeTextuªH™dÀN⁄ResidítNV
;

16029 
GLEW_FUN_EXPORT
 
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC
 
	g__gÀwMakeTextuªH™dÀResidítNV
;

16030 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
 
	g__gÀwProgømUnif‹mH™dÀui64NV
;

16031 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
 
	g__gÀwProgømUnif‹mH™dÀui64vNV
;

16032 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMHANDLEUI64NVPROC
 
	g__gÀwUnif‹mH™dÀui64NV
;

16033 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMHANDLEUI64VNVPROC
 
	g__gÀwUnif‹mH™dÀui64vNV
;

16035 
GLEW_FUN_EXPORT
 
PFNGLBEGINCONDITIONALRENDERNVPROC
 
	g__gÀwBegöC⁄dôi⁄ÆRídîNV
;

16036 
GLEW_FUN_EXPORT
 
PFNGLENDCONDITIONALRENDERNVPROC
 
	g__gÀwEndC⁄dôi⁄ÆRídîNV
;

16038 
GLEW_FUN_EXPORT
 
PFNGLCOPYIMAGESUBDATANVPROC
 
	g__gÀwC›yImageSubD©aNV
;

16040 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHDNVPROC
 
	g__gÀwCÀ¨DïthdNV
;

16041 
GLEW_FUN_EXPORT
 
PFNGLDEPTHBOUNDSDNVPROC
 
	g__gÀwDïthBoundsdNV
;

16042 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEDNVPROC
 
	g__gÀwDïthR™gedNV
;

16044 
GLEW_FUN_EXPORT
 
PFNGLEVALMAPSNVPROC
 
	g__gÀwEvÆM≠sNV
;

16045 
GLEW_FUN_EXPORT
 
PFNGLGETMAPATTRIBPARAMETERFVNVPROC
 
	g__gÀwGëM≠AâribP¨amëîfvNV
;

16046 
GLEW_FUN_EXPORT
 
PFNGLGETMAPATTRIBPARAMETERIVNVPROC
 
	g__gÀwGëM≠AâribP¨amëîivNV
;

16047 
GLEW_FUN_EXPORT
 
PFNGLGETMAPCONTROLPOINTSNVPROC
 
	g__gÀwGëM≠C⁄åﬁPoötsNV
;

16048 
GLEW_FUN_EXPORT
 
PFNGLGETMAPPARAMETERFVNVPROC
 
	g__gÀwGëM≠P¨amëîfvNV
;

16049 
GLEW_FUN_EXPORT
 
PFNGLGETMAPPARAMETERIVNVPROC
 
	g__gÀwGëM≠P¨amëîivNV
;

16050 
GLEW_FUN_EXPORT
 
PFNGLMAPCONTROLPOINTSNVPROC
 
	g__gÀwM≠C⁄åﬁPoötsNV
;

16051 
GLEW_FUN_EXPORT
 
PFNGLMAPPARAMETERFVNVPROC
 
	g__gÀwM≠P¨amëîfvNV
;

16052 
GLEW_FUN_EXPORT
 
PFNGLMAPPARAMETERIVNVPROC
 
	g__gÀwM≠P¨amëîivNV
;

16054 
GLEW_FUN_EXPORT
 
PFNGLGETMULTISAMPLEFVNVPROC
 
	g__gÀwGëMu…ißm∂efvNV
;

16055 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKINDEXEDNVPROC
 
	g__gÀwSam∂eMaskIndexedNV
;

16056 
GLEW_FUN_EXPORT
 
PFNGLTEXRENDERBUFFERNVPROC
 
	g__gÀwTexRídîbuf„rNV
;

16058 
GLEW_FUN_EXPORT
 
PFNGLDELETEFENCESNVPROC
 
	g__gÀwDñëeFí˚sNV
;

16059 
GLEW_FUN_EXPORT
 
PFNGLFINISHFENCENVPROC
 
	g__gÀwFöishFí˚NV
;

16060 
GLEW_FUN_EXPORT
 
PFNGLGENFENCESNVPROC
 
	g__gÀwGíFí˚sNV
;

16061 
GLEW_FUN_EXPORT
 
PFNGLGETFENCEIVNVPROC
 
	g__gÀwGëFí˚ivNV
;

16062 
GLEW_FUN_EXPORT
 
PFNGLISFENCENVPROC
 
	g__gÀwIsFí˚NV
;

16063 
GLEW_FUN_EXPORT
 
PFNGLSETFENCENVPROC
 
	g__gÀwSëFí˚NV
;

16064 
GLEW_FUN_EXPORT
 
PFNGLTESTFENCENVPROC
 
	g__gÀwTe°Fí˚NV
;

16066 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
 
	g__gÀwGëProgømNamedP¨amëîdvNV
;

16067 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
 
	g__gÀwGëProgømNamedP¨amëîfvNV
;

16068 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC
 
	g__gÀwProgømNamedP¨amëî4dNV
;

16069 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
 
	g__gÀwProgømNamedP¨amëî4dvNV
;

16070 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC
 
	g__gÀwProgømNamedP¨amëî4fNV
;

16071 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
 
	g__gÀwProgømNamedP¨amëî4fvNV
;

16073 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
;

16075 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMVERTEXLIMITNVPROC
 
	g__gÀwProgømVîãxLimôNV
;

16077 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4INVPROC
 
	g__gÀwProgømEnvP¨amëîI4iNV
;

16078 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4IVNVPROC
 
	g__gÀwProgømEnvP¨amëîI4ivNV
;

16079 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4UINVPROC
 
	g__gÀwProgømEnvP¨amëîI4uiNV
;

16080 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC
 
	g__gÀwProgømEnvP¨amëîI4uivNV
;

16081 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC
 
	g__gÀwProgømEnvP¨amëîsI4ivNV
;

16082 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
 
	g__gÀwProgømEnvP¨amëîsI4uivNV
;

16083 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4INVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4iNV
;

16084 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4ivNV
;

16085 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4uiNV
;

16086 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4uivNV
;

16087 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîsI4ivNV
;

16088 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîsI4uivNV
;

16090 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMI64VNVPROC
 
	g__gÀwGëUnif‹mi64vNV
;

16091 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMUI64VNVPROC
 
	g__gÀwGëUnif‹mui64vNV
;

16092 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1I64NVPROC
 
	g__gÀwProgømUnif‹m1i64NV
;

16093 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1I64VNVPROC
 
	g__gÀwProgømUnif‹m1i64vNV
;

16094 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UI64NVPROC
 
	g__gÀwProgømUnif‹m1ui64NV
;

16095 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UI64VNVPROC
 
	g__gÀwProgømUnif‹m1ui64vNV
;

16096 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2I64NVPROC
 
	g__gÀwProgømUnif‹m2i64NV
;

16097 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2I64VNVPROC
 
	g__gÀwProgømUnif‹m2i64vNV
;

16098 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UI64NVPROC
 
	g__gÀwProgømUnif‹m2ui64NV
;

16099 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UI64VNVPROC
 
	g__gÀwProgømUnif‹m2ui64vNV
;

16100 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3I64NVPROC
 
	g__gÀwProgømUnif‹m3i64NV
;

16101 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3I64VNVPROC
 
	g__gÀwProgømUnif‹m3i64vNV
;

16102 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UI64NVPROC
 
	g__gÀwProgømUnif‹m3ui64NV
;

16103 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UI64VNVPROC
 
	g__gÀwProgømUnif‹m3ui64vNV
;

16104 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4I64NVPROC
 
	g__gÀwProgømUnif‹m4i64NV
;

16105 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4I64VNVPROC
 
	g__gÀwProgømUnif‹m4i64vNV
;

16106 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UI64NVPROC
 
	g__gÀwProgømUnif‹m4ui64NV
;

16107 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UI64VNVPROC
 
	g__gÀwProgømUnif‹m4ui64vNV
;

16108 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1I64NVPROC
 
	g__gÀwUnif‹m1i64NV
;

16109 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1I64VNVPROC
 
	g__gÀwUnif‹m1i64vNV
;

16110 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UI64NVPROC
 
	g__gÀwUnif‹m1ui64NV
;

16111 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UI64VNVPROC
 
	g__gÀwUnif‹m1ui64vNV
;

16112 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2I64NVPROC
 
	g__gÀwUnif‹m2i64NV
;

16113 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2I64VNVPROC
 
	g__gÀwUnif‹m2i64vNV
;

16114 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UI64NVPROC
 
	g__gÀwUnif‹m2ui64NV
;

16115 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UI64VNVPROC
 
	g__gÀwUnif‹m2ui64vNV
;

16116 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3I64NVPROC
 
	g__gÀwUnif‹m3i64NV
;

16117 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3I64VNVPROC
 
	g__gÀwUnif‹m3i64vNV
;

16118 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UI64NVPROC
 
	g__gÀwUnif‹m3ui64NV
;

16119 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UI64VNVPROC
 
	g__gÀwUnif‹m3ui64vNV
;

16120 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4I64NVPROC
 
	g__gÀwUnif‹m4i64NV
;

16121 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4I64VNVPROC
 
	g__gÀwUnif‹m4i64vNV
;

16122 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UI64NVPROC
 
	g__gÀwUnif‹m4ui64NV
;

16123 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UI64VNVPROC
 
	g__gÀwUnif‹m4ui64vNV
;

16125 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3HNVPROC
 
	g__gÀwCﬁ‹3hNV
;

16126 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3HVNVPROC
 
	g__gÀwCﬁ‹3hvNV
;

16127 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4HNVPROC
 
	g__gÀwCﬁ‹4hNV
;

16128 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4HVNVPROC
 
	g__gÀwCﬁ‹4hvNV
;

16129 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDHNVPROC
 
	g__gÀwFogCo‹dhNV
;

16130 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDHVNVPROC
 
	g__gÀwFogCo‹dhvNV
;

16131 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1HNVPROC
 
	g__gÀwMu…iTexCo‹d1hNV
;

16132 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1HVNVPROC
 
	g__gÀwMu…iTexCo‹d1hvNV
;

16133 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2HNVPROC
 
	g__gÀwMu…iTexCo‹d2hNV
;

16134 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2HVNVPROC
 
	g__gÀwMu…iTexCo‹d2hvNV
;

16135 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3HNVPROC
 
	g__gÀwMu…iTexCo‹d3hNV
;

16136 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3HVNVPROC
 
	g__gÀwMu…iTexCo‹d3hvNV
;

16137 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4HNVPROC
 
	g__gÀwMu…iTexCo‹d4hNV
;

16138 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4HVNVPROC
 
	g__gÀwMu…iTexCo‹d4hvNV
;

16139 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3HNVPROC
 
	g__gÀwN‹mÆ3hNV
;

16140 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3HVNVPROC
 
	g__gÀwN‹mÆ3hvNV
;

16141 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3HNVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3hNV
;

16142 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3HVNVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3hvNV
;

16143 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD1HNVPROC
 
	g__gÀwTexCo‹d1hNV
;

16144 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD1HVNVPROC
 
	g__gÀwTexCo‹d1hvNV
;

16145 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2HNVPROC
 
	g__gÀwTexCo‹d2hNV
;

16146 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2HVNVPROC
 
	g__gÀwTexCo‹d2hvNV
;

16147 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD3HNVPROC
 
	g__gÀwTexCo‹d3hNV
;

16148 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD3HVNVPROC
 
	g__gÀwTexCo‹d3hvNV
;

16149 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4HNVPROC
 
	g__gÀwTexCo‹d4hNV
;

16150 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4HVNVPROC
 
	g__gÀwTexCo‹d4hvNV
;

16151 
GLEW_FUN_EXPORT
 
PFNGLVERTEX2HNVPROC
 
	g__gÀwVîãx2hNV
;

16152 
GLEW_FUN_EXPORT
 
PFNGLVERTEX2HVNVPROC
 
	g__gÀwVîãx2hvNV
;

16153 
GLEW_FUN_EXPORT
 
PFNGLVERTEX3HNVPROC
 
	g__gÀwVîãx3hNV
;

16154 
GLEW_FUN_EXPORT
 
PFNGLVERTEX3HVNVPROC
 
	g__gÀwVîãx3hvNV
;

16155 
GLEW_FUN_EXPORT
 
PFNGLVERTEX4HNVPROC
 
	g__gÀwVîãx4hNV
;

16156 
GLEW_FUN_EXPORT
 
PFNGLVERTEX4HVNVPROC
 
	g__gÀwVîãx4hvNV
;

16157 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1HNVPROC
 
	g__gÀwVîãxAârib1hNV
;

16158 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1HVNVPROC
 
	g__gÀwVîãxAârib1hvNV
;

16159 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2HNVPROC
 
	g__gÀwVîãxAârib2hNV
;

16160 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2HVNVPROC
 
	g__gÀwVîãxAârib2hvNV
;

16161 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3HNVPROC
 
	g__gÀwVîãxAârib3hNV
;

16162 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3HVNVPROC
 
	g__gÀwVîãxAârib3hvNV
;

16163 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4HNVPROC
 
	g__gÀwVîãxAârib4hNV
;

16164 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4HVNVPROC
 
	g__gÀwVîãxAârib4hvNV
;

16165 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1HVNVPROC
 
	g__gÀwVîãxAâribs1hvNV
;

16166 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2HVNVPROC
 
	g__gÀwVîãxAâribs2hvNV
;

16167 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3HVNVPROC
 
	g__gÀwVîãxAâribs3hvNV
;

16168 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4HVNVPROC
 
	g__gÀwVîãxAâribs4hvNV
;

16169 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTHNVPROC
 
	g__gÀwVîãxWeighthNV
;

16170 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTHVNVPROC
 
	g__gÀwVîãxWeighthvNV
;

16172 
GLEW_FUN_EXPORT
 
PFNGLBEGINOCCLUSIONQUERYNVPROC
 
	g__gÀwBegöOc˛usi⁄QuîyNV
;

16173 
GLEW_FUN_EXPORT
 
PFNGLDELETEOCCLUSIONQUERIESNVPROC
 
	g__gÀwDñëeOc˛usi⁄QuîõsNV
;

16174 
GLEW_FUN_EXPORT
 
PFNGLENDOCCLUSIONQUERYNVPROC
 
	g__gÀwEndOc˛usi⁄QuîyNV
;

16175 
GLEW_FUN_EXPORT
 
PFNGLGENOCCLUSIONQUERIESNVPROC
 
	g__gÀwGíOc˛usi⁄QuîõsNV
;

16176 
GLEW_FUN_EXPORT
 
PFNGLGETOCCLUSIONQUERYIVNVPROC
 
	g__gÀwGëOc˛usi⁄QuîyivNV
;

16177 
GLEW_FUN_EXPORT
 
PFNGLGETOCCLUSIONQUERYUIVNVPROC
 
	g__gÀwGëOc˛usi⁄QuîyuivNV
;

16178 
GLEW_FUN_EXPORT
 
PFNGLISOCCLUSIONQUERYNVPROC
 
	g__gÀwIsOc˛usi⁄QuîyNV
;

16180 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
 
	g__gÀwProgømBuf„rP¨amëîsIivNV
;

16181 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
 
	g__gÀwProgømBuf„rP¨amëîsIuivNV
;

16182 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
 
	g__gÀwProgømBuf„rP¨amëîsfvNV
;

16184 
GLEW_FUN_EXPORT
 
PFNGLCOPYPATHNVPROC
 
	g__gÀwC›yP©hNV
;

16185 
GLEW_FUN_EXPORT
 
PFNGLCOVERFILLPATHINSTANCEDNVPROC
 
	g__gÀwCovîFûlP©hIn°™˚dNV
;

16186 
GLEW_FUN_EXPORT
 
PFNGLCOVERFILLPATHNVPROC
 
	g__gÀwCovîFûlP©hNV
;

16187 
GLEW_FUN_EXPORT
 
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC
 
	g__gÀwCovîSåokeP©hIn°™˚dNV
;

16188 
GLEW_FUN_EXPORT
 
PFNGLCOVERSTROKEPATHNVPROC
 
	g__gÀwCovîSåokeP©hNV
;

16189 
GLEW_FUN_EXPORT
 
PFNGLDELETEPATHSNVPROC
 
	g__gÀwDñëeP©hsNV
;

16190 
GLEW_FUN_EXPORT
 
PFNGLGENPATHSNVPROC
 
	g__gÀwGíP©hsNV
;

16191 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOLORGENFVNVPROC
 
	g__gÀwGëP©hCﬁ‹GífvNV
;

16192 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOLORGENIVNVPROC
 
	g__gÀwGëP©hCﬁ‹GíivNV
;

16193 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOMMANDSNVPROC
 
	g__gÀwGëP©hComm™dsNV
;

16194 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOORDSNVPROC
 
	g__gÀwGëP©hCo‹dsNV
;

16195 
GLEW_FUN_EXPORT
 
PFNGLGETPATHDASHARRAYNVPROC
 
	g__gÀwGëP©hDashAºayNV
;

16196 
GLEW_FUN_EXPORT
 
PFNGLGETPATHLENGTHNVPROC
 
	g__gÀwGëP©hLígthNV
;

16197 
GLEW_FUN_EXPORT
 
PFNGLGETPATHMETRICRANGENVPROC
 
	g__gÀwGëP©hMëricR™geNV
;

16198 
GLEW_FUN_EXPORT
 
PFNGLGETPATHMETRICSNVPROC
 
	g__gÀwGëP©hMëricsNV
;

16199 
GLEW_FUN_EXPORT
 
PFNGLGETPATHPARAMETERFVNVPROC
 
	g__gÀwGëP©hP¨amëîfvNV
;

16200 
GLEW_FUN_EXPORT
 
PFNGLGETPATHPARAMETERIVNVPROC
 
	g__gÀwGëP©hP¨amëîivNV
;

16201 
GLEW_FUN_EXPORT
 
PFNGLGETPATHSPACINGNVPROC
 
	g__gÀwGëP©hS∑cögNV
;

16202 
GLEW_FUN_EXPORT
 
PFNGLGETPATHTEXGENFVNVPROC
 
	g__gÀwGëP©hTexGífvNV
;

16203 
GLEW_FUN_EXPORT
 
PFNGLGETPATHTEXGENIVNVPROC
 
	g__gÀwGëP©hTexGíivNV
;

16204 
GLEW_FUN_EXPORT
 
PFNGLINTERPOLATEPATHSNVPROC
 
	g__gÀwI¡îpﬁ©eP©hsNV
;

16205 
GLEW_FUN_EXPORT
 
PFNGLISPATHNVPROC
 
	g__gÀwIsP©hNV
;

16206 
GLEW_FUN_EXPORT
 
PFNGLISPOINTINFILLPATHNVPROC
 
	g__gÀwIsPoötInFûlP©hNV
;

16207 
GLEW_FUN_EXPORT
 
PFNGLISPOINTINSTROKEPATHNVPROC
 
	g__gÀwIsPoötInSåokeP©hNV
;

16208 
GLEW_FUN_EXPORT
 
PFNGLPATHCOLORGENNVPROC
 
	g__gÀwP©hCﬁ‹GíNV
;

16209 
GLEW_FUN_EXPORT
 
PFNGLPATHCOMMANDSNVPROC
 
	g__gÀwP©hComm™dsNV
;

16210 
GLEW_FUN_EXPORT
 
PFNGLPATHCOORDSNVPROC
 
	g__gÀwP©hCo‹dsNV
;

16211 
GLEW_FUN_EXPORT
 
PFNGLPATHCOVERDEPTHFUNCNVPROC
 
	g__gÀwP©hCovîDïthFuncNV
;

16212 
GLEW_FUN_EXPORT
 
PFNGLPATHDASHARRAYNVPROC
 
	g__gÀwP©hDashAºayNV
;

16213 
GLEW_FUN_EXPORT
 
PFNGLPATHFOGGENNVPROC
 
	g__gÀwP©hFogGíNV
;

16214 
GLEW_FUN_EXPORT
 
PFNGLPATHGLYPHRANGENVPROC
 
	g__gÀwP©hGlyphR™geNV
;

16215 
GLEW_FUN_EXPORT
 
PFNGLPATHGLYPHSNVPROC
 
	g__gÀwP©hGlyphsNV
;

16216 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERFNVPROC
 
	g__gÀwP©hP¨amëîfNV
;

16217 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERFVNVPROC
 
	g__gÀwP©hP¨amëîfvNV
;

16218 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERINVPROC
 
	g__gÀwP©hP¨amëîiNV
;

16219 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERIVNVPROC
 
	g__gÀwP©hP¨amëîivNV
;

16220 
GLEW_FUN_EXPORT
 
PFNGLPATHSTENCILDEPTHOFFSETNVPROC
 
	g__gÀwP©hSãncûDïthOff£tNV
;

16221 
GLEW_FUN_EXPORT
 
PFNGLPATHSTENCILFUNCNVPROC
 
	g__gÀwP©hSãncûFuncNV
;

16222 
GLEW_FUN_EXPORT
 
PFNGLPATHSTRINGNVPROC
 
	g__gÀwP©hSåögNV
;

16223 
GLEW_FUN_EXPORT
 
PFNGLPATHSUBCOMMANDSNVPROC
 
	g__gÀwP©hSubComm™dsNV
;

16224 
GLEW_FUN_EXPORT
 
PFNGLPATHSUBCOORDSNVPROC
 
	g__gÀwP©hSubCo‹dsNV
;

16225 
GLEW_FUN_EXPORT
 
PFNGLPATHTEXGENNVPROC
 
	g__gÀwP©hTexGíNV
;

16226 
GLEW_FUN_EXPORT
 
PFNGLPOINTALONGPATHNVPROC
 
	g__gÀwPoötAl⁄gP©hNV
;

16227 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFILLPATHINSTANCEDNVPROC
 
	g__gÀwSãncûFûlP©hIn°™˚dNV
;

16228 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFILLPATHNVPROC
 
	g__gÀwSãncûFûlP©hNV
;

16229 
GLEW_FUN_EXPORT
 
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
 
	g__gÀwSãncûSåokeP©hIn°™˚dNV
;

16230 
GLEW_FUN_EXPORT
 
PFNGLSTENCILSTROKEPATHNVPROC
 
	g__gÀwSãncûSåokeP©hNV
;

16231 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMPATHNVPROC
 
	g__gÀwTønsf‹mP©hNV
;

16232 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTPATHSNVPROC
 
	g__gÀwWeightP©hsNV
;

16234 
GLEW_FUN_EXPORT
 
PFNGLFLUSHPIXELDATARANGENVPROC
 
	g__gÀwFlushPixñD©aR™geNV
;

16235 
GLEW_FUN_EXPORT
 
PFNGLPIXELDATARANGENVPROC
 
	g__gÀwPixñD©aR™geNV
;

16237 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERINVPROC
 
	g__gÀwPoötP¨amëîiNV
;

16238 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERIVNVPROC
 
	g__gÀwPoötP¨amëîivNV
;

16240 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOI64VNVPROC
 
	g__gÀwGëVideoi64vNV
;

16241 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOIVNVPROC
 
	g__gÀwGëVideoivNV
;

16242 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOUI64VNVPROC
 
	g__gÀwGëVideoui64vNV
;

16243 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOUIVNVPROC
 
	g__gÀwGëVideouivNV
;

16244 
GLEW_FUN_EXPORT
 
PFNGLPRESENTFRAMEDUALFILLNVPROC
 
	g__gÀwPª£¡FømeDuÆFûlNV
;

16245 
GLEW_FUN_EXPORT
 
PFNGLPRESENTFRAMEKEYEDNVPROC
 
	g__gÀwPª£¡FømeKeyedNV
;

16247 
GLEW_FUN_EXPORT
 
PFNGLPRIMITIVERESTARTINDEXNVPROC
 
	g__gÀwPrimôiveRe°¨tIndexNV
;

16248 
GLEW_FUN_EXPORT
 
PFNGLPRIMITIVERESTARTNVPROC
 
	g__gÀwPrimôiveRe°¨tNV
;

16250 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERINPUTNVPROC
 
	g__gÀwComböîI≈utNV
;

16251 
GLEW_FUN_EXPORT
 
PFNGLCOMBINEROUTPUTNVPROC
 
	g__gÀwComböîOuçutNV
;

16252 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERFNVPROC
 
	g__gÀwComböîP¨amëîfNV
;

16253 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERFVNVPROC
 
	g__gÀwComböîP¨amëîfvNV
;

16254 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERINVPROC
 
	g__gÀwComböîP¨amëîiNV
;

16255 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERIVNVPROC
 
	g__gÀwComböîP¨amëîivNV
;

16256 
GLEW_FUN_EXPORT
 
PFNGLFINALCOMBINERINPUTNVPROC
 
	g__gÀwFöÆComböîI≈utNV
;

16257 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
 
	g__gÀwGëComböîI≈utP¨amëîfvNV
;

16258 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
 
	g__gÀwGëComböîI≈utP¨amëîivNV
;

16259 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
 
	g__gÀwGëComböîOuçutP¨amëîfvNV
;

16260 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
 
	g__gÀwGëComböîOuçutP¨amëîivNV
;

16261 
GLEW_FUN_EXPORT
 
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
 
	g__gÀwGëFöÆComböîI≈utP¨amëîfvNV
;

16262 
GLEW_FUN_EXPORT
 
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
 
	g__gÀwGëFöÆComböîI≈utP¨amëîivNV
;

16264 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC
 
	g__gÀwComböîSègeP¨amëîfvNV
;

16265 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
 
	g__gÀwGëComböîSègeP¨amëîfvNV
;

16267 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERUI64VNVPROC
 
	g__gÀwGëBuf„rP¨amëîui64vNV
;

16268 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERUI64VNVPROC
 
	g__gÀwGëI¡egîui64vNV
;

16269 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
 
	g__gÀwGëNamedBuf„rP¨amëîui64vNV
;

16270 
GLEW_FUN_EXPORT
 
PFNGLISBUFFERRESIDENTNVPROC
 
	g__gÀwIsBuf„rResidítNV
;

16271 
GLEW_FUN_EXPORT
 
PFNGLISNAMEDBUFFERRESIDENTNVPROC
 
	g__gÀwIsNamedBuf„rResidítNV
;

16272 
GLEW_FUN_EXPORT
 
PFNGLMAKEBUFFERNONRESIDENTNVPROC
 
	g__gÀwMakeBuf„rN⁄ResidítNV
;

16273 
GLEW_FUN_EXPORT
 
PFNGLMAKEBUFFERRESIDENTNVPROC
 
	g__gÀwMakeBuf„rResidítNV
;

16274 
GLEW_FUN_EXPORT
 
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
 
	g__gÀwMakeNamedBuf„rN⁄ResidítNV
;

16275 
GLEW_FUN_EXPORT
 
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC
 
	g__gÀwMakeNamedBuf„rResidítNV
;

16276 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMUI64NVPROC
 
	g__gÀwProgømUnif‹mui64NV
;

16277 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMUI64VNVPROC
 
	g__gÀwProgømUnif‹mui64vNV
;

16278 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMUI64NVPROC
 
	g__gÀwUnif‹mui64NV
;

16279 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMUI64VNVPROC
 
	g__gÀwUnif‹mui64vNV
;

16281 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREBARRIERNVPROC
 
	g__gÀwTextuªB¨rõrNV
;

16283 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTexImage2DMu…ißm∂eCovîageNV
;

16284 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTexImage3DMu…ißm∂eCovîageNV
;

16285 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTextuªImage2DMu…ißm∂eCovîageNV
;

16286 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
 
	g__gÀwTextuªImage2DMu…ißm∂eNV
;

16287 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTextuªImage3DMu…ißm∂eCovîageNV
;

16288 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
 
	g__gÀwTextuªImage3DMu…ißm∂eNV
;

16290 
GLEW_FUN_EXPORT
 
PFNGLACTIVEVARYINGNVPROC
 
	g__gÀwA˘iveV¨yögNV
;

16291 
GLEW_FUN_EXPORT
 
PFNGLBEGINTRANSFORMFEEDBACKNVPROC
 
	g__gÀwBegöTønsf‹mFìdbackNV
;

16292 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERBASENVPROC
 
	g__gÀwBödBuf„rBa£NV
;

16293 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFEROFFSETNVPROC
 
	g__gÀwBödBuf„rOff£tNV
;

16294 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERRANGENVPROC
 
	g__gÀwBödBuf„rR™geNV
;

16295 
GLEW_FUN_EXPORT
 
PFNGLENDTRANSFORMFEEDBACKNVPROC
 
	g__gÀwEndTønsf‹mFìdbackNV
;

16296 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEVARYINGNVPROC
 
	g__gÀwGëA˘iveV¨yögNV
;

16297 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
 
	g__gÀwGëTønsf‹mFìdbackV¨yögNV
;

16298 
GLEW_FUN_EXPORT
 
PFNGLGETVARYINGLOCATIONNVPROC
 
	g__gÀwGëV¨yögLoˇti⁄NV
;

16299 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
 
	g__gÀwTønsf‹mFìdbackAâribsNV
;

16300 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
 
	g__gÀwTønsf‹mFìdbackV¨yögsNV
;

16302 
GLEW_FUN_EXPORT
 
PFNGLBINDTRANSFORMFEEDBACKNVPROC
 
	g__gÀwBödTønsf‹mFìdbackNV
;

16303 
GLEW_FUN_EXPORT
 
PFNGLDELETETRANSFORMFEEDBACKSNVPROC
 
	g__gÀwDñëeTønsf‹mFìdbacksNV
;

16304 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKNVPROC
 
	g__gÀwDøwTønsf‹mFìdbackNV
;

16305 
GLEW_FUN_EXPORT
 
PFNGLGENTRANSFORMFEEDBACKSNVPROC
 
	g__gÀwGíTønsf‹mFìdbacksNV
;

16306 
GLEW_FUN_EXPORT
 
PFNGLISTRANSFORMFEEDBACKNVPROC
 
	g__gÀwIsTønsf‹mFìdbackNV
;

16307 
GLEW_FUN_EXPORT
 
PFNGLPAUSETRANSFORMFEEDBACKNVPROC
 
	g__gÀwPau£Tønsf‹mFìdbackNV
;

16308 
GLEW_FUN_EXPORT
 
PFNGLRESUMETRANSFORMFEEDBACKNVPROC
 
	g__gÀwResumeTønsf‹mFìdbackNV
;

16310 
GLEW_FUN_EXPORT
 
PFNGLVDPAUFININVPROC
 
	g__gÀwVDPAUFöiNV
;

16311 
GLEW_FUN_EXPORT
 
PFNGLVDPAUGETSURFACEIVNVPROC
 
	g__gÀwVDPAUGëSurÁ˚ivNV
;

16312 
GLEW_FUN_EXPORT
 
PFNGLVDPAUINITNVPROC
 
	g__gÀwVDPAUInôNV
;

16313 
GLEW_FUN_EXPORT
 
PFNGLVDPAUISSURFACENVPROC
 
	g__gÀwVDPAUIsSurÁ˚NV
;

16314 
GLEW_FUN_EXPORT
 
PFNGLVDPAUMAPSURFACESNVPROC
 
	g__gÀwVDPAUM≠SurÁ˚sNV
;

16315 
GLEW_FUN_EXPORT
 
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
 
	g__gÀwVDPAURegi°îOuçutSurÁ˚NV
;

16316 
GLEW_FUN_EXPORT
 
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC
 
	g__gÀwVDPAURegi°îVideoSurÁ˚NV
;

16317 
GLEW_FUN_EXPORT
 
PFNGLVDPAUSURFACEACCESSNVPROC
 
	g__gÀwVDPAUSurÁ˚Ac˚ssNV
;

16318 
GLEW_FUN_EXPORT
 
PFNGLVDPAUUNMAPSURFACESNVPROC
 
	g__gÀwVDPAUUnm≠SurÁ˚sNV
;

16319 
GLEW_FUN_EXPORT
 
PFNGLVDPAUUNREGISTERSURFACENVPROC
 
	g__gÀwVDPAUUƒegi°îSurÁ˚NV
;

16321 
GLEW_FUN_EXPORT
 
PFNGLFLUSHVERTEXARRAYRANGENVPROC
 
	g__gÀwFlushVîãxAºayR™geNV
;

16322 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYRANGENVPROC
 
	g__gÀwVîãxAºayR™geNV
;

16324 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLI64VNVPROC
 
	g__gÀwGëVîãxAâribLi64vNV
;

16325 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLUI64VNVPROC
 
	g__gÀwGëVîãxAâribLui64vNV
;

16326 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1I64NVPROC
 
	g__gÀwVîãxAâribL1i64NV
;

16327 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1I64VNVPROC
 
	g__gÀwVîãxAâribL1i64vNV
;

16328 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1UI64NVPROC
 
	g__gÀwVîãxAâribL1ui64NV
;

16329 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1UI64VNVPROC
 
	g__gÀwVîãxAâribL1ui64vNV
;

16330 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2I64NVPROC
 
	g__gÀwVîãxAâribL2i64NV
;

16331 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2I64VNVPROC
 
	g__gÀwVîãxAâribL2i64vNV
;

16332 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2UI64NVPROC
 
	g__gÀwVîãxAâribL2ui64NV
;

16333 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2UI64VNVPROC
 
	g__gÀwVîãxAâribL2ui64vNV
;

16334 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3I64NVPROC
 
	g__gÀwVîãxAâribL3i64NV
;

16335 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3I64VNVPROC
 
	g__gÀwVîãxAâribL3i64vNV
;

16336 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3UI64NVPROC
 
	g__gÀwVîãxAâribL3ui64NV
;

16337 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3UI64VNVPROC
 
	g__gÀwVîãxAâribL3ui64vNV
;

16338 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4I64NVPROC
 
	g__gÀwVîãxAâribL4i64NV
;

16339 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4I64VNVPROC
 
	g__gÀwVîãxAâribL4i64vNV
;

16340 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4UI64NVPROC
 
	g__gÀwVîãxAâribL4ui64NV
;

16341 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4UI64VNVPROC
 
	g__gÀwVîãxAâribL4ui64vNV
;

16342 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLFORMATNVPROC
 
	g__gÀwVîãxAâribLF‹m©NV
;

16344 
GLEW_FUN_EXPORT
 
PFNGLBUFFERADDRESSRANGENVPROC
 
	g__gÀwBuf„rAddªssR™geNV
;

16345 
GLEW_FUN_EXPORT
 
PFNGLCOLORFORMATNVPROC
 
	g__gÀwCﬁ‹F‹m©NV
;

16346 
GLEW_FUN_EXPORT
 
PFNGLEDGEFLAGFORMATNVPROC
 
	g__gÀwEdgeFœgF‹m©NV
;

16347 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFORMATNVPROC
 
	g__gÀwFogCo‹dF‹m©NV
;

16348 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERUI64I_VNVPROC
 
	g__gÀwGëI¡egîui64i_vNV
;

16349 
GLEW_FUN_EXPORT
 
PFNGLINDEXFORMATNVPROC
 
	g__gÀwIndexF‹m©NV
;

16350 
GLEW_FUN_EXPORT
 
PFNGLNORMALFORMATNVPROC
 
	g__gÀwN‹mÆF‹m©NV
;

16351 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORFORMATNVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹F‹m©NV
;

16352 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDFORMATNVPROC
 
	g__gÀwTexCo‹dF‹m©NV
;

16353 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBFORMATNVPROC
 
	g__gÀwVîãxAâribF‹m©NV
;

16354 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIFORMATNVPROC
 
	g__gÀwVîãxAâribIF‹m©NV
;

16355 
GLEW_FUN_EXPORT
 
PFNGLVERTEXFORMATNVPROC
 
	g__gÀwVîãxF‹m©NV
;

16357 
GLEW_FUN_EXPORT
 
PFNGLAREPROGRAMSRESIDENTNVPROC
 
	g__gÀwAªProgømsResidítNV
;

16358 
GLEW_FUN_EXPORT
 
PFNGLBINDPROGRAMNVPROC
 
	g__gÀwBödProgømNV
;

16359 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMSNVPROC
 
	g__gÀwDñëeProgømsNV
;

16360 
GLEW_FUN_EXPORT
 
PFNGLEXECUTEPROGRAMNVPROC
 
	g__gÀwExecuãProgømNV
;

16361 
GLEW_FUN_EXPORT
 
PFNGLGENPROGRAMSNVPROC
 
	g__gÀwGíProgømsNV
;

16362 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPARAMETERDVNVPROC
 
	g__gÀwGëProgømP¨amëîdvNV
;

16363 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPARAMETERFVNVPROC
 
	g__gÀwGëProgømP¨amëîfvNV
;

16364 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMSTRINGNVPROC
 
	g__gÀwGëProgømSåögNV
;

16365 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMIVNVPROC
 
	g__gÀwGëProgømivNV
;

16366 
GLEW_FUN_EXPORT
 
PFNGLGETTRACKMATRIXIVNVPROC
 
	g__gÀwGëTøckM©rixivNV
;

16367 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBPOINTERVNVPROC
 
	g__gÀwGëVîãxAâribPoöãrvNV
;

16368 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBDVNVPROC
 
	g__gÀwGëVîãxAâribdvNV
;

16369 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBFVNVPROC
 
	g__gÀwGëVîãxAâribfvNV
;

16370 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIVNVPROC
 
	g__gÀwGëVîãxAâribivNV
;

16371 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMNVPROC
 
	g__gÀwIsProgømNV
;

16372 
GLEW_FUN_EXPORT
 
PFNGLLOADPROGRAMNVPROC
 
	g__gÀwLﬂdProgømNV
;

16373 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4DNVPROC
 
	g__gÀwProgømP¨amëî4dNV
;

16374 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4DVNVPROC
 
	g__gÀwProgømP¨amëî4dvNV
;

16375 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4FNVPROC
 
	g__gÀwProgømP¨amëî4fNV
;

16376 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4FVNVPROC
 
	g__gÀwProgømP¨amëî4fvNV
;

16377 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERS4DVNVPROC
 
	g__gÀwProgømP¨amëîs4dvNV
;

16378 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERS4FVNVPROC
 
	g__gÀwProgømP¨amëîs4fvNV
;

16379 
GLEW_FUN_EXPORT
 
PFNGLREQUESTRESIDENTPROGRAMSNVPROC
 
	g__gÀwReque°ResidítProgømsNV
;

16380 
GLEW_FUN_EXPORT
 
PFNGLTRACKMATRIXNVPROC
 
	g__gÀwTøckM©rixNV
;

16381 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DNVPROC
 
	g__gÀwVîãxAârib1dNV
;

16382 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DVNVPROC
 
	g__gÀwVîãxAârib1dvNV
;

16383 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FNVPROC
 
	g__gÀwVîãxAârib1fNV
;

16384 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FVNVPROC
 
	g__gÀwVîãxAârib1fvNV
;

16385 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SNVPROC
 
	g__gÀwVîãxAârib1sNV
;

16386 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SVNVPROC
 
	g__gÀwVîãxAârib1svNV
;

16387 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DNVPROC
 
	g__gÀwVîãxAârib2dNV
;

16388 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DVNVPROC
 
	g__gÀwVîãxAârib2dvNV
;

16389 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FNVPROC
 
	g__gÀwVîãxAârib2fNV
;

16390 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FVNVPROC
 
	g__gÀwVîãxAârib2fvNV
;

16391 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SNVPROC
 
	g__gÀwVîãxAârib2sNV
;

16392 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SVNVPROC
 
	g__gÀwVîãxAârib2svNV
;

16393 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DNVPROC
 
	g__gÀwVîãxAârib3dNV
;

16394 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DVNVPROC
 
	g__gÀwVîãxAârib3dvNV
;

16395 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FNVPROC
 
	g__gÀwVîãxAârib3fNV
;

16396 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FVNVPROC
 
	g__gÀwVîãxAârib3fvNV
;

16397 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SNVPROC
 
	g__gÀwVîãxAârib3sNV
;

16398 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SVNVPROC
 
	g__gÀwVîãxAârib3svNV
;

16399 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DNVPROC
 
	g__gÀwVîãxAârib4dNV
;

16400 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DVNVPROC
 
	g__gÀwVîãxAârib4dvNV
;

16401 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FNVPROC
 
	g__gÀwVîãxAârib4fNV
;

16402 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FVNVPROC
 
	g__gÀwVîãxAârib4fvNV
;

16403 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SNVPROC
 
	g__gÀwVîãxAârib4sNV
;

16404 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SVNVPROC
 
	g__gÀwVîãxAârib4svNV
;

16405 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBNVPROC
 
	g__gÀwVîãxAârib4ubNV
;

16406 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBVNVPROC
 
	g__gÀwVîãxAârib4ubvNV
;

16407 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPOINTERNVPROC
 
	g__gÀwVîãxAâribPoöãrNV
;

16408 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1DVNVPROC
 
	g__gÀwVîãxAâribs1dvNV
;

16409 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1FVNVPROC
 
	g__gÀwVîãxAâribs1fvNV
;

16410 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1SVNVPROC
 
	g__gÀwVîãxAâribs1svNV
;

16411 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2DVNVPROC
 
	g__gÀwVîãxAâribs2dvNV
;

16412 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2FVNVPROC
 
	g__gÀwVîãxAâribs2fvNV
;

16413 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2SVNVPROC
 
	g__gÀwVîãxAâribs2svNV
;

16414 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3DVNVPROC
 
	g__gÀwVîãxAâribs3dvNV
;

16415 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3FVNVPROC
 
	g__gÀwVîãxAâribs3fvNV
;

16416 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3SVNVPROC
 
	g__gÀwVîãxAâribs3svNV
;

16417 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4DVNVPROC
 
	g__gÀwVîãxAâribs4dvNV
;

16418 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4FVNVPROC
 
	g__gÀwVîãxAâribs4fvNV
;

16419 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4SVNVPROC
 
	g__gÀwVîãxAâribs4svNV
;

16420 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4UBVNVPROC
 
	g__gÀwVîãxAâribs4ubvNV
;

16422 
GLEW_FUN_EXPORT
 
PFNGLBEGINVIDEOCAPTURENVPROC
 
	g__gÀwBegöVideoC≠tuªNV
;

16423 
GLEW_FUN_EXPORT
 
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
 
	g__gÀwBödVideoC≠tuªSåómBuf„rNV
;

16424 
GLEW_FUN_EXPORT
 
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
 
	g__gÀwBödVideoC≠tuªSåómTextuªNV
;

16425 
GLEW_FUN_EXPORT
 
PFNGLENDVIDEOCAPTURENVPROC
 
	g__gÀwEndVideoC≠tuªNV
;

16426 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC
 
	g__gÀwGëVideoC≠tuªSåómdvNV
;

16427 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC
 
	g__gÀwGëVideoC≠tuªSåómfvNV
;

16428 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC
 
	g__gÀwGëVideoC≠tuªSåómivNV
;

16429 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTUREIVNVPROC
 
	g__gÀwGëVideoC≠tuªivNV
;

16430 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURENVPROC
 
	g__gÀwVideoC≠tuªNV
;

16431 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
 
	g__gÀwVideoC≠tuªSåómP¨amëîdvNV
;

16432 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
 
	g__gÀwVideoC≠tuªSåómP¨amëîfvNV
;

16433 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
 
	g__gÀwVideoC≠tuªSåómP¨amëîivNV
;

16435 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHFOESPROC
 
	g__gÀwCÀ¨DïthfOES
;

16436 
GLEW_FUN_EXPORT
 
PFNGLCLIPPLANEFOESPROC
 
	g__gÀwClùPœ√fOES
;

16437 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEFOESPROC
 
	g__gÀwDïthR™gefOES
;

16438 
GLEW_FUN_EXPORT
 
PFNGLFRUSTUMFOESPROC
 
	g__gÀwFru°umfOES
;

16439 
GLEW_FUN_EXPORT
 
PFNGLGETCLIPPLANEFOESPROC
 
	g__gÀwGëClùPœ√fOES
;

16440 
GLEW_FUN_EXPORT
 
PFNGLORTHOFOESPROC
 
	g__gÀwOπhofOES
;

16442 
GLEW_FUN_EXPORT
 
PFNGLERRORSTRINGREGALPROC
 
	g__gÀwEº‹SåögREGAL
;

16444 
GLEW_FUN_EXPORT
 
PFNGLGETEXTENSIONREGALPROC
 
	g__gÀwGëExãnsi⁄REGAL
;

16445 
GLEW_FUN_EXPORT
 
PFNGLISSUPPORTEDREGALPROC
 
	g__gÀwIsSuµ‹ãdREGAL
;

16447 
GLEW_FUN_EXPORT
 
PFNGLDETAILTEXFUNCSGISPROC
 
	g__gÀwDëaûTexFuncSGIS
;

16448 
GLEW_FUN_EXPORT
 
PFNGLGETDETAILTEXFUNCSGISPROC
 
	g__gÀwGëDëaûTexFuncSGIS
;

16450 
GLEW_FUN_EXPORT
 
PFNGLFOGFUNCSGISPROC
 
	g__gÀwFogFuncSGIS
;

16451 
GLEW_FUN_EXPORT
 
PFNGLGETFOGFUNCSGISPROC
 
	g__gÀwGëFogFuncSGIS
;

16453 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKSGISPROC
 
	g__gÀwSam∂eMaskSGIS
;

16454 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEPATTERNSGISPROC
 
	g__gÀwSam∂eP©ã∫SGIS
;

16456 
GLEW_FUN_EXPORT
 
PFNGLGETSHARPENTEXFUNCSGISPROC
 
	g__gÀwGëSh¨≥nTexFuncSGIS
;

16457 
GLEW_FUN_EXPORT
 
PFNGLSHARPENTEXFUNCSGISPROC
 
	g__gÀwSh¨≥nTexFuncSGIS
;

16459 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE4DSGISPROC
 
	g__gÀwTexImage4DSGIS
;

16460 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE4DSGISPROC
 
	g__gÀwTexSubImage4DSGIS
;

16462 
GLEW_FUN_EXPORT
 
PFNGLGETTEXFILTERFUNCSGISPROC
 
	g__gÀwGëTexFûãrFuncSGIS
;

16463 
GLEW_FUN_EXPORT
 
PFNGLTEXFILTERFUNCSGISPROC
 
	g__gÀwTexFûãrFuncSGIS
;

16465 
GLEW_FUN_EXPORT
 
PFNGLASYNCMARKERSGIXPROC
 
	g__gÀwAsyncM¨kîSGIX
;

16466 
GLEW_FUN_EXPORT
 
PFNGLDELETEASYNCMARKERSSGIXPROC
 
	g__gÀwDñëeAsyncM¨kîsSGIX
;

16467 
GLEW_FUN_EXPORT
 
PFNGLFINISHASYNCSGIXPROC
 
	g__gÀwFöishAsyncSGIX
;

16468 
GLEW_FUN_EXPORT
 
PFNGLGENASYNCMARKERSSGIXPROC
 
	g__gÀwGíAsyncM¨kîsSGIX
;

16469 
GLEW_FUN_EXPORT
 
PFNGLISASYNCMARKERSGIXPROC
 
	g__gÀwIsAsyncM¨kîSGIX
;

16470 
GLEW_FUN_EXPORT
 
PFNGLPOLLASYNCSGIXPROC
 
	g__gÀwPﬁlAsyncSGIX
;

16472 
GLEW_FUN_EXPORT
 
PFNGLFLUSHRASTERSGIXPROC
 
	g__gÀwFlushRa°îSGIX
;

16474 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREFOGSGIXPROC
 
	g__gÀwTextuªFogSGIX
;

16476 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTCOLORMATERIALSGIXPROC
 
	g__gÀwFøgmítCﬁ‹M©îülSGIX
;

16477 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFSGIXPROC
 
	g__gÀwFøgmítLightModñfSGIX
;

16478 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC
 
	g__gÀwFøgmítLightModñfvSGIX
;

16479 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELISGIXPROC
 
	g__gÀwFøgmítLightModñiSGIX
;

16480 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC
 
	g__gÀwFøgmítLightModñivSGIX
;

16481 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFSGIXPROC
 
	g__gÀwFøgmítLightfSGIX
;

16482 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFVSGIXPROC
 
	g__gÀwFøgmítLightfvSGIX
;

16483 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTISGIXPROC
 
	g__gÀwFøgmítLightiSGIX
;

16484 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTIVSGIXPROC
 
	g__gÀwFøgmítLightivSGIX
;

16485 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFSGIXPROC
 
	g__gÀwFøgmítM©îülfSGIX
;

16486 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFVSGIXPROC
 
	g__gÀwFøgmítM©îülfvSGIX
;

16487 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALISGIXPROC
 
	g__gÀwFøgmítM©îüliSGIX
;

16488 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALIVSGIXPROC
 
	g__gÀwFøgmítM©îülivSGIX
;

16489 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTFVSGIXPROC
 
	g__gÀwGëFøgmítLightfvSGIX
;

16490 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTIVSGIXPROC
 
	g__gÀwGëFøgmítLightivSGIX
;

16491 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALFVSGIXPROC
 
	g__gÀwGëFøgmítM©îülfvSGIX
;

16492 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALIVSGIXPROC
 
	g__gÀwGëFøgmítM©îülivSGIX
;

16494 
GLEW_FUN_EXPORT
 
PFNGLFRAMEZOOMSGIXPROC
 
	g__gÀwFømeZoomSGIX
;

16496 
GLEW_FUN_EXPORT
 
PFNGLPIXELTEXGENSGIXPROC
 
	g__gÀwPixñTexGíSGIX
;

16498 
GLEW_FUN_EXPORT
 
PFNGLREFERENCEPLANESGIXPROC
 
	g__gÀwRe„ªn˚Pœ√SGIX
;

16500 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERFSGIXPROC
 
	g__gÀwS¥ôeP¨amëîfSGIX
;

16501 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERFVSGIXPROC
 
	g__gÀwS¥ôeP¨amëîfvSGIX
;

16502 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERISGIXPROC
 
	g__gÀwS¥ôeP¨amëîiSGIX
;

16503 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERIVSGIXPROC
 
	g__gÀwS¥ôeP¨amëîivSGIX
;

16505 
GLEW_FUN_EXPORT
 
PFNGLTAGSAMPLEBUFFERSGIXPROC
 
	g__gÀwTagSam∂eBuf„rSGIX
;

16507 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERFVSGIPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîfvSGI
;

16508 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERIVSGIPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîivSGI
;

16509 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLESGIPROC
 
	g__gÀwCﬁ‹TabÀSGI
;

16510 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORTABLESGIPROC
 
	g__gÀwC›yCﬁ‹TabÀSGI
;

16511 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîfvSGI
;

16512 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîivSGI
;

16513 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLESGIPROC
 
	g__gÀwGëCﬁ‹TabÀSGI
;

16515 
GLEW_FUN_EXPORT
 
PFNGLFINISHTEXTURESUNXPROC
 
	g__gÀwFöishTextuªSUNX
;

16517 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORBSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹bSUN
;

16518 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORDSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹dSUN
;

16519 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORFSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹fSUN
;

16520 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORISUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹iSUN
;

16521 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORSSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹sSUN
;

16522 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORUBSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹ubSUN
;

16523 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORUISUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹uiSUN
;

16524 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORUSSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹usSUN
;

16526 
GLEW_FUN_EXPORT
 
PFNGLREADVIDEOPIXELSSUNPROC
 
	g__gÀwRódVideoPixñsSUN
;

16528 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEPOINTERSUNPROC
 
	g__gÀwRïœ˚mítCodePoöãrSUN
;

16529 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUBSUNPROC
 
	g__gÀwRïœ˚mítCodeubSUN
;

16530 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUBVSUNPROC
 
	g__gÀwRïœ˚mítCodeubvSUN
;

16531 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUISUNPROC
 
	g__gÀwRïœ˚mítCodeuiSUN
;

16532 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUIVSUNPROC
 
	g__gÀwRïœ˚mítCodeuivSUN
;

16533 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUSSUNPROC
 
	g__gÀwRïœ˚mítCodeusSUN
;

16534 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUSVSUNPROC
 
	g__gÀwRïœ˚mítCodeusvSUN
;

16536 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3FVERTEX3FSUNPROC
 
	g__gÀwCﬁ‹3fVîãx3fSUN
;

16537 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3FVERTEX3FVSUNPROC
 
	g__gÀwCﬁ‹3fVîãx3fvSUN
;

16538 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

16539 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

16540 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX2FSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx2fSUN
;

16541 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX2FVSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx2fvSUN
;

16542 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX3FSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx3fSUN
;

16543 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX3FVSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx3fvSUN
;

16544 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwN‹mÆ3fVîãx3fSUN
;

16545 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwN‹mÆ3fVîãx3fvSUN
;

16546 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
;

16547 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
;

16548 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

16549 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

16550 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
;

16551 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
;

16552 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
;

16553 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
;

16554 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

16555 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

16556 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
;

16557 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
;

16558 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
;

16559 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
;

16560 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiVîãx3fSUN
;

16561 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiVîãx3fvSUN
;

16562 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹3fVîãx3fSUN
;

16563 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹3fVîãx3fvSUN
;

16564 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

16565 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

16566 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fSUN
;

16567 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
;

16568 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fN‹mÆ3fVîãx3fSUN
;

16569 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fN‹mÆ3fVîãx3fvSUN
;

16570 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fVîãx3fSUN
;

16571 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fVîãx3fvSUN
;

16572 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
 
	g__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
;

16573 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
 
	g__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
;

16574 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FVERTEX4FSUNPROC
 
	g__gÀwTexCo‹d4fVîãx4fSUN
;

16575 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FVERTEX4FVSUNPROC
 
	g__gÀwTexCo‹d4fVîãx4fvSUN
;

16577 
GLEW_FUN_EXPORT
 
PFNGLADDSWAPHINTRECTWINPROC
 
	g__gÀwAddSw≠HötRe˘WIN
;

16579 #i‡
deföed
(
GLEW_MX
Ë&& !deföed(
_WIN32
)

16580 
	sGLEWC⁄ãxtSåu˘


16584 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_1
;

16585 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_2
;

16586 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_2_1
;

16587 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_3
;

16588 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_4
;

16589 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_5
;

16590 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_2_0
;

16591 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_2_1
;

16592 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_0
;

16593 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_1
;

16594 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_2
;

16595 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_3
;

16596 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_0
;

16597 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_1
;

16598 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_2
;

16599 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_3
;

16600 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_3DFX_mu…ißm∂e
;

16601 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_3DFX_tbuf„r
;

16602 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_3DFX_ãxtuª_com¥essi⁄_FXT1
;

16603 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_bÀnd_mömax_Á˘‹
;

16604 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_c⁄£rv©ive_dïth
;

16605 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_debug_ouçut
;

16606 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_dïth_˛amp_£∑øã
;

16607 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_døw_buf„rs_bÀnd
;

16608 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_mu…i_døw_ödúe˘
;

16609 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_«me_gí_dñëe
;

16610 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_≥rf‹m™˚_m⁄ô‹
;

16611 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_pö√d_mem‹y
;

16612 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_quîy_buf„r_obje˘
;

16613 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_ßm∂e_posôi⁄s
;

16614 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_£amÀss_cubem≠_≥r_ãxtuª
;

16615 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_shadî_°ícû_exp‹t
;

16616 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_°ícû_›î©i⁄_exãnded
;

16617 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_ãxtuª_ãxtuª4
;

16618 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_å™sf‹m_„edback3_löes_åüngÀs
;

16619 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_vîãx_shadî_œyî
;

16620 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_vîãx_shadî_ãs£Œ©‹
;

16621 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_vîãx_shadî_võwp‹t_ödex
;

16622 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_aux_dïth_°ícû
;

16623 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_˛õ¡_°‹age
;

16624 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_ñemít_¨øy
;

16625 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_„n˚
;

16626 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_Êﬂt_pixñs
;

16627 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_Êush_buf„r_ønge
;

16628 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_obje˘_purgóbÀ
;

16629 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_pixñ_buf„r
;

16630 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_rgb_422
;

16631 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_row_byãs
;

16632 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_•ecuœr_ve˘‹
;

16633 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_ãxtuª_ønge
;

16634 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_å™sf‹m_höt
;

16635 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_vîãx_¨øy_obje˘
;

16636 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_vîãx_¨øy_ønge
;

16637 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_vîãx_¥ogøm_evÆu©‹s
;

16638 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_ycb¸_422
;

16639 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ES2_com∑tibûôy
;

16640 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ES3_com∑tibûôy
;

16641 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_¨øys_of_¨øys
;

16642 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ba£_ö°™˚
;

16643 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_bÀnd_func_exãnded
;

16644 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_˛_evít
;

16645 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_˛ór_buf„r_obje˘
;

16646 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_cﬁ‹_buf„r_Êﬂt
;

16647 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_com∑tibûôy
;

16648 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_com¥es£d_ãxtuª_pixñ_°‹age
;

16649 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_compuã_shadî
;

16650 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_c⁄£rv©ive_dïth
;

16651 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_c›y_buf„r
;

16652 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_c›y_image
;

16653 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_debug_ouçut
;

16654 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_dïth_buf„r_Êﬂt
;

16655 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_dïth_˛amp
;

16656 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_dïth_ãxtuª
;

16657 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_buf„rs
;

16658 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_buf„rs_bÀnd
;

16659 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_ñemíts_ba£_vîãx
;

16660 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_ödúe˘
;

16661 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_ö°™˚d
;

16662 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ex∂icô_©åib_loˇti⁄
;

16663 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ex∂icô_unif‹m_loˇti⁄
;

16664 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_co‹d_c⁄víti⁄s
;

16665 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_œyî_võwp‹t
;

16666 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_¥ogøm
;

16667 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_¥ogøm_shadow
;

16668 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_shadî
;

16669 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰amebuf„r_no_©èchmíts
;

16670 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰amebuf„r_obje˘
;

16671 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰amebuf„r_sRGB
;

16672 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_geomëry_shadî4
;

16673 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_gë_¥ogøm_bö¨y
;

16674 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_gpu_shadî5
;

16675 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_gpu_shadî_Â64
;

16676 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_hÆf_Êﬂt_pixñ
;

16677 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_hÆf_Êﬂt_vîãx
;

16678 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_imagög
;

16679 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ö°™˚d_¨øys
;

16680 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_öã∫Æf‹m©_quîy
;

16681 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_öã∫Æf‹m©_quîy2
;

16682 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_övÆid©e_subd©a
;

16683 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_m≠_buf„r_Æignmít
;

16684 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_m≠_buf„r_ønge
;

16685 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_m©rix_∑Àâe
;

16686 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…i_døw_ödúe˘
;

16687 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…ißm∂e
;

16688 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…ôextuª
;

16689 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_oc˛usi⁄_quîy
;

16690 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_oc˛usi⁄_quîy2
;

16691 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_pixñ_buf„r_obje˘
;

16692 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_poöt_∑ømëîs
;

16693 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_poöt_•rôe
;

16694 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_¥ogøm_öãrÁ˚_quîy
;

16695 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_¥ovokög_vîãx
;

16696 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°_buf„r_ac˚ss_behavi‹
;

16697 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°√ss
;

16698 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
;

16699 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
;

16700 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ßm∂e_shadög
;

16701 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ßm∂î_obje˘s
;

16702 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_£amÀss_cube_m≠
;

16703 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_£∑øã_shadî_obje˘s
;

16704 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_©omic_cou¡îs
;

16705 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_bô_ícodög
;

16706 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_image_lﬂd_°‹e
;

16707 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_image_size
;

16708 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_obje˘s
;

16709 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_¥ecisi⁄
;

16710 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_°ícû_exp‹t
;

16711 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_°‹age_buf„r_obje˘
;

16712 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_subroutöe
;

16713 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_ãxtuª_lod
;

16714 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_100
;

16715 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_420∑ck
;

16716 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_ö˛ude
;

16717 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_∑ckög
;

16718 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadow
;

16719 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadow_ambõ¡
;

16720 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_°ícû_ãxturög
;

16721 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_sync
;

16722 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãs£Œ©i⁄_shadî
;

16723 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_b‹dî_˛amp
;

16724 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_buf„r_obje˘
;

16725 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_buf„r_obje˘_rgb32
;

16726 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_buf„r_ønge
;

16727 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_com¥essi⁄
;

16728 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_com¥essi⁄_b±c
;

16729 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_com¥essi⁄_rgtc
;

16730 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_cube_m≠
;

16731 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_cube_m≠_¨øy
;

16732 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_add
;

16733 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_comböe
;

16734 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_¸ossb¨
;

16735 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_dŸ3
;

16736 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_Êﬂt
;

16737 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_g©hî
;

16738 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_múr‹ed_ª≥©
;

16739 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_mu…ißm∂e
;

16740 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_n⁄_powî_of_two
;

16741 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_quîy_Àvñs
;

16742 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_quîy_lod
;

16743 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ª˘™gÀ
;

16744 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_rg
;

16745 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_rgb10_a2ui
;

16746 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_°‹age
;

16747 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_°‹age_mu…ißm∂e
;

16748 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_swizzÀ
;

16749 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_võw
;

16750 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_timî_quîy
;

16751 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™sf‹m_„edback2
;

16752 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™sf‹m_„edback3
;

16753 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™sf‹m_„edback_ö°™˚d
;

16754 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™•o£_m©rix
;

16755 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_unif‹m_buf„r_obje˘
;

16756 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_¨øy_bgø
;

16757 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_¨øy_obje˘
;

16758 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_©åib_64bô
;

16759 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_©åib_bödög
;

16760 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_bÀnd
;

16761 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_buf„r_obje˘
;

16762 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_¥ogøm
;

16763 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_shadî
;

16764 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_ty≥_2_10_10_10_ªv
;

16765 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_võwp‹t_¨øy
;

16766 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_wödow_pos
;

16767 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_poöt_•rôes
;

16768 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_ãxtuª_ív_comböe3
;

16769 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_ãxtuª_ív_rouã
;

16770 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_vîãx_shadî_ouçut_poöt_size
;

16771 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_døw_buf„rs
;

16772 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ñemít_¨øy
;

16773 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ívm≠_bumpm≠
;

16774 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_‰agmít_shadî
;

16775 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_m≠_obje˘_buf„r
;

16776 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_memöfo
;

16777 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_≤_åüngÀs
;

16778 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_£∑øã_°ícû
;

16779 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_shadî_ãxtuª_lod
;

16780 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxt_‰agmít_shadî
;

16781 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_com¥essi⁄_3dc
;

16782 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_ív_comböe3
;

16783 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_Êﬂt
;

16784 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_múr‹_⁄˚
;

16785 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_vîãx_¨øy_obje˘
;

16786 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_vîãx_©åib_¨øy_obje˘
;

16787 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_vîãx_°ªams
;

16788 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_422_pixñs
;

16789 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_Cg_shadî
;

16790 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_abgr
;

16791 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bgø
;

16792 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bödabÀ_unif‹m
;

16793 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_cﬁ‹
;

16794 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_equ©i⁄_£∑øã
;

16795 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_func_£∑øã
;

16796 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_logic_›
;

16797 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_mömax
;

16798 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_subåa˘
;

16799 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_˛ù_vﬁume_höt
;

16800 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_cmyka
;

16801 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_cﬁ‹_subèbÀ
;

16802 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_compûed_vîãx_¨øy
;

16803 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_c⁄vﬁuti⁄
;

16804 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_co‹dö©e_‰ame
;

16805 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_c›y_ãxtuª
;

16806 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_cuŒ_vîãx
;

16807 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_debug_m¨kî
;

16808 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_dïth_bounds_ã°
;

16809 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_dúe˘_°©e_ac˚ss
;

16810 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_døw_buf„rs2
;

16811 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_døw_ö°™˚d
;

16812 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_døw_ønge_ñemíts
;

16813 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_fog_co‹d
;

16814 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰agmít_lightög
;

16815 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_blô
;

16816 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_mu…ißm∂e
;

16817 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
;

16818 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_obje˘
;

16819 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_sRGB
;

16820 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_geomëry_shadî4
;

16821 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_gpu_¥ogøm_∑ømëîs
;

16822 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_gpu_shadî4
;

16823 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_hi°ogøm
;

16824 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_¨øy_f‹m©s
;

16825 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_func
;

16826 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_m©îül
;

16827 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_ãxtuª
;

16828 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_light_ãxtuª
;

16829 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_misc_©åibuã
;

16830 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_mu…i_døw_¨øys
;

16831 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_mu…ißm∂e
;

16832 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑cked_dïth_°ícû
;

16833 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑cked_Êﬂt
;

16834 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑cked_pixñs
;

16835 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑Àâed_ãxtuª
;

16836 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pixñ_buf„r_obje˘
;

16837 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pixñ_å™sf‹m
;

16838 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
;

16839 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_poöt_∑ømëîs
;

16840 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pﬁyg⁄_off£t
;

16841 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_¥ovokög_vîãx
;

16842 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ªsˇÀ_n‹mÆ
;

16843 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_s˚√_m¨kî
;

16844 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_£c⁄d¨y_cﬁ‹
;

16845 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_£∑øã_shadî_obje˘s
;

16846 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_£∑øã_•ecuœr_cﬁ‹
;

16847 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_shadî_image_lﬂd_°‹e
;

16848 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_shadow_funcs
;

16849 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_sh¨ed_ãxtuª_∑Àâe
;

16850 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_°ícû_˛ór_èg
;

16851 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_°ícû_two_side
;

16852 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_°ícû_wøp
;

16853 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_subãxtuª
;

16854 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª
;

16855 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª3D
;

16856 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_¨øy
;

16857 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_buf„r_obje˘
;

16858 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_dxt1
;

16859 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_œtc
;

16860 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_rgtc
;

16861 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_s3tc
;

16862 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_cube_m≠
;

16863 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_edge_˛amp
;

16864 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív
;

16865 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív_add
;

16866 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív_comböe
;

16867 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív_dŸ3
;

16868 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_fûãr_™isŸr›ic
;

16869 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_öãgî
;

16870 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_lod_büs
;

16871 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_múr‹_˛amp
;

16872 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_obje˘
;

16873 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_≥πurb_n‹mÆ
;

16874 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ª˘™gÀ
;

16875 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_sRGB
;

16876 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_sRGB_decode
;

16877 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_sh¨ed_exp⁄ít
;

16878 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_¢‹m
;

16879 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_swizzÀ
;

16880 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_timî_quîy
;

16881 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_å™sf‹m_„edback
;

16882 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_¨øy
;

16883 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_¨øy_bgø
;

16884 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_©åib_64bô
;

16885 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_shadî
;

16886 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_weightög
;

16887 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_x11_sync_obje˘
;

16888 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_GREMEDY_‰ame_ãrmö©‹
;

16889 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_GREMEDY_°rög_m¨kî
;

16890 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_c⁄vﬁuti⁄_b‹dî_modes
;

16891 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_image_å™sf‹m
;

16892 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_oc˛usi⁄_ã°
;

16893 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_ãxtuª_lightög
;

16894 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_cuŒ_vîãx
;

16895 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_mu…imode_døw_¨øys
;

16896 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_ø°îpos_˛ù
;

16897 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_°©ic_d©a
;

16898 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_ãxtuª_múr‹ed_ª≥©
;

16899 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_vîãx_¨øy_li°s
;

16900 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INGR_cﬁ‹_˛amp
;

16901 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INGR_öãæa˚_ªad
;

16902 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INTEL_∑øŒñ_¨øys
;

16903 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INTEL_ãxtuª_sciss‹
;

16904 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_KHR_debug
;

16905 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_KHR_ãxtuª_com¥essi⁄_a°c_ldr
;

16906 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_KTX_buf„r_ªgi⁄
;

16907 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESAX_ãxtuª_°ack
;

16908 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_∑ck_övît
;

16909 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_ªsize_buf„rs
;

16910 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_wödow_pos
;

16911 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_ycb¸_ãxtuª
;

16912 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NVX_gpu_mem‹y_öfo
;

16913 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bödÀss_ãxtuª
;

16914 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bÀnd_squ¨e
;

16915 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_c⁄dôi⁄Æ_ªndî
;

16916 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_c›y_dïth_to_cﬁ‹
;

16917 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_c›y_image
;

16918 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dïth_buf„r_Êﬂt
;

16919 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dïth_˛amp
;

16920 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dïth_ønge_un˛am≥d
;

16921 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_evÆu©‹s
;

16922 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ex∂icô_mu…ißm∂e
;

16923 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_„n˚
;

16924 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_Êﬂt_buf„r
;

16925 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_fog_di°™˚
;

16926 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm
;

16927 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm2
;

16928 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm4
;

16929 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm_›ti⁄
;

16930 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰amebuf„r_mu…ißm∂e_covîage
;

16931 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_geomëry_¥ogøm4
;

16932 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_geomëry_shadî4
;

16933 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm4
;

16934 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm5
;

16935 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm_Â64
;

16936 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_shadî5
;

16937 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_hÆf_Êﬂt
;

16938 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_light_max_exp⁄ít
;

16939 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_mu…ißm∂e_covîage
;

16940 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_mu…ißm∂e_fûãr_höt
;

16941 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_oc˛usi⁄_quîy
;

16942 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑cked_dïth_°ícû
;

16943 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑ømëî_buf„r_obje˘
;

16944 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑ømëî_buf„r_obje˘2
;

16945 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑th_ªndîög
;

16946 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_pixñ_d©a_ønge
;

16947 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_poöt_•rôe
;

16948 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_¥e£¡_video
;

16949 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_¥imôive_ª°¨t
;

16950 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ªgi°î_comböîs
;

16951 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ªgi°î_comböîs2
;

16952 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_shadî_©omic_Êﬂt
;

16953 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_shadî_buf„r_lﬂd
;

16954 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãs£Œ©i⁄_¥ogøm5
;

16955 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxgí_emboss
;

16956 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxgí_ªÊe˘i⁄
;

16957 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_b¨rõr
;

16958 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_com¥essi⁄_vtc
;

16959 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_ív_comböe4
;

16960 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_ex∑nd_n‹mÆ
;

16961 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_mu…ißm∂e
;

16962 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_ª˘™gÀ
;

16963 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_shadî
;

16964 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_shadî2
;

16965 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_shadî3
;

16966 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_å™sf‹m_„edback
;

16967 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_å™sf‹m_„edback2
;

16968 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vd∑u_öãr›
;

16969 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¨øy_ønge
;

16970 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¨øy_ønge2
;

16971 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_©åib_öãgî_64bô
;

16972 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_buf„r_unifõd_mem‹y
;

16973 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm
;

16974 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm1_1
;

16975 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm2
;

16976 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm2_›ti⁄
;

16977 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm3
;

16978 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm4
;

16979 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_video_ˇ±uª
;

16980 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_byã_co‹dö©es
;

16981 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_com¥es£d_∑Àâed_ãxtuª
;

16982 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_ªad_f‹m©
;

16983 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_sögÀ_¥ecisi⁄
;

16984 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OML_öãæa˚
;

16985 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OML_ªßm∂e
;

16986 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OML_subßm∂e
;

16987 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_PGI_misc_höts
;

16988 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_PGI_vîãx_höts
;

16989 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_îr‹_°rög
;

16990 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_exãnsi⁄_quîy
;

16991 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_log
;

16992 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REND_s¸ìn_co‹dö©es
;

16993 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_S3_s3tc
;

16994 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_cﬁ‹_ønge
;

16995 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_dëaû_ãxtuª
;

16996 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_fog_fun˘i⁄
;

16997 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_gíî©e_mùm≠
;

16998 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_mu…ißm∂e
;

16999 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_pixñ_ãxtuª
;

17000 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_poöt_löe_ãxgí
;

17001 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_sh¨≥n_ãxtuª
;

17002 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª4D
;

17003 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_b‹dî_˛amp
;

17004 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_edge_˛amp
;

17005 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_fûãr4
;

17006 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_lod
;

17007 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_£À˘
;

17008 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_async
;

17009 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_async_hi°ogøm
;

17010 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_async_pixñ
;

17011 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_bÀnd_Æpha_mömax
;

17012 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_˛ùm≠
;

17013 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_c⁄vﬁuti⁄_accuøcy
;

17014 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_dïth_ãxtuª
;

17015 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_Êush_ø°î
;

17016 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_fog_off£t
;

17017 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_fog_ãxtuª
;

17018 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_‰agmít_•ecuœr_lightög
;

17019 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_‰amezoom
;

17020 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_öãæa˚
;

17021 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ú_ö°rumít1
;

17022 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_li°_¥i‹ôy
;

17023 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_pixñ_ãxtuª
;

17024 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_pixñ_ãxtuª_bôs
;

17025 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ª„ªn˚_∂™e
;

17026 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ªßm∂e
;

17027 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_shadow
;

17028 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_shadow_ambõ¡
;

17029 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_•rôe
;

17030 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_èg_ßm∂e_buf„r
;

17031 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_add_ív
;

17032 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_co‹dö©e_˛amp
;

17033 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_lod_büs
;

17034 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_mu…i_buf„r
;

17035 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_ønge
;

17036 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_sˇÀ_büs
;

17037 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_vîãx_¥e˛ù
;

17038 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_vîãx_¥e˛ù_höt
;

17039 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_y¸cb
;

17040 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGI_cﬁ‹_m©rix
;

17041 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGI_cﬁ‹_èbÀ
;

17042 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGI_ãxtuª_cﬁ‹_èbÀ
;

17043 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUNX_c⁄°™t_d©a
;

17044 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_c⁄vﬁuti⁄_b‹dî_modes
;

17045 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_globÆ_Æpha
;

17046 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_mesh_¨øy
;

17047 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_ªad_video_pixñs
;

17048 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_¶i˚_accum
;

17049 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_åüngÀ_li°
;

17050 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_vîãx
;

17051 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_WIN_ph⁄g_shadög
;

17052 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_WIN_•ecuœr_fog
;

17053 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_WIN_sw≠_höt
;

17055 #ifde‡
GLEW_MX


17062 
	#GLEW_OK
 0

	)

17063 
	#GLEW_NO_ERROR
 0

	)

17064 
	#GLEW_ERROR_NO_GL_VERSION
 1

	)

17065 
	#GLEW_ERROR_GL_VERSION_10_ONLY
 2

	)

17066 
	#GLEW_ERROR_GLX_VERSION_11_ONLY
 3

	)

17069 
	#GLEW_VERSION
 1

	)

17070 
	#GLEW_VERSION_MAJOR
 2

	)

17071 
	#GLEW_VERSION_MINOR
 3

	)

17072 
	#GLEW_VERSION_MICRO
 4

	)

17075 #ifde‡
GLEW_MX


17077 
GLEWC⁄ãxtSåu˘
 
	tGLEWC⁄ãxt
;

17078 
GLEWAPI
 
GLíum
 
GLEWAPIENTRY
 
gÀwC⁄ãxtInô
 (
GLEWC⁄ãxt
 *
˘x
);

17079 
GLEWAPI
 
GLboﬁón
 
GLEWAPIENTRY
 
gÀwC⁄ãxtIsSuµ‹ãd
 (c⁄° 
GLEWC⁄ãxt
 *
˘x
, c⁄° *
«me
);

17081 
	#gÀwInô
(Ë
	`gÀwC⁄ãxtInô
(
	`gÀwGëC⁄ãxt
())

	)

17082 
	#gÀwIsSuµ‹ãd
(
x
Ë
	`gÀwC⁄ãxtIsSuµ‹ãd
(
	`gÀwGëC⁄ãxt
(), x)

	)

17083 
	#gÀwIsExãnsi⁄Suµ‹ãd
(
x
Ë
	`gÀwIsSuµ‹ãd
(x)

	)

17085 
	#GLEW_GET_VAR
(
x
Ë(*(c⁄° 
GLboﬁón
*)&(
	`gÀwGëC⁄ãxt
()->x))

	)

17086 #ifde‡
_WIN32


17087 
	#GLEW_GET_FUN
(
x
Ë
	`gÀwGëC⁄ãxt
()->
	)
x

17089 
	#GLEW_GET_FUN
(
x
Ë
	)
x

17094 
GLEWAPI
 
GLíum
 
GLEWAPIENTRY
 
gÀwInô
 ();

17095 
GLEWAPI
 
GLboﬁón
 
GLEWAPIENTRY
 
gÀwIsSuµ‹ãd
 (c⁄° *
«me
);

17096 
	#gÀwIsExãnsi⁄Suµ‹ãd
(
x
Ë
	`gÀwIsSuµ‹ãd
(x)

	)

17098 
	#GLEW_GET_VAR
(
x
Ë(*(c⁄° 
GLboﬁón
*)&x)

	)

17099 
	#GLEW_GET_FUN
(
x
Ë
	)
x

17103 
GLEWAPI
 
GLboﬁón
 
	ggÀwEx≥rimíèl
;

17104 
GLEWAPI
 
GLboﬁón
 
GLEWAPIENTRY
 
gÀwGëExãnsi⁄
 (c⁄° *
«me
);

17105 
GLEWAPI
 c⁄° 
GLubyã
 * 
GLEWAPIENTRY
 
gÀwGëEº‹Såög
 (
GLíum
 
îr‹
);

17106 
GLEWAPI
 c⁄° 
GLubyã
 * 
GLEWAPIENTRY
 
gÀwGëSåög
 (
GLíum
 
«me
);

17108 #ifde‡
__˝lu•lus


17112 #ifde‡
GLEW_APIENTRY_DEFINED


17113 #unde‡
GLEW_APIENTRY_DEFINED


17114 #unde‡
APIENTRY


17115 #unde‡
GLAPIENTRY


17116 
	#GLAPIENTRY


	)

17119 #ifde‡
GLEW_CALLBACK_DEFINED


17120 #unde‡
GLEW_CALLBACK_DEFINED


17121 #unde‡
CALLBACK


17124 #ifde‡
GLEW_WINGDIAPI_DEFINED


17125 #unde‡
GLEW_WINGDIAPI_DEFINED


17126 #unde‡
WINGDIAPI


17129 #unde‡
GLAPI


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 
__BEGIN_DECLS


68 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

69 
__löe
, c⁄° *
__fun˘i⁄
)

70 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

73 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

74 
__löe
, c⁄° *
__fun˘i⁄
)

75 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

80 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

81 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_DECLS


86 
	#as£π
(
ex¥
) \

87 ((
ex¥
) \

88 ? 
	`__ASSERT_VOID_CAST
 (0) \

89 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

91 #ifdef 
__USE_GNU


92 
	#as£π_≥º‹
(
î∫um
) \

93 (!(
î∫um
) \

94 ? 
	`__ASSERT_VOID_CAST
 (0) \

95 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

103 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

104 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

106 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

107 
	#__ASSERT_FUNCTION
 
__func__


	)

109 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

116 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


118 #unde‡
°©ic_as£π


119 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/f˙é.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 #i‚de‡
__off_t_deföed


43 #i‚de‡
__USE_FILE_OFFSET64


44 
__off_t
 
	toff_t
;

46 
__off64_t
 
	toff_t
;

48 
	#__off_t_deföed


	)

51 #i‚de‡
__pid_t_deföed


52 
__pid_t
 
	tpid_t
;

53 
	#__pid_t_deföed


	)

58 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


59 
	~<bôs/ty≥s.h
>

60 
	#__√ed_time•ec


	)

61 
	~<time.h
>

62 
	~<bôs/°©.h
>

64 
	#S_IFMT
 
__S_IFMT


	)

65 
	#S_IFDIR
 
__S_IFDIR


	)

66 
	#S_IFCHR
 
__S_IFCHR


	)

67 
	#S_IFBLK
 
__S_IFBLK


	)

68 
	#S_IFREG
 
__S_IFREG


	)

69 #ifde‡
__S_IFIFO


70 
	#S_IFIFO
 
__S_IFIFO


	)

72 #ifde‡
__S_IFLNK


73 
	#S_IFLNK
 
__S_IFLNK


	)

75 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


76 
	#S_IFSOCK
 
__S_IFSOCK


	)

81 
	#S_ISUID
 
__S_ISUID


	)

82 
	#S_ISGID
 
__S_ISGID


	)

84 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


86 
	#S_ISVTX
 
__S_ISVTX


	)

89 
	#S_IRUSR
 
__S_IREAD


	)

90 
	#S_IWUSR
 
__S_IWRITE


	)

91 
	#S_IXUSR
 
__S_IEXEC


	)

93 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

95 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

96 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

97 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

99 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

101 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

102 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

103 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

105 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

108 #ifdef 
__USE_MISC


109 #i‚de‡
R_OK


112 
	#R_OK
 4

	)

113 
	#W_OK
 2

	)

114 
	#X_OK
 1

	)

115 
	#F_OK
 0

	)

120 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #ifde‡
__USE_ATFILE


127 
	#AT_FDCWD
 -100

	)

130 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

131 
	#AT_REMOVEDIR
 0x200

	)

133 
	#AT_SYMLINK_FOLLOW
 0x400

	)

134 #ifde‡
__USE_GNU


135 
	#AT_NO_AUTOMOUNT
 0x800

	)

137 
	#AT_EMPTY_PATH
 0x1000

	)

139 
	#AT_EACCESS
 0x200

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
__mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/lauxlib.h

8 #i‚de‡
œuxlib_h


9 
	#œuxlib_h


	)

12 
	~<°ddef.h
>

13 
	~<°dio.h
>

15 
	~"lua.h
"

18 #i‡
deföed
(
LUA_COMPAT_GETN
)

19 
LUALIB_API
 (
luaL_gën
Ë(
lua_Sèã
 *
L
, 
t
);

20 
LUALIB_API
 (
luaL_£ä
Ë(
lua_Sèã
 *
L
, 
t
, 
n
);

22 
	#luaL_gën
(
L
,
i
Ë(()
	`lua_objÀn
(L, i))

	)

23 
	#luaL_£ä
(
L
,
i
,
j
Ë(()0Ë

	)

26 #i‡
	`deföed
(
LUA_COMPAT_OPENLIB
)

27 
	#luaI_›ílib
 
luaL_›ílib


	)

32 
	#LUA_ERRFILE
 (
LUA_ERRERR
+1)

	)

35 
	sluaL_Reg
 {

36 c⁄° *
«me
;

37 
lua_CFun˘i⁄
 
func
;

38 } 
	tluaL_Reg
;

42 
LUALIB_API
 (
luaI_›ílib
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

43 c⁄° 
luaL_Reg
 *
l
, 
nup
);

44 
LUALIB_API
 (
luaL_ªgi°î
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

45 c⁄° 
luaL_Reg
 *
l
);

46 
LUALIB_API
 (
luaL_gëmëafõld
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

47 
LUALIB_API
 (
luaL_ˇŒmëa
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

48 
LUALIB_API
 (
luaL_ty≥º‹
Ë(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
);

49 
LUALIB_API
 (
luaL_¨gîr‹
Ë(
lua_Sèã
 *
L
, 
num¨g
, c⁄° *
exåamsg
);

50 
LUALIB_API
 c⁄° *(
luaL_checkl°rög
Ë(
lua_Sèã
 *
L
, 
numArg
,

51 
size_t
 *
l
);

52 
LUALIB_API
 c⁄° *(
luaL_›é°rög
Ë(
lua_Sèã
 *
L
, 
numArg
,

53 c⁄° *
def
, 
size_t
 *
l
);

54 
LUALIB_API
 
	$lua_Numbî
 (
luaL_checknumbî
Ë(
lua_Sèã
 *
L
, 
numArg
);

55 
LUALIB_API
 
	$lua_Numbî
 (
luaL_›äumbî
Ë(
lua_Sèã
 *
L
, 
nArg
, 
lua_Numbî
 
def
);

57 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_checköãgî
Ë(
lua_Sèã
 *
L
, 
numArg
);

58 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_›töãgî
Ë(
lua_Sèã
 *
L
, 
nArg
,

59 
lua_I¡egî
 
def
);

61 
LUALIB_API
 (
luaL_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
, c⁄° *
msg
);

62 
LUALIB_API
 (
luaL_checkty≥
Ë(
lua_Sèã
 *
L
, 
«rg
, 
t
);

63 
LUALIB_API
 (
luaL_check™y
Ë(
lua_Sèã
 *
L
, 
«rg
);

65 
LUALIB_API
 (
luaL_√wmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

66 
LUALIB_API
 *(
luaL_checkud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

68 
LUALIB_API
 (
luaL_whîe
Ë(
lua_Sèã
 *
L
, 
lvl
);

69 
LUALIB_API
 (
luaL_îr‹
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

71 
LUALIB_API
 (
luaL_check›ti⁄
Ë(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
def
,

72 c⁄° *c⁄° 
l°
[]);

74 
LUALIB_API
 (
luaL_ªf
Ë(
lua_Sèã
 *
L
, 
t
);

75 
LUALIB_API
 (
luaL_uƒef
Ë(
lua_Sèã
 *
L
, 
t
, 
ªf
);

77 
LUALIB_API
 (
luaL_lﬂdfûe
Ë(
lua_Sèã
 *
L
, c⁄° *
fûíame
);

78 
LUALIB_API
 (
luaL_lﬂdbuf„r
Ë(
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
sz
,

79 c⁄° *
«me
);

80 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

82 
LUALIB_API
 
lua_Sèã
 *(
luaL_√w°©e
) ();

85 
LUALIB_API
 c⁄° *(
luaL_gsub
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

86 c⁄° *
r
);

88 
LUALIB_API
 c⁄° *(
luaL_födèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
,

89 c⁄° *
‚ame
, 
szhöt
);

100 
	#luaL_¨gcheck
(
L
, 
c⁄d
,
num¨g
,
exåamsg
) \

101 (()((
c⁄d
Ë|| 
	`luaL_¨gîr‹
(
L
, (
num¨g
), (
exåamsg
))))

	)

102 
	#luaL_check°rög
(
L
,
n
Ë(
	`luaL_checkl°rög
(L, (n), 
NULL
))

	)

103 
	#luaL_›t°rög
(
L
,
n
,
d
Ë(
	`luaL_›é°rög
(L, (n), (d), 
NULL
))

	)

104 
	#luaL_checköt
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

105 
	#luaL_›töt
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

106 
	#luaL_checkl⁄g
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

107 
	#luaL_›é⁄g
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

109 
	#luaL_ty≥«me
(
L
,
i
Ë
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L,(i)))

	)

111 
	#luaL_dofûe
(
L
, 
‚
) \

112 (
	`luaL_lﬂdfûe
(
L
, 
‚
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

114 
	#luaL_do°rög
(
L
, 
s
) \

115 (
	`luaL_lﬂd°rög
(
L
, 
s
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

117 
	#luaL_gëmë©abÀ
(
L
,
n
Ë(
	`lua_gëfõld
(L, 
LUA_REGISTRYINDEX
, (n)))

	)

119 
	#luaL_›t
(
L
,
f
,
n
,
d
Ë(
	`lua_i¢⁄e‹nû
(L,“)Ë? (dË: 
	`f
(L,“)))

	)

129 
	sluaL_Buf„r
 {

130 *
p
;

131 
lvl
;

132 
lua_Sèã
 *
L
;

133 
buf„r
[
LUAL_BUFFERSIZE
];

134 } 
	tluaL_Buf„r
;

136 
	#luaL_addch¨
(
B
,
c
) \

137 (()((
B
)->
p
 < ((B)->
buf„r
+
LUAL_BUFFERSIZE
Ë|| 
	`luaL_¥ïbuf„r
(B)), \

138 (*(
B
)->
p
++ = ()(
c
)))

	)

141 
	#luaL_putch¨
(
B
,
c
Ë
	`luaL_addch¨
(B,c)

	)

143 
	#luaL_addsize
(
B
,
n
Ë((B)->
p
 +“))

	)

145 
LUALIB_API
 (
luaL_bufföô
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
);

146 
LUALIB_API
 *(
luaL_¥ïbuf„r
Ë(
luaL_Buf„r
 *
B
);

147 
LUALIB_API
 (
luaL_addl°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
);

148 
LUALIB_API
 (
luaL_add°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
);

149 
LUALIB_API
 (
luaL_addvÆue
Ë(
luaL_Buf„r
 *
B
);

150 
LUALIB_API
 (
luaL_pushªsu…
Ë(
luaL_Buf„r
 *
B
);

159 
	#LUA_NOREF
 (-2)

	)

160 
	#LUA_REFNIL
 (-1)

	)

162 
	#lua_ªf
(
L
,
lock
Ë(÷ockË? 
	`luaL_ªf
(L, 
LUA_REGISTRYINDEX
) : \

163 (
	`lua_push°rög
(
L
, "u∆ockedÑe„ªn˚†¨êobsﬁëe"), 
	`lua_îr‹
(L), 0))

	)

165 
	#lua_uƒef
(
L
,
ªf
Ë
	`luaL_uƒef
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

167 
	#lua_gëªf
(
L
,
ªf
Ë
	`lua_øwgëi
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

170 
	#luaL_ªg
 
luaL_Reg


	)

	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/lua.h

9 #i‚de‡
lua_h


10 
	#lua_h


	)

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

16 
	~"luac⁄f.h
"

19 
	#LUA_VERSION
 "Lu®5.1"

	)

20 
	#LUA_RELEASE
 "Lu®5.1.5"

	)

21 
	#LUA_VERSION_NUM
 501

	)

22 
	#LUA_COPYRIGHT
 "C›yrighà(CË1994-2012 Lua.‹g, PUC-Rio"

	)

23 
	#LUA_AUTHORS
 "R. Iîußlimschy, L. H. dêFigueúedÿ& W. Cñes"

	)

27 
	#LUA_SIGNATURE
 "\033Lua"

	)

30 
	#LUA_MULTRET
 (-1)

	)

36 
	#LUA_REGISTRYINDEX
 (-10000)

	)

37 
	#LUA_ENVIRONINDEX
 (-10001)

	)

38 
	#LUA_GLOBALSINDEX
 (-10002)

	)

39 
	#lua_upvÆueödex
(
i
Ë(
LUA_GLOBALSINDEX
-(i))

	)

43 
	#LUA_YIELD
 1

	)

44 
	#LUA_ERRRUN
 2

	)

45 
	#LUA_ERRSYNTAX
 3

	)

46 
	#LUA_ERRMEM
 4

	)

47 
	#LUA_ERRERR
 5

	)

50 
lua_Sèã
 
	tlua_Sèã
;

52 (*
	tlua_CFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
);

58 c⁄° * (*
	tlua_Ródî
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
, 
	tsize_t
 *
	tsz
);

60 (*
	tlua_Wrôî
Ë(
	tlua_Sèã
 *
	tL
, c⁄° * 
	tp
, 
	tsize_t
 
	tsz
, * 
	tud
);

66 * (*
	tlua_AŒoc
Ë(*
	tud
, *
	t±r
, 
	tsize_t
 
	tosize
, size_à
	tnsize
);

72 
	#LUA_TNONE
 (-1)

	)

74 
	#LUA_TNIL
 0

	)

75 
	#LUA_TBOOLEAN
 1

	)

76 
	#LUA_TLIGHTUSERDATA
 2

	)

77 
	#LUA_TNUMBER
 3

	)

78 
	#LUA_TSTRING
 4

	)

79 
	#LUA_TTABLE
 5

	)

80 
	#LUA_TFUNCTION
 6

	)

81 
	#LUA_TUSERDATA
 7

	)

82 
	#LUA_TTHREAD
 8

	)

87 
	#LUA_MINSTACK
 20

	)

93 #i‡
	`deföed
(
LUA_USER_H
)

94 #ö˛udê
LUA_USER_H


99 
LUA_NUMBER
 
	tlua_Numbî
;

103 
LUA_INTEGER
 
	tlua_I¡egî
;

110 
LUA_API
 
lua_Sèã
 *(
lua_√w°©e
Ë(
lua_AŒoc
 
f
, *
ud
);

111 
LUA_API
 (
lua_˛o£
Ë(
lua_Sèã
 *
L
);

112 
LUA_API
 
lua_Sèã
 *(
lua_√wthªad
Ë÷ua_Sèã *
L
);

114 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_©∑nic
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
);

120 
LUA_API
 (
lua_gët›
Ë(
lua_Sèã
 *
L
);

121 
LUA_API
 (
lua_£â›
Ë(
lua_Sèã
 *
L
, 
idx
);

122 
LUA_API
 (
lua_pushvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

123 
LUA_API
 (
lua_ªmove
Ë(
lua_Sèã
 *
L
, 
idx
);

124 
LUA_API
 (
lua_ö£π
Ë(
lua_Sèã
 *
L
, 
idx
);

125 
LUA_API
 (
lua_ª∂a˚
Ë(
lua_Sèã
 *
L
, 
idx
);

126 
LUA_API
 (
lua_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
);

128 
LUA_API
 (
lua_xmove
Ë(
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
);

135 
LUA_API
 (
lua_i¢umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

136 
LUA_API
 (
lua_is°rög
Ë(
lua_Sèã
 *
L
, 
idx
);

137 
LUA_API
 (
lua_iscfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

138 
LUA_API
 (
lua_isu£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

139 
LUA_API
 (
lua_ty≥
Ë(
lua_Sèã
 *
L
, 
idx
);

140 
LUA_API
 c⁄° *(
lua_ty≥«me
Ë(
lua_Sèã
 *
L
, 
ç
);

142 
LUA_API
 (
lua_equÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

143 
LUA_API
 (
lua_øwequÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

144 
LUA_API
 (
lua_Às°h™
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

146 
LUA_API
 
	$lua_Numbî
 (
lua_t⁄umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

147 
LUA_API
 
	$lua_I¡egî
 (
lua_toöãgî
Ë(
lua_Sèã
 *
L
, 
idx
);

148 
LUA_API
 (
lua_toboﬁón
Ë(
lua_Sèã
 *
L
, 
idx
);

149 
LUA_API
 c⁄° *(
lua_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

150 
LUA_API
 
	$size_t
 (
lua_objÀn
Ë(
lua_Sèã
 *
L
, 
idx
);

151 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_tocfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

152 
LUA_API
 *(
lua_tou£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

153 
LUA_API
 
lua_Sèã
 *(
lua_tŸhªad
Ë÷ua_Sèã *
L
, 
idx
);

154 
LUA_API
 c⁄° *(
lua_t›oöãr
Ë(
lua_Sèã
 *
L
, 
idx
);

160 
LUA_API
 (
lua_pushnû
Ë(
lua_Sèã
 *
L
);

161 
LUA_API
 (
lua_pushnumbî
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
n
);

162 
LUA_API
 (
lua_pushöãgî
Ë(
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
);

163 
LUA_API
 (
lua_pushl°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
l
);

164 
LUA_API
 (
lua_push°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

165 
LUA_API
 c⁄° *(
lua_pushvf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
,

166 
va_li°
 
¨gp
);

167 
LUA_API
 c⁄° *(
lua_pushf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

168 
LUA_API
 (
lua_pushc˛osuª
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
);

169 
LUA_API
 (
lua_pushboﬁón
Ë(
lua_Sèã
 *
L
, 
b
);

170 
LUA_API
 (
lua_pushlightu£rd©a
Ë(
lua_Sèã
 *
L
, *
p
);

171 
LUA_API
 (
lua_pushthªad
Ë(
lua_Sèã
 *
L
);

177 
LUA_API
 (
lua_gëèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

178 
LUA_API
 (
lua_gëfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

179 
LUA_API
 (
lua_øwgë
Ë(
lua_Sèã
 *
L
, 
idx
);

180 
LUA_API
 (
lua_øwgëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

181 
LUA_API
 (
lua_¸óãèbÀ
Ë(
lua_Sèã
 *
L
, 
«º
, 
ƒec
);

182 
LUA_API
 *(
lua_√wu£rd©a
Ë(
lua_Sèã
 *
L
, 
size_t
 
sz
);

183 
LUA_API
 (
lua_gëmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

184 
LUA_API
 (
lua_gë„nv
Ë(
lua_Sèã
 *
L
, 
idx
);

190 
LUA_API
 (
lua_£âabÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

191 
LUA_API
 (
lua_£tfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

192 
LUA_API
 (
lua_øw£t
Ë(
lua_Sèã
 *
L
, 
idx
);

193 
LUA_API
 (
lua_øw£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

194 
LUA_API
 (
lua_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

195 
LUA_API
 (
lua_£t„nv
Ë(
lua_Sèã
 *
L
, 
idx
);

201 
LUA_API
 (
lua_ˇŒ
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
);

202 
LUA_API
 (
lua_pˇŒ
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
);

203 
LUA_API
 (
lua_˝ˇŒ
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
func
, *
ud
);

204 
LUA_API
 (
lua_lﬂd
Ë(
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
dt
,

205 c⁄° *
chunk«me
);

207 
LUA_API
 (
lua_dump
Ë(
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
);

213 
LUA_API
 (
lua_yõld
Ë(
lua_Sèã
 *
L
, 
ƒesu…s
);

214 
LUA_API
 (
lua_ªsume
Ë(
lua_Sèã
 *
L
, 
«rg
);

215 
LUA_API
 (
lua_°©us
Ë(
lua_Sèã
 *
L
);

221 
	#LUA_GCSTOP
 0

	)

222 
	#LUA_GCRESTART
 1

	)

223 
	#LUA_GCCOLLECT
 2

	)

224 
	#LUA_GCCOUNT
 3

	)

225 
	#LUA_GCCOUNTB
 4

	)

226 
	#LUA_GCSTEP
 5

	)

227 
	#LUA_GCSETPAUSE
 6

	)

228 
	#LUA_GCSETSTEPMUL
 7

	)

230 
LUA_API
 (
lua_gc
Ë(
lua_Sèã
 *
L
, 
wh©
, 
d©a
);

237 
LUA_API
 (
lua_îr‹
Ë(
lua_Sèã
 *
L
);

239 
LUA_API
 (
lua_√xt
Ë(
lua_Sèã
 *
L
, 
idx
);

241 
LUA_API
 (
lua_c⁄ˇt
Ë(
lua_Sèã
 *
L
, 
n
);

243 
LUA_API
 
	$lua_AŒoc
 (
lua_gëÆlocf
Ë(
lua_Sèã
 *
L
, **
ud
);

244 
LUA_API
 
	`lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
);

254 
	#lua_p›
(
L
,
n
Ë
	`lua_£â›
(L, -“)-1)

	)

256 
	#lua_√wèbÀ
(
L
Ë
	`lua_¸óãèbÀ
(L, 0, 0)

	)

258 
	#lua_ªgi°î
(
L
,
n
,
f
Ë(
	`lua_pushcfun˘i⁄
(L, (f)), 
	`lua_£tglobÆ
(L, (n)))

	)

260 
	#lua_pushcfun˘i⁄
(
L
,
f
Ë
	`lua_pushc˛osuª
(L, (f), 0)

	)

262 
	#lua_°æí
(
L
,
i
Ë
	`lua_objÀn
(L, (i))

	)

264 
	#lua_isfun˘i⁄
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TFUNCTION
)

	)

265 
	#lua_i°abÀ
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTABLE
)

	)

266 
	#lua_i¶ightu£rd©a
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TLIGHTUSERDATA
)

	)

267 
	#lua_i¢û
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNIL
)

	)

268 
	#lua_isboﬁón
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TBOOLEAN
)

	)

269 
	#lua_i°hªad
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTHREAD
)

	)

270 
	#lua_i¢⁄e
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNONE
)

	)

271 
	#lua_i¢⁄e‹nû
(
L
, 
n
Ë(
	`lua_ty≥
(L, (n)Ë<0)

	)

273 
	#lua_pushlôîÆ
(
L
, 
s
) \

274 
	`lua_pushl°rög
(
L
, "" 
s
, ((s)/())-1)

	)

276 
	#lua_£tglobÆ
(
L
,
s
Ë
	`lua_£tfõld
(L, 
LUA_GLOBALSINDEX
, (s))

	)

277 
	#lua_gëglobÆ
(
L
,
s
Ë
	`lua_gëfõld
(L, 
LUA_GLOBALSINDEX
, (s))

	)

279 
	#lua_to°rög
(
L
,
i
Ë
	`lua_tﬁ°rög
(L, (i), 
NULL
)

	)

287 
	#lua_›í
(Ë
	`luaL_√w°©e
()

	)

289 
	#lua_gëªgi°ry
(
L
Ë
	`lua_pushvÆue
(L, 
LUA_REGISTRYINDEX
)

	)

291 
	#lua_gëgccou¡
(
L
Ë
	`lua_gc
(L, 
LUA_GCCOUNT
, 0)

	)

293 
	#lua_Chunkªadî
 
lua_Ródî


	)

294 
	#lua_Chunkwrôî
 
lua_Wrôî


	)

298 
LUA_API
 
	`lua_£éevñ
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
);

311 
	#LUA_HOOKCALL
 0

	)

312 
	#LUA_HOOKRET
 1

	)

313 
	#LUA_HOOKLINE
 2

	)

314 
	#LUA_HOOKCOUNT
 3

	)

315 
	#LUA_HOOKTAILRET
 4

	)

321 
	#LUA_MASKCALL
 (1 << 
LUA_HOOKCALL
)

	)

322 
	#LUA_MASKRET
 (1 << 
LUA_HOOKRET
)

	)

323 
	#LUA_MASKLINE
 (1 << 
LUA_HOOKLINE
)

	)

324 
	#LUA_MASKCOUNT
 (1 << 
LUA_HOOKCOUNT
)

	)

326 
lua_Debug
 
	tlua_Debug
;

330 (*
	tlua_Hook
Ë(
	tlua_Sèã
 *
	tL
, 
	tlua_Debug
 *
	t¨
);

333 
LUA_API
 
	`lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
);

334 
LUA_API
 
	`lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
);

335 
LUA_API
 c⁄° *
	`lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

336 
LUA_API
 c⁄° *
	`lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

337 
LUA_API
 c⁄° *
	`lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
);

338 
LUA_API
 c⁄° *
	`lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
);

340 
LUA_API
 
	`lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
);

341 
LUA_API
 
lua_Hook
 
	`lua_gëhook
 (
lua_Sèã
 *
L
);

342 
LUA_API
 
	`lua_gëhookmask
 (
lua_Sèã
 *
L
);

343 
LUA_API
 
	`lua_gëhookcou¡
 (
lua_Sèã
 *
L
);

346 
	slua_Debug
 {

347 
evít
;

348 c⁄° *
«me
;

349 c⁄° *
«mewh©
;

350 c⁄° *
wh©
;

351 c⁄° *
sour˚
;

352 
cuºíéöe
;

353 
nups
;

354 
löedeföed
;

355 
œ°löedeföed
;

356 
sh‹t_§c
[
LUA_IDSIZE
];

358 
i_ci
;

	@/usr/include/lualib.h

8 #i‚de‡
luÆib_h


9 
	#luÆib_h


	)

11 
	~"lua.h
"

15 
	#LUA_FILEHANDLE
 "FILE*"

	)

18 
	#LUA_COLIBNAME
 "c‹outöe"

	)

19 
LUALIB_API
 (
lua›í_ba£
Ë(
lua_Sèã
 *
L
);

21 
	#LUA_TABLIBNAME
 "èbÀ"

	)

22 
LUALIB_API
 (
lua›í_èbÀ
Ë(
lua_Sèã
 *
L
);

24 
	#LUA_IOLIBNAME
 "io"

	)

25 
LUALIB_API
 (
lua›í_io
Ë(
lua_Sèã
 *
L
);

27 
	#LUA_OSLIBNAME
 "os"

	)

28 
LUALIB_API
 (
lua›í_os
Ë(
lua_Sèã
 *
L
);

30 
	#LUA_STRLIBNAME
 "°rög"

	)

31 
LUALIB_API
 (
lua›í_°rög
Ë(
lua_Sèã
 *
L
);

33 
	#LUA_MATHLIBNAME
 "m©h"

	)

34 
LUALIB_API
 (
lua›í_m©h
Ë(
lua_Sèã
 *
L
);

36 
	#LUA_DBLIBNAME
 "debug"

	)

37 
LUALIB_API
 (
lua›í_debug
Ë(
lua_Sèã
 *
L
);

39 
	#LUA_LOADLIBNAME
 "∑ckage"

	)

40 
LUALIB_API
 (
lua›í_∑ckage
Ë(
lua_Sèã
 *
L
);

44 
LUALIB_API
 (
luaL_›ílibs
Ë(
lua_Sèã
 *
L
);

48 #i‚de‡
lua_as£π


49 
	#lua_as£π
(
x
Ë(()0)

	)

	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

87 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

88 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

89 
	~<bôs/m©hˇŒs.h
>

90 #unde‡
_MdoubÀ_


91 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


92 #unde‡
_MdoubÀ_END_NAMESPACE


93 #unde‡
__MATH_PRECNAME


95 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

96 || 
deföed
 
__LDBL_COMPAT


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
,

193 
	#FP_NAN
 
FP_NAN


	)

194 
FP_INFINITE
,

195 
	#FP_INFINITE
 
FP_INFINITE


	)

196 
FP_ZERO
,

197 
	#FP_ZERO
 
FP_ZERO


	)

198 
FP_SUBNORMAL
,

199 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

200 
FP_NORMAL


201 
	#FP_NORMAL
 
FP_NORMAL


	)

205 #ifde‡
__NO_LONG_DOUBLE_MATH


206 
	#Â˛assify
(
x
) \

207 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

209 
	#Â˛assify
(
x
) \

210 ( (
x
) ==  () \

211 ? 
	`__Â˛assifyf
 (
x
) \

212 :  (
x
) ==  () \

213 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#signbô
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

221 
	#signbô
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__signbôf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#isföôe
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

233 
	#isföôe
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__föôef
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

241 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

245 #ifde‡
__NO_LONG_DOUBLE_MATH


246 
	#i¢™
(
x
) \

247 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

249 
	#i¢™
(
x
) \

250 ( (
x
) ==  () \

251 ? 
	`__i¢™f
 (
x
) \

252 :  (
x
) ==  () \

253 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#isöf
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

261 
	#isöf
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__isöff
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

269 
	#MATH_ERRNO
 1

	)

270 
	#MATH_ERREXCEPT
 2

	)

275 #i‚de‡
__FAST_MATH__


276 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

281 #ifdef 
__USE_MISC


285 
_IEEE_
 = -1,

286 
_SVID_
,

287 
_XOPEN_
,

288 
_POSIX_
,

289 
_ISOC_


290 } 
	t_LIB_VERSION_TYPE
;

295 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

299 #ifde‡
__USE_SVID


305 #ifde‡
__˝lu•lus


306 
__ex˚±i⁄


308 
ex˚±i⁄


311 
ty≥
;

312 *
«me
;

313 
¨g1
;

314 
¨g2
;

315 
ªtvÆ
;

316 
	}
};

318 #ifde‡
__˝lu•lus


319 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

321 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

324 
	#X_TLOSS
 1.41484755040568800000e+16

	)

327 
	#DOMAIN
 1

	)

328 
	#SING
 2

	)

329 
	#OVERFLOW
 3

	)

330 
	#UNDERFLOW
 4

	)

331 
	#TLOSS
 5

	)

332 
	#PLOSS
 6

	)

335 
	#HUGE
 3.40282347e+38F

	)

339 #ifde‡
__USE_XOPEN


341 
	#MAXFLOAT
 3.40282347e+38F

	)

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


349 
	#M_E
 2.7182818284590452354

	)

350 
	#M_LOG2E
 1.4426950408889634074

	)

351 
	#M_LOG10E
 0.43429448190325182765

	)

352 
	#M_LN2
 0.69314718055994530942

	)

353 
	#M_LN10
 2.30258509299404568402

	)

354 
	#M_PI
 3.14159265358979323846

	)

355 
	#M_PI_2
 1.57079632679489661923

	)

356 
	#M_PI_4
 0.78539816339744830962

	)

357 
	#M_1_PI
 0.31830988618379067154

	)

358 
	#M_2_PI
 0.63661977236758134308

	)

359 
	#M_2_SQRTPI
 1.12837916709551257390

	)

360 
	#M_SQRT2
 1.41421356237309504880

	)

361 
	#M_SQRT1_2
 0.70710678118654752440

	)

367 #ifde‡
__USE_GNU


368 
	#M_El
 2.718281828459045235360287471352662498L

	)

369 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

370 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

371 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

372 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

373 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

374 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

375 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

376 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

377 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

378 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

379 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

380 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

387 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


388 
	#__NO_MATH_INLINES
 1

	)

391 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

398 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

399 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

400 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

401 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

402 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

403 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

407 #ifde‡
__USE_EXTERN_INLINES


408 
	~<bôs/m©hölöe.h
>

413 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

414 
	~<bôs/m©h-föôe.h
>

417 #ifde‡
__USE_ISOC99


421 #i‚de‡
isgª©î


422 
	#isgª©î
(
x
, 
y
) \

423 (
__exãnsi⁄__
 \

424 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

425 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

429 #i‚de‡
isgª©îequÆ


430 
	#isgª©îequÆ
(
x
, 
y
) \

431 (
__exãnsi⁄__
 \

432 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

433 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

437 #i‚de‡
i¶ess


438 
	#i¶ess
(
x
, 
y
) \

439 (
__exãnsi⁄__
 \

440 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

441 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

445 #i‚de‡
i¶es£quÆ


446 
	#i¶es£quÆ
(
x
, 
y
) \

447 (
__exãnsi⁄__
 \

448 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

449 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

453 #i‚de‡
i¶essgª©î


454 
	#i¶essgª©î
(
x
, 
y
) \

455 (
__exãnsi⁄__
 \

456 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

457 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

461 #i‚de‡
isun‹dîed


462 
	#isun‹dîed
(
u
, 
v
) \

463 (
__exãnsi⁄__
 \

464 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

465 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

470 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

146 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


148 #i‡
__WORDSIZE
 == 64

149 
	#__INT64_C
(
c
Ë¯## 
L


	)

150 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

152 
	#__INT64_C
(
c
Ë¯## 
LL


	)

153 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

159 
	#INT8_MIN
 (-128)

	)

160 
	#INT16_MIN
 (-32767-1)

	)

161 
	#INT32_MIN
 (-2147483647-1)

	)

162 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

164 
	#INT8_MAX
 (127)

	)

165 
	#INT16_MAX
 (32767)

	)

166 
	#INT32_MAX
 (2147483647)

	)

167 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

170 
	#UINT8_MAX
 (255)

	)

171 
	#UINT16_MAX
 (65535)

	)

172 
	#UINT32_MAX
 (4294967295U)

	)

173 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

177 
	#INT_LEAST8_MIN
 (-128)

	)

178 
	#INT_LEAST16_MIN
 (-32767-1)

	)

179 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

180 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

182 
	#INT_LEAST8_MAX
 (127)

	)

183 
	#INT_LEAST16_MAX
 (32767)

	)

184 
	#INT_LEAST32_MAX
 (2147483647)

	)

185 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

188 
	#UINT_LEAST8_MAX
 (255)

	)

189 
	#UINT_LEAST16_MAX
 (65535)

	)

190 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

191 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 
	#INT_FAST8_MIN
 (-128)

	)

196 #i‡
__WORDSIZE
 == 64

197 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

198 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

200 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

201 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

203 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

205 
	#INT_FAST8_MAX
 (127)

	)

206 #i‡
__WORDSIZE
 == 64

207 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

208 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

210 
	#INT_FAST16_MAX
 (2147483647)

	)

211 
	#INT_FAST32_MAX
 (2147483647)

	)

213 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

216 
	#UINT_FAST8_MAX
 (255)

	)

217 #i‡
__WORDSIZE
 == 64

218 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

219 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

221 
	#UINT_FAST16_MAX
 (4294967295U)

	)

222 
	#UINT_FAST32_MAX
 (4294967295U)

	)

224 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

228 #i‡
__WORDSIZE
 == 64

229 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

230 
	#INTPTR_MAX
 (9223372036854775807L)

	)

231 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

233 
	#INTPTR_MIN
 (-2147483647-1)

	)

234 
	#INTPTR_MAX
 (2147483647)

	)

235 
	#UINTPTR_MAX
 (4294967295U)

	)

240 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

242 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

245 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

251 #i‡
__WORDSIZE
 == 64

252 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

253 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

255 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

256 
	#PTRDIFF_MAX
 (2147483647)

	)

260 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

261 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

264 #i‡
__WORDSIZE
 == 64

265 
	#SIZE_MAX
 (18446744073709551615UL)

	)

267 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

286 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


289 
	#INT8_C
(
c
Ë
	)
c

290 
	#INT16_C
(
c
Ë
	)
c

291 
	#INT32_C
(
c
Ë
	)
c

292 #i‡
__WORDSIZE
 == 64

293 
	#INT64_C
(
c
Ë¯## 
L


	)

295 
	#INT64_C
(
c
Ë¯## 
LL


	)

299 
	#UINT8_C
(
c
Ë
	)
c

300 
	#UINT16_C
(
c
Ë
	)
c

301 
	#UINT32_C
(
c
Ë¯## 
U


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#UINT64_C
(
c
Ë¯## 
UL


	)

305 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

309 #i‡
__WORDSIZE
 == 64

310 
	#INTMAX_C
(
c
Ë¯## 
L


	)

311 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

313 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

314 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©of
 (c⁄° *
__≈å
))

280  
	`°πod
 (
__≈å
, (**Ë
NULL
);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

285  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
__exã∫_ölöe
 

288 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

290  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

291 
	}
}

292 
	g__END_NAMESPACE_STD


294 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


295 
__BEGIN_NAMESPACE_C99


296 
__exãnsi⁄__
 
__exã∫_ölöe
 

297 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

299  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

300 
	}
}

301 
	g__END_NAMESPACE_C99


306 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


310 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

313 
	$a64l
 (c⁄° *
__s
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

318 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


319 
	~<sys/ty≥s.h
>

326 
	$øndom
 (Ë
__THROW
;

329 
	$§™dom
 (
__£ed
Ë
__THROW
;

335 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

336 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

343 #ifde‡
__USE_MISC


348 
	søndom_d©a


350 
öt32_t
 *
Âå
;

351 
öt32_t
 *
Ωå
;

352 
öt32_t
 *
°©e
;

353 
ønd_ty≥
;

354 
ønd_deg
;

355 
ønd_£p
;

356 
öt32_t
 *
íd_±r
;

359 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

360 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

365 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

366 
size_t
 
__°©ñí
,

367 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

370 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

371 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
__BEGIN_NAMESPACE_STD


379 
	$ønd
 (Ë
__THROW
;

381 
	$§™d
 (
__£ed
Ë
__THROW
;

382 
__END_NAMESPACE_STD


384 #ifde‡
__USE_POSIX


386 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

390 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


394 
	$dønd48
 (Ë
__THROW
;

395 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$Ã™d48
 (Ë
__THROW
;

399 
	$ƒ™d48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$mønd48
 (Ë
__THROW
;

404 
	$jønd48
 (
__xsubi
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

408 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

409 *
	$£ed48
 (
__£ed16v
[3])

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

413 #ifde‡
__USE_MISC


417 
	sdønd48_d©a


419 
__x
[3];

420 
__ﬁd_x
[3];

421 
__c
;

422 
__öô
;

423 
__a
;

427 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

428 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$î™d48_r
 (
__xsubi
[3],

430 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

434 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$ƒ™d48_r
 (
__xsubi
[3],

438 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

443 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

446 
	$jønd48_r
 (
__xsubi
[3],

447 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

448 *
__ª°ri˘
 
__ªsu…
)

449 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

455 
	$£ed48_r
 (
__£ed16v
[3],

456 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$lc⁄g48_r
 (
__∑øm
[7],

459 
dønd48_d©a
 *
__buf„r
)

460 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

466 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


467 
	#__mÆloc_™d_ˇŒoc_deföed


	)

468 
__BEGIN_NAMESPACE_STD


470 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

472 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

473 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

474 
__END_NAMESPACE_STD


477 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


478 
__BEGIN_NAMESPACE_STD


484 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

485 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

487 
	$‰ì
 (*
__±r
Ë
__THROW
;

488 
__END_NAMESPACE_STD


490 #ifdef 
__USE_MISC


492 
	$c‰ì
 (*
__±r
Ë
__THROW
;

495 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


496 
	~<Æloˇ.h
>

499 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

500 || 
deföed
 
__USE_BSD


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 #ifde‡
__USE_ISOC11


513 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

514 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

517 
__BEGIN_NAMESPACE_STD


519 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

523 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

525 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


527 #ifde‡
__˝lu•lus


528 "C++" 
	`©_quick_exô
 ((*
__func
) ())

529 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

531 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

534 
__END_NAMESPACE_STD


536 #ifdef 
__USE_MISC


539 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

540 
__THROW
 
	`__n⁄nuŒ
 ((1));

543 
__BEGIN_NAMESPACE_STD


547 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

549 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


553 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

555 
__END_NAMESPACE_STD


557 #ifde‡
__USE_ISOC99


558 
__BEGIN_NAMESPACE_C99


561 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

562 
__END_NAMESPACE_C99


566 
__BEGIN_NAMESPACE_STD


568 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

569 
__END_NAMESPACE_STD


573 *
	$__£cuª_gëív
 (c⁄° *
__«me
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

576 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


580 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

583 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


586 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

587 
__THROW
 
	`__n⁄nuŒ
 ((2));

590 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #ifdef 
__USE_MISC


597 
	$˛óªnv
 (Ë
__THROW
;

601 #i‡
deföed
 
__USE_MISC
 \

602 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

608 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

611 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

612 || 
deföed
 
__USE_XOPEN2K8


621 #i‚de‡
__USE_FILE_OFFSET64


622 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

624 #ifde‡
__REDIRECT


625 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

626 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

628 
	#mk°emp
 
mk°emp64


	)

631 #ifde‡
__USE_LARGEFILE64


632 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_MISC


643 #i‚de‡
__USE_FILE_OFFSET64


644 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

646 #ifde‡
__REDIRECT


647 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

648 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 
	#mk°emps
 
mk°emps64


	)

653 #ifde‡
__USE_LARGEFILE64


654 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

659 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


665 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

668 #ifde‡
__USE_GNU


675 #i‚de‡
__USE_FILE_OFFSET64


676 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

678 #ifde‡
__REDIRECT


679 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

680 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

682 
	#mko°emp
 
mko°emp64


	)

685 #ifde‡
__USE_LARGEFILE64


686 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

695 #i‚de‡
__USE_FILE_OFFSET64


696 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

697 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__REDIRECT


700 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

701 
__Êags
), 
mko°emps64
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

704 
	#mko°emps
 
mko°emps64


	)

707 #ifde‡
__USE_LARGEFILE64


708 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

709 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

714 
__BEGIN_NAMESPACE_STD


719 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

720 
__END_NAMESPACE_STD


723 #ifdef 
__USE_GNU


726 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


736 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

737 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

742 #i‚de‡
__COMPAR_FN_T


743 
	#__COMPAR_FN_T


	)

744 (*
	t__com∑r_‚_t
) (const *, const *);

746 #ifdef 
__USE_GNU


747 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

750 #ifde‡
__USE_GNU


751 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

754 
__BEGIN_NAMESPACE_STD


757 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

758 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

759 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

763 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

765 #ifde‡
__USE_GNU


766 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

767 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

768 
	`__n⁄nuŒ
 ((1, 4));

773 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

774 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
__END_NAMESPACE_STD


777 #ifde‡
__USE_ISOC99


778 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

779 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

783 
__BEGIN_NAMESPACE_STD


787 
div_t
 
	$div
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_STD


793 #ifde‡
__USE_ISOC99


794 
__BEGIN_NAMESPACE_C99


795 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

796 
__díom
)

797 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

798 
__END_NAMESPACE_C99


802 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

803 || 
deföed
 
__USE_SVID


810 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

811 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

816 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

817 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

822 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

823 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

826 #ifde‡
__USE_MISC


828 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

832 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

834 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

840 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

844 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

845 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

848 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

849 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

850 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_SVID


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_BSD


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

956 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


957 
	~<bôs/°dlib.h
>

959 #ifde‡
__LDBL_COMPAT


960 
	~<bôs/°dlib-ldbl.h
>

964 #unde‡
__√ed_mÆloc_™d_ˇŒoc


966 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

79 c⁄° 
timez⁄e
 *
__tz
)

80 
__THROW
 
	`__n⁄nuŒ
 ((1));

86 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

87 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

92 
	e__ôimî_which


95 
ITIMER_REAL
 = 0,

96 
	#ITIMER_REAL
 
ITIMER_REAL


	)

98 
ITIMER_VIRTUAL
 = 1,

99 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

102 
ITIMER_PROF
 = 2

103 
	#ITIMER_PROF
 
ITIMER_PROF


	)

108 
	sôimîvÆ


111 
timevÆ
 
ô_öãrvÆ
;

113 
timevÆ
 
ô_vÆue
;

116 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


119 
__ôimî_which
 
	t__ôimî_which_t
;

121 
	t__ôimî_which_t
;

126 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

127 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

132 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

133 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

134 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

139 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

140 
__THROW
 
	`__n⁄nuŒ
 ((1));

142 #ifde‡
__USE_BSD


144 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

145 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_GNU


155 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

156 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

160 #ifde‡
__USE_BSD


163 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

164 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

165 
	#timîcmp
(
a
, 
b
, 
CMP
) \

166 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

167 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

168 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

169 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

171 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

172 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

173 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

175 ++(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 -= 1000000; \

178 
	}
} 0)

	)

179 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

181 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

182 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

183 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

184 --(
ªsu…
)->
tv_£c
; \

185 (
ªsu…
)->
tv_u£c
 += 1000000; \

187 } 0)

	)

190 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

4 #ifde‡
__˝lu•lus


34 
	#GL_GLEXT_VERSION
 85

	)

37 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

38 
	#WIN32_LEAN_AND_MEAN
 1

	)

39 
	~<wödows.h
>

42 #i‚de‡
APIENTRY


43 
	#APIENTRY


	)

45 #i‚de‡
APIENTRYP


46 
	#APIENTRYP
 
APIENTRY
 *

	)

48 #i‚de‡
GLAPI


49 
	#GLAPI
 

	)

54 #i‚de‡
GL_VERSION_1_2


55 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

56 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

57 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

58 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

59 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

60 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

61 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

62 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

63 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

64 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

65 
	#GL_TEXTURE_3D
 0x806F

	)

66 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

67 
	#GL_TEXTURE_DEPTH
 0x8071

	)

68 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

69 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

70 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

71 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

72 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

73 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

74 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

75 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

76 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

77 
	#GL_BGR
 0x80E0

	)

78 
	#GL_BGRA
 0x80E1

	)

79 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

80 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

81 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

82 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

83 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

84 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

85 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

86 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

87 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

88 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

89 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

90 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

91 
	#GL_RESCALE_NORMAL
 0x803A

	)

92 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

93 
	#GL_SINGLE_COLOR
 0x81F9

	)

94 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

95 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

98 #i‚de‡
GL_ARB_imagög


99 
	#GL_CONSTANT_COLOR
 0x8001

	)

100 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

101 
	#GL_CONSTANT_ALPHA
 0x8003

	)

102 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

103 
	#GL_BLEND_COLOR
 0x8005

	)

104 
	#GL_FUNC_ADD
 0x8006

	)

105 
	#GL_MIN
 0x8007

	)

106 
	#GL_MAX
 0x8008

	)

107 
	#GL_BLEND_EQUATION
 0x8009

	)

108 
	#GL_FUNC_SUBTRACT
 0x800A

	)

109 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

110 
	#GL_CONVOLUTION_1D
 0x8010

	)

111 
	#GL_CONVOLUTION_2D
 0x8011

	)

112 
	#GL_SEPARABLE_2D
 0x8012

	)

113 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

114 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

115 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

116 
	#GL_REDUCE
 0x8016

	)

117 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

118 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

119 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

120 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

121 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

122 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

123 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

124 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

125 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

126 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

127 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

128 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

129 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

130 
	#GL_HISTOGRAM
 0x8024

	)

131 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

132 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

133 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

134 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

135 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

136 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

137 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

138 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

139 
	#GL_HISTOGRAM_SINK
 0x802D

	)

140 
	#GL_MINMAX
 0x802E

	)

141 
	#GL_MINMAX_FORMAT
 0x802F

	)

142 
	#GL_MINMAX_SINK
 0x8030

	)

143 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

144 
	#GL_COLOR_MATRIX
 0x80B1

	)

145 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

146 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

147 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

148 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

149 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

150 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

151 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

152 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

153 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

154 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

155 
	#GL_COLOR_TABLE
 0x80D0

	)

156 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

157 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

158 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

159 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

160 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

161 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

162 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

163 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

164 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

165 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

166 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

167 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

168 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

169 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

170 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

171 
	#GL_CONSTANT_BORDER
 0x8151

	)

172 
	#GL_REPLICATE_BORDER
 0x8153

	)

173 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

176 #i‚de‡
GL_VERSION_1_3


177 
	#GL_TEXTURE0
 0x84C0

	)

178 
	#GL_TEXTURE1
 0x84C1

	)

179 
	#GL_TEXTURE2
 0x84C2

	)

180 
	#GL_TEXTURE3
 0x84C3

	)

181 
	#GL_TEXTURE4
 0x84C4

	)

182 
	#GL_TEXTURE5
 0x84C5

	)

183 
	#GL_TEXTURE6
 0x84C6

	)

184 
	#GL_TEXTURE7
 0x84C7

	)

185 
	#GL_TEXTURE8
 0x84C8

	)

186 
	#GL_TEXTURE9
 0x84C9

	)

187 
	#GL_TEXTURE10
 0x84CA

	)

188 
	#GL_TEXTURE11
 0x84CB

	)

189 
	#GL_TEXTURE12
 0x84CC

	)

190 
	#GL_TEXTURE13
 0x84CD

	)

191 
	#GL_TEXTURE14
 0x84CE

	)

192 
	#GL_TEXTURE15
 0x84CF

	)

193 
	#GL_TEXTURE16
 0x84D0

	)

194 
	#GL_TEXTURE17
 0x84D1

	)

195 
	#GL_TEXTURE18
 0x84D2

	)

196 
	#GL_TEXTURE19
 0x84D3

	)

197 
	#GL_TEXTURE20
 0x84D4

	)

198 
	#GL_TEXTURE21
 0x84D5

	)

199 
	#GL_TEXTURE22
 0x84D6

	)

200 
	#GL_TEXTURE23
 0x84D7

	)

201 
	#GL_TEXTURE24
 0x84D8

	)

202 
	#GL_TEXTURE25
 0x84D9

	)

203 
	#GL_TEXTURE26
 0x84DA

	)

204 
	#GL_TEXTURE27
 0x84DB

	)

205 
	#GL_TEXTURE28
 0x84DC

	)

206 
	#GL_TEXTURE29
 0x84DD

	)

207 
	#GL_TEXTURE30
 0x84DE

	)

208 
	#GL_TEXTURE31
 0x84DF

	)

209 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

210 
	#GL_MULTISAMPLE
 0x809D

	)

211 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

212 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

213 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

214 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

215 
	#GL_SAMPLES
 0x80A9

	)

216 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

217 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

218 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

219 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

220 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

221 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

222 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

223 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

224 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

225 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

226 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

227 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

228 
	#GL_COMPRESSED_RGB
 0x84ED

	)

229 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

230 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

231 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

232 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

233 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

234 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

235 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

236 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

237 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

238 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

239 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

240 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

241 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

242 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

243 
	#GL_NORMAL_MAP
 0x8511

	)

244 
	#GL_REFLECTION_MAP
 0x8512

	)

245 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

246 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

247 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

248 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

249 
	#GL_COMBINE
 0x8570

	)

250 
	#GL_COMBINE_RGB
 0x8571

	)

251 
	#GL_COMBINE_ALPHA
 0x8572

	)

252 
	#GL_SOURCE0_RGB
 0x8580

	)

253 
	#GL_SOURCE1_RGB
 0x8581

	)

254 
	#GL_SOURCE2_RGB
 0x8582

	)

255 
	#GL_SOURCE0_ALPHA
 0x8588

	)

256 
	#GL_SOURCE1_ALPHA
 0x8589

	)

257 
	#GL_SOURCE2_ALPHA
 0x858A

	)

258 
	#GL_OPERAND0_RGB
 0x8590

	)

259 
	#GL_OPERAND1_RGB
 0x8591

	)

260 
	#GL_OPERAND2_RGB
 0x8592

	)

261 
	#GL_OPERAND0_ALPHA
 0x8598

	)

262 
	#GL_OPERAND1_ALPHA
 0x8599

	)

263 
	#GL_OPERAND2_ALPHA
 0x859A

	)

264 
	#GL_RGB_SCALE
 0x8573

	)

265 
	#GL_ADD_SIGNED
 0x8574

	)

266 
	#GL_INTERPOLATE
 0x8575

	)

267 
	#GL_SUBTRACT
 0x84E7

	)

268 
	#GL_CONSTANT
 0x8576

	)

269 
	#GL_PRIMARY_COLOR
 0x8577

	)

270 
	#GL_PREVIOUS
 0x8578

	)

271 
	#GL_DOT3_RGB
 0x86AE

	)

272 
	#GL_DOT3_RGBA
 0x86AF

	)

275 #i‚de‡
GL_VERSION_1_4


276 
	#GL_BLEND_DST_RGB
 0x80C8

	)

277 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

278 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

279 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

280 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

281 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

282 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

283 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

284 
	#GL_MIRRORED_REPEAT
 0x8370

	)

285 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

286 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

287 
	#GL_INCR_WRAP
 0x8507

	)

288 
	#GL_DECR_WRAP
 0x8508

	)

289 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

290 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

291 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

292 
	#GL_POINT_SIZE_MIN
 0x8126

	)

293 
	#GL_POINT_SIZE_MAX
 0x8127

	)

294 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

295 
	#GL_GENERATE_MIPMAP
 0x8191

	)

296 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

297 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

298 
	#GL_FOG_COORDINATE
 0x8451

	)

299 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

300 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

301 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

302 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

303 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

304 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

305 
	#GL_COLOR_SUM
 0x8458

	)

306 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

307 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

308 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

309 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

310 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

311 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

312 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

313 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

314 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

317 #i‚de‡
GL_VERSION_1_5


318 
	#GL_BUFFER_SIZE
 0x8764

	)

319 
	#GL_BUFFER_USAGE
 0x8765

	)

320 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

321 
	#GL_CURRENT_QUERY
 0x8865

	)

322 
	#GL_QUERY_RESULT
 0x8866

	)

323 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

324 
	#GL_ARRAY_BUFFER
 0x8892

	)

325 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

326 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

327 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

328 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

329 
	#GL_READ_ONLY
 0x88B8

	)

330 
	#GL_WRITE_ONLY
 0x88B9

	)

331 
	#GL_READ_WRITE
 0x88BA

	)

332 
	#GL_BUFFER_ACCESS
 0x88BB

	)

333 
	#GL_BUFFER_MAPPED
 0x88BC

	)

334 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

335 
	#GL_STREAM_DRAW
 0x88E0

	)

336 
	#GL_STREAM_READ
 0x88E1

	)

337 
	#GL_STREAM_COPY
 0x88E2

	)

338 
	#GL_STATIC_DRAW
 0x88E4

	)

339 
	#GL_STATIC_READ
 0x88E5

	)

340 
	#GL_STATIC_COPY
 0x88E6

	)

341 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

342 
	#GL_DYNAMIC_READ
 0x88E9

	)

343 
	#GL_DYNAMIC_COPY
 0x88EA

	)

344 
	#GL_SAMPLES_PASSED
 0x8914

	)

345 
	#GL_SRC1_ALPHA
 0x8589

	)

346 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

347 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

348 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

349 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

350 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

351 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

353 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

354 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

355 
	#GL_FOG_COORD_SRC
 0x8450

	)

356 
	#GL_FOG_COORD
 0x8451

	)

357 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

358 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

359 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

360 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

361 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

362 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

363 
	#GL_SRC0_RGB
 0x8580

	)

364 
	#GL_SRC1_RGB
 0x8581

	)

365 
	#GL_SRC2_RGB
 0x8582

	)

366 
	#GL_SRC0_ALPHA
 0x8588

	)

367 
	#GL_SRC2_ALPHA
 0x858A

	)

370 #i‚de‡
GL_VERSION_2_0


371 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

372 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

373 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

374 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

375 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

376 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

377 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

378 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

379 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

380 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

381 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

382 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

383 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

384 
	#GL_DRAW_BUFFER0
 0x8825

	)

385 
	#GL_DRAW_BUFFER1
 0x8826

	)

386 
	#GL_DRAW_BUFFER2
 0x8827

	)

387 
	#GL_DRAW_BUFFER3
 0x8828

	)

388 
	#GL_DRAW_BUFFER4
 0x8829

	)

389 
	#GL_DRAW_BUFFER5
 0x882A

	)

390 
	#GL_DRAW_BUFFER6
 0x882B

	)

391 
	#GL_DRAW_BUFFER7
 0x882C

	)

392 
	#GL_DRAW_BUFFER8
 0x882D

	)

393 
	#GL_DRAW_BUFFER9
 0x882E

	)

394 
	#GL_DRAW_BUFFER10
 0x882F

	)

395 
	#GL_DRAW_BUFFER11
 0x8830

	)

396 
	#GL_DRAW_BUFFER12
 0x8831

	)

397 
	#GL_DRAW_BUFFER13
 0x8832

	)

398 
	#GL_DRAW_BUFFER14
 0x8833

	)

399 
	#GL_DRAW_BUFFER15
 0x8834

	)

400 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

401 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

402 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

403 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

404 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

405 
	#GL_VERTEX_SHADER
 0x8B31

	)

406 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

407 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

408 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

409 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

410 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

411 
	#GL_SHADER_TYPE
 0x8B4F

	)

412 
	#GL_FLOAT_VEC2
 0x8B50

	)

413 
	#GL_FLOAT_VEC3
 0x8B51

	)

414 
	#GL_FLOAT_VEC4
 0x8B52

	)

415 
	#GL_INT_VEC2
 0x8B53

	)

416 
	#GL_INT_VEC3
 0x8B54

	)

417 
	#GL_INT_VEC4
 0x8B55

	)

418 
	#GL_BOOL
 0x8B56

	)

419 
	#GL_BOOL_VEC2
 0x8B57

	)

420 
	#GL_BOOL_VEC3
 0x8B58

	)

421 
	#GL_BOOL_VEC4
 0x8B59

	)

422 
	#GL_FLOAT_MAT2
 0x8B5A

	)

423 
	#GL_FLOAT_MAT3
 0x8B5B

	)

424 
	#GL_FLOAT_MAT4
 0x8B5C

	)

425 
	#GL_SAMPLER_1D
 0x8B5D

	)

426 
	#GL_SAMPLER_2D
 0x8B5E

	)

427 
	#GL_SAMPLER_3D
 0x8B5F

	)

428 
	#GL_SAMPLER_CUBE
 0x8B60

	)

429 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

430 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

431 
	#GL_DELETE_STATUS
 0x8B80

	)

432 
	#GL_COMPILE_STATUS
 0x8B81

	)

433 
	#GL_LINK_STATUS
 0x8B82

	)

434 
	#GL_VALIDATE_STATUS
 0x8B83

	)

435 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

436 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

437 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

438 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

439 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

440 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

441 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

442 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

443 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

444 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

445 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

446 
	#GL_LOWER_LEFT
 0x8CA1

	)

447 
	#GL_UPPER_LEFT
 0x8CA2

	)

448 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

449 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

450 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

451 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

452 
	#GL_POINT_SPRITE
 0x8861

	)

453 
	#GL_COORD_REPLACE
 0x8862

	)

454 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

457 #i‚de‡
GL_VERSION_2_1


458 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

459 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

460 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

461 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

462 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

463 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

464 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

465 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

466 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

467 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

468 
	#GL_SRGB
 0x8C40

	)

469 
	#GL_SRGB8
 0x8C41

	)

470 
	#GL_SRGB_ALPHA
 0x8C42

	)

471 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

472 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

473 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

474 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

475 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

476 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

477 
	#GL_SLUMINANCE
 0x8C46

	)

478 
	#GL_SLUMINANCE8
 0x8C47

	)

479 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

480 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

483 #i‚de‡
GL_VERSION_3_0


484 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

485 
	#GL_CLIP_DISTANCE0
 0x3000

	)

486 
	#GL_CLIP_DISTANCE1
 0x3001

	)

487 
	#GL_CLIP_DISTANCE2
 0x3002

	)

488 
	#GL_CLIP_DISTANCE3
 0x3003

	)

489 
	#GL_CLIP_DISTANCE4
 0x3004

	)

490 
	#GL_CLIP_DISTANCE5
 0x3005

	)

491 
	#GL_CLIP_DISTANCE6
 0x3006

	)

492 
	#GL_CLIP_DISTANCE7
 0x3007

	)

493 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

494 
	#GL_MAJOR_VERSION
 0x821B

	)

495 
	#GL_MINOR_VERSION
 0x821C

	)

496 
	#GL_NUM_EXTENSIONS
 0x821D

	)

497 
	#GL_CONTEXT_FLAGS
 0x821E

	)

498 
	#GL_COMPRESSED_RED
 0x8225

	)

499 
	#GL_COMPRESSED_RG
 0x8226

	)

500 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

501 
	#GL_RGBA32F
 0x8814

	)

502 
	#GL_RGB32F
 0x8815

	)

503 
	#GL_RGBA16F
 0x881A

	)

504 
	#GL_RGB16F
 0x881B

	)

505 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

506 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

507 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

508 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

509 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

510 
	#GL_FIXED_ONLY
 0x891D

	)

511 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

512 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

513 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

514 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

515 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

516 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

517 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

518 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

519 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

520 
	#GL_RGB9_E5
 0x8C3D

	)

521 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

522 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

523 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

524 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

525 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

526 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

527 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

528 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

529 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

530 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

531 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

532 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

533 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

534 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

535 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

536 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

537 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

538 
	#GL_RGBA32UI
 0x8D70

	)

539 
	#GL_RGB32UI
 0x8D71

	)

540 
	#GL_RGBA16UI
 0x8D76

	)

541 
	#GL_RGB16UI
 0x8D77

	)

542 
	#GL_RGBA8UI
 0x8D7C

	)

543 
	#GL_RGB8UI
 0x8D7D

	)

544 
	#GL_RGBA32I
 0x8D82

	)

545 
	#GL_RGB32I
 0x8D83

	)

546 
	#GL_RGBA16I
 0x8D88

	)

547 
	#GL_RGB16I
 0x8D89

	)

548 
	#GL_RGBA8I
 0x8D8E

	)

549 
	#GL_RGB8I
 0x8D8F

	)

550 
	#GL_RED_INTEGER
 0x8D94

	)

551 
	#GL_GREEN_INTEGER
 0x8D95

	)

552 
	#GL_BLUE_INTEGER
 0x8D96

	)

553 
	#GL_RGB_INTEGER
 0x8D98

	)

554 
	#GL_RGBA_INTEGER
 0x8D99

	)

555 
	#GL_BGR_INTEGER
 0x8D9A

	)

556 
	#GL_BGRA_INTEGER
 0x8D9B

	)

557 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

558 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

559 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

560 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

561 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

562 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

563 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

564 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

565 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

566 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

567 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

568 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

569 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

570 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

571 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

572 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

573 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

574 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

575 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

576 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

577 
	#GL_QUERY_WAIT
 0x8E13

	)

578 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

579 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

580 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

581 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

582 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

583 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

708 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

709 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

710 
	#GL_ALPHA_INTEGER
 0x8D97

	)

716 #i‚de‡
GL_VERSION_3_1


717 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

718 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

719 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

720 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

721 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

722 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

723 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

724 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

725 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

726 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

727 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

728 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

729 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

730 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

731 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

732 
	#GL_RED_SNORM
 0x8F90

	)

733 
	#GL_RG_SNORM
 0x8F91

	)

734 
	#GL_RGB_SNORM
 0x8F92

	)

735 
	#GL_RGBA_SNORM
 0x8F93

	)

736 
	#GL_R8_SNORM
 0x8F94

	)

737 
	#GL_RG8_SNORM
 0x8F95

	)

738 
	#GL_RGB8_SNORM
 0x8F96

	)

739 
	#GL_RGBA8_SNORM
 0x8F97

	)

740 
	#GL_R16_SNORM
 0x8F98

	)

741 
	#GL_RG16_SNORM
 0x8F99

	)

742 
	#GL_RGB16_SNORM
 0x8F9A

	)

743 
	#GL_RGBA16_SNORM
 0x8F9B

	)

744 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

745 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

746 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

784 #i‚de‡
GL_VERSION_3_2


785 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

786 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

787 
	#GL_LINES_ADJACENCY
 0x000A

	)

788 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

789 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

790 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

791 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

792 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

793 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

794 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

795 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

796 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

797 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

798 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

799 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

800 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

801 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

802 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

803 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

804 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

805 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

806 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

862 #i‚de‡
GL_VERSION_3_3


863 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

890 #i‚de‡
GL_VERSION_4_0


891 
	#GL_SAMPLE_SHADING
 0x8C36

	)

892 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

893 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

894 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

895 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

896 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

897 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

898 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

899 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

900 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

901 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

981 #i‚de‡
GL_VERSION_4_1


1025 #i‚de‡
GL_VERSION_4_2


1143 #i‚de‡
GL_VERSION_4_3


1144 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

1145 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

1427 #i‚de‡
GL_ARB_mu…ôextuª


1428 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1429 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1430 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1431 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1432 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1433 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1434 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1435 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1436 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1437 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1438 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1439 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1440 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1441 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1442 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1443 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1444 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1445 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1446 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1447 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1448 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1449 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1450 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1451 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1452 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1453 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1454 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1455 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1456 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1457 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1458 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1459 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1460 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1461 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1462 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1465 #i‚de‡
GL_ARB_å™•o£_m©rix


1466 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

1467 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

1468 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

1469 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

1472 #i‚de‡
GL_ARB_mu…ißm∂e


1473 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

1474 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

1475 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

1476 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

1477 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

1478 
	#GL_SAMPLES_ARB
 0x80A9

	)

1479 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

1480 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

1481 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

1484 #i‚de‡
GL_ARB_ãxtuª_ív_add


1487 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


1488 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

1489 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

1490 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

1491 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

1492 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

1493 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

1494 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

1495 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

1496 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

1497 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

1498 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

1499 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

1502 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


1503 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

1504 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

1505 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

1506 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

1507 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

1508 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

1509 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

1510 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

1511 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

1512 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

1513 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

1516 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


1517 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

1520 #i‚de‡
GL_ARB_poöt_∑ømëîs


1521 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

1522 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

1523 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

1524 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

1527 #i‚de‡
GL_ARB_vîãx_bÀnd


1528 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

1529 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

1530 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

1531 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

1532 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

1533 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

1534 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

1535 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

1536 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

1537 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

1538 
	#GL_MODELVIEW0_ARB
 0x1700

	)

1539 
	#GL_MODELVIEW1_ARB
 0x850A

	)

1540 
	#GL_MODELVIEW2_ARB
 0x8722

	)

1541 
	#GL_MODELVIEW3_ARB
 0x8723

	)

1542 
	#GL_MODELVIEW4_ARB
 0x8724

	)

1543 
	#GL_MODELVIEW5_ARB
 0x8725

	)

1544 
	#GL_MODELVIEW6_ARB
 0x8726

	)

1545 
	#GL_MODELVIEW7_ARB
 0x8727

	)

1546 
	#GL_MODELVIEW8_ARB
 0x8728

	)

1547 
	#GL_MODELVIEW9_ARB
 0x8729

	)

1548 
	#GL_MODELVIEW10_ARB
 0x872A

	)

1549 
	#GL_MODELVIEW11_ARB
 0x872B

	)

1550 
	#GL_MODELVIEW12_ARB
 0x872C

	)

1551 
	#GL_MODELVIEW13_ARB
 0x872D

	)

1552 
	#GL_MODELVIEW14_ARB
 0x872E

	)

1553 
	#GL_MODELVIEW15_ARB
 0x872F

	)

1554 
	#GL_MODELVIEW16_ARB
 0x8730

	)

1555 
	#GL_MODELVIEW17_ARB
 0x8731

	)

1556 
	#GL_MODELVIEW18_ARB
 0x8732

	)

1557 
	#GL_MODELVIEW19_ARB
 0x8733

	)

1558 
	#GL_MODELVIEW20_ARB
 0x8734

	)

1559 
	#GL_MODELVIEW21_ARB
 0x8735

	)

1560 
	#GL_MODELVIEW22_ARB
 0x8736

	)

1561 
	#GL_MODELVIEW23_ARB
 0x8737

	)

1562 
	#GL_MODELVIEW24_ARB
 0x8738

	)

1563 
	#GL_MODELVIEW25_ARB
 0x8739

	)

1564 
	#GL_MODELVIEW26_ARB
 0x873A

	)

1565 
	#GL_MODELVIEW27_ARB
 0x873B

	)

1566 
	#GL_MODELVIEW28_ARB
 0x873C

	)

1567 
	#GL_MODELVIEW29_ARB
 0x873D

	)

1568 
	#GL_MODELVIEW30_ARB
 0x873E

	)

1569 
	#GL_MODELVIEW31_ARB
 0x873F

	)

1572 #i‚de‡
GL_ARB_m©rix_∑Àâe


1573 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

1574 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

1575 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

1576 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

1577 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

1578 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

1579 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

1580 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

1581 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

1582 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

1585 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


1586 
	#GL_COMBINE_ARB
 0x8570

	)

1587 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

1588 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

1589 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

1590 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

1591 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

1592 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

1593 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

1594 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

1595 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

1596 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

1597 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

1598 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

1599 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

1600 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

1601 
	#GL_RGB_SCALE_ARB
 0x8573

	)

1602 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

1603 
	#GL_INTERPOLATE_ARB
 0x8575

	)

1604 
	#GL_SUBTRACT_ARB
 0x84E7

	)

1605 
	#GL_CONSTANT_ARB
 0x8576

	)

1606 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

1607 
	#GL_PREVIOUS_ARB
 0x8578

	)

1610 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


1613 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


1614 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

1615 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

1618 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


1619 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

1622 #i‚de‡
GL_ARB_dïth_ãxtuª


1623 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

1624 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

1625 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

1626 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

1627 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

1630 #i‚de‡
GL_ARB_shadow


1631 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

1632 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

1633 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

1636 #i‚de‡
GL_ARB_shadow_ambõ¡


1637 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

1640 #i‚de‡
GL_ARB_wödow_pos


1643 #i‚de‡
GL_ARB_vîãx_¥ogøm


1644 
	#GL_COLOR_SUM_ARB
 0x8458

	)

1645 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

1646 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

1647 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

1648 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

1649 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

1650 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

1651 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

1652 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

1653 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

1654 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

1655 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

1656 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

1657 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

1658 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

1659 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

1660 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

1661 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

1662 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

1663 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

1664 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

1665 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

1666 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

1667 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

1668 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

1669 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

1670 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

1671 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

1672 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

1673 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

1674 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

1675 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

1676 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

1677 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

1678 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

1679 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

1680 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

1681 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

1682 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

1683 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

1684 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

1685 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

1686 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

1687 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

1688 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

1689 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

1690 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

1691 
	#GL_MATRIX0_ARB
 0x88C0

	)

1692 
	#GL_MATRIX1_ARB
 0x88C1

	)

1693 
	#GL_MATRIX2_ARB
 0x88C2

	)

1694 
	#GL_MATRIX3_ARB
 0x88C3

	)

1695 
	#GL_MATRIX4_ARB
 0x88C4

	)

1696 
	#GL_MATRIX5_ARB
 0x88C5

	)

1697 
	#GL_MATRIX6_ARB
 0x88C6

	)

1698 
	#GL_MATRIX7_ARB
 0x88C7

	)

1699 
	#GL_MATRIX8_ARB
 0x88C8

	)

1700 
	#GL_MATRIX9_ARB
 0x88C9

	)

1701 
	#GL_MATRIX10_ARB
 0x88CA

	)

1702 
	#GL_MATRIX11_ARB
 0x88CB

	)

1703 
	#GL_MATRIX12_ARB
 0x88CC

	)

1704 
	#GL_MATRIX13_ARB
 0x88CD

	)

1705 
	#GL_MATRIX14_ARB
 0x88CE

	)

1706 
	#GL_MATRIX15_ARB
 0x88CF

	)

1707 
	#GL_MATRIX16_ARB
 0x88D0

	)

1708 
	#GL_MATRIX17_ARB
 0x88D1

	)

1709 
	#GL_MATRIX18_ARB
 0x88D2

	)

1710 
	#GL_MATRIX19_ARB
 0x88D3

	)

1711 
	#GL_MATRIX20_ARB
 0x88D4

	)

1712 
	#GL_MATRIX21_ARB
 0x88D5

	)

1713 
	#GL_MATRIX22_ARB
 0x88D6

	)

1714 
	#GL_MATRIX23_ARB
 0x88D7

	)

1715 
	#GL_MATRIX24_ARB
 0x88D8

	)

1716 
	#GL_MATRIX25_ARB
 0x88D9

	)

1717 
	#GL_MATRIX26_ARB
 0x88DA

	)

1718 
	#GL_MATRIX27_ARB
 0x88DB

	)

1719 
	#GL_MATRIX28_ARB
 0x88DC

	)

1720 
	#GL_MATRIX29_ARB
 0x88DD

	)

1721 
	#GL_MATRIX30_ARB
 0x88DE

	)

1722 
	#GL_MATRIX31_ARB
 0x88DF

	)

1725 #i‚de‡
GL_ARB_‰agmít_¥ogøm


1726 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

1727 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

1728 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

1729 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

1730 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

1731 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

1732 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

1733 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

1734 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

1735 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

1736 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

1737 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

1738 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

1739 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

1740 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

1743 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


1744 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

1745 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

1746 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

1747 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

1748 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

1749 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

1750 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

1751 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

1752 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

1753 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

1754 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

1755 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

1756 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

1757 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

1758 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

1759 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

1760 
	#GL_READ_ONLY_ARB
 0x88B8

	)

1761 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

1762 
	#GL_READ_WRITE_ARB
 0x88BA

	)

1763 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

1764 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

1765 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

1766 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

1767 
	#GL_STREAM_READ_ARB
 0x88E1

	)

1768 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

1769 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

1770 
	#GL_STATIC_READ_ARB
 0x88E5

	)

1771 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

1772 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

1773 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

1774 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

1777 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


1778 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

1779 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

1780 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

1781 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

1782 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

1785 #i‚de‡
GL_ARB_shadî_obje˘s


1786 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

1787 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

1788 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

1789 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

1790 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

1791 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

1792 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

1793 
	#GL_INT_VEC2_ARB
 0x8B53

	)

1794 
	#GL_INT_VEC3_ARB
 0x8B54

	)

1795 
	#GL_INT_VEC4_ARB
 0x8B55

	)

1796 
	#GL_BOOL_ARB
 0x8B56

	)

1797 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

1798 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

1799 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

1800 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

1801 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

1802 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

1803 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

1804 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

1805 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

1806 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

1807 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

1808 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

1809 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

1810 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

1811 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

1812 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

1813 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

1814 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

1815 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

1816 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

1817 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

1818 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

1819 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

1822 #i‚de‡
GL_ARB_vîãx_shadî


1823 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

1824 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

1825 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

1826 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

1827 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

1828 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

1829 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

1832 #i‚de‡
GL_ARB_‰agmít_shadî


1833 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

1834 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

1835 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

1838 #i‚de‡
GL_ARB_shadög_œnguage_100


1839 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

1842 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


1845 #i‚de‡
GL_ARB_poöt_•rôe


1846 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

1847 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

1850 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


1853 #i‚de‡
GL_ARB_døw_buf„rs


1854 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

1855 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

1856 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

1857 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

1858 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

1859 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

1860 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

1861 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

1862 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

1863 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

1864 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

1865 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

1866 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

1867 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

1868 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

1869 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

1870 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

1873 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


1874 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

1875 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

1876 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

1877 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

1880 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


1881 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

1882 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

1883 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

1884 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

1885 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

1888 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


1889 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

1892 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


1893 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

1894 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

1895 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

1896 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

1897 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

1898 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

1899 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

1900 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

1901 
	#GL_RGBA32F_ARB
 0x8814

	)

1902 
	#GL_RGB32F_ARB
 0x8815

	)

1903 
	#GL_ALPHA32F_ARB
 0x8816

	)

1904 
	#GL_INTENSITY32F_ARB
 0x8817

	)

1905 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1906 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1907 
	#GL_RGBA16F_ARB
 0x881A

	)

1908 
	#GL_RGB16F_ARB
 0x881B

	)

1909 
	#GL_ALPHA16F_ARB
 0x881C

	)

1910 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1911 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1912 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1915 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1916 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1917 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1918 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1919 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1922 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


1923 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

1924 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

1925 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

1928 #i‚de‡
GL_ARB_døw_ö°™˚d


1931 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


1932 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

1933 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

1934 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

1935 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

1936 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

1937 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1938 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1939 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1940 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1941 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1942 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1943 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1944 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1945 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1946 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1947 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1948 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1949 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1950 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1951 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1952 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1953 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1954 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1955 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1956 
	#GL_DRAW_FRAMEBUFFER_BINDING
 
GL_FRAMEBUFFER_BINDING


	)

1957 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1958 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1959 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1960 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1961 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1962 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1963 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1964 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1965 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1966 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1967 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1968 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1969 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1970 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1971 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1972 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1973 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1974 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1975 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1976 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1977 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1978 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1979 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1980 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1981 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1982 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1983 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1984 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1985 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1986 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1987 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1988 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1989 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1990 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1991 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1992 
	#GL_FRAMEBUFFER
 0x8D40

	)

1993 
	#GL_RENDERBUFFER
 0x8D41

	)

1994 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1995 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1996 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1997 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1998 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1999 
	#GL_STENCIL_INDEX8
 0x8D48

	)

2000 
	#GL_STENCIL_INDEX16
 0x8D49

	)

2001 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

2002 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

2003 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

2004 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

2005 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

2006 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

2007 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

2008 
	#GL_MAX_SAMPLES
 0x8D57

	)

2009 
	#GL_INDEX
 0x8222

	)

2010 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

2011 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

2014 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


2015 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

2018 #i‚de‡
GL_ARB_geomëry_shadî4


2019 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

2020 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

2021 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

2022 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

2023 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

2024 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

2025 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

2026 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

2027 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

2028 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

2029 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

2030 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

2031 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

2032 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

2033 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

2034 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

2035 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

2036 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

2041 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


2042 
	#GL_HALF_FLOAT
 0x140B

	)

2045 #i‚de‡
GL_ARB_ö°™˚d_¨øys


2046 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

2049 #i‚de‡
GL_ARB_m≠_buf„r_ønge


2050 
	#GL_MAP_READ_BIT
 0x0001

	)

2051 
	#GL_MAP_WRITE_BIT
 0x0002

	)

2052 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

2053 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

2054 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

2055 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

2058 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


2059 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

2060 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

2061 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

2062 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

2063 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

2066 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


2067 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

2068 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

2069 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

2070 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

2073 #i‚de‡
GL_ARB_ãxtuª_rg


2074 
	#GL_RG
 0x8227

	)

2075 
	#GL_RG_INTEGER
 0x8228

	)

2076 
	#GL_R8
 0x8229

	)

2077 
	#GL_R16
 0x822A

	)

2078 
	#GL_RG8
 0x822B

	)

2079 
	#GL_RG16
 0x822C

	)

2080 
	#GL_R16F
 0x822D

	)

2081 
	#GL_R32F
 0x822E

	)

2082 
	#GL_RG16F
 0x822F

	)

2083 
	#GL_RG32F
 0x8230

	)

2084 
	#GL_R8I
 0x8231

	)

2085 
	#GL_R8UI
 0x8232

	)

2086 
	#GL_R16I
 0x8233

	)

2087 
	#GL_R16UI
 0x8234

	)

2088 
	#GL_R32I
 0x8235

	)

2089 
	#GL_R32UI
 0x8236

	)

2090 
	#GL_RG8I
 0x8237

	)

2091 
	#GL_RG8UI
 0x8238

	)

2092 
	#GL_RG16I
 0x8239

	)

2093 
	#GL_RG16UI
 0x823A

	)

2094 
	#GL_RG32I
 0x823B

	)

2095 
	#GL_RG32UI
 0x823C

	)

2098 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


2099 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

2102 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


2103 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

2104 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

2105 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

2106 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

2107 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

2108 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

2109 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

2110 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

2111 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

2112 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

2113 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

2114 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

2115 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

2116 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

2117 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

2118 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

2119 
	#GL_UNIFORM_TYPE
 0x8A37

	)

2120 
	#GL_UNIFORM_SIZE
 0x8A38

	)

2121 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

2122 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

2123 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

2124 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

2125 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

2126 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

2127 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

2128 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

2129 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

2130 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

2131 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

2132 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

2133 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

2134 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

2135 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

2138 #i‚de‡
GL_ARB_com∑tibûôy


2142 #i‚de‡
GL_ARB_c›y_buf„r


2143 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2144 
	#GL_COPY_READ_BUFFER
 
GL_COPY_READ_BUFFER_BINDING


	)

2145 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2146 
	#GL_COPY_WRITE_BUFFER
 
GL_COPY_WRITE_BUFFER_BINDING


	)

2149 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


2152 #i‚de‡
GL_ARB_dïth_˛amp


2153 
	#GL_DEPTH_CLAMP
 0x864F

	)

2156 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


2159 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


2162 #i‚de‡
GL_ARB_¥ovokög_vîãx


2163 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

2164 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

2165 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

2166 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

2169 #i‚de‡
GL_ARB_£amÀss_cube_m≠


2170 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

2173 #i‚de‡
GL_ARB_sync


2174 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

2175 
	#GL_OBJECT_TYPE
 0x9112

	)

2176 
	#GL_SYNC_CONDITION
 0x9113

	)

2177 
	#GL_SYNC_STATUS
 0x9114

	)

2178 
	#GL_SYNC_FLAGS
 0x9115

	)

2179 
	#GL_SYNC_FENCE
 0x9116

	)

2180 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

2181 
	#GL_UNSIGNALED
 0x9118

	)

2182 
	#GL_SIGNALED
 0x9119

	)

2183 
	#GL_ALREADY_SIGNALED
 0x911A

	)

2184 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

2185 
	#GL_CONDITION_SATISFIED
 0x911C

	)

2186 
	#GL_WAIT_FAILED
 0x911D

	)

2187 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

2188 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

2191 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


2192 
	#GL_SAMPLE_POSITION
 0x8E50

	)

2193 
	#GL_SAMPLE_MASK
 0x8E51

	)

2194 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

2195 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

2196 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

2197 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

2198 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

2199 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

2200 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

2201 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

2202 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

2203 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

2204 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

2205 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

2206 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

2207 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

2208 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

2209 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

2210 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

2211 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

2212 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

2215 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


2219 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


2222 #i‚de‡
GL_ARB_ßm∂e_shadög


2223 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

2224 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

2227 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


2228 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

2229 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

2230 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

2231 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

2232 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

2233 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

2234 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

2237 #i‚de‡
GL_ARB_ãxtuª_g©hî


2238 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

2239 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

2240 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

2243 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


2246 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


2247 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

2248 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

2249 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

2252 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


2253 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

2254 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

2255 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

2256 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

2259 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2260 
	#GL_SRC1_COLOR
 0x88F9

	)

2262 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

2263 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

2264 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

2267 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


2270 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


2271 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

2274 #i‚de‡
GL_ARB_ßm∂î_obje˘s


2275 
	#GL_SAMPLER_BINDING
 0x8919

	)

2278 #i‚de‡
GL_ARB_shadî_bô_ícodög


2281 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


2282 
	#GL_RGB10_A2UI
 0x906F

	)

2285 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


2286 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

2287 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

2288 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

2289 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

2290 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

2293 #i‚de‡
GL_ARB_timî_quîy


2294 
	#GL_TIME_ELAPSED
 0x88BF

	)

2295 
	#GL_TIMESTAMP
 0x8E28

	)

2298 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


2300 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

2303 #i‚de‡
GL_ARB_døw_ödúe˘


2304 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

2305 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

2308 #i‚de‡
GL_ARB_gpu_shadî5


2309 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

2310 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

2311 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

2312 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

2313 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

2317 #i‚de‡
GL_ARB_gpu_shadî_Â64


2319 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

2320 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

2321 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

2322 
	#GL_DOUBLE_MAT2
 0x8F46

	)

2323 
	#GL_DOUBLE_MAT3
 0x8F47

	)

2324 
	#GL_DOUBLE_MAT4
 0x8F48

	)

2325 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

2326 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

2327 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

2328 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

2329 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

2330 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

2333 #i‚de‡
GL_ARB_shadî_subroutöe


2334 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

2335 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

2336 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

2337 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

2338 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

2339 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

2340 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

2341 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

2342 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

2347 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


2348 
	#GL_PATCHES
 0x000E

	)

2349 
	#GL_PATCH_VERTICES
 0x8E72

	)

2350 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

2351 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

2352 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

2353 
	#GL_TESS_GEN_MODE
 0x8E76

	)

2354 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

2355 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

2356 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

2359 
	#GL_ISOLINES
 0x8E7A

	)

2361 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

2362 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

2365 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

2366 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

2367 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

2368 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

2369 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

2370 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

2371 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

2372 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

2373 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

2374 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

2375 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

2376 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

2377 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

2378 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

2379 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

2380 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

2381 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

2382 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

2383 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

2384 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

2387 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


2393 #i‚de‡
GL_ARB_å™sf‹m_„edback2


2394 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

2395 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2396 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 
GL_TRANSFORM_FEEDBACK_PAUSED


	)

2397 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2398 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 
GL_TRANSFORM_FEEDBACK_ACTIVE


	)

2399 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

2402 #i‚de‡
GL_ARB_å™sf‹m_„edback3


2403 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

2404 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

2407 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2408 
	#GL_FIXED
 0x140C

	)

2409 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

2410 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

2411 
	#GL_LOW_FLOAT
 0x8DF0

	)

2412 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

2413 
	#GL_HIGH_FLOAT
 0x8DF2

	)

2414 
	#GL_LOW_INT
 0x8DF3

	)

2415 
	#GL_MEDIUM_INT
 0x8DF4

	)

2416 
	#GL_HIGH_INT
 0x8DF5

	)

2417 
	#GL_SHADER_COMPILER
 0x8DFA

	)

2418 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

2419 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

2420 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

2421 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

2422 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

2423 
	#GL_RGB565
 0x8D62

	)

2426 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


2427 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

2428 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

2429 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

2430 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

2433 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


2434 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

2435 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

2436 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

2437 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

2438 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

2439 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

2440 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

2441 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

2442 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

2445 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


2448 #i‚de‡
GL_ARB_vîãx_©åib_64bô


2464 #i‚de‡
GL_ARB_võwp‹t_¨øy


2469 
	#GL_MAX_VIEWPORTS
 0x825B

	)

2470 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

2471 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

2472 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

2473 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

2474 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

2480 #i‚de‡
GL_ARB_˛_evít


2481 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2482 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2485 #i‚de‡
GL_ARB_debug_ouçut


2486 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

2487 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

2488 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

2489 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

2490 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

2491 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

2492 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

2493 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

2494 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

2495 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

2496 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

2497 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

2498 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

2499 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

2500 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

2501 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

2502 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

2503 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

2504 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

2505 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

2506 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

2507 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

2510 #i‚de‡
GL_ARB_robu°√ss


2512 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

2513 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

2514 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

2515 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

2516 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

2517 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

2518 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

2521 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


2524 #i‚de‡
GL_ARB_ba£_ö°™˚


2527 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


2530 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


2533 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2534 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2535 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2536 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2537 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2538 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2539 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2540 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2541 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2544 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


2547 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


2548 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2551 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


2552 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2555 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


2556 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2557 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2558 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2559 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2560 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2561 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2562 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2563 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2564 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2565 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2566 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2567 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2568 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2569 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2570 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2571 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2572 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2573 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2574 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2575 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2576 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2577 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2578 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2579 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2580 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2581 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2582 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2583 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2584 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2587 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


2588 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2589 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2590 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2591 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2592 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2593 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2594 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2595 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2596 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2597 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2598 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2599 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2600 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2601 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2602 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2603 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2604 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2605 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2606 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2607 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2608 
	#GL_IMAGE_1D
 0x904C

	)

2609 
	#GL_IMAGE_2D
 0x904D

	)

2610 
	#GL_IMAGE_3D
 0x904E

	)

2611 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2612 
	#GL_IMAGE_CUBE
 0x9050

	)

2613 
	#GL_IMAGE_BUFFER
 0x9051

	)

2614 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2615 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2616 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2617 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2618 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2619 
	#GL_INT_IMAGE_1D
 0x9057

	)

2620 
	#GL_INT_IMAGE_2D
 0x9058

	)

2621 
	#GL_INT_IMAGE_3D
 0x9059

	)

2622 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2623 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2624 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2625 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2626 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2627 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2628 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2629 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2630 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2631 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2632 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2633 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2634 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2635 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2636 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2637 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2638 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2639 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2640 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2641 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2642 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2643 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2644 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2645 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2646 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2647 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2648 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2649 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2650 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2651 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2654 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


2657 #i‚de‡
GL_ARB_ãxtuª_°‹age


2658 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2661 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


2662 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

2663 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

2664 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

2665 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

2666 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

2667 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

2668 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

2669 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

2670 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

2671 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

2672 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

2673 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

2674 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

2675 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

2676 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

2677 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

2678 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

2679 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

2680 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

2681 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

2682 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

2683 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

2684 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

2685 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

2686 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

2687 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

2688 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

2689 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

2692 #i‚de‡
GL_KHR_debug


2693 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2694 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2695 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2696 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2697 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2698 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2699 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2700 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2701 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2702 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2703 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2704 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2705 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2706 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2707 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2708 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2709 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2710 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2711 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2712 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2713 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2714 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2715 
	#GL_BUFFER
 0x82E0

	)

2716 
	#GL_SHADER
 0x82E1

	)

2717 
	#GL_PROGRAM
 0x82E2

	)

2718 
	#GL_QUERY
 0x82E3

	)

2719 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2720 
	#GL_SAMPLER
 0x82E6

	)

2721 
	#GL_DISPLAY_LIST
 0x82E7

	)

2723 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2724 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2725 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2726 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2727 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2728 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2729 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2730 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2731 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2736 #i‚de‡
GL_ARB_¨øys_of_¨øys


2739 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2742 #i‚de‡
GL_ARB_compuã_shadî


2743 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2744 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2745 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2746 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2747 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2748 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2749 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2750 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2751 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2752 
	#GL_MAX_COMPUTE_LOCAL_INVOCATIONS
 0x90EB

	)

2753 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2754 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2755 
	#GL_COMPUTE_LOCAL_WORK_SIZE
 0x8267

	)

2756 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2757 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2758 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2759 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2760 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2763 #i‚de‡
GL_ARB_c›y_image


2766 #i‚de‡
GL_ARB_ãxtuª_võw


2767 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2768 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2769 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2770 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2771 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2774 #i‚de‡
GL_ARB_vîãx_©åib_bödög


2775 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2776 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2777 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2778 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2779 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2780 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2781 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2784 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


2787 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2788 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2789 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2790 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2791 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2792 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2793 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2794 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2795 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2796 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2797 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2798 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2799 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2800 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2803 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


2804 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2807 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


2810 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


2811 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2812 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2813 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2814 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2815 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2816 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2817 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2818 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2819 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2822 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


2839 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2840 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2841 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2842 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2843 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2844 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2845 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2846 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2847 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2848 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2849 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2850 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2851 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2852 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2853 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2854 
	#GL_MAX_WIDTH
 0x827E

	)

2855 
	#GL_MAX_HEIGHT
 0x827F

	)

2856 
	#GL_MAX_DEPTH
 0x8280

	)

2857 
	#GL_MAX_LAYERS
 0x8281

	)

2858 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2859 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2860 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2861 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2862 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2863 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2864 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2865 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2866 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2867 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2868 
	#GL_READ_PIXELS
 0x828C

	)

2869 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2870 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2871 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2872 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2873 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2874 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2875 
	#GL_MIPMAP
 0x8293

	)

2876 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2877 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2878 
	#GL_COLOR_ENCODING
 0x8296

	)

2879 
	#GL_SRGB_READ
 0x8297

	)

2880 
	#GL_SRGB_WRITE
 0x8298

	)

2881 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

2882 
	#GL_FILTER
 0x829A

	)

2883 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2884 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2885 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2886 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2887 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2888 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2889 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2890 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2891 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2892 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2893 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2894 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2895 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2896 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2897 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2898 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2899 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2900 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2901 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2902 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2903 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2904 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2905 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2906 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2907 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2908 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2909 
	#GL_FULL_SUPPORT
 0x82B7

	)

2910 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2911 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2912 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2913 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2914 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2915 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2916 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2917 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2918 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2919 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2920 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2921 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2922 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2923 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2924 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2925 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2926 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2927 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2928 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2929 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2930 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2931 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2932 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2933 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2934 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2935 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2936 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2937 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2940 #i‚de‡
GL_ARB_övÆid©e_subd©a


2943 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


2946 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


2947 
	#GL_UNIFORM
 0x92E1

	)

2948 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2949 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2950 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2951 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2952 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2954 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2955 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2956 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2957 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2958 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2959 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2960 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2961 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2962 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2963 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2964 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2965 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2966 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2967 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2968 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2969 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2970 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2971 
	#GL_NAME_LENGTH
 0x92F9

	)

2972 
	#GL_TYPE
 0x92FA

	)

2973 
	#GL_ARRAY_SIZE
 0x92FB

	)

2974 
	#GL_OFFSET
 0x92FC

	)

2975 
	#GL_BLOCK_INDEX
 0x92FD

	)

2976 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2977 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2978 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2979 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2980 
	#GL_BUFFER_BINDING
 0x9302

	)

2981 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2982 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2983 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2984 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2985 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2986 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2987 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2988 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2989 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2990 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2991 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2992 
	#GL_LOCATION
 0x930E

	)

2993 
	#GL_LOCATION_INDEX
 0x930F

	)

2994 
	#GL_IS_PER_PATCH
 0x92E7

	)

2999 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3002 #i‚de‡
GL_ARB_shadî_image_size


3005 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


3006 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

3007 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

3008 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

3009 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

3010 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

3011 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

3012 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

3013 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

3014 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

3015 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

3016 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

3017 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

3018 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

3019 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

3020 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x2000

	)

3021 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS


	)

3025 #i‚de‡
GL_ARB_°ícû_ãxturög


3026 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

3029 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


3030 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

3031 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

3032 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

3035 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


3038 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


3041 #i‚de‡
GL_EXT_abgr


3042 
	#GL_ABGR_EXT
 0x8000

	)

3045 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


3046 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

3047 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

3048 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

3049 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

3050 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

3053 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


3054 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

3055 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

3056 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

3059 #i‚de‡
GL_EXT_ãxtuª


3060 
	#GL_ALPHA4_EXT
 0x803B

	)

3061 
	#GL_ALPHA8_EXT
 0x803C

	)

3062 
	#GL_ALPHA12_EXT
 0x803D

	)

3063 
	#GL_ALPHA16_EXT
 0x803E

	)

3064 
	#GL_LUMINANCE4_EXT
 0x803F

	)

3065 
	#GL_LUMINANCE8_EXT
 0x8040

	)

3066 
	#GL_LUMINANCE12_EXT
 0x8041

	)

3067 
	#GL_LUMINANCE16_EXT
 0x8042

	)

3068 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

3069 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

3070 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

3071 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

3072 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

3073 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

3074 
	#GL_INTENSITY_EXT
 0x8049

	)

3075 
	#GL_INTENSITY4_EXT
 0x804A

	)

3076 
	#GL_INTENSITY8_EXT
 0x804B

	)

3077 
	#GL_INTENSITY12_EXT
 0x804C

	)

3078 
	#GL_INTENSITY16_EXT
 0x804D

	)

3079 
	#GL_RGB2_EXT
 0x804E

	)

3080 
	#GL_RGB4_EXT
 0x804F

	)

3081 
	#GL_RGB5_EXT
 0x8050

	)

3082 
	#GL_RGB8_EXT
 0x8051

	)

3083 
	#GL_RGB10_EXT
 0x8052

	)

3084 
	#GL_RGB12_EXT
 0x8053

	)

3085 
	#GL_RGB16_EXT
 0x8054

	)

3086 
	#GL_RGBA2_EXT
 0x8055

	)

3087 
	#GL_RGBA4_EXT
 0x8056

	)

3088 
	#GL_RGB5_A1_EXT
 0x8057

	)

3089 
	#GL_RGBA8_EXT
 0x8058

	)

3090 
	#GL_RGB10_A2_EXT
 0x8059

	)

3091 
	#GL_RGBA12_EXT
 0x805A

	)

3092 
	#GL_RGBA16_EXT
 0x805B

	)

3093 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

3094 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

3095 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

3096 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

3097 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

3098 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

3099 
	#GL_REPLACE_EXT
 0x8062

	)

3100 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

3101 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

3102 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

3105 #i‚de‡
GL_EXT_ãxtuª3D


3106 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

3107 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

3108 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

3109 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

3110 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

3111 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

3112 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

3113 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

3114 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

3117 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


3118 
	#GL_FILTER4_SGIS
 0x8146

	)

3119 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

3122 #i‚de‡
GL_EXT_subãxtuª


3125 #i‚de‡
GL_EXT_c›y_ãxtuª


3128 #i‚de‡
GL_EXT_hi°ogøm


3129 
	#GL_HISTOGRAM_EXT
 0x8024

	)

3130 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

3131 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

3132 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

3133 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

3134 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

3135 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

3136 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

3137 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

3138 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

3139 
	#GL_MINMAX_EXT
 0x802E

	)

3140 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

3141 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

3142 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

3145 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


3146 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

3147 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

3148 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

3149 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

3150 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

3151 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

3152 
	#GL_REDUCE_EXT
 0x8016

	)

3153 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

3154 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

3155 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

3156 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

3157 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

3158 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

3159 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

3160 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

3161 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

3162 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

3163 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

3164 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

3165 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

3168 #i‚de‡
GL_SGI_cﬁ‹_m©rix


3169 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

3170 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

3171 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

3172 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

3173 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

3174 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

3175 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

3176 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

3177 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

3178 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

3179 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

3182 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


3183 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

3184 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

3185 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

3186 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

3187 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

3188 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

3189 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

3190 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

3191 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

3192 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

3193 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

3194 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

3195 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

3196 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

3197 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

3198 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

3201 #i‚de‡
GL_SGIS_pixñ_ãxtuª


3202 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

3203 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

3204 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

3205 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

3208 #i‚de‡
GL_SGIX_pixñ_ãxtuª


3209 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

3210 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

3213 #i‚de‡
GL_SGIS_ãxtuª4D


3214 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

3215 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

3216 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

3217 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

3218 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

3219 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

3220 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

3221 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

3222 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

3223 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

3226 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


3227 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

3228 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

3231 #i‚de‡
GL_EXT_cmyka


3232 
	#GL_CMYK_EXT
 0x800C

	)

3233 
	#GL_CMYKA_EXT
 0x800D

	)

3234 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

3235 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

3238 #i‚de‡
GL_EXT_ãxtuª_obje˘


3239 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

3240 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

3241 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

3242 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

3243 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

3246 #i‚de‡
GL_SGIS_dëaû_ãxtuª


3247 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

3248 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

3249 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

3250 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

3251 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

3252 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

3253 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

3254 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

3257 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


3258 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

3259 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

3260 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

3261 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

3264 #i‚de‡
GL_EXT_∑cked_pixñs


3265 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

3266 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

3267 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

3268 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

3269 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

3272 #i‚de‡
GL_SGIS_ãxtuª_lod


3273 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

3274 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

3275 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

3276 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

3279 #i‚de‡
GL_SGIS_mu…ißm∂e


3280 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

3281 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

3282 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

3283 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

3284 
	#GL_1PASS_SGIS
 0x80A1

	)

3285 
	#GL_2PASS_0_SGIS
 0x80A2

	)

3286 
	#GL_2PASS_1_SGIS
 0x80A3

	)

3287 
	#GL_4PASS_0_SGIS
 0x80A4

	)

3288 
	#GL_4PASS_1_SGIS
 0x80A5

	)

3289 
	#GL_4PASS_2_SGIS
 0x80A6

	)

3290 
	#GL_4PASS_3_SGIS
 0x80A7

	)

3291 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

3292 
	#GL_SAMPLES_SGIS
 0x80A9

	)

3293 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

3294 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

3295 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

3298 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


3299 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

3302 #i‚de‡
GL_EXT_vîãx_¨øy


3303 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

3304 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

3305 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

3306 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

3307 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

3308 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

3309 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

3310 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

3311 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

3312 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

3313 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

3314 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

3315 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

3316 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

3317 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

3318 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

3319 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

3320 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

3321 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

3322 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

3323 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

3324 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

3325 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

3326 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

3327 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

3328 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

3329 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

3330 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

3331 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

3332 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

3333 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

3334 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

3337 #i‚de‡
GL_EXT_misc_©åibuã


3340 #i‚de‡
GL_SGIS_gíî©e_mùm≠


3341 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

3342 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

3345 #i‚de‡
GL_SGIX_˛ùm≠


3346 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

3347 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

3348 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

3349 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

3350 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

3351 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

3352 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

3353 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

3354 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

3355 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

3356 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

3357 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

3360 #i‚de‡
GL_SGIX_shadow


3361 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

3362 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

3363 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

3364 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

3367 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


3368 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

3371 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


3372 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

3375 #i‚de‡
GL_EXT_bÀnd_mömax


3376 
	#GL_FUNC_ADD_EXT
 0x8006

	)

3377 
	#GL_MIN_EXT
 0x8007

	)

3378 
	#GL_MAX_EXT
 0x8008

	)

3379 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

3382 #i‚de‡
GL_EXT_bÀnd_subåa˘


3383 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

3384 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

3387 #i‚de‡
GL_EXT_bÀnd_logic_›


3390 #i‚de‡
GL_SGIX_öãæa˚


3391 
	#GL_INTERLACE_SGIX
 0x8094

	)

3394 #i‚de‡
GL_SGIX_pixñ_tûes


3395 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

3396 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

3397 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

3398 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

3399 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

3400 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

3401 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

3402 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

3405 #i‚de‡
GL_SGIS_ãxtuª_£À˘


3406 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

3407 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

3408 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

3409 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

3410 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

3411 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

3412 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

3413 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

3414 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

3415 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

3416 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

3417 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

3418 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

3419 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

3420 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

3421 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

3422 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

3423 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

3424 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

3425 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

3426 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

3427 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

3430 #i‚de‡
GL_SGIX_•rôe


3431 
	#GL_SPRITE_SGIX
 0x8148

	)

3432 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

3433 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

3434 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

3435 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

3436 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

3437 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

3440 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


3441 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

3444 #i‚de‡
GL_EXT_poöt_∑ømëîs


3445 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

3446 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

3447 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

3448 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

3451 #i‚de‡
GL_SGIS_poöt_∑ømëîs


3452 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

3453 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

3454 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

3455 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

3458 #i‚de‡
GL_SGIX_ö°rumíts


3459 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

3460 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

3463 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


3464 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

3465 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

3466 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

3467 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

3470 #i‚de‡
GL_SGIX_‰amezoom


3471 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

3472 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

3473 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

3476 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


3479 #i‚de‡
GL_FfdMaskSGIX


3480 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

3481 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

3484 #i‚de‡
GL_SGIX_pﬁynomül_ffd


3485 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

3486 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

3487 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

3488 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

3491 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


3492 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

3493 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

3496 #i‚de‡
GL_SGIX_Êush_ø°î


3499 #i‚de‡
GL_SGIX_dïth_ãxtuª


3500 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

3501 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

3502 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

3505 #i‚de‡
GL_SGIS_fog_fun˘i⁄


3506 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

3507 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

3508 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

3511 #i‚de‡
GL_SGIX_fog_off£t


3512 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

3513 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

3516 #i‚de‡
GL_HP_image_å™sf‹m


3517 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

3518 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

3519 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

3520 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

3521 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

3522 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

3523 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

3524 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

3525 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

3526 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

3527 
	#GL_CUBIC_HP
 0x815F

	)

3528 
	#GL_AVERAGE_HP
 0x8160

	)

3529 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

3530 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

3531 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

3534 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


3535 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

3536 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

3537 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

3538 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

3541 #i‚de‡
GL_INGR_∑Àâe_buf„r


3544 #i‚de‡
GL_SGIX_ãxtuª_add_ív


3545 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

3548 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


3551 #i‚de‡
GL_PGI_vîãx_höts


3552 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

3553 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

3554 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

3555 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

3556 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

3557 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

3558 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

3559 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

3560 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

3561 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

3562 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

3563 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

3564 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

3565 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

3566 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

3567 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

3568 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

3569 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

3570 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

3571 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

3572 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

3573 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

3576 #i‚de‡
GL_PGI_misc_höts


3577 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

3578 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

3579 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

3580 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

3581 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

3582 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

3583 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

3584 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

3585 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

3586 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

3587 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

3588 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

3589 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

3590 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

3591 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

3592 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

3593 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

3594 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

3595 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

3596 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

3599 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


3600 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

3601 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

3602 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

3603 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

3604 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

3605 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

3606 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

3609 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


3610 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

3613 #i‚de‡
GL_SGIX_li°_¥i‹ôy


3614 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

3617 #i‚de‡
GL_SGIX_ú_ö°rumít1


3618 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

3621 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


3622 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

3625 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


3626 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

3627 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

3628 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

3631 #i‚de‡
GL_SGIX_shadow_ambõ¡


3632 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

3635 #i‚de‡
GL_EXT_ödex_ãxtuª


3638 #i‚de‡
GL_EXT_ödex_m©îül


3639 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

3640 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

3641 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

3644 #i‚de‡
GL_EXT_ödex_func


3645 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

3646 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

3647 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

3650 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


3651 
	#GL_IUI_V2F_EXT
 0x81AD

	)

3652 
	#GL_IUI_V3F_EXT
 0x81AE

	)

3653 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

3654 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

3655 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

3656 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

3657 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

3658 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

3661 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


3662 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

3663 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

3666 #i‚de‡
GL_EXT_cuŒ_vîãx


3667 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

3668 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

3669 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

3672 #i‚de‡
GL_SGIX_y¸cb


3673 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

3674 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

3677 #i‚de‡
GL_SGIX_‰agmít_lightög


3678 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

3679 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

3680 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

3681 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

3682 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

3683 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

3684 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

3685 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

3686 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

3687 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

3688 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

3689 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

3690 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

3691 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

3692 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

3693 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

3694 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

3695 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

3696 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

3697 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

3700 #i‚de‡
GL_IBM_ø°îpos_˛ù


3701 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

3704 #i‚de‡
GL_HP_ãxtuª_lightög


3705 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

3706 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

3707 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

3710 #i‚de‡
GL_EXT_døw_ønge_ñemíts


3711 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

3712 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

3715 #i‚de‡
GL_WIN_ph⁄g_shadög


3716 
	#GL_PHONG_WIN
 0x80EA

	)

3717 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

3720 #i‚de‡
GL_WIN_•ecuœr_fog


3721 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

3724 #i‚de‡
GL_EXT_light_ãxtuª


3725 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

3726 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

3727 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

3728 
	#GL_ATTENUATION_EXT
 0x834D

	)

3729 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

3730 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

3731 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

3732 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

3733 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

3737 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


3738 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

3739 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

3742 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


3743 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

3744 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

3745 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

3746 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

3747 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

3748 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

3749 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

3752 #i‚de‡
GL_EXT_bgø


3753 
	#GL_BGR_EXT
 0x80E0

	)

3754 
	#GL_BGRA_EXT
 0x80E1

	)

3757 #i‚de‡
GL_SGIX_async


3758 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

3761 #i‚de‡
GL_SGIX_async_pixñ


3762 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

3763 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

3764 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

3765 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

3766 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

3767 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

3770 #i‚de‡
GL_SGIX_async_hi°ogøm


3771 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

3772 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

3775 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


3778 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


3779 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

3780 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

3781 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

3782 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

3783 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

3786 #i‚de‡
GL_HP_oc˛usi⁄_ã°


3787 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

3788 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

3791 #i‚de‡
GL_EXT_pixñ_å™sf‹m


3792 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

3793 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

3794 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

3795 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

3796 
	#GL_CUBIC_EXT
 0x8334

	)

3797 
	#GL_AVERAGE_EXT
 0x8335

	)

3798 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

3799 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

3800 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

3803 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


3806 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


3807 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

3810 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


3811 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

3812 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

3813 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

3816 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


3817 
	#GL_COLOR_SUM_EXT
 0x8458

	)

3818 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

3819 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

3820 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

3821 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

3822 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

3823 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

3826 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


3827 
	#GL_PERTURB_EXT
 0x85AE

	)

3828 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

3831 #i‚de‡
GL_EXT_mu…i_døw_¨øys


3834 #i‚de‡
GL_EXT_fog_co‹d


3835 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

3836 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

3837 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

3838 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

3839 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

3840 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

3841 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

3842 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

3845 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


3846 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

3847 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

3850 #i‚de‡
GL_EXT_co‹dö©e_‰ame


3851 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

3852 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

3853 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

3854 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

3855 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

3856 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

3857 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

3858 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

3859 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

3860 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

3861 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

3862 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

3863 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

3864 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

3867 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


3868 
	#GL_COMBINE_EXT
 0x8570

	)

3869 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

3870 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

3871 
	#GL_RGB_SCALE_EXT
 0x8573

	)

3872 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

3873 
	#GL_INTERPOLATE_EXT
 0x8575

	)

3874 
	#GL_CONSTANT_EXT
 0x8576

	)

3875 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

3876 
	#GL_PREVIOUS_EXT
 0x8578

	)

3877 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

3878 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

3879 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

3880 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

3881 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

3882 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

3883 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

3884 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

3885 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

3886 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

3887 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

3888 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

3891 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


3892 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

3895 #i‚de‡
GL_APPLE_å™sf‹m_höt


3896 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

3899 #i‚de‡
GL_SGIX_fog_sˇÀ


3900 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

3901 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

3904 #i‚de‡
GL_SUNX_c⁄°™t_d©a


3905 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

3906 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

3909 #i‚de‡
GL_SUN_globÆ_Æpha


3910 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

3911 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

3914 #i‚de‡
GL_SUN_åüngÀ_li°


3915 
	#GL_RESTART_SUN
 0x0001

	)

3916 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

3917 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

3918 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

3919 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

3920 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

3921 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

3922 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

3923 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

3924 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

3925 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

3926 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

3927 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

3928 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

3929 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

3930 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

3931 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

3934 #i‚de‡
GL_SUN_vîãx


3937 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


3938 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

3939 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

3940 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

3941 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

3944 #i‚de‡
GL_INGR_cﬁ‹_˛amp


3945 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

3946 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

3947 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

3948 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

3949 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

3950 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

3951 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

3952 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

3955 #i‚de‡
GL_INGR_öãæa˚_ªad


3956 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

3959 #i‚de‡
GL_EXT_°ícû_wøp


3960 
	#GL_INCR_WRAP_EXT
 0x8507

	)

3961 
	#GL_DECR_WRAP_EXT
 0x8508

	)

3964 #i‚de‡
GL_EXT_422_pixñs


3965 
	#GL_422_EXT
 0x80CC

	)

3966 
	#GL_422_REV_EXT
 0x80CD

	)

3967 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

3968 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

3971 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


3972 
	#GL_NORMAL_MAP_NV
 0x8511

	)

3973 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

3976 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


3977 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

3978 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

3979 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

3980 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

3981 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

3982 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

3983 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

3984 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

3985 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

3986 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

3987 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

3988 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

3991 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


3992 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

3995 #i‚de‡
GL_EXT_ãxtuª_ív_add


3998 #i‚de‡
GL_EXT_ãxtuª_lod_büs


3999 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

4000 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

4001 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

4004 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


4005 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

4006 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

4009 #i‚de‡
GL_EXT_vîãx_weightög


4010 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

4011 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

4012 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

4013 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

4014 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

4015 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

4016 
	#GL_MODELVIEW1_EXT
 0x850A

	)

4017 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

4018 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

4019 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

4020 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

4021 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

4022 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

4025 #i‚de‡
GL_NV_light_max_exp⁄ít


4026 
	#GL_MAX_SHININESS_NV
 0x8504

	)

4027 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

4030 #i‚de‡
GL_NV_vîãx_¨øy_ønge


4031 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

4032 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

4033 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

4034 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

4035 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

4038 #i‚de‡
GL_NV_ªgi°î_comböîs


4039 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

4040 
	#GL_VARIABLE_A_NV
 0x8523

	)

4041 
	#GL_VARIABLE_B_NV
 0x8524

	)

4042 
	#GL_VARIABLE_C_NV
 0x8525

	)

4043 
	#GL_VARIABLE_D_NV
 0x8526

	)

4044 
	#GL_VARIABLE_E_NV
 0x8527

	)

4045 
	#GL_VARIABLE_F_NV
 0x8528

	)

4046 
	#GL_VARIABLE_G_NV
 0x8529

	)

4047 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

4048 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

4049 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

4050 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

4051 
	#GL_SPARE0_NV
 0x852E

	)

4052 
	#GL_SPARE1_NV
 0x852F

	)

4053 
	#GL_DISCARD_NV
 0x8530

	)

4054 
	#GL_E_TIMES_F_NV
 0x8531

	)

4055 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

4056 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

4057 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

4058 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

4059 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

4060 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

4061 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

4062 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

4063 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

4064 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

4065 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

4066 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

4067 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

4068 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

4069 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

4070 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

4071 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

4072 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

4073 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

4074 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

4075 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

4076 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

4077 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

4078 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

4079 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

4080 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

4081 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

4082 
	#GL_COMBINER0_NV
 0x8550

	)

4083 
	#GL_COMBINER1_NV
 0x8551

	)

4084 
	#GL_COMBINER2_NV
 0x8552

	)

4085 
	#GL_COMBINER3_NV
 0x8553

	)

4086 
	#GL_COMBINER4_NV
 0x8554

	)

4087 
	#GL_COMBINER5_NV
 0x8555

	)

4088 
	#GL_COMBINER6_NV
 0x8556

	)

4089 
	#GL_COMBINER7_NV
 0x8557

	)

4097 #i‚de‡
GL_NV_fog_di°™˚


4098 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

4099 
	#GL_EYE_RADIAL_NV
 0x855B

	)

4100 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

4104 #i‚de‡
GL_NV_ãxgí_emboss


4105 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

4106 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

4107 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

4110 #i‚de‡
GL_NV_bÀnd_squ¨e


4113 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


4114 
	#GL_COMBINE4_NV
 0x8503

	)

4115 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

4116 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

4117 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

4118 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

4121 #i‚de‡
GL_MESA_ªsize_buf„rs


4124 #i‚de‡
GL_MESA_wödow_pos


4127 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


4128 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

4129 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

4130 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

4131 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

4134 #i‚de‡
GL_IBM_cuŒ_vîãx


4135 
	#GL_CULL_VERTEX_IBM
 103050

	)

4138 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


4141 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


4142 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

4143 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

4144 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

4145 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

4146 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

4147 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

4148 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

4149 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

4150 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

4151 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

4152 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

4153 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

4154 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

4155 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

4156 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

4157 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

4160 #i‚de‡
GL_SGIX_subßm∂e


4161 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

4162 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

4163 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

4164 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

4165 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

4168 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


4171 #i‚de‡
GL_SGIX_y¸cba


4172 
	#GL_YCRCB_SGIX
 0x8318

	)

4173 
	#GL_YCRCBA_SGIX
 0x8319

	)

4176 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


4177 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

4178 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

4179 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

4182 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


4183 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

4184 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

4187 #i‚de‡
GL_3DFX_mu…ißm∂e


4188 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

4189 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

4190 
	#GL_SAMPLES_3DFX
 0x86B4

	)

4191 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

4194 #i‚de‡
GL_3DFX_tbuf„r


4197 #i‚de‡
GL_EXT_mu…ißm∂e


4198 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

4199 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

4200 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

4201 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

4202 
	#GL_1PASS_EXT
 0x80A1

	)

4203 
	#GL_2PASS_0_EXT
 0x80A2

	)

4204 
	#GL_2PASS_1_EXT
 0x80A3

	)

4205 
	#GL_4PASS_0_EXT
 0x80A4

	)

4206 
	#GL_4PASS_1_EXT
 0x80A5

	)

4207 
	#GL_4PASS_2_EXT
 0x80A6

	)

4208 
	#GL_4PASS_3_EXT
 0x80A7

	)

4209 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

4210 
	#GL_SAMPLES_EXT
 0x80A9

	)

4211 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

4212 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

4213 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

4214 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

4217 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


4218 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

4219 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

4222 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


4223 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

4226 #i‚de‡
GL_SGIX_ªßm∂e


4227 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

4228 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

4229 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

4230 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

4231 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

4234 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


4235 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

4236 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

4237 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

4238 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

4239 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

4240 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

4241 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

4242 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

4245 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


4246 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

4249 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


4250 
	#GL_DOT3_RGB_EXT
 0x8740

	)

4251 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

4254 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


4255 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

4256 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

4259 #i‚de‡
GL_NV_„n˚


4260 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

4261 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

4262 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

4265 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


4266 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

4269 #i‚de‡
GL_NV_evÆu©‹s


4270 
	#GL_EVAL_2D_NV
 0x86C0

	)

4271 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

4272 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

4273 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

4274 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

4275 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

4276 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

4277 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

4278 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

4279 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

4280 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

4281 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

4282 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

4283 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

4284 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

4285 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

4286 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

4287 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

4288 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

4289 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

4290 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

4291 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

4292 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

4293 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

4296 #i‚de‡
GL_NV_∑cked_dïth_°ícû


4297 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

4298 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

4301 #i‚de‡
GL_NV_ªgi°î_comböîs2


4302 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

4305 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


4308 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


4309 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

4310 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

4311 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

4312 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

4315 #i‚de‡
GL_NV_ãxtuª_shadî


4316 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

4317 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

4318 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

4319 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

4320 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

4321 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

4322 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

4323 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

4324 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

4325 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

4326 
	#GL_CULL_MODES_NV
 0x86E0

	)

4327 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

4328 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

4329 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

4330 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

4331 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

4332 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

4333 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

4334 
	#GL_CONST_EYE_NV
 0x86E5

	)

4335 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

4336 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

4337 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

4338 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

4339 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

4340 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

4341 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

4342 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

4343 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

4344 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

4345 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

4346 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

4347 
	#GL_HILO_NV
 0x86F4

	)

4348 
	#GL_DSDT_NV
 0x86F5

	)

4349 
	#GL_DSDT_MAG_NV
 0x86F6

	)

4350 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

4351 
	#GL_HILO16_NV
 0x86F8

	)

4352 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

4353 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

4354 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

4355 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

4356 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

4357 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

4358 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

4359 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

4360 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

4361 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

4362 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

4363 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

4364 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

4365 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

4366 
	#GL_DSDT8_NV
 0x8709

	)

4367 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

4368 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

4369 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

4370 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

4371 
	#GL_HI_SCALE_NV
 0x870E

	)

4372 
	#GL_LO_SCALE_NV
 0x870F

	)

4373 
	#GL_DS_SCALE_NV
 0x8710

	)

4374 
	#GL_DT_SCALE_NV
 0x8711

	)

4375 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

4376 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

4377 
	#GL_HI_BIAS_NV
 0x8714

	)

4378 
	#GL_LO_BIAS_NV
 0x8715

	)

4379 
	#GL_DS_BIAS_NV
 0x8716

	)

4380 
	#GL_DT_BIAS_NV
 0x8717

	)

4381 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

4382 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

4383 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

4384 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

4385 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

4386 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

4387 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

4388 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

4391 #i‚de‡
GL_NV_ãxtuª_shadî2


4392 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

4395 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


4396 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

4399 #i‚de‡
GL_NV_vîãx_¥ogøm


4400 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

4401 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

4402 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

4403 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

4404 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

4405 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

4406 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

4407 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

4408 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

4409 
	#GL_IDENTITY_NV
 0x862A

	)

4410 
	#GL_INVERSE_NV
 0x862B

	)

4411 
	#GL_TRANSPOSE_NV
 0x862C

	)

4412 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

4413 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

4414 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

4415 
	#GL_MATRIX0_NV
 0x8630

	)

4416 
	#GL_MATRIX1_NV
 0x8631

	)

4417 
	#GL_MATRIX2_NV
 0x8632

	)

4418 
	#GL_MATRIX3_NV
 0x8633

	)

4419 
	#GL_MATRIX4_NV
 0x8634

	)

4420 
	#GL_MATRIX5_NV
 0x8635

	)

4421 
	#GL_MATRIX6_NV
 0x8636

	)

4422 
	#GL_MATRIX7_NV
 0x8637

	)

4423 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

4424 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

4425 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

4426 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

4427 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

4428 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

4429 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

4430 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

4431 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

4432 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

4433 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

4434 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

4435 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

4436 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

4437 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

4438 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

4439 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

4440 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

4441 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

4442 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

4443 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

4444 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

4445 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

4446 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

4447 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

4448 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

4449 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

4450 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

4451 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

4452 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

4453 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

4454 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

4455 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

4456 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

4457 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

4458 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

4459 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

4460 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

4461 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

4462 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

4463 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

4464 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

4465 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

4466 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

4467 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

4468 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

4469 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

4470 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

4471 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

4472 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

4473 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

4474 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

4475 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

4476 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

4477 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

4478 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

4479 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

4480 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

4481 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

4482 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

4485 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


4486 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

4487 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

4488 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

4491 #i‚de‡
GL_SGIX_sˇÀbüs_höt


4492 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

4495 #i‚de‡
GL_OML_öãæa˚


4496 
	#GL_INTERLACE_OML
 0x8980

	)

4497 
	#GL_INTERLACE_READ_OML
 0x8981

	)

4500 #i‚de‡
GL_OML_subßm∂e


4501 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

4502 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

4505 #i‚de‡
GL_OML_ªßm∂e


4506 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

4507 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

4508 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

4509 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

4510 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

4511 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

4514 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


4515 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

4516 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

4519 #i‚de‡
GL_ATI_ívm≠_bumpm≠


4520 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

4521 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

4522 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

4523 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

4524 
	#GL_DUDV_ATI
 0x8779

	)

4525 
	#GL_DU8DV8_ATI
 0x877A

	)

4526 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

4527 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

4530 #i‚de‡
GL_ATI_‰agmít_shadî


4531 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

4532 
	#GL_REG_0_ATI
 0x8921

	)

4533 
	#GL_REG_1_ATI
 0x8922

	)

4534 
	#GL_REG_2_ATI
 0x8923

	)

4535 
	#GL_REG_3_ATI
 0x8924

	)

4536 
	#GL_REG_4_ATI
 0x8925

	)

4537 
	#GL_REG_5_ATI
 0x8926

	)

4538 
	#GL_REG_6_ATI
 0x8927

	)

4539 
	#GL_REG_7_ATI
 0x8928

	)

4540 
	#GL_REG_8_ATI
 0x8929

	)

4541 
	#GL_REG_9_ATI
 0x892A

	)

4542 
	#GL_REG_10_ATI
 0x892B

	)

4543 
	#GL_REG_11_ATI
 0x892C

	)

4544 
	#GL_REG_12_ATI
 0x892D

	)

4545 
	#GL_REG_13_ATI
 0x892E

	)

4546 
	#GL_REG_14_ATI
 0x892F

	)

4547 
	#GL_REG_15_ATI
 0x8930

	)

4548 
	#GL_REG_16_ATI
 0x8931

	)

4549 
	#GL_REG_17_ATI
 0x8932

	)

4550 
	#GL_REG_18_ATI
 0x8933

	)

4551 
	#GL_REG_19_ATI
 0x8934

	)

4552 
	#GL_REG_20_ATI
 0x8935

	)

4553 
	#GL_REG_21_ATI
 0x8936

	)

4554 
	#GL_REG_22_ATI
 0x8937

	)

4555 
	#GL_REG_23_ATI
 0x8938

	)

4556 
	#GL_REG_24_ATI
 0x8939

	)

4557 
	#GL_REG_25_ATI
 0x893A

	)

4558 
	#GL_REG_26_ATI
 0x893B

	)

4559 
	#GL_REG_27_ATI
 0x893C

	)

4560 
	#GL_REG_28_ATI
 0x893D

	)

4561 
	#GL_REG_29_ATI
 0x893E

	)

4562 
	#GL_REG_30_ATI
 0x893F

	)

4563 
	#GL_REG_31_ATI
 0x8940

	)

4564 
	#GL_CON_0_ATI
 0x8941

	)

4565 
	#GL_CON_1_ATI
 0x8942

	)

4566 
	#GL_CON_2_ATI
 0x8943

	)

4567 
	#GL_CON_3_ATI
 0x8944

	)

4568 
	#GL_CON_4_ATI
 0x8945

	)

4569 
	#GL_CON_5_ATI
 0x8946

	)

4570 
	#GL_CON_6_ATI
 0x8947

	)

4571 
	#GL_CON_7_ATI
 0x8948

	)

4572 
	#GL_CON_8_ATI
 0x8949

	)

4573 
	#GL_CON_9_ATI
 0x894A

	)

4574 
	#GL_CON_10_ATI
 0x894B

	)

4575 
	#GL_CON_11_ATI
 0x894C

	)

4576 
	#GL_CON_12_ATI
 0x894D

	)

4577 
	#GL_CON_13_ATI
 0x894E

	)

4578 
	#GL_CON_14_ATI
 0x894F

	)

4579 
	#GL_CON_15_ATI
 0x8950

	)

4580 
	#GL_CON_16_ATI
 0x8951

	)

4581 
	#GL_CON_17_ATI
 0x8952

	)

4582 
	#GL_CON_18_ATI
 0x8953

	)

4583 
	#GL_CON_19_ATI
 0x8954

	)

4584 
	#GL_CON_20_ATI
 0x8955

	)

4585 
	#GL_CON_21_ATI
 0x8956

	)

4586 
	#GL_CON_22_ATI
 0x8957

	)

4587 
	#GL_CON_23_ATI
 0x8958

	)

4588 
	#GL_CON_24_ATI
 0x8959

	)

4589 
	#GL_CON_25_ATI
 0x895A

	)

4590 
	#GL_CON_26_ATI
 0x895B

	)

4591 
	#GL_CON_27_ATI
 0x895C

	)

4592 
	#GL_CON_28_ATI
 0x895D

	)

4593 
	#GL_CON_29_ATI
 0x895E

	)

4594 
	#GL_CON_30_ATI
 0x895F

	)

4595 
	#GL_CON_31_ATI
 0x8960

	)

4596 
	#GL_MOV_ATI
 0x8961

	)

4597 
	#GL_ADD_ATI
 0x8963

	)

4598 
	#GL_MUL_ATI
 0x8964

	)

4599 
	#GL_SUB_ATI
 0x8965

	)

4600 
	#GL_DOT3_ATI
 0x8966

	)

4601 
	#GL_DOT4_ATI
 0x8967

	)

4602 
	#GL_MAD_ATI
 0x8968

	)

4603 
	#GL_LERP_ATI
 0x8969

	)

4604 
	#GL_CND_ATI
 0x896A

	)

4605 
	#GL_CND0_ATI
 0x896B

	)

4606 
	#GL_DOT2_ADD_ATI
 0x896C

	)

4607 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

4608 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

4609 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

4610 
	#GL_NUM_PASSES_ATI
 0x8970

	)

4611 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

4612 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

4613 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

4614 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

4615 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

4616 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

4617 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

4618 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

4619 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

4620 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

4621 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

4622 
	#GL_RED_BIT_ATI
 0x00000001

	)

4623 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

4624 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

4625 
	#GL_2X_BIT_ATI
 0x00000001

	)

4626 
	#GL_4X_BIT_ATI
 0x00000002

	)

4627 
	#GL_8X_BIT_ATI
 0x00000004

	)

4628 
	#GL_HALF_BIT_ATI
 0x00000008

	)

4629 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

4630 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

4631 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

4632 
	#GL_COMP_BIT_ATI
 0x00000002

	)

4633 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

4634 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

4637 #i‚de‡
GL_ATI_≤_åüngÀs


4638 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

4639 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

4640 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

4641 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

4642 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

4643 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

4644 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

4645 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

4646 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

4649 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


4650 
	#GL_STATIC_ATI
 0x8760

	)

4651 
	#GL_DYNAMIC_ATI
 0x8761

	)

4652 
	#GL_PRESERVE_ATI
 0x8762

	)

4653 
	#GL_DISCARD_ATI
 0x8763

	)

4654 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

4655 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

4656 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

4657 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

4660 #i‚de‡
GL_EXT_vîãx_shadî


4661 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

4662 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

4663 
	#GL_OP_INDEX_EXT
 0x8782

	)

4664 
	#GL_OP_NEGATE_EXT
 0x8783

	)

4665 
	#GL_OP_DOT3_EXT
 0x8784

	)

4666 
	#GL_OP_DOT4_EXT
 0x8785

	)

4667 
	#GL_OP_MUL_EXT
 0x8786

	)

4668 
	#GL_OP_ADD_EXT
 0x8787

	)

4669 
	#GL_OP_MADD_EXT
 0x8788

	)

4670 
	#GL_OP_FRAC_EXT
 0x8789

	)

4671 
	#GL_OP_MAX_EXT
 0x878A

	)

4672 
	#GL_OP_MIN_EXT
 0x878B

	)

4673 
	#GL_OP_SET_GE_EXT
 0x878C

	)

4674 
	#GL_OP_SET_LT_EXT
 0x878D

	)

4675 
	#GL_OP_CLAMP_EXT
 0x878E

	)

4676 
	#GL_OP_FLOOR_EXT
 0x878F

	)

4677 
	#GL_OP_ROUND_EXT
 0x8790

	)

4678 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

4679 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

4680 
	#GL_OP_POWER_EXT
 0x8793

	)

4681 
	#GL_OP_RECIP_EXT
 0x8794

	)

4682 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

4683 
	#GL_OP_SUB_EXT
 0x8796

	)

4684 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

4685 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

4686 
	#GL_OP_MOV_EXT
 0x8799

	)

4687 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

4688 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

4689 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

4690 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

4691 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

4692 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

4693 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

4694 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

4695 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

4696 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

4697 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

4698 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

4699 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

4700 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

4701 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

4702 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

4703 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

4704 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

4705 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

4706 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

4707 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

4708 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

4709 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

4710 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

4711 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

4712 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

4713 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

4714 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

4715 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

4716 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

4717 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

4718 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

4719 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

4720 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

4721 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

4722 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

4723 
	#GL_SCALAR_EXT
 0x87BE

	)

4724 
	#GL_VECTOR_EXT
 0x87BF

	)

4725 
	#GL_MATRIX_EXT
 0x87C0

	)

4726 
	#GL_VARIANT_EXT
 0x87C1

	)

4727 
	#GL_INVARIANT_EXT
 0x87C2

	)

4728 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

4729 
	#GL_LOCAL_EXT
 0x87C4

	)

4730 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

4731 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

4732 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

4733 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

4734 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

4735 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

4736 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

4737 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

4738 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

4739 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

4740 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

4741 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

4742 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

4743 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

4744 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

4745 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

4746 
	#GL_X_EXT
 0x87D5

	)

4747 
	#GL_Y_EXT
 0x87D6

	)

4748 
	#GL_Z_EXT
 0x87D7

	)

4749 
	#GL_W_EXT
 0x87D8

	)

4750 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

4751 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

4752 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

4753 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

4754 
	#GL_ZERO_EXT
 0x87DD

	)

4755 
	#GL_ONE_EXT
 0x87DE

	)

4756 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

4757 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

4758 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

4759 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

4760 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

4761 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

4762 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

4763 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

4764 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

4765 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

4766 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

4767 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

4768 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

4769 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

4770 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

4773 #i‚de‡
GL_ATI_vîãx_°ªams


4774 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

4775 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

4776 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

4777 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

4778 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

4779 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

4780 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

4781 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

4782 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

4783 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

4786 #i‚de‡
GL_ATI_ñemít_¨øy


4787 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

4788 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

4789 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

4792 #i‚de‡
GL_SUN_mesh_¨øy


4793 
	#GL_QUAD_MESH_SUN
 0x8614

	)

4794 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

4797 #i‚de‡
GL_SUN_¶i˚_accum


4798 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

4801 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


4802 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

4805 #i‚de‡
GL_NV_dïth_˛amp


4806 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

4809 #i‚de‡
GL_NV_oc˛usi⁄_quîy


4810 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

4811 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

4812 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

4813 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

4816 #i‚de‡
GL_NV_poöt_•rôe


4817 
	#GL_POINT_SPRITE_NV
 0x8861

	)

4818 
	#GL_COORD_REPLACE_NV
 0x8862

	)

4819 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

4822 #i‚de‡
GL_NV_ãxtuª_shadî3


4823 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

4824 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

4825 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

4826 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

4827 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

4828 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

4829 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

4830 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

4831 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

4832 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

4833 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

4834 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

4835 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

4836 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

4837 
	#GL_HILO8_NV
 0x885E

	)

4838 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

4839 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

4842 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


4845 #i‚de‡
GL_EXT_shadow_funcs


4848 #i‚de‡
GL_EXT_°ícû_two_side


4849 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

4850 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

4853 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


4854 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

4857 #i‚de‡
GL_APPLE_˛õ¡_°‹age


4858 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

4861 #i‚de‡
GL_APPLE_ñemít_¨øy


4862 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

4863 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

4864 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

4867 #i‚de‡
GL_APPLE_„n˚


4868 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

4869 
	#GL_FENCE_APPLE
 0x8A0B

	)

4872 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


4873 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

4876 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


4877 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

4878 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

4879 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

4880 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

4881 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

4882 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

4883 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

4886 #i‚de‡
GL_APPLE_ycb¸_422


4887 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

4888 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

4889 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

4892 #i‚de‡
GL_S3_s3tc


4893 
	#GL_RGB_S3TC
 0x83A0

	)

4894 
	#GL_RGB4_S3TC
 0x83A1

	)

4895 
	#GL_RGBA_S3TC
 0x83A2

	)

4896 
	#GL_RGBA4_S3TC
 0x83A3

	)

4897 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

4898 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

4901 #i‚de‡
GL_ATI_døw_buf„rs


4902 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

4903 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

4904 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

4905 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

4906 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

4907 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

4908 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

4909 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

4910 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

4911 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

4912 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

4913 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

4914 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

4915 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

4916 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

4917 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

4918 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

4921 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


4922 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

4923 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

4926 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


4927 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

4928 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

4929 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

4932 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


4933 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

4934 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

4935 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

4936 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

4937 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

4938 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

4939 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

4940 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

4941 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

4942 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

4943 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

4944 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

4947 #i‚de‡
GL_NV_Êﬂt_buf„r


4948 
	#GL_FLOAT_R_NV
 0x8880

	)

4949 
	#GL_FLOAT_RG_NV
 0x8881

	)

4950 
	#GL_FLOAT_RGB_NV
 0x8882

	)

4951 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

4952 
	#GL_FLOAT_R16_NV
 0x8884

	)

4953 
	#GL_FLOAT_R32_NV
 0x8885

	)

4954 
	#GL_FLOAT_RG16_NV
 0x8886

	)

4955 
	#GL_FLOAT_RG32_NV
 0x8887

	)

4956 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

4957 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

4958 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

4959 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

4960 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

4961 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

4962 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

4965 #i‚de‡
GL_NV_‰agmít_¥ogøm


4966 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

4967 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

4968 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

4969 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

4970 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

4971 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

4974 #i‚de‡
GL_NV_hÆf_Êﬂt


4975 
	#GL_HALF_FLOAT_NV
 0x140B

	)

4978 #i‚de‡
GL_NV_pixñ_d©a_ønge


4979 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

4980 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

4981 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

4982 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

4983 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

4984 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

4987 #i‚de‡
GL_NV_¥imôive_ª°¨t


4988 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

4989 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

4992 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


4993 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

4996 #i‚de‡
GL_NV_vîãx_¥ogøm2


4999 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


5002 #i‚de‡
GL_ATI_£∑øã_°ícû


5003 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

5004 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

5005 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

5006 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

5009 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


5012 #i‚de‡
GL_OES_ªad_f‹m©


5013 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5014 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5017 #i‚de‡
GL_EXT_dïth_bounds_ã°


5018 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

5019 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

5022 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


5023 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

5024 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

5025 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

5028 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


5029 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

5030 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

5033 #i‚de‡
GL_MESA_∑ck_övît


5034 
	#GL_PACK_INVERT_MESA
 0x8758

	)

5037 #i‚de‡
GL_MESA_ycb¸_ãxtuª


5038 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

5039 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

5040 
	#GL_YCBCR_MESA
 0x8757

	)

5043 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


5044 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

5045 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

5046 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

5047 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

5050 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


5053 #i‚de‡
GL_NV_‰agmít_¥ogøm2


5054 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

5055 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

5056 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

5057 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

5058 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

5061 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


5066 #i‚de‡
GL_NV_vîãx_¥ogøm3


5070 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


5071 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

5072 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

5073 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

5074 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

5075 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

5076 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

5077 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

5078 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

5079 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

5080 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

5081 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

5082 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

5083 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

5084 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

5085 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

5086 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

5087 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

5088 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

5089 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

5090 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

5091 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

5092 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

5093 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

5094 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

5095 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

5096 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

5097 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

5098 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

5099 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

5100 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

5101 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

5102 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

5103 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

5104 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

5105 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

5106 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

5107 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

5108 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

5109 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

5110 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

5111 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

5112 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

5113 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

5114 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

5115 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

5116 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

5117 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

5118 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

5119 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

5120 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

5121 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

5124 #i‚de‡
GL_GREMEDY_°rög_m¨kî


5127 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


5128 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

5129 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

5130 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

5131 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

5134 #i‚de‡
GL_EXT_°ícû_˛ór_èg


5135 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

5136 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

5139 #i‚de‡
GL_EXT_ãxtuª_sRGB


5140 
	#GL_SRGB_EXT
 0x8C40

	)

5141 
	#GL_SRGB8_EXT
 0x8C41

	)

5142 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

5143 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

5144 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

5145 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

5146 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

5147 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

5148 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

5149 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

5150 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

5151 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

5152 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

5153 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

5154 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

5155 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

5158 #i‚de‡
GL_EXT_‰amebuf„r_blô


5159 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

5160 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

5161 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 
GL_FRAMEBUFFER_BINDING_EXT


	)

5162 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

5165 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


5166 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

5167 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

5168 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

5171 #i‚de‡
GL_MESAX_ãxtuª_°ack


5172 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

5173 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

5174 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

5175 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

5176 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

5177 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

5180 #i‚de‡
GL_EXT_timî_quîy


5181 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

5184 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


5187 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5188 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5189 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5192 #i‚de‡
GL_NV_gpu_¥ogøm4


5193 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

5194 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

5195 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

5196 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

5197 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

5198 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

5199 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

5200 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

5203 #i‚de‡
GL_NV_geomëry_¥ogøm4


5204 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

5205 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

5206 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

5207 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

5208 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

5209 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

5210 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

5211 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

5212 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

5213 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

5214 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

5215 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

5216 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

5217 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

5218 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

5219 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

5222 #i‚de‡
GL_EXT_geomëry_shadî4


5223 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

5228 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

5229 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

5230 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

5231 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

5232 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

5233 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

5245 #i‚de‡
GL_NV_vîãx_¥ogøm4


5246 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

5249 #i‚de‡
GL_EXT_gpu_shadî4


5250 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

5251 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

5252 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

5253 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

5254 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

5255 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

5256 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

5257 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

5258 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

5259 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

5260 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

5261 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

5262 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

5263 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

5264 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

5265 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

5266 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

5267 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

5268 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

5269 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

5270 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

5271 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

5272 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

5273 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

5274 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

5277 #i‚de‡
GL_EXT_døw_ö°™˚d


5280 #i‚de‡
GL_EXT_∑cked_Êﬂt


5281 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

5282 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

5283 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

5286 #i‚de‡
GL_EXT_ãxtuª_¨øy


5287 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

5288 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

5289 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

5290 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

5291 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

5292 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

5293 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

5294 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

5298 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


5299 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

5300 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

5301 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

5302 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

5303 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

5306 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


5307 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

5308 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

5309 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

5310 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

5313 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


5314 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

5315 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

5316 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

5317 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

5320 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


5321 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

5322 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

5323 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

5326 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


5327 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

5328 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

5329 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

5330 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

5333 #i‚de‡
GL_NV_‰agmít_¥ogøm4


5336 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


5337 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

5338 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

5339 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

5340 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

5343 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


5344 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

5345 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

5348 #i‚de‡
GL_NV_geomëry_shadî4


5351 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


5352 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

5353 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

5354 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

5355 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

5356 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

5359 #i‚de‡
GL_EXT_døw_buf„rs2


5362 #i‚de‡
GL_NV_å™sf‹m_„edback


5363 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

5364 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

5365 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

5366 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

5367 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

5368 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

5369 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

5370 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

5371 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

5372 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

5373 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

5374 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

5375 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

5376 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

5377 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

5378 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

5379 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

5380 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

5381 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

5382 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

5383 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

5384 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

5385 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

5386 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

5387 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

5388 
	#GL_LAYER_NV
 0x8DAA

	)

5389 
	#GL_NEXT_BUFFER_NV
 -2

	)

5390 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

5391 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

5392 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

5393 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

5396 #i‚de‡
GL_EXT_bödabÀ_unif‹m


5397 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

5398 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

5399 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

5400 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

5401 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

5402 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

5405 #i‚de‡
GL_EXT_ãxtuª_öãgî


5406 
	#GL_RGBA32UI_EXT
 0x8D70

	)

5407 
	#GL_RGB32UI_EXT
 0x8D71

	)

5408 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

5409 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

5410 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

5411 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

5412 
	#GL_RGBA16UI_EXT
 0x8D76

	)

5413 
	#GL_RGB16UI_EXT
 0x8D77

	)

5414 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

5415 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

5416 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

5417 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

5418 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

5419 
	#GL_RGB8UI_EXT
 0x8D7D

	)

5420 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

5421 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

5422 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

5423 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

5424 
	#GL_RGBA32I_EXT
 0x8D82

	)

5425 
	#GL_RGB32I_EXT
 0x8D83

	)

5426 
	#GL_ALPHA32I_EXT
 0x8D84

	)

5427 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

5428 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

5429 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

5430 
	#GL_RGBA16I_EXT
 0x8D88

	)

5431 
	#GL_RGB16I_EXT
 0x8D89

	)

5432 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

5433 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

5434 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

5435 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

5436 
	#GL_RGBA8I_EXT
 0x8D8E

	)

5437 
	#GL_RGB8I_EXT
 0x8D8F

	)

5438 
	#GL_ALPHA8I_EXT
 0x8D90

	)

5439 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

5440 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

5441 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

5442 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

5443 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

5444 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

5445 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

5446 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

5447 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

5448 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

5449 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

5450 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

5451 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

5452 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

5455 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


5458 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


5459 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

5460 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

5461 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

5462 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

5465 #i‚de‡
GL_NV_¥e£¡_video


5466 
	#GL_FRAME_NV
 0x8E26

	)

5467 
	#GL_FIELDS_NV
 0x8E27

	)

5468 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

5469 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

5470 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

5471 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

5474 #i‚de‡
GL_EXT_å™sf‹m_„edback


5475 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

5476 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

5477 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

5478 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

5479 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

5480 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

5481 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

5482 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

5483 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

5484 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

5485 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

5486 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

5487 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

5488 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

5489 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

5492 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


5493 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

5494 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

5495 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

5498 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


5502 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


5503 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

5504 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

5505 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

5506 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

5507 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

5510 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


5511 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

5512 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

5513 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

5514 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

5515 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

5516 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

5517 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

5518 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

5519 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

5520 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

5523 #i‚de‡
GL_NV_å™sf‹m_„edback2


5524 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

5525 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

5526 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

5527 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

5530 #i‚de‡
GL_ATI_memöfo


5531 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

5532 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

5533 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

5536 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5537 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5538 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5539 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5540 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5541 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5542 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5543 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5546 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5549 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


5550 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5551 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5552 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5553 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5554 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5555 
	#GL_DISCRETE_AMD
 0x9006

	)

5556 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5559 #i‚de‡
GL_EXT_¥ovokög_vîãx


5560 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

5561 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

5562 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

5563 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

5566 #i‚de‡
GL_EXT_ãxtuª_¢‹m


5567 
	#GL_ALPHA_SNORM
 0x9010

	)

5568 
	#GL_LUMINANCE_SNORM
 0x9011

	)

5569 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

5570 
	#GL_INTENSITY_SNORM
 0x9013

	)

5571 
	#GL_ALPHA8_SNORM
 0x9014

	)

5572 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

5573 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

5574 
	#GL_INTENSITY8_SNORM
 0x9017

	)

5575 
	#GL_ALPHA16_SNORM
 0x9018

	)

5576 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

5577 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

5578 
	#GL_INTENSITY16_SNORM
 0x901B

	)

5594 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5597 #i‚de‡
GL_APPLE_ãxtuª_ønge


5598 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5599 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5600 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5601 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5606 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5607 
	#GL_HALF_APPLE
 0x140B

	)

5608 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5609 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5610 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5611 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5612 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5613 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5614 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5615 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5616 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5617 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5618 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5619 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5620 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5623 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5624 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5625 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5626 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5627 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5628 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5629 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5630 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5631 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5632 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5633 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5636 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5637 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5640 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5641 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5642 
	#GL_RELEASED_APPLE
 0x8A19

	)

5643 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5644 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5645 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5646 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5649 #i‚de‡
GL_APPLE_row_byãs


5650 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5651 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5654 #i‚de‡
GL_APPLE_rgb_422


5655 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5660 #i‚de‡
GL_NV_video_ˇ±uª


5661 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

5662 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

5663 
	#GL_FIELD_UPPER_NV
 0x9022

	)

5664 
	#GL_FIELD_LOWER_NV
 0x9023

	)

5665 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

5666 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

5667 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

5668 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

5669 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

5670 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

5671 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

5672 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

5673 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

5674 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

5675 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

5676 
	#GL_SUCCESS_NV
 0x902F

	)

5677 
	#GL_FAILURE_NV
 0x9030

	)

5678 
	#GL_YCBYCR8_422_NV
 0x9031

	)

5679 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

5680 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

5681 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

5682 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

5683 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

5684 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

5685 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

5686 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

5687 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

5688 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

5689 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

5692 #i‚de‡
GL_NV_c›y_image


5695 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


5696 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

5699 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


5702 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


5703 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

5704 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

5705 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

5708 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


5709 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

5710 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

5711 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

5712 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

5713 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

5714 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

5715 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

5716 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

5717 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

5718 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

5719 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

5720 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

5721 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

5722 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

5723 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

5724 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

5725 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

5726 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

5727 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

5728 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

5729 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

5730 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

5731 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

5732 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

5733 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

5736 #i‚de‡
GL_NV_ãxtuª_b¨rõr


5739 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5742 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5746 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5749 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


5750 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

5751 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

5752 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

5753 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

5754 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

5755 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

5756 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

5757 
	#GL_IMAGE_1D_EXT
 0x904C

	)

5758 
	#GL_IMAGE_2D_EXT
 0x904D

	)

5759 
	#GL_IMAGE_3D_EXT
 0x904E

	)

5760 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

5761 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

5762 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

5763 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

5764 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

5765 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

5766 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

5767 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

5768 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

5769 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

5770 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

5771 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

5772 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

5773 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

5774 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

5775 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

5776 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

5777 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

5778 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

5779 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

5780 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

5781 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

5782 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

5783 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

5784 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

5785 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

5786 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

5787 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

5788 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

5789 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

5790 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

5791 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

5792 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

5793 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

5794 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

5795 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

5796 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

5797 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

5798 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

5799 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

5800 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

5801 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

5802 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

5803 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

5804 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

5807 #i‚de‡
GL_EXT_vîãx_©åib_64bô


5809 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

5810 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

5811 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

5812 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

5813 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

5814 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

5815 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

5816 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

5817 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

5818 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

5819 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

5820 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

5823 #i‚de‡
GL_NV_gpu_¥ogøm5


5824 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

5825 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

5826 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

5827 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

5828 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

5829 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

5830 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

5831 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

5834 #i‚de‡
GL_NV_gpu_shadî5


5835 
	#GL_INT64_NV
 0x140E

	)

5836 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5837 
	#GL_INT8_NV
 0x8FE0

	)

5838 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5839 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5840 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5841 
	#GL_INT16_NV
 0x8FE4

	)

5842 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5843 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5844 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5845 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5846 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5847 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5848 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5849 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5850 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5851 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5852 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5853 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5854 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5855 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5856 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5857 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5858 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5859 
	#GL_FLOAT16_NV
 0x8FF8

	)

5860 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5861 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5862 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5866 #i‚de‡
GL_NV_shadî_buf„r_°‹e


5867 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

5872 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


5873 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

5874 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

5875 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

5876 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

5877 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

5880 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


5885 #i‚de‡
GL_NV_mu…ißm∂e_covîage


5886 
	#GL_COVERAGE_SAMPLES_NV
 0x80A9

	)

5887 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

5890 #i‚de‡
GL_AMD_«me_gí_dñëe


5891 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5892 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5893 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5894 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5895 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5898 #i‚de‡
GL_AMD_debug_ouçut


5899 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

5900 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5901 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5902 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5903 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5904 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5905 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5906 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5907 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5908 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5909 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5910 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5911 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5912 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5915 #i‚de‡
GL_NV_vd∑u_öãr›


5916 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

5917 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

5918 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

5919 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

5922 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5925 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5926 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5927 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5930 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


5931 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

5932 
	#GL_DECODE_EXT
 0x8A49

	)

5933 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

5936 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


5937 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

5938 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

5941 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5942 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5943 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5946 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5947 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5950 #i‚de‡
GL_EXT_x11_sync_obje˘


5951 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

5954 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


5957 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


5958 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

5959 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

5962 #i‚de‡
GL_NV_∑th_ªndîög


5963 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

5964 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

5965 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

5966 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

5967 
	#GL_FILE_NAME_NV
 0x9074

	)

5968 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

5969 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

5970 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

5971 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

5972 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

5973 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

5974 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

5975 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

5976 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

5977 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

5978 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

5979 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

5980 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

5981 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

5982 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

5983 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

5984 
	#GL_PATH_SAMPLE_QUALITY_NV
 0x9085

	)

5985 
	#GL_PATH_STROKE_BOUND_NV
 0x9086

	)

5986 
	#GL_PATH_STROKE_OVERSAMPLE_COUNT_NV
 0x9087

	)

5987 
	#GL_COUNT_UP_NV
 0x9088

	)

5988 
	#GL_COUNT_DOWN_NV
 0x9089

	)

5989 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

5990 
	#GL_CONVEX_HULL_NV
 0x908B

	)

5991 
	#GL_MULTI_HULLS_NV
 0x908C

	)

5992 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

5993 
	#GL_TRANSLATE_X_NV
 0x908E

	)

5994 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

5995 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

5996 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

5997 
	#GL_AFFINE_2D_NV
 0x9092

	)

5998 
	#GL_PROJECTIVE_2D_NV
 0x9093

	)

5999 
	#GL_AFFINE_3D_NV
 0x9094

	)

6000 
	#GL_PROJECTIVE_3D_NV
 0x9095

	)

6001 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

6002 
	#GL_TRANSPOSE_PROJECTIVE_2D_NV
 0x9097

	)

6003 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

6004 
	#GL_TRANSPOSE_PROJECTIVE_3D_NV
 0x9099

	)

6005 
	#GL_UTF8_NV
 0x909A

	)

6006 
	#GL_UTF16_NV
 0x909B

	)

6007 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

6008 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

6009 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

6010 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

6011 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

6012 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

6013 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

6014 
	#GL_SQUARE_NV
 0x90A3

	)

6015 
	#GL_ROUND_NV
 0x90A4

	)

6016 
	#GL_TRIANGULAR_NV
 0x90A5

	)

6017 
	#GL_BEVEL_NV
 0x90A6

	)

6018 
	#GL_MITER_REVERT_NV
 0x90A7

	)

6019 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

6020 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

6021 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

6022 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

6023 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

6024 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

6025 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

6026 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

6027 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

6028 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

6029 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

6030 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

6031 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

6032 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

6033 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

6034 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

6035 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

6036 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

6037 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

6038 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

6039 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

6040 
	#GL_CLOSE_PATH_NV
 0x00

	)

6041 
	#GL_MOVE_TO_NV
 0x02

	)

6042 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

6043 
	#GL_LINE_TO_NV
 0x04

	)

6044 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

6045 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

6046 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

6047 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

6048 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

6049 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

6050 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

6051 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

6052 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

6053 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

6054 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

6055 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

6056 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

6057 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

6058 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

6059 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

6060 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

6061 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

6062 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

6063 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

6064 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

6065 
	#GL_RESTART_PATH_NV
 0xF0

	)

6066 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

6067 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

6068 
	#GL_RECT_NV
 0xF6

	)

6069 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

6070 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

6071 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

6072 
	#GL_ARC_TO_NV
 0xFE

	)

6073 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

6074 
	#GL_BOLD_BIT_NV
 0x01

	)

6075 
	#GL_ITALIC_BIT_NV
 0x02

	)

6076 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

6077 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

6078 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

6079 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

6080 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

6081 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

6082 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

6083 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

6084 
	#GL_GLYPH_HAS_KERNING_NV
 0x100

	)

6085 
	#GL_FONT_X_MIN_BOUNDS_NV
 0x00010000

	)

6086 
	#GL_FONT_Y_MIN_BOUNDS_NV
 0x00020000

	)

6087 
	#GL_FONT_X_MAX_BOUNDS_NV
 0x00040000

	)

6088 
	#GL_FONT_Y_MAX_BOUNDS_NV
 0x00080000

	)

6089 
	#GL_FONT_UNITS_PER_EM_NV
 0x00100000

	)

6090 
	#GL_FONT_ASCENDER_NV
 0x00200000

	)

6091 
	#GL_FONT_DESCENDER_NV
 0x00400000

	)

6092 
	#GL_FONT_HEIGHT_NV
 0x00800000

	)

6093 
	#GL_FONT_MAX_ADVANCE_WIDTH_NV
 0x01000000

	)

6094 
	#GL_FONT_MAX_ADVANCE_HEIGHT_NV
 0x02000000

	)

6095 
	#GL_FONT_UNDERLINE_POSITION_NV
 0x04000000

	)

6096 
	#GL_FONT_UNDERLINE_THICKNESS_NV
 0x08000000

	)

6097 
	#GL_FONT_HAS_KERNING_NV
 0x10000000

	)

6100 #i‚de‡
GL_AMD_pö√d_mem‹y


6101 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

6104 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


6105 
	#GL_SET_AMD
 0x874A

	)

6106 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

6107 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

6108 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

6111 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


6114 #i‚de‡
GL_AMD_vîãx_shadî_œyî


6117 #i‚de‡
GL_NV_bödÀss_ãxtuª


6120 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


6123 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


6124 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

6125 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

6126 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

6129 #i‚de‡
GL_AMD_•¨£_ãxtuª


6130 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

6131 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

6132 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

6133 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

6134 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

6135 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

6136 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

6137 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

6138 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

6144 
	~<°ddef.h
>

6145 #i‚de‡
GL_VERSION_2_0


6147 
	tGLch¨
;

6150 #i‚de‡
GL_VERSION_1_5


6152 
±rdiff_t
 
	tGLöçå
;

6153 
±rdiff_t
 
	tGLsizeùå
;

6156 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


6158 
±rdiff_t
 
	tGLöçåARB
;

6159 
±rdiff_t
 
	tGLsizeùåARB
;

6162 #i‚de‡
GL_ARB_shadî_obje˘s


6164 
	tGLch¨ARB
;

6165 
	tGLh™dÀARB
;

6169 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


6170 
	tGLhÆfARB
;

6173 #i‚de‡
GL_NV_hÆf_Êﬂt


6174 
	tGLhÆfNV
;

6177 #i‚de‡
GLEXT_64_TYPES_DEFINED


6179 
	#GLEXT_64_TYPES_DEFINED


	)

6182 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

6183 
	~<öây≥s.h
>

6184 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

6185 
	~<öây≥s.h
>

6186 #i‡
deföed
(
__STDC__
)

6187 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

6188 
	töt64_t
;

6189 
	tuöt64_t
;

6191 
	töt64_t
;

6192 
	tuöt64_t
;

6195 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

6196 
	~<öây≥s.h
>

6197 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

6198 
	~<°döt.h
>

6199 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

6200 
	töt32_t
;

6201 
	töt64_t
;

6202 
	tuöt64_t
;

6203 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

6204 
	~<°döt.h
>

6205 #ñi‡
deföed
(
_WIN32
)

6206 
__öt32
 
	töt32_t
;

6207 
__öt64
 
	töt64_t
;

6208 
	t__öt64
 
	tuöt64_t
;

6211 
	~<öây≥s.h
>

6215 #i‚de‡
GL_EXT_timî_quîy


6216 
öt64_t
 
	tGLöt64EXT
;

6217 
uöt64_t
 
	tGLuöt64EXT
;

6220 #i‚de‡
GL_ARB_sync


6221 
öt64_t
 
	tGLöt64
;

6222 
uöt64_t
 
	tGLuöt64
;

6223 
__GLsync
 *
	tGLsync
;

6226 #i‚de‡
GL_ARB_˛_evít


6228 
	g_˛_c⁄ãxt
;

6229 
	g_˛_evít
;

6232 #i‚de‡
GL_ARB_debug_ouçut


6233 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6236 #i‚de‡
GL_AMD_debug_ouçut


6237 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6240 #i‚de‡
GL_KHR_debug


6241 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,
	tGLvoid
 *
	tu£rP¨am
);

6244 #i‚de‡
GL_NV_vd∑u_öãr›


6245 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

6248 #i‚de‡
GL_VERSION_1_2


6249 
	#GL_VERSION_1_2
 1

	)

6250 #ifde‡
GL_GLEXT_PROTOTYPES


6251 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6252 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

6253 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

6254 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

6255 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

6256 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6257 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

6258 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6259 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6260 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6261 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
èbÀ
);

6262 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6263 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6264 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

6265 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6266 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

6267 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

6268 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6269 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6270 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6271 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6272 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6273 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6274 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
image
);

6275 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6276 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6277 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
);

6278 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
);

6279 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

6280 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6281 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6282 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

6283 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6284 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6285 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6286 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6287 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

6288 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

6290 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6291 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

6292 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

6293 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6294 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6295 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6296 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

6297 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6298 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6299 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6300 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

6301 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6302 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6303 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

6304 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6305 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6306 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6307 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6308 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6309 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6310 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6311 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6312 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6313 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

6314 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6315 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6316 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

6317 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

6318 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6319 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6320 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6321 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6322 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6323 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6324 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6325 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6326 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

6327 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

6330 #i‚de‡
GL_VERSION_1_3


6331 
	#GL_VERSION_1_3
 1

	)

6332 #ifde‡
GL_GLEXT_PROTOTYPES


6333 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

6334 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

6335 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6336 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6337 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6338 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6339 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6340 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

6341 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, 
GLvoid
 *
img
);

6342 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

6343 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

6344 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6345 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

6346 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6347 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

6348 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6349 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

6350 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6351 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

6352 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6353 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

6354 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6355 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

6356 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6357 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

6358 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6359 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

6360 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6361 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

6362 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6363 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

6364 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6365 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

6366 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6367 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

6368 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

6369 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

6370 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

6371 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

6372 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

6373 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

6374 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

6375 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

6376 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

6377 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

6378 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

6380 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

6381 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

6382 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6383 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6384 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6385 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6386 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6387 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6388 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

6389 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

6390 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

6391 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6392 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

6393 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6394 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

6395 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6396 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

6397 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6398 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

6399 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6400 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

6401 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6402 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

6403 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6404 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

6405 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6406 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

6407 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6408 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

6409 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6410 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

6411 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6412 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

6413 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6414 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

6415 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6416 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

6417 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6418 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

6419 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

6420 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

6421 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

6422 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

6423 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

6424 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

6425 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

6428 #i‚de‡
GL_VERSION_1_4


6429 
	#GL_VERSION_1_4
 1

	)

6430 #ifde‡
GL_GLEXT_PROTOTYPES


6431 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6432 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

6433 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
døwcou¡
);

6434 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6435 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6436 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6437 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6438 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

6439 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

6440 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

6441 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

6442 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

6444 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

6445 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

6446 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

6447 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

6448 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

6449 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

6450 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

6451 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

6452 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

6453 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

6454 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

6455 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

6456 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

6457 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

6458 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

6459 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6460 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6461 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

6462 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

6463 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

6464 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

6465 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

6466 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

6467 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

6468 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6469 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

6470 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6471 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

6472 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

6473 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

6474 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6475 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

6477 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6478 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

6479 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	tdøwcou¡
);

6480 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6481 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6482 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6483 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6484 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

6485 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

6486 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

6487 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

6488 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6489 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

6490 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6491 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

6492 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6493 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

6494 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6495 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

6496 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6497 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

6498 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6499 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

6500 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

6501 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

6502 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

6503 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

6504 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

6505 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6506 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6507 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6508 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6509 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6510 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

6511 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6512 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6513 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6514 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6515 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6516 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6517 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6518 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6519 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6520 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6521 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6524 #i‚de‡
GL_VERSION_1_5


6525 
	#GL_VERSION_1_5
 1

	)

6526 #ifde‡
GL_GLEXT_PROTOTYPES


6527 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

6528 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

6529 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

6530 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

6531 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

6532 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6533 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6534 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

6535 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

6536 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

6537 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

6538 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

6539 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

6540 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

6541 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLvoid
 *
d©a
);

6542 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

6543 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

6544 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6545 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

6547 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6548 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6549 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

6550 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

6551 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

6552 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6553 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6554 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6555 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

6556 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

6557 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

6558 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6559 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

6560 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

6561 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

6562 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

6563 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

6564 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6565 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

6568 #i‚de‡
GL_VERSION_2_0


6569 
	#GL_VERSION_2_0
 1

	)

6570 #ifde‡
GL_GLEXT_PROTOTYPES


6571 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6572 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

6573 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6574 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6575 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

6576 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

6577 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

6578 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

6579 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

6580 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

6581 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

6582 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

6583 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

6584 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

6585 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

6586 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6587 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6588 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
obj
);

6589 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6590 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6591 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

6592 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6593 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

6594 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

6595 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6596 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

6597 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

6598 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6599 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6600 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6601 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

6602 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

6603 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

6604 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

6605 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
°rög
, c⁄° 
GLöt
 *
Àngth
);

6606 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

6607 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

6608 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

6609 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

6610 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

6611 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

6612 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

6613 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

6614 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

6615 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6616 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6617 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6618 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6619 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6620 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6621 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6622 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6623 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6624 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6625 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6626 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

6627 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

6628 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6629 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

6630 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6631 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

6632 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6633 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6634 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6635 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6636 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6637 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6638 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6639 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6640 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6641 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6642 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6643 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6644 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6645 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6646 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6647 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6648 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

6649 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6650 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6651 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6652 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6653 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6654 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

6655 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6656 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

6657 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6658 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6659 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6660 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6661 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6662 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6663 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6665 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6666 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6667 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6668 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6669 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

6670 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

6671 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

6672 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6673 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

6674 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

6675 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6676 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6677 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

6678 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

6679 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

6680 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6681 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6682 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

6683 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6684 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6685 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

6686 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

6688 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

6689 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6690 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

6691 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

6692 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6693 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6694 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6695 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

6696 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6697 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

6698 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6699 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

6700 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6701 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6702 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6703 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6704 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6705 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6706 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6707 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6708 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6709 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6710 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6711 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6712 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6713 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6714 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6715 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6716 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6717 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6718 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6719 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6720 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

6721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

6724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

6726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

6743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6750 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6751 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6752 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6753 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6754 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6755 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6756 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6760 #i‚de‡
GL_VERSION_2_1


6761 
	#GL_VERSION_2_1
 1

	)

6762 #ifde‡
GL_GLEXT_PROTOTYPES


6763 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6764 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6765 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6766 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6767 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6768 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6770 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6771 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6772 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6773 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6778 #i‚de‡
GL_VERSION_3_0


6779 
	#GL_VERSION_3_0
 1

	)

6784 #ifde‡
GL_GLEXT_PROTOTYPES


6785 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

6786 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6787 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6788 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6789 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6790 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6791 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

6792 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

6793 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

6794 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

6795 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
v¨yögs
, 
GLíum
 
buf„rMode
);

6796 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

6797 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

6798 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

6799 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

6800 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

6801 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6802 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

6803 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

6804 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

6805 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6806 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6807 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

6808 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

6809 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

6810 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

6811 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6812 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6813 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6814 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

6815 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6816 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6817 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6818 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

6819 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

6820 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

6821 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

6822 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

6823 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

6824 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

6825 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6826 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

6827 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

6828 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

6829 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6830 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6831 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6832 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6833 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6834 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6835 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

6836 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6837 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

6838 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

6839 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

6840 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

6841 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

6842 
GLAPI
 c⁄° 
GLubyã
 * 
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

6844 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

6845 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6846 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6847 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6848 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6849 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6850 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

6851 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

6852 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6853 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

6854 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

6855 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

6856 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

6857 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

6858 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

6859 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6860 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6861 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6862 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

6863 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6864 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6865 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6866 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

6867 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

6868 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

6869 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6870 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6871 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6872 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6873 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

6874 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6875 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6876 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6877 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

6878 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

6879 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

6880 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

6881 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

6882 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

6883 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

6884 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6885 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

6886 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

6887 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6888 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6889 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6890 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6891 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6892 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6893 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6894 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6895 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6896 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6897 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

6898 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6899 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6900 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

6901 c⁄° 
	tGLubyã
 * (
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

6904 #i‚de‡
GL_VERSION_3_1


6905 
	#GL_VERSION_3_1
 1

	)

6909 #ifde‡
GL_GLEXT_PROTOTYPES


6910 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

6911 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

6912 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

6913 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

6915 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

6916 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

6917 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6918 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

6921 #i‚de‡
GL_VERSION_3_2


6922 
	#GL_VERSION_3_2
 1

	)

6928 #ifde‡
GL_GLEXT_PROTOTYPES


6929 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

6930 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

6931 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6933 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

6934 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

6935 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6938 #i‚de‡
GL_VERSION_3_3


6939 
	#GL_VERSION_3_3
 1

	)

6950 #ifde‡
GL_GLEXT_PROTOTYPES


6951 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

6953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

6956 #i‚de‡
GL_VERSION_4_0


6957 
	#GL_VERSION_4_0
 1

	)

6970 #ifde‡
GL_GLEXT_PROTOTYPES


6971 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

6972 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

6973 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6974 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

6975 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

6977 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

6978 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

6979 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6980 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

6981 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

6984 #i‚de‡
GL_VERSION_4_1


6985 
	#GL_VERSION_4_1
 1

	)

6995 #i‚de‡
GL_VERSION_4_2


6996 
	#GL_VERSION_4_2
 1

	)

7011 #i‚de‡
GL_VERSION_4_3


7012 
	#GL_VERSION_4_3
 1

	)

7038 #i‚de‡
GL_ARB_mu…ôextuª


7039 
	#GL_ARB_mu…ôextuª
 1

	)

7040 #ifde‡
GL_GLEXT_PROTOTYPES


7041 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

7042 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

7043 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

7044 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7045 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

7046 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7047 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

7048 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7049 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

7050 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7051 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

7052 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7053 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

7054 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7055 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

7056 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7057 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

7058 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7059 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

7060 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7061 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

7062 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7063 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

7064 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7065 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

7066 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7067 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

7068 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

7069 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

7070 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

7071 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

7072 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

7073 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

7074 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

7076 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

7077 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

7078 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

7079 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7080 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

7081 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7082 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

7083 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7084 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

7085 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7086 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

7087 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7088 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

7089 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7090 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

7091 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7092 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

7093 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7094 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

7095 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7096 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

7097 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7098 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

7099 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7100 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

7101 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7102 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

7103 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7104 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

7105 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7106 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

7107 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

7108 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

7109 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

7112 #i‚de‡
GL_ARB_å™•o£_m©rix


7113 
	#GL_ARB_å™•o£_m©rix
 1

	)

7114 #ifde‡
GL_GLEXT_PROTOTYPES


7115 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

7116 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

7117 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

7118 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

7120 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

7121 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

7122 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

7123 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

7126 #i‚de‡
GL_ARB_mu…ißm∂e


7127 
	#GL_ARB_mu…ißm∂e
 1

	)

7128 #ifde‡
GL_GLEXT_PROTOTYPES


7129 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

7131 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7134 #i‚de‡
GL_ARB_ãxtuª_ív_add


7135 
	#GL_ARB_ãxtuª_ív_add
 1

	)

7138 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


7139 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

7142 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


7143 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

7144 #ifde‡
GL_GLEXT_PROTOTYPES


7145 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7146 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7147 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7148 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7149 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7150 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

7151 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, 
GLvoid
 *
img
);

7153 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7154 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7155 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7156 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7157 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7158 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

7159 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

7162 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


7163 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

7166 #i‚de‡
GL_ARB_poöt_∑ømëîs


7167 
	#GL_ARB_poöt_∑ømëîs
 1

	)

7168 #ifde‡
GL_GLEXT_PROTOTYPES


7169 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7170 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7172 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7173 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7176 #i‚de‡
GL_ARB_vîãx_bÀnd


7177 
	#GL_ARB_vîãx_bÀnd
 1

	)

7178 #ifde‡
GL_GLEXT_PROTOTYPES


7179 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

7180 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

7181 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

7182 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

7183 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

7184 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

7185 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

7186 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

7187 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7188 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

7190 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

7191 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

7192 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

7193 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

7194 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

7195 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

7196 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

7197 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

7198 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7199 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

7202 #i‚de‡
GL_ARB_m©rix_∑Àâe


7203 
	#GL_ARB_m©rix_∑Àâe
 1

	)

7204 #ifde‡
GL_GLEXT_PROTOTYPES


7205 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

7206 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

7207 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

7208 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

7209 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7211 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

7212 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

7213 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

7214 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

7215 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7218 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


7219 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

7222 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


7223 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

7226 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


7227 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

7230 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


7231 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

7234 #i‚de‡
GL_ARB_dïth_ãxtuª


7235 
	#GL_ARB_dïth_ãxtuª
 1

	)

7238 #i‚de‡
GL_ARB_shadow


7239 
	#GL_ARB_shadow
 1

	)

7242 #i‚de‡
GL_ARB_shadow_ambõ¡


7243 
	#GL_ARB_shadow_ambõ¡
 1

	)

7246 #i‚de‡
GL_ARB_wödow_pos


7247 
	#GL_ARB_wödow_pos
 1

	)

7248 #ifde‡
GL_GLEXT_PROTOTYPES


7249 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7250 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

7251 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

7252 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

7253 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

7254 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

7255 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

7256 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

7257 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7258 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

7259 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

7260 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

7261 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

7262 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

7263 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

7264 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

7266 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7267 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7268 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7269 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7270 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

7271 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7272 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7273 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7274 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7275 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7276 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7277 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7278 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7279 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7280 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7281 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7284 #i‚de‡
GL_ARB_vîãx_¥ogøm


7285 
	#GL_ARB_vîãx_¥ogøm
 1

	)

7286 #ifde‡
GL_GLEXT_PROTOTYPES


7287 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

7288 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7289 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

7290 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7291 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

7292 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7293 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7294 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7295 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

7296 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7297 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

7298 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7299 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7300 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7301 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

7302 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7303 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

7304 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7305 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

7306 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

7307 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7308 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

7309 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

7310 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

7311 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

7312 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

7313 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7314 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7315 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7316 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

7317 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

7318 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

7319 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

7320 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

7321 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

7322 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

7323 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

7324 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

7325 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

7326 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

7327 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

7328 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

7329 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

7330 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7331 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7332 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7333 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7334 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7335 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7336 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7337 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7338 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7339 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7340 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7341 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7342 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7343 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 *
°rög
);

7344 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

7345 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7346 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7347 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

7348 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

7350 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7351 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7352 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

7353 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7354 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

7355 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7356 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7357 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7358 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7359 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7360 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7361 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7362 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7363 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7364 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7365 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7366 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7367 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7368 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7369 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7370 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7371 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

7372 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7373 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7374 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7375 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

7376 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7377 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7378 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7379 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7380 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

7381 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7382 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7383 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7384 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

7385 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

7386 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7387 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7388 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7389 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

7390 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

7391 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

7392 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

7393 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7394 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

7395 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7396 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7397 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7398 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

7399 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7400 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7401 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

7402 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

7403 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

7404 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

7405 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7406 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

7407 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7408 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7409 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7410 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

7411 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7414 #i‚de‡
GL_ARB_‰agmít_¥ogøm


7415 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

7419 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


7420 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

7421 #ifde‡
GL_GLEXT_PROTOTYPES


7422 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

7423 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

7424 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

7425 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

7426 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

7427 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° 
GLvoid
 *
d©a
);

7428 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, 
GLvoid
 *
d©a
);

7429 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

7430 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

7431 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7432 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

7434 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

7435 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

7436 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

7437 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7438 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

7439 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

7440 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

7441 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

7442 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

7443 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7444 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

7447 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


7448 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

7449 #ifde‡
GL_GLEXT_PROTOTYPES


7450 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

7451 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

7452 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

7453 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

7454 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

7455 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7456 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7457 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

7459 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

7460 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

7461 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

7462 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

7463 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

7464 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7465 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7466 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7469 #i‚de‡
GL_ARB_shadî_obje˘s


7470 
	#GL_ARB_shadî_obje˘s
 1

	)

7471 #ifde‡
GL_GLEXT_PROTOTYPES


7472 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

7473 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

7474 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

7475 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

7476 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
* *
°rög
, c⁄° 
GLöt
 *
Àngth
);

7477 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

7478 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

7479 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

7480 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

7481 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

7482 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

7483 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7484 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7485 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7486 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7487 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

7488 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7489 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7490 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7491 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7492 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7493 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7494 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7495 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7496 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7497 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7498 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7499 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7500 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7501 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7502 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7503 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7504 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

7505 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

7506 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

7507 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

7508 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

7509 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

7510 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

7512 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

7513 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

7514 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

7515 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

7516 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

7517 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

7518 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

7519 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

7520 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7521 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7522 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

7523 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

7524 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

7525 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

7526 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

7527 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

7528 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

7529 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

7530 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

7531 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7532 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7533 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7534 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7535 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7536 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7537 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7538 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

7539 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7540 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7541 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7542 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7543 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7544 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

7545 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

7546 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7547 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7548 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

7549 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

7550 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

7553 #i‚de‡
GL_ARB_vîãx_shadî


7554 
	#GL_ARB_vîãx_shadî
 1

	)

7555 #ifde‡
GL_GLEXT_PROTOTYPES


7556 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

7557 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

7558 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

7560 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7561 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7562 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

7565 #i‚de‡
GL_ARB_‰agmít_shadî


7566 
	#GL_ARB_‰agmít_shadî
 1

	)

7569 #i‚de‡
GL_ARB_shadög_œnguage_100


7570 
	#GL_ARB_shadög_œnguage_100
 1

	)

7573 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


7574 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

7577 #i‚de‡
GL_ARB_poöt_•rôe


7578 
	#GL_ARB_poöt_•rôe
 1

	)

7581 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


7582 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

7585 #i‚de‡
GL_ARB_døw_buf„rs


7586 
	#GL_ARB_døw_buf„rs
 1

	)

7587 #ifde‡
GL_GLEXT_PROTOTYPES


7588 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7590 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

7593 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


7594 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

7597 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


7598 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

7599 #ifde‡
GL_GLEXT_PROTOTYPES


7600 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

7602 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

7605 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


7606 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

7609 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


7610 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

7613 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


7614 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

7617 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


7618 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

7621 #i‚de‡
GL_ARB_døw_ö°™˚d


7622 
	#GL_ARB_døw_ö°™˚d
 1

	)

7623 #ifde‡
GL_GLEXT_PROTOTYPES


7624 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7625 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

7627 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7628 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7631 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


7632 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

7633 #ifde‡
GL_GLEXT_PROTOTYPES


7634 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

7635 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7636 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7637 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7638 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7639 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7640 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

7641 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7642 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7643 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7644 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

7645 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7646 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7647 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7648 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7649 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7650 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

7651 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7652 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7653 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7655 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7656 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7657 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7658 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7659 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7660 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7661 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7662 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7663 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7664 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7665 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

7666 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7667 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7668 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7669 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7670 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7671 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

7672 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7673 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7674 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7677 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


7678 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

7681 #i‚de‡
GL_ARB_geomëry_shadî4


7682 
	#GL_ARB_geomëry_shadî4
 1

	)

7683 #ifde‡
GL_GLEXT_PROTOTYPES


7684 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7685 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7686 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7687 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7689 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7690 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7691 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

7692 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

7695 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


7696 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

7699 #i‚de‡
GL_ARB_ö°™˚d_¨øys


7700 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

7701 #ifde‡
GL_GLEXT_PROTOTYPES


7702 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

7704 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

7707 #i‚de‡
GL_ARB_m≠_buf„r_ønge


7708 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

7709 #ifde‡
GL_GLEXT_PROTOTYPES


7710 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7711 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7713 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

7714 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

7717 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


7718 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

7719 #ifde‡
GL_GLEXT_PROTOTYPES


7720 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7722 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7725 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


7726 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

7729 #i‚de‡
GL_ARB_ãxtuª_rg


7730 
	#GL_ARB_ãxtuª_rg
 1

	)

7733 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


7734 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

7735 #ifde‡
GL_GLEXT_PROTOTYPES


7736 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

7737 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

7738 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

7739 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

7741 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

7742 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

7743 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

7744 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

7747 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


7748 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

7749 #ifde‡
GL_GLEXT_PROTOTYPES


7750 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
* c⁄° *
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

7751 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7752 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

7753 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

7754 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7755 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

7756 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

7758 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
* c⁄° *
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

7759 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7760 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

7761 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

7762 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7763 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

7764 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

7767 #i‚de‡
GL_ARB_com∑tibûôy


7768 
	#GL_ARB_com∑tibûôy
 1

	)

7771 #i‚de‡
GL_ARB_c›y_buf„r


7772 
	#GL_ARB_c›y_buf„r
 1

	)

7773 #ifde‡
GL_GLEXT_PROTOTYPES


7774 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7776 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

7779 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


7780 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

7783 #i‚de‡
GL_ARB_dïth_˛amp


7784 
	#GL_ARB_dïth_˛amp
 1

	)

7787 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


7788 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

7789 #ifde‡
GL_GLEXT_PROTOTYPES


7790 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, 
GLöt
 
ba£vîãx
);

7791 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, 
GLöt
 
ba£vîãx
);

7792 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

7793 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

7795 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

7796 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

7797 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

7798 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

7801 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


7802 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

7805 #i‚de‡
GL_ARB_¥ovokög_vîãx


7806 
	#GL_ARB_¥ovokög_vîãx
 1

	)

7807 #ifde‡
GL_GLEXT_PROTOTYPES


7808 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

7810 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

7813 #i‚de‡
GL_ARB_£amÀss_cube_m≠


7814 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

7817 #i‚de‡
GL_ARB_sync


7818 
	#GL_ARB_sync
 1

	)

7819 #ifde‡
GL_GLEXT_PROTOTYPES


7820 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

7821 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

7822 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

7823 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

7824 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

7825 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7826 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

7828 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

7829 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

7830 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

7831 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

7832 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

7833 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7834 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

7837 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


7838 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

7839 #ifde‡
GL_GLEXT_PROTOTYPES


7840 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7841 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7842 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

7843 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

7845 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7846 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7847 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

7848 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

7851 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


7852 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

7855 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


7856 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

7857 #ifde‡
GL_GLEXT_PROTOTYPES


7858 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

7859 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

7860 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

7861 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

7863 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

7864 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

7865 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

7866 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

7869 #i‚de‡
GL_ARB_ßm∂e_shadög


7870 
	#GL_ARB_ßm∂e_shadög
 1

	)

7871 #ifde‡
GL_GLEXT_PROTOTYPES


7872 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

7874 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

7877 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


7878 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

7881 #i‚de‡
GL_ARB_ãxtuª_g©hî


7882 
	#GL_ARB_ãxtuª_g©hî
 1

	)

7885 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


7886 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

7889 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


7890 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

7891 #ifde‡
GL_GLEXT_PROTOTYPES


7892 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

7893 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

7894 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* *
∑th
, c⁄° 
GLöt
 *
Àngth
);

7895 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

7896 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

7897 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

7899 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

7900 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

7901 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

7902 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

7903 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

7904 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

7907 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


7908 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

7911 #i‚de‡
GL_ARB_bÀnd_func_exãnded


7912 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

7913 #ifde‡
GL_GLEXT_PROTOTYPES


7914 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

7915 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7917 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

7918 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7921 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


7922 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

7925 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


7926 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

7929 #i‚de‡
GL_ARB_ßm∂î_obje˘s


7930 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

7931 #ifde‡
GL_GLEXT_PROTOTYPES


7932 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

7933 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

7934 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

7935 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

7936 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7937 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

7938 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7939 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

7940 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

7941 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

7942 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7943 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7944 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7945 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

7947 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

7948 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

7949 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

7950 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

7951 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7952 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

7953 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7954 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

7955 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

7956 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

7957 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7958 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7959 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7960 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7963 #i‚de‡
GL_ARB_shadî_bô_ícodög


7964 
	#GL_ARB_shadî_bô_ícodög
 1

	)

7967 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


7968 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

7971 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


7972 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

7975 #i‚de‡
GL_ARB_timî_quîy


7976 
	#GL_ARB_timî_quîy
 1

	)

7977 #ifde‡
GL_GLEXT_PROTOTYPES


7978 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

7979 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7980 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

7982 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

7983 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7984 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

7987 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


7988 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

7989 #ifde‡
GL_GLEXT_PROTOTYPES


7990 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

7991 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

7992 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

7993 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

7994 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

7995 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

7996 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

7997 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

7998 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

7999 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8000 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8001 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8002 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8003 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8004 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8005 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8006 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8007 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8008 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8009 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8010 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

8011 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8012 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

8013 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

8014 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8015 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8016 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8017 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8018 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

8019 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

8020 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8021 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8022 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8023 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8024 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8025 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8026 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

8027 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

8029 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8030 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8031 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8032 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8033 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

8034 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8035 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8036 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8037 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8038 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8039 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8040 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8041 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8042 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8043 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8044 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8045 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8046 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8047 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8048 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8049 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8050 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8051 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

8052 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

8053 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8054 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8055 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8056 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8057 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

8058 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

8059 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8060 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8061 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8062 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8063 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8064 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8065 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

8066 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

8069 #i‚de‡
GL_ARB_døw_ödúe˘


8070 
	#GL_ARB_døw_ödúe˘
 1

	)

8071 #ifde‡
GL_GLEXT_PROTOTYPES


8072 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° 
GLvoid
 *
ödúe˘
);

8073 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödúe˘
);

8075 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

8076 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

8079 #i‚de‡
GL_ARB_gpu_shadî5


8080 
	#GL_ARB_gpu_shadî5
 1

	)

8083 #i‚de‡
GL_ARB_gpu_shadî_Â64


8084 
	#GL_ARB_gpu_shadî_Â64
 1

	)

8085 #ifde‡
GL_GLEXT_PROTOTYPES


8086 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

8087 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8088 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8089 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8090 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8091 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8092 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8093 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8094 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8095 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8096 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8097 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8098 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8099 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8100 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8101 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8102 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8103 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

8105 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

8106 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8107 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8108 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8109 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8110 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8111 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8112 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8113 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8114 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8115 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8116 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8117 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8118 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8119 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8120 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8121 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8122 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

8125 #i‚de‡
GL_ARB_shadî_subroutöe


8126 
	#GL_ARB_shadî_subroutöe
 1

	)

8127 #ifde‡
GL_GLEXT_PROTOTYPES


8128 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

8129 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

8130 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

8131 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8132 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8133 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

8134 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

8135 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

8137 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

8138 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

8139 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

8140 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8141 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8142 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

8143 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

8144 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

8147 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


8148 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

8149 #ifde‡
GL_GLEXT_PROTOTYPES


8150 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8151 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

8153 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8154 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

8157 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


8158 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

8161 #i‚de‡
GL_ARB_å™sf‹m_„edback2


8162 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

8163 #ifde‡
GL_GLEXT_PROTOTYPES


8164 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

8165 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

8166 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

8167 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

8168 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

8169 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

8170 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

8172 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

8173 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

8174 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

8175 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

8176 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

8177 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

8178 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

8181 #i‚de‡
GL_ARB_å™sf‹m_„edback3


8182 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

8183 #ifde‡
GL_GLEXT_PROTOTYPES


8184 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

8185 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

8186 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

8187 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8189 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

8190 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

8191 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8192 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8195 #i‚de‡
GL_ARB_ES2_com∑tibûôy


8196 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

8197 #ifde‡
GL_GLEXT_PROTOTYPES


8198 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

8199 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
 *
bö¨y
, GLsizeò
Àngth
);

8200 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

8201 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

8202 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

8204 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

8205 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, GLsizeò
	tÀngth
);

8206 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

8207 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

8208 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

8211 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


8212 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

8213 #ifde‡
GL_GLEXT_PROTOTYPES


8214 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

8215 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLsizei
 
Àngth
);

8216 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8218 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

8219 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

8220 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8223 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


8224 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

8225 #ifde‡
GL_GLEXT_PROTOTYPES


8226 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

8227 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

8228 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄° *
°rögs
);

8229 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

8230 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

8231 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

8232 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

8233 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8234 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

8235 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8236 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

8237 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8238 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

8239 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8240 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

8241 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8242 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

8243 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8244 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

8245 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8246 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

8247 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8248 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

8249 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8250 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

8251 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8252 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

8253 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8254 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

8255 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8256 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

8257 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8258 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

8259 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

8260 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

8261 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

8262 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

8263 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

8264 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

8265 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

8266 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8267 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8268 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8269 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8270 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8271 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8272 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8273 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8274 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8275 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8276 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8277 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

8278 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8279 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8280 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8281 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8282 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8283 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

8284 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

8285 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

8287 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

8288 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

8289 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t°rögs
);

8290 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8291 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

8292 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

8293 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8294 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8295 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

8296 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8297 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

8298 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8299 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

8300 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8301 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

8302 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8303 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

8304 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8305 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

8306 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8307 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

8308 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8309 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

8310 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8311 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

8312 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8313 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

8314 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8315 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

8316 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8317 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

8318 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8319 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

8320 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

8321 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

8322 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8323 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

8324 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8325 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

8326 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

8327 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8328 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8329 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8330 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8331 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8332 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8333 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8334 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8335 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8336 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8337 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8338 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

8339 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8340 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8341 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8342 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8343 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8344 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

8345 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

8346 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

8349 #i‚de‡
GL_ARB_vîãx_©åib_64bô


8350 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

8351 #ifde‡
GL_GLEXT_PROTOTYPES


8352 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8353 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8354 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8355 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8356 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8357 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8358 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8359 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8360 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

8361 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8363 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8364 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8365 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8366 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8367 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8368 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8369 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8370 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8371 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8372 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8375 #i‚de‡
GL_ARB_võwp‹t_¨øy


8376 
	#GL_ARB_võwp‹t_¨øy
 1

	)

8377 #ifde‡
GL_GLEXT_PROTOTYPES


8378 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

8379 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

8380 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

8381 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

8382 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

8383 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

8384 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

8385 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

8386 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

8387 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

8389 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8390 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

8391 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8392 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

8393 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8394 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8395 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8396 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

8397 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

8398 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

8401 #i‚de‡
GL_ARB_˛_evít


8402 
	#GL_ARB_˛_evít
 1

	)

8403 #ifde‡
GL_GLEXT_PROTOTYPES


8404 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 * 
c⁄ãxt
, 
_˛_evít
 * 
evít
, 
GLbôfõld
 
Êags
);

8406 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 * 
	tc⁄ãxt
, 
	t_˛_evít
 * 
	tevít
, 
	tGLbôfõld
 
	tÊags
);

8409 #i‚de‡
GL_ARB_debug_ouçut


8410 
	#GL_ARB_debug_ouçut
 1

	)

8411 #ifde‡
GL_GLEXT_PROTOTYPES


8412 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

8413 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

8414 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° 
GLvoid
 *
u£rP¨am
);

8415 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

8417 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

8418 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

8419 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° 
	tGLvoid
 *
	tu£rP¨am
);

8420 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

8423 #i‚de‡
GL_ARB_robu°√ss


8424 
	#GL_ARB_robu°√ss
 1

	)

8425 #ifde‡
GL_GLEXT_PROTOTYPES


8426 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

8427 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

8428 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

8429 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

8430 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

8431 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

8432 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

8433 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

8434 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
èbÀ
);

8435 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
image
);

8436 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, 
GLvoid
 *
row
, GLsizeò
cﬁumnBufSize
, GLvoid *
cﬁumn
, GLvoid *
•™
);

8437 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
vÆues
);

8438 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
vÆues
);

8439 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, 
GLvoid
 *
img
);

8440 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, 
GLvoid
 *
d©a
);

8441 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, 
GLvoid
 *
img
);

8442 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

8443 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

8444 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

8445 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

8447 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

8448 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

8449 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

8450 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

8451 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

8452 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

8453 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

8454 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

8455 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tèbÀ
);

8456 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timage
);

8457 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, 
	tGLvoid
 *
	trow
, GLsizeò
	tcﬁumnBufSize
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8458 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tvÆues
);

8459 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	tvÆues
);

8460 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timg
);

8461 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, 
	tGLvoid
 *
	td©a
);

8462 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, 
	tGLvoid
 *
	timg
);

8463 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

8464 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

8465 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

8466 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

8469 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


8470 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

8473 #i‚de‡
GL_ARB_ba£_ö°™˚


8474 
	#GL_ARB_ba£_ö°™˚
 1

	)

8475 #ifde‡
GL_GLEXT_PROTOTYPES


8476 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

8477 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

8478 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

8480 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

8481 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

8482 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

8485 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


8486 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

8489 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


8490 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

8491 #ifde‡
GL_GLEXT_PROTOTYPES


8492 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

8493 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

8495 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

8496 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

8499 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


8500 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

8503 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


8504 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

8507 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


8508 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

8509 #ifde‡
GL_GLEXT_PROTOTYPES


8510 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

8512 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

8515 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


8516 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

8519 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


8520 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

8521 #ifde‡
GL_GLEXT_PROTOTYPES


8522 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8524 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8527 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


8528 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

8529 #ifde‡
GL_GLEXT_PROTOTYPES


8530 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

8531 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

8533 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

8534 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

8537 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


8538 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

8541 #i‚de‡
GL_ARB_ãxtuª_°‹age


8542 
	#GL_ARB_ãxtuª_°‹age
 1

	)

8543 #ifde‡
GL_GLEXT_PROTOTYPES


8544 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

8545 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8546 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

8547 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

8548 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8549 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

8551 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

8552 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8553 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8554 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

8555 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8556 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8559 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


8560 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

8563 #i‚de‡
GL_KHR_debug


8564 
	#GL_KHR_debug
 1

	)

8565 #ifde‡
GL_GLEXT_PROTOTYPES


8566 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

8567 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

8568 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

8569 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

8570 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

8571 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

8572 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

8573 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

8574 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

8575 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

8577 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

8578 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

8579 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

8580 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

8581 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

8582 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

8583 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

8584 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

8585 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

8586 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

8589 #i‚de‡
GL_ARB_¨øys_of_¨øys


8590 
	#GL_ARB_¨øys_of_¨øys
 1

	)

8593 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


8594 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

8595 #ifde‡
GL_GLEXT_PROTOTYPES


8596 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8597 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8598 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

8599 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, c⁄° *
d©a
);

8601 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8602 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8603 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

8604 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, c⁄° *
	td©a
);

8607 #i‚de‡
GL_ARB_compuã_shadî


8608 
	#GL_ARB_compuã_shadî
 1

	)

8609 #ifde‡
GL_GLEXT_PROTOTYPES


8610 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

8611 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

8613 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

8614 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

8617 #i‚de‡
GL_ARB_c›y_image


8618 
	#GL_ARB_c›y_image
 1

	)

8619 #ifde‡
GL_GLEXT_PROTOTYPES


8620 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

8622 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

8625 #i‚de‡
GL_ARB_ãxtuª_võw


8626 
	#GL_ARB_ãxtuª_võw
 1

	)

8627 #ifde‡
GL_GLEXT_PROTOTYPES


8628 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

8630 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

8633 #i‚de‡
GL_ARB_vîãx_©åib_bödög


8634 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

8635 #ifde‡
GL_GLEXT_PROTOTYPES


8636 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

8637 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

8638 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8639 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8640 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

8641 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

8642 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

8643 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

8644 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8645 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

8646 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

8647 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

8649 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

8650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

8651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

8654 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

8655 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

8656 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

8657 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8658 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

8659 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

8660 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

8663 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


8664 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

8667 #i‚de‡
GL_ARB_ES3_com∑tibûôy


8668 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

8671 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


8672 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

8675 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


8676 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

8679 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


8680 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

8681 #ifde‡
GL_GLEXT_PROTOTYPES


8682 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8683 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8684 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

8685 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8687 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8688 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8689 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8690 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8693 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


8694 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

8695 #ifde‡
GL_GLEXT_PROTOTYPES


8696 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

8698 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

8701 #i‚de‡
GL_ARB_övÆid©e_subd©a


8702 
	#GL_ARB_övÆid©e_subd©a
 1

	)

8703 #ifde‡
GL_GLEXT_PROTOTYPES


8704 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

8705 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8706 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

8707 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

8708 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

8709 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

8711 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8712 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8713 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

8714 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8715 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

8716 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

8719 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


8720 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

8721 #ifde‡
GL_GLEXT_PROTOTYPES


8722 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

8723 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

8725 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

8726 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

8729 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


8730 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

8731 #ifde‡
GL_GLEXT_PROTOTYPES


8732 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8733 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8734 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

8735 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

8736 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8737 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

8739 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8740 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8741 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

8742 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

8743 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8744 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

8747 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


8748 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

8751 #i‚de‡
GL_ARB_shadî_image_size


8752 
	#GL_ARB_shadî_image_size
 1

	)

8755 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


8756 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

8757 #ifde‡
GL_GLEXT_PROTOTYPES


8758 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

8760 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

8763 #i‚de‡
GL_ARB_°ícû_ãxturög


8764 
	#GL_ARB_°ícû_ãxturög
 1

	)

8767 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


8768 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

8769 #ifde‡
GL_GLEXT_PROTOTYPES


8770 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8771 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8773 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8774 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8777 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


8778 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

8781 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


8782 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

8783 #ifde‡
GL_GLEXT_PROTOTYPES


8784 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8785 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8786 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8787 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

8789 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8790 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8791 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8792 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

8795 #i‚de‡
GL_EXT_abgr


8796 
	#GL_EXT_abgr
 1

	)

8799 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


8800 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

8801 #ifde‡
GL_GLEXT_PROTOTYPES


8802 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

8804 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

8807 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


8808 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

8809 #ifde‡
GL_GLEXT_PROTOTYPES


8810 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

8812 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

8815 #i‚de‡
GL_EXT_ãxtuª


8816 
	#GL_EXT_ãxtuª
 1

	)

8819 #i‚de‡
GL_EXT_ãxtuª3D


8820 
	#GL_EXT_ãxtuª3D
 1

	)

8821 #ifde‡
GL_GLEXT_PROTOTYPES


8822 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8823 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8825 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8826 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8829 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


8830 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

8831 #ifde‡
GL_GLEXT_PROTOTYPES


8832 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

8833 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

8835 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

8836 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

8839 #i‚de‡
GL_EXT_subãxtuª


8840 
	#GL_EXT_subãxtuª
 1

	)

8841 #ifde‡
GL_GLEXT_PROTOTYPES


8842 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8843 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8845 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8846 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8849 #i‚de‡
GL_EXT_c›y_ãxtuª


8850 
	#GL_EXT_c›y_ãxtuª
 1

	)

8851 #ifde‡
GL_GLEXT_PROTOTYPES


8852 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

8853 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

8854 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

8855 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8856 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8858 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

8859 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

8860 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8861 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8862 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8865 #i‚de‡
GL_EXT_hi°ogøm


8866 
	#GL_EXT_hi°ogøm
 1

	)

8867 #ifde‡
GL_GLEXT_PROTOTYPES


8868 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

8869 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8870 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8871 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
vÆues
);

8872 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8873 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8874 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

8875 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

8876 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

8877 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

8879 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

8880 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8881 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8882 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

8883 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8884 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8885 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8886 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

8887 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8888 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8891 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


8892 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

8893 #ifde‡
GL_GLEXT_PROTOTYPES


8894 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

8895 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
image
);

8896 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

8897 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8898 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

8899 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8900 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

8901 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

8902 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
image
);

8903 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8904 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8905 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
);

8906 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
);

8908 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8909 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8910 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

8911 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8912 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

8913 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8914 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8915 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8916 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

8917 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8918 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8919 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8920 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

8923 #i‚de‡
GL_SGI_cﬁ‹_m©rix


8924 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

8927 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


8928 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

8929 #ifde‡
GL_GLEXT_PROTOTYPES


8930 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

8931 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8932 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8933 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

8934 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
èbÀ
);

8935 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8936 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8938 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

8939 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8940 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8941 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8942 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

8943 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8944 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8947 #i‚de‡
GL_SGIX_pixñ_ãxtuª


8948 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

8949 #ifde‡
GL_GLEXT_PROTOTYPES


8950 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

8952 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

8955 #i‚de‡
GL_SGIS_pixñ_ãxtuª


8956 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

8957 #ifde‡
GL_GLEXT_PROTOTYPES


8958 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

8959 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8960 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

8961 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8962 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8963 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8965 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8966 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8967 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8968 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8969 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8970 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8973 #i‚de‡
GL_SGIS_ãxtuª4D


8974 
	#GL_SGIS_ãxtuª4D
 1

	)

8975 #ifde‡
GL_GLEXT_PROTOTYPES


8976 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8977 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

8979 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8980 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8983 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


8984 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

8987 #i‚de‡
GL_EXT_cmyka


8988 
	#GL_EXT_cmyka
 1

	)

8991 #i‚de‡
GL_EXT_ãxtuª_obje˘


8992 
	#GL_EXT_ãxtuª_obje˘
 1

	)

8993 #ifde‡
GL_GLEXT_PROTOTYPES


8994 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

8995 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

8996 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

8997 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

8998 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

8999 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

9001 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

9002 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

9003 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

9004 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

9005 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9006 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

9009 #i‚de‡
GL_SGIS_dëaû_ãxtuª


9010 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

9011 #ifde‡
GL_GLEXT_PROTOTYPES


9012 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9013 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

9015 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9016 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

9019 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


9020 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

9021 #ifde‡
GL_GLEXT_PROTOTYPES


9022 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9023 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

9025 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9026 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

9029 #i‚de‡
GL_EXT_∑cked_pixñs


9030 
	#GL_EXT_∑cked_pixñs
 1

	)

9033 #i‚de‡
GL_SGIS_ãxtuª_lod


9034 
	#GL_SGIS_ãxtuª_lod
 1

	)

9037 #i‚de‡
GL_SGIS_mu…ißm∂e


9038 
	#GL_SGIS_mu…ißm∂e
 1

	)

9039 #ifde‡
GL_GLEXT_PROTOTYPES


9040 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

9041 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

9043 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

9044 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

9047 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


9048 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

9051 #i‚de‡
GL_EXT_vîãx_¨øy


9052 
	#GL_EXT_vîãx_¨øy
 1

	)

9053 #ifde‡
GL_GLEXT_PROTOTYPES


9054 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

9055 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9056 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

9057 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

9058 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

9059 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9060 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9061 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9062 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLvoid
 *
poöãr
);

9064 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

9065 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9066 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9067 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

9068 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

9069 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9070 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9071 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9072 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9075 #i‚de‡
GL_EXT_misc_©åibuã


9076 
	#GL_EXT_misc_©åibuã
 1

	)

9079 #i‚de‡
GL_SGIS_gíî©e_mùm≠


9080 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

9083 #i‚de‡
GL_SGIX_˛ùm≠


9084 
	#GL_SGIX_˛ùm≠
 1

	)

9087 #i‚de‡
GL_SGIX_shadow


9088 
	#GL_SGIX_shadow
 1

	)

9091 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


9092 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

9095 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


9096 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

9099 #i‚de‡
GL_EXT_bÀnd_mömax


9100 
	#GL_EXT_bÀnd_mömax
 1

	)

9101 #ifde‡
GL_GLEXT_PROTOTYPES


9102 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

9104 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

9107 #i‚de‡
GL_EXT_bÀnd_subåa˘


9108 
	#GL_EXT_bÀnd_subåa˘
 1

	)

9111 #i‚de‡
GL_EXT_bÀnd_logic_›


9112 
	#GL_EXT_bÀnd_logic_›
 1

	)

9115 #i‚de‡
GL_SGIX_öãæa˚


9116 
	#GL_SGIX_öãæa˚
 1

	)

9119 #i‚de‡
GL_SGIX_pixñ_tûes


9120 
	#GL_SGIX_pixñ_tûes
 1

	)

9123 #i‚de‡
GL_SGIX_ãxtuª_£À˘


9124 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

9127 #i‚de‡
GL_SGIX_•rôe


9128 
	#GL_SGIX_•rôe
 1

	)

9129 #ifde‡
GL_GLEXT_PROTOTYPES


9130 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9131 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9132 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9133 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9135 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9136 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9137 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9138 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9141 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


9142 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

9145 #i‚de‡
GL_EXT_poöt_∑ømëîs


9146 
	#GL_EXT_poöt_∑ømëîs
 1

	)

9147 #ifde‡
GL_GLEXT_PROTOTYPES


9148 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9149 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9151 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9152 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9155 #i‚de‡
GL_SGIS_poöt_∑ømëîs


9156 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

9157 #ifde‡
GL_GLEXT_PROTOTYPES


9158 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9159 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9161 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9162 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9165 #i‚de‡
GL_SGIX_ö°rumíts


9166 
	#GL_SGIX_ö°rumíts
 1

	)

9167 #ifde‡
GL_GLEXT_PROTOTYPES


9168 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

9169 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

9170 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

9171 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

9172 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

9173 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

9175 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

9176 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

9177 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

9178 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

9179 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

9180 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

9183 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


9184 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

9187 #i‚de‡
GL_SGIX_‰amezoom


9188 
	#GL_SGIX_‰amezoom
 1

	)

9189 #ifde‡
GL_GLEXT_PROTOTYPES


9190 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

9192 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

9195 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


9196 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

9197 #ifde‡
GL_GLEXT_PROTOTYPES


9198 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

9200 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

9203 #i‚de‡
GL_SGIX_pﬁynomül_ffd


9204 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

9205 #ifde‡
GL_GLEXT_PROTOTYPES


9206 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

9207 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

9208 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

9209 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

9211 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

9212 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

9213 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

9214 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

9217 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


9218 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

9219 #ifde‡
GL_GLEXT_PROTOTYPES


9220 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

9222 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

9225 #i‚de‡
GL_SGIX_Êush_ø°î


9226 
	#GL_SGIX_Êush_ø°î
 1

	)

9227 #ifde‡
GL_GLEXT_PROTOTYPES


9228 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

9230 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

9233 #i‚de‡
GL_SGIX_dïth_ãxtuª


9234 
	#GL_SGIX_dïth_ãxtuª
 1

	)

9237 #i‚de‡
GL_SGIS_fog_fun˘i⁄


9238 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

9239 #ifde‡
GL_GLEXT_PROTOTYPES


9240 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

9241 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

9243 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

9244 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

9247 #i‚de‡
GL_SGIX_fog_off£t


9248 
	#GL_SGIX_fog_off£t
 1

	)

9251 #i‚de‡
GL_HP_image_å™sf‹m


9252 
	#GL_HP_image_å™sf‹m
 1

	)

9253 #ifde‡
GL_GLEXT_PROTOTYPES


9254 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9255 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9256 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9257 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9258 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9259 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9261 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9262 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9263 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9264 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9265 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9266 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9269 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


9270 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

9273 #i‚de‡
GL_SGIX_ãxtuª_add_ív


9274 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

9277 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


9278 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

9279 #ifde‡
GL_GLEXT_PROTOTYPES


9280 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

9281 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

9283 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

9284 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

9287 #i‚de‡
GL_PGI_vîãx_höts


9288 
	#GL_PGI_vîãx_höts
 1

	)

9291 #i‚de‡
GL_PGI_misc_höts


9292 
	#GL_PGI_misc_höts
 1

	)

9293 #ifde‡
GL_GLEXT_PROTOTYPES


9294 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

9296 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

9299 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


9300 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

9301 #ifde‡
GL_GLEXT_PROTOTYPES


9302 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
);

9303 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
d©a
);

9304 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9305 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9307 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

9308 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

9309 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9310 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9313 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


9314 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

9317 #i‚de‡
GL_SGIX_li°_¥i‹ôy


9318 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

9319 #ifde‡
GL_GLEXT_PROTOTYPES


9320 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9321 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9322 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9323 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9324 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9325 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9327 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9328 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9329 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9330 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9331 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9332 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9335 #i‚de‡
GL_SGIX_ú_ö°rumít1


9336 
	#GL_SGIX_ú_ö°rumít1
 1

	)

9339 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


9340 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

9343 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


9344 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

9347 #i‚de‡
GL_SGIX_shadow_ambõ¡


9348 
	#GL_SGIX_shadow_ambõ¡
 1

	)

9351 #i‚de‡
GL_EXT_ödex_ãxtuª


9352 
	#GL_EXT_ödex_ãxtuª
 1

	)

9355 #i‚de‡
GL_EXT_ödex_m©îül


9356 
	#GL_EXT_ödex_m©îül
 1

	)

9357 #ifde‡
GL_GLEXT_PROTOTYPES


9358 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

9360 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9363 #i‚de‡
GL_EXT_ödex_func


9364 
	#GL_EXT_ödex_func
 1

	)

9365 #ifde‡
GL_GLEXT_PROTOTYPES


9366 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

9368 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

9371 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


9372 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

9375 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


9376 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

9377 #ifde‡
GL_GLEXT_PROTOTYPES


9378 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

9379 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

9381 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

9382 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

9385 #i‚de‡
GL_EXT_cuŒ_vîãx


9386 
	#GL_EXT_cuŒ_vîãx
 1

	)

9387 #ifde‡
GL_GLEXT_PROTOTYPES


9388 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

9389 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9391 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9392 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9395 #i‚de‡
GL_SGIX_y¸cb


9396 
	#GL_SGIX_y¸cb
 1

	)

9399 #i‚de‡
GL_SGIX_‰agmít_lightög


9400 
	#GL_SGIX_‰agmít_lightög
 1

	)

9401 #ifde‡
GL_GLEXT_PROTOTYPES


9402 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

9403 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9404 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9405 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9406 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9407 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9408 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9409 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9410 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9411 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9412 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9413 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9414 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9415 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9416 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9417 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9418 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9419 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9421 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9422 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9423 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9424 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9425 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9426 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9427 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9428 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9429 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9430 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9431 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9432 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9433 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9434 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9435 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9436 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9437 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9438 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9441 #i‚de‡
GL_IBM_ø°îpos_˛ù


9442 
	#GL_IBM_ø°îpos_˛ù
 1

	)

9445 #i‚de‡
GL_HP_ãxtuª_lightög


9446 
	#GL_HP_ãxtuª_lightög
 1

	)

9449 #i‚de‡
GL_EXT_døw_ønge_ñemíts


9450 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

9451 #ifde‡
GL_GLEXT_PROTOTYPES


9452 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

9454 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

9457 #i‚de‡
GL_WIN_ph⁄g_shadög


9458 
	#GL_WIN_ph⁄g_shadög
 1

	)

9461 #i‚de‡
GL_WIN_•ecuœr_fog


9462 
	#GL_WIN_•ecuœr_fog
 1

	)

9465 #i‚de‡
GL_EXT_light_ãxtuª


9466 
	#GL_EXT_light_ãxtuª
 1

	)

9467 #ifde‡
GL_GLEXT_PROTOTYPES


9468 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

9469 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

9470 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

9472 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

9473 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

9474 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9477 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


9478 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

9481 #i‚de‡
GL_EXT_bgø


9482 
	#GL_EXT_bgø
 1

	)

9485 #i‚de‡
GL_SGIX_async


9486 
	#GL_SGIX_async
 1

	)

9487 #ifde‡
GL_GLEXT_PROTOTYPES


9488 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

9489 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

9490 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

9491 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

9492 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

9493 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

9495 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

9496 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

9497 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

9498 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

9499 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

9500 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

9503 #i‚de‡
GL_SGIX_async_pixñ


9504 
	#GL_SGIX_async_pixñ
 1

	)

9507 #i‚de‡
GL_SGIX_async_hi°ogøm


9508 
	#GL_SGIX_async_hi°ogøm
 1

	)

9511 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


9512 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

9513 #ifde‡
GL_GLEXT_PROTOTYPES


9514 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9515 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9516 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9517 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
* *
poöãr
);

9519 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9520 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9521 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9522 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9525 #i‚de‡
GL_HP_oc˛usi⁄_ã°


9526 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

9529 #i‚de‡
GL_EXT_pixñ_å™sf‹m


9530 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

9531 #ifde‡
GL_GLEXT_PROTOTYPES


9532 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

9533 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

9534 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9535 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9536 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9537 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9539 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9540 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9541 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9542 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9543 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9544 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9547 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


9548 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

9551 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


9552 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

9555 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


9556 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

9559 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


9560 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

9561 #ifde‡
GL_GLEXT_PROTOTYPES


9562 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

9563 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9564 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

9565 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9566 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

9567 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9568 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

9569 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

9570 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

9571 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9572 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

9573 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

9574 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

9575 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

9576 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

9577 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

9578 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9580 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

9581 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9582 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

9583 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9584 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

9585 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9586 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

9587 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9588 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

9589 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9590 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

9591 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

9592 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

9593 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

9594 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

9595 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

9596 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9599 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


9600 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

9601 #ifde‡
GL_GLEXT_PROTOTYPES


9602 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

9604 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

9607 #i‚de‡
GL_EXT_mu…i_døw_¨øys


9608 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

9609 #ifde‡
GL_GLEXT_PROTOTYPES


9610 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

9611 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

9613 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

9614 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

9617 #i‚de‡
GL_EXT_fog_co‹d


9618 
	#GL_EXT_fog_co‹d
 1

	)

9619 #ifde‡
GL_GLEXT_PROTOTYPES


9620 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

9621 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

9622 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

9623 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

9624 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9626 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

9627 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

9628 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

9629 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

9630 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9633 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


9634 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

9637 #i‚de‡
GL_EXT_co‹dö©e_‰ame


9638 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

9639 #ifde‡
GL_GLEXT_PROTOTYPES


9640 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

9641 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9642 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

9643 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9644 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

9645 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9646 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

9647 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

9648 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

9649 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9650 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

9651 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

9652 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

9653 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

9654 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

9655 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

9656 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

9657 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

9658 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

9659 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

9660 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9661 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9663 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

9664 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9665 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

9666 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9667 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

9668 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9669 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

9670 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9671 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

9672 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9673 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

9674 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9675 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

9676 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9677 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

9678 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9679 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

9680 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9681 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

9682 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9683 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9684 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9687 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


9688 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

9691 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


9692 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

9695 #i‚de‡
GL_APPLE_å™sf‹m_höt


9696 
	#GL_APPLE_å™sf‹m_höt
 1

	)

9699 #i‚de‡
GL_SGIX_fog_sˇÀ


9700 
	#GL_SGIX_fog_sˇÀ
 1

	)

9703 #i‚de‡
GL_SUNX_c⁄°™t_d©a


9704 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

9705 #ifde‡
GL_GLEXT_PROTOTYPES


9706 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

9708 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

9711 #i‚de‡
GL_SUN_globÆ_Æpha


9712 
	#GL_SUN_globÆ_Æpha
 1

	)

9713 #ifde‡
GL_GLEXT_PROTOTYPES


9714 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

9715 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

9716 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

9717 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

9718 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

9719 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

9720 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

9721 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

9723 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

9724 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

9725 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

9726 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

9727 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

9728 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

9729 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

9730 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

9733 #i‚de‡
GL_SUN_åüngÀ_li°


9734 
	#GL_SUN_åüngÀ_li°
 1

	)

9735 #ifde‡
GL_GLEXT_PROTOTYPES


9736 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

9737 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

9738 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

9739 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

9740 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

9741 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

9742 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* *
poöãr
);

9744 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

9745 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

9746 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

9747 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

9748 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

9749 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

9750 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

9753 #i‚de‡
GL_SUN_vîãx


9754 
	#GL_SUN_vîãx
 1

	)

9755 #ifde‡
GL_GLEXT_PROTOTYPES


9756 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9757 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9758 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9759 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9760 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9761 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

9762 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9763 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

9764 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9765 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9766 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9767 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9768 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9769 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9770 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9771 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

9772 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9773 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

9774 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9775 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9776 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9777 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9778 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9779 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9780 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9781 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

9782 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9783 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

9784 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9785 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

9786 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9787 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

9788 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9789 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9790 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9791 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

9792 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9793 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9794 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9795 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

9797 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9798 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9799 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9800 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9801 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9802 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9803 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9804 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

9805 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9806 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9807 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9808 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9809 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9810 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9811 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9812 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9813 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9814 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

9815 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9816 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9817 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9818 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9819 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9820 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9821 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9822 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9823 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9824 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9825 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9826 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

9827 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9828 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

9829 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9830 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9831 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9832 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

9833 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9834 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9835 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9836 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

9839 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


9840 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

9841 #ifde‡
GL_GLEXT_PROTOTYPES


9842 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

9844 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

9847 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


9848 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

9849 #ifde‡
GL_GLEXT_PROTOTYPES


9850 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

9852 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

9855 #i‚de‡
GL_INGR_cﬁ‹_˛amp


9856 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

9859 #i‚de‡
GL_INGR_öãæa˚_ªad


9860 
	#GL_INGR_öãæa˚_ªad
 1

	)

9863 #i‚de‡
GL_EXT_°ícû_wøp


9864 
	#GL_EXT_°ícû_wøp
 1

	)

9867 #i‚de‡
GL_EXT_422_pixñs


9868 
	#GL_EXT_422_pixñs
 1

	)

9871 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


9872 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

9875 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


9876 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

9879 #i‚de‡
GL_EXT_ãxtuª_ív_add


9880 
	#GL_EXT_ãxtuª_ív_add
 1

	)

9883 #i‚de‡
GL_EXT_ãxtuª_lod_büs


9884 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

9887 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


9888 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

9891 #i‚de‡
GL_EXT_vîãx_weightög


9892 
	#GL_EXT_vîãx_weightög
 1

	)

9893 #ifde‡
GL_GLEXT_PROTOTYPES


9894 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

9895 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

9896 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

9898 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

9899 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

9900 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9903 #i‚de‡
GL_NV_light_max_exp⁄ít


9904 
	#GL_NV_light_max_exp⁄ít
 1

	)

9907 #i‚de‡
GL_NV_vîãx_¨øy_ønge


9908 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

9909 #ifde‡
GL_GLEXT_PROTOTYPES


9910 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

9911 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

9913 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

9914 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9917 #i‚de‡
GL_NV_ªgi°î_comböîs


9918 
	#GL_NV_ªgi°î_comböîs
 1

	)

9919 #ifde‡
GL_GLEXT_PROTOTYPES


9920 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9921 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9922 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9923 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9924 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9925 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

9926 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9927 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9928 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9929 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9930 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9931 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9932 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9934 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9935 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9936 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9937 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9938 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9939 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

9940 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9941 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9942 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9943 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9944 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9945 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9946 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9949 #i‚de‡
GL_NV_fog_di°™˚


9950 
	#GL_NV_fog_di°™˚
 1

	)

9953 #i‚de‡
GL_NV_ãxgí_emboss


9954 
	#GL_NV_ãxgí_emboss
 1

	)

9957 #i‚de‡
GL_NV_bÀnd_squ¨e


9958 
	#GL_NV_bÀnd_squ¨e
 1

	)

9961 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


9962 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

9965 #i‚de‡
GL_MESA_ªsize_buf„rs


9966 
	#GL_MESA_ªsize_buf„rs
 1

	)

9967 #ifde‡
GL_GLEXT_PROTOTYPES


9968 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

9970 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

9973 #i‚de‡
GL_MESA_wödow_pos


9974 
	#GL_MESA_wödow_pos
 1

	)

9975 #ifde‡
GL_GLEXT_PROTOTYPES


9976 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

9977 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9978 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

9979 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9980 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

9981 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

9982 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

9983 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9984 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

9985 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9986 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9987 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9988 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

9989 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

9990 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

9991 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9992 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9993 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9994 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9995 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9996 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9997 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

9998 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

9999 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

10001 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10002 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10003 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10004 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10005 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

10006 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10007 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10008 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10009 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10010 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10011 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10012 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10013 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10014 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10015 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10016 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10017 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10018 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

10019 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10020 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

10021 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10022 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

10023 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10024 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

10027 #i‚de‡
GL_IBM_cuŒ_vîãx


10028 
	#GL_IBM_cuŒ_vîãx
 1

	)

10031 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


10032 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

10033 #ifde‡
GL_GLEXT_PROTOTYPES


10034 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

10035 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

10037 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

10038 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

10041 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


10042 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

10043 #ifde‡
GL_GLEXT_PROTOTYPES


10044 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10045 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10046 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
* *
poöãr
, GLöà
±r°ride
);

10047 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10048 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10049 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10050 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10051 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° 
GLvoid
* *
poöãr
, GLöà
±r°ride
);

10053 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10054 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10055 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

10056 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10057 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10058 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10059 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10060 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

10063 #i‚de‡
GL_SGIX_subßm∂e


10064 
	#GL_SGIX_subßm∂e
 1

	)

10067 #i‚de‡
GL_SGIX_y¸cba


10068 
	#GL_SGIX_y¸cba
 1

	)

10071 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


10072 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

10075 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


10076 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

10079 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


10080 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

10083 #i‚de‡
GL_3DFX_mu…ißm∂e


10084 
	#GL_3DFX_mu…ißm∂e
 1

	)

10087 #i‚de‡
GL_3DFX_tbuf„r


10088 
	#GL_3DFX_tbuf„r
 1

	)

10089 #ifde‡
GL_GLEXT_PROTOTYPES


10090 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

10092 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

10095 #i‚de‡
GL_EXT_mu…ißm∂e


10096 
	#GL_EXT_mu…ißm∂e
 1

	)

10097 #ifde‡
GL_GLEXT_PROTOTYPES


10098 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

10099 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

10101 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

10102 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

10105 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


10106 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

10109 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


10110 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

10113 #i‚de‡
GL_SGIX_ªßm∂e


10114 
	#GL_SGIX_ªßm∂e
 1

	)

10117 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


10118 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

10121 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


10122 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

10123 #ifde‡
GL_GLEXT_PROTOTYPES


10124 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

10126 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

10129 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


10130 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

10131 #ifde‡
GL_GLEXT_PROTOTYPES


10132 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° 
GLvoid
 *
∑øms
);

10134 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

10137 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


10138 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

10141 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


10142 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

10145 #i‚de‡
GL_NV_„n˚


10146 
	#GL_NV_„n˚
 1

	)

10147 #ifde‡
GL_GLEXT_PROTOTYPES


10148 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

10149 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

10150 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

10151 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

10152 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10153 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

10154 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

10156 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

10157 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

10158 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10159 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10160 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10161 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

10162 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

10165 #i‚de‡
GL_NV_evÆu©‹s


10166 
	#GL_NV_evÆu©‹s
 1

	)

10167 #ifde‡
GL_GLEXT_PROTOTYPES


10168 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° 
GLvoid
 *
poöts
);

10169 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10170 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10171 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, 
GLvoid
 *
poöts
);

10172 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10173 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10174 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10175 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10176 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

10178 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

10179 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10180 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10181 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

10182 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10183 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10184 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10185 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10186 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

10189 #i‚de‡
GL_NV_∑cked_dïth_°ícû


10190 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

10193 #i‚de‡
GL_NV_ªgi°î_comböîs2


10194 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10195 #ifde‡
GL_GLEXT_PROTOTYPES


10196 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10197 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10199 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10200 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10203 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10204 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10207 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10208 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10211 #i‚de‡
GL_NV_ãxtuª_shadî


10212 
	#GL_NV_ãxtuª_shadî
 1

	)

10215 #i‚de‡
GL_NV_ãxtuª_shadî2


10216 
	#GL_NV_ãxtuª_shadî2
 1

	)

10219 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10220 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10223 #i‚de‡
GL_NV_vîãx_¥ogøm


10224 
	#GL_NV_vîãx_¥ogøm
 1

	)

10225 #ifde‡
GL_GLEXT_PROTOTYPES


10226 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10227 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10228 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10229 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10230 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10231 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10232 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10233 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10234 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10235 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10236 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10237 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10238 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10239 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
* *
poöãr
);

10240 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10241 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10242 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10243 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10244 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10245 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10246 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10247 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10248 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10249 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10250 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

10251 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10252 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10253 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10254 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10255 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10256 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10257 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10258 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10259 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10260 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10261 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10262 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10263 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10264 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10265 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10266 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10267 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10268 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10269 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10270 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10271 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10272 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10273 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10274 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10275 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

10276 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10277 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10278 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10279 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10280 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10281 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10282 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10283 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10284 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10285 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10286 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10287 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10288 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10289 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

10291 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10292 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10293 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10294 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10295 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10296 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10297 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10298 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10299 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10300 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10301 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10302 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10303 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10304 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

10305 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10306 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10307 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10308 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10309 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10310 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10311 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10312 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10313 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10314 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10315 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10316 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10317 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10318 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10319 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10320 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10321 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10322 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10323 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10324 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10325 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10326 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10327 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10328 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10329 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10330 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10331 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10332 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10333 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10334 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10335 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10336 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10337 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10338 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10339 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10340 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10341 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10342 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10343 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10344 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10345 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10346 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10347 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10348 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10349 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10350 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10351 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10352 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10353 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10354 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10357 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


10358 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

10361 #i‚de‡
GL_SGIX_sˇÀbüs_höt


10362 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

10365 #i‚de‡
GL_OML_öãæa˚


10366 
	#GL_OML_öãæa˚
 1

	)

10369 #i‚de‡
GL_OML_subßm∂e


10370 
	#GL_OML_subßm∂e
 1

	)

10373 #i‚de‡
GL_OML_ªßm∂e


10374 
	#GL_OML_ªßm∂e
 1

	)

10377 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


10378 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

10381 #i‚de‡
GL_ATI_ívm≠_bumpm≠


10382 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

10383 #ifde‡
GL_GLEXT_PROTOTYPES


10384 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

10385 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

10386 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

10387 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

10389 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

10390 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

10391 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

10392 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

10395 #i‚de‡
GL_ATI_‰agmít_shadî


10396 
	#GL_ATI_‰agmít_shadî
 1

	)

10397 #ifde‡
GL_GLEXT_PROTOTYPES


10398 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

10399 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

10400 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

10401 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

10402 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

10403 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

10404 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

10405 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

10406 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

10407 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

10408 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

10409 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

10410 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

10411 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

10413 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

10414 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

10415 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

10416 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

10417 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

10418 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

10419 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

10420 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

10421 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

10422 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

10423 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

10424 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

10425 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

10426 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

10429 #i‚de‡
GL_ATI_≤_åüngÀs


10430 
	#GL_ATI_≤_åüngÀs
 1

	)

10431 #ifde‡
GL_GLEXT_PROTOTYPES


10432 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10433 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10435 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10436 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10439 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


10440 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

10441 #ifde‡
GL_GLEXT_PROTOTYPES


10442 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° 
GLvoid
 *
poöãr
, 
GLíum
 
ußge
);

10443 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10444 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° 
GLvoid
 *
poöãr
, 
GLíum
 
¥e£rve
);

10445 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10446 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10447 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10448 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

10449 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10450 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10451 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

10452 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10453 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10455 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

10456 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10457 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

10458 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10459 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10460 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10461 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

10462 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10463 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10464 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

10465 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10466 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10469 #i‚de‡
GL_EXT_vîãx_shadî


10470 
	#GL_EXT_vîãx_shadî
 1

	)

10471 #ifde‡
GL_GLEXT_PROTOTYPES


10472 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

10473 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

10474 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

10475 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

10476 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

10477 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

10478 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

10479 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

10480 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

10481 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

10482 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

10483 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

10484 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

10485 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
addr
);

10486 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
addr
);

10487 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

10488 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

10489 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

10490 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

10491 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

10492 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

10493 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

10494 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

10495 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° 
GLvoid
 *
addr
);

10496 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

10497 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

10498 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

10499 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

10500 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

10501 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

10502 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

10503 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

10504 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10505 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10506 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10507 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLvoid
* *
d©a
);

10508 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10509 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10510 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10511 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

10512 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

10513 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

10515 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

10516 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

10517 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10518 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

10519 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10520 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

10521 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

10522 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

10523 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10524 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10525 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10526 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10527 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

10528 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

10529 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

10530 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

10531 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

10532 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

10533 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

10534 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

10535 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

10536 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

10537 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

10538 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

10539 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10540 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10541 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

10542 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

10543 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

10544 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

10545 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

10546 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

10547 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10548 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10549 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10550 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

10551 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10552 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10553 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10554 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10555 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10556 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10559 #i‚de‡
GL_ATI_vîãx_°ªams


10560 
	#GL_ATI_vîãx_°ªams
 1

	)

10561 #ifde‡
GL_GLEXT_PROTOTYPES


10562 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

10563 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10564 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

10565 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10566 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

10567 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10568 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

10569 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10570 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10571 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10572 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

10573 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10574 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10575 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10576 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10577 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10578 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10579 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10580 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

10581 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10582 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10583 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10584 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10585 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10586 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10587 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10588 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

10589 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10590 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10591 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10592 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10593 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10594 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

10595 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

10596 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

10597 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

10598 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

10599 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

10600 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

10601 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

10602 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

10603 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

10604 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

10605 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10606 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10608 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

10609 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10610 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

10611 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10612 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

10613 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10614 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

10615 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10616 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10617 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10618 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

10619 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10620 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10621 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10622 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10623 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10624 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10625 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10626 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10627 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10628 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10629 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10630 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10631 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10632 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10633 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10634 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10635 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10636 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10637 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10638 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10639 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10640 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

10641 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

10642 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

10643 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

10644 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

10645 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

10646 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

10647 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

10648 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

10649 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

10650 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

10651 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10652 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10655 #i‚de‡
GL_ATI_ñemít_¨øy


10656 
	#GL_ATI_ñemít_¨øy
 1

	)

10657 #ifde‡
GL_GLEXT_PROTOTYPES


10658 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
poöãr
);

10659 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

10660 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

10662 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10663 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

10664 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

10667 #i‚de‡
GL_SUN_mesh_¨øy


10668 
	#GL_SUN_mesh_¨øy
 1

	)

10669 #ifde‡
GL_GLEXT_PROTOTYPES


10670 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

10672 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

10675 #i‚de‡
GL_SUN_¶i˚_accum


10676 
	#GL_SUN_¶i˚_accum
 1

	)

10679 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


10680 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

10683 #i‚de‡
GL_NV_dïth_˛amp


10684 
	#GL_NV_dïth_˛amp
 1

	)

10687 #i‚de‡
GL_NV_oc˛usi⁄_quîy


10688 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

10689 #ifde‡
GL_GLEXT_PROTOTYPES


10690 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10691 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10692 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

10693 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

10694 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

10695 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10696 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10698 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10699 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10700 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

10701 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

10702 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

10703 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10704 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10707 #i‚de‡
GL_NV_poöt_•rôe


10708 
	#GL_NV_poöt_•rôe
 1

	)

10709 #ifde‡
GL_GLEXT_PROTOTYPES


10710 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10711 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10713 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10714 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10717 #i‚de‡
GL_NV_ãxtuª_shadî3


10718 
	#GL_NV_ãxtuª_shadî3
 1

	)

10721 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


10722 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

10725 #i‚de‡
GL_EXT_shadow_funcs


10726 
	#GL_EXT_shadow_funcs
 1

	)

10729 #i‚de‡
GL_EXT_°ícû_two_side


10730 
	#GL_EXT_°ícû_two_side
 1

	)

10731 #ifde‡
GL_GLEXT_PROTOTYPES


10732 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

10734 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

10737 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


10738 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

10741 #i‚de‡
GL_APPLE_˛õ¡_°‹age


10742 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

10745 #i‚de‡
GL_APPLE_ñemít_¨øy


10746 
	#GL_APPLE_ñemít_¨øy
 1

	)

10747 #ifde‡
GL_GLEXT_PROTOTYPES


10748 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
poöãr
);

10749 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

10750 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

10751 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

10752 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

10754 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10755 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10756 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10757 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

10758 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

10761 #i‚de‡
GL_APPLE_„n˚


10762 
	#GL_APPLE_„n˚
 1

	)

10763 #ifde‡
GL_GLEXT_PROTOTYPES


10764 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

10765 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

10766 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

10767 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

10768 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

10769 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

10770 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

10771 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

10773 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

10774 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

10775 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10776 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10777 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10778 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

10779 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

10780 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

10783 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


10784 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

10785 #ifde‡
GL_GLEXT_PROTOTYPES


10786 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

10787 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

10788 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

10789 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

10791 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

10792 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

10793 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

10794 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

10797 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


10798 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

10799 #ifde‡
GL_GLEXT_PROTOTYPES


10800 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, 
GLvoid
 *
poöãr
);

10801 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, 
GLvoid
 *
poöãr
);

10802 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10804 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

10805 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

10806 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10809 #i‚de‡
GL_APPLE_ycb¸_422


10810 
	#GL_APPLE_ycb¸_422
 1

	)

10813 #i‚de‡
GL_S3_s3tc


10814 
	#GL_S3_s3tc
 1

	)

10817 #i‚de‡
GL_ATI_døw_buf„rs


10818 
	#GL_ATI_døw_buf„rs
 1

	)

10819 #ifde‡
GL_GLEXT_PROTOTYPES


10820 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

10822 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

10825 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


10826 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

10832 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


10833 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

10836 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


10837 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

10840 #i‚de‡
GL_NV_Êﬂt_buf„r


10841 
	#GL_NV_Êﬂt_buf„r
 1

	)

10844 #i‚de‡
GL_NV_‰agmít_¥ogøm


10845 
	#GL_NV_‰agmít_¥ogøm
 1

	)

10847 #ifde‡
GL_GLEXT_PROTOTYPES


10848 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10849 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10850 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

10851 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

10852 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

10853 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

10855 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10856 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10857 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10858 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10859 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

10860 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

10863 #i‚de‡
GL_NV_hÆf_Êﬂt


10864 
	#GL_NV_hÆf_Êﬂt
 1

	)

10865 #ifde‡
GL_GLEXT_PROTOTYPES


10866 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

10867 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10868 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

10869 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10870 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

10871 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10872 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

10873 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10874 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

10875 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10876 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

10877 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10878 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

10879 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10880 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

10881 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10882 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

10883 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10884 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

10885 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10886 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

10887 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10888 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

10889 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10890 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

10891 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10892 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

10893 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

10894 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

10895 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

10896 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

10897 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

10898 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

10899 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

10900 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

10901 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10902 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

10903 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10904 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

10905 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10906 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

10907 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

10908 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10909 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10910 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10911 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

10913 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

10914 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10915 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

10916 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10917 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

10918 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10919 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

10920 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10921 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

10922 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10923 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

10924 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10925 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

10926 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10927 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

10928 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10929 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

10930 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10931 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

10932 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10933 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

10934 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10935 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

10936 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10937 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

10938 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10939 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

10940 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10941 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

10942 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

10943 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

10944 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

10945 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

10946 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

10947 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

10948 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

10950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

10952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

10954 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10955 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10956 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10957 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10958 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

10961 #i‚de‡
GL_NV_pixñ_d©a_ønge


10962 
	#GL_NV_pixñ_d©a_ønge
 1

	)

10963 #ifde‡
GL_GLEXT_PROTOTYPES


10964 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

10965 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

10967 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10968 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

10971 #i‚de‡
GL_NV_¥imôive_ª°¨t


10972 
	#GL_NV_¥imôive_ª°¨t
 1

	)

10973 #ifde‡
GL_GLEXT_PROTOTYPES


10974 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

10975 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

10977 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

10978 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

10981 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


10982 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

10985 #i‚de‡
GL_NV_vîãx_¥ogøm2


10986 
	#GL_NV_vîãx_¥ogøm2
 1

	)

10989 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


10990 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

10991 #ifde‡
GL_GLEXT_PROTOTYPES


10992 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10993 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

10995 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10996 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10999 #i‚de‡
GL_ATI_£∑øã_°ícû


11000 
	#GL_ATI_£∑øã_°ícû
 1

	)

11001 #ifde‡
GL_GLEXT_PROTOTYPES


11002 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

11003 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

11005 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

11006 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

11009 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


11010 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

11011 #ifde‡
GL_GLEXT_PROTOTYPES


11012 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

11013 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11014 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11016 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

11017 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11018 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11021 #i‚de‡
GL_OES_ªad_f‹m©


11022 
	#GL_OES_ªad_f‹m©
 1

	)

11025 #i‚de‡
GL_EXT_dïth_bounds_ã°


11026 
	#GL_EXT_dïth_bounds_ã°
 1

	)

11027 #ifde‡
GL_GLEXT_PROTOTYPES


11028 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

11030 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

11033 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


11034 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

11037 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


11038 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

11039 #ifde‡
GL_GLEXT_PROTOTYPES


11040 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

11042 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

11045 #i‚de‡
GL_MESA_∑ck_övît


11046 
	#GL_MESA_∑ck_övît
 1

	)

11049 #i‚de‡
GL_MESA_ycb¸_ãxtuª


11050 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

11053 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


11054 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

11057 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


11058 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

11061 #i‚de‡
GL_NV_‰agmít_¥ogøm2


11062 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

11065 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


11066 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

11069 #i‚de‡
GL_NV_vîãx_¥ogøm3


11070 
	#GL_NV_vîãx_¥ogøm3
 1

	)

11073 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


11074 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

11075 #ifde‡
GL_GLEXT_PROTOTYPES


11076 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

11077 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11078 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

11079 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

11080 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

11081 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11082 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

11083 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

11084 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

11085 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

11086 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

11087 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11088 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11089 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

11090 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

11091 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11092 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

11094 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

11095 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11096 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

11097 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

11098 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11099 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11100 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

11101 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

11102 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

11103 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

11104 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

11105 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11106 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11107 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

11108 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

11109 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11110 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

11113 #i‚de‡
GL_GREMEDY_°rög_m¨kî


11114 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

11115 #ifde‡
GL_GLEXT_PROTOTYPES


11116 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

11118 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

11121 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


11122 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

11125 #i‚de‡
GL_EXT_°ícû_˛ór_èg


11126 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

11127 #ifde‡
GL_GLEXT_PROTOTYPES


11128 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

11130 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

11133 #i‚de‡
GL_EXT_ãxtuª_sRGB


11134 
	#GL_EXT_ãxtuª_sRGB
 1

	)

11137 #i‚de‡
GL_EXT_‰amebuf„r_blô


11138 
	#GL_EXT_‰amebuf„r_blô
 1

	)

11139 #ifde‡
GL_GLEXT_PROTOTYPES


11140 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

11142 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

11145 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


11146 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

11147 #ifde‡
GL_GLEXT_PROTOTYPES


11148 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11150 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11153 #i‚de‡
GL_MESAX_ãxtuª_°ack


11154 
	#GL_MESAX_ãxtuª_°ack
 1

	)

11157 #i‚de‡
GL_EXT_timî_quîy


11158 
	#GL_EXT_timî_quîy
 1

	)

11159 #ifde‡
GL_GLEXT_PROTOTYPES


11160 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

11161 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

11163 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

11164 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

11167 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


11168 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

11169 #ifde‡
GL_GLEXT_PROTOTYPES


11170 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11171 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11173 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11174 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11177 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


11178 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

11179 #ifde‡
GL_GLEXT_PROTOTYPES


11180 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11181 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11183 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11184 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11187 #i‚de‡
GL_NV_gpu_¥ogøm4


11188 
	#GL_NV_gpu_¥ogøm4
 1

	)

11189 #ifde‡
GL_GLEXT_PROTOTYPES


11190 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11191 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

11192 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11193 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11194 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

11195 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11196 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11197 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

11198 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11199 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11200 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

11201 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11202 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

11203 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

11204 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

11205 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

11207 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11208 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11209 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11210 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11211 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11212 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11213 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11214 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11215 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11216 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11217 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11218 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11219 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

11220 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

11221 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

11222 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

11225 #i‚de‡
GL_NV_geomëry_¥ogøm4


11226 
	#GL_NV_geomëry_¥ogøm4
 1

	)

11227 #ifde‡
GL_GLEXT_PROTOTYPES


11228 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

11229 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

11230 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

11231 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

11233 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

11234 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11235 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

11236 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

11239 #i‚de‡
GL_EXT_geomëry_shadî4


11240 
	#GL_EXT_geomëry_shadî4
 1

	)

11241 #ifde‡
GL_GLEXT_PROTOTYPES


11242 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

11244 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

11247 #i‚de‡
GL_NV_vîãx_¥ogøm4


11248 
	#GL_NV_vîãx_¥ogøm4
 1

	)

11249 #ifde‡
GL_GLEXT_PROTOTYPES


11250 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11251 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11252 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11253 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11254 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11255 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11256 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11257 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11258 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11259 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11260 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11261 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11262 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11263 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11264 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11265 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11266 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11267 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11268 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11269 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11270 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

11271 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11272 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11274 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

11275 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

11276 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11277 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11278 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

11279 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

11280 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

11281 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11282 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11283 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11284 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11285 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11286 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11287 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11288 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11289 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11290 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

11291 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

11292 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

11293 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

11294 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11295 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11296 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11299 #i‚de‡
GL_EXT_gpu_shadî4


11300 
	#GL_EXT_gpu_shadî4
 1

	)

11301 #ifde‡
GL_GLEXT_PROTOTYPES


11302 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

11303 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

11304 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11305 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

11306 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

11307 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

11308 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

11309 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11310 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11311 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11312 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

11314 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

11315 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

11316 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11317 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

11318 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

11319 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

11320 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

11321 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11322 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11323 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11324 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

11327 #i‚de‡
GL_EXT_døw_ö°™˚d


11328 
	#GL_EXT_døw_ö°™˚d
 1

	)

11329 #ifde‡
GL_GLEXT_PROTOTYPES


11330 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

11331 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

11333 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

11334 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

11337 #i‚de‡
GL_EXT_∑cked_Êﬂt


11338 
	#GL_EXT_∑cked_Êﬂt
 1

	)

11341 #i‚de‡
GL_EXT_ãxtuª_¨øy


11342 
	#GL_EXT_ãxtuª_¨øy
 1

	)

11345 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


11346 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

11347 #ifde‡
GL_GLEXT_PROTOTYPES


11348 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

11350 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

11353 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


11354 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

11357 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


11358 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

11361 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


11362 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

11365 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


11366 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

11367 #ifde‡
GL_GLEXT_PROTOTYPES


11368 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

11369 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

11370 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

11372 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

11373 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

11374 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

11377 #i‚de‡
GL_NV_‰agmít_¥ogøm4


11378 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

11381 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


11382 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

11383 #ifde‡
GL_GLEXT_PROTOTYPES


11384 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11386 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11389 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


11390 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

11393 #i‚de‡
GL_NV_geomëry_shadî4


11394 
	#GL_NV_geomëry_shadî4
 1

	)

11397 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


11398 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

11399 #ifde‡
GL_GLEXT_PROTOTYPES


11400 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11401 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11402 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11404 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11405 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11406 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11409 #i‚de‡
GL_EXT_døw_buf„rs2


11410 
	#GL_EXT_døw_buf„rs2
 1

	)

11411 #ifde‡
GL_GLEXT_PROTOTYPES


11412 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

11413 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

11414 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

11415 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11416 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11417 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

11419 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

11420 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

11421 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

11422 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11423 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11424 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

11427 #i‚de‡
GL_NV_å™sf‹m_„edback


11428 
	#GL_NV_å™sf‹m_„edback
 1

	)

11429 #ifde‡
GL_GLEXT_PROTOTYPES


11430 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

11431 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

11432 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

11433 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11434 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

11435 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

11436 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

11437 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11438 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

11439 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

11440 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

11441 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

11443 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

11444 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

11445 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

11446 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11447 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

11448 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

11449 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

11450 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11451 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

11452 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

11453 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

11454 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

11457 #i‚de‡
GL_EXT_bödabÀ_unif‹m


11458 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

11459 #ifde‡
GL_GLEXT_PROTOTYPES


11460 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

11461 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

11462 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

11464 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

11465 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

11466 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

11469 #i‚de‡
GL_EXT_ãxtuª_öãgî


11470 
	#GL_EXT_ãxtuª_öãgî
 1

	)

11471 #ifde‡
GL_GLEXT_PROTOTYPES


11472 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11473 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

11474 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11475 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

11476 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

11477 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

11479 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11480 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

11481 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11482 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

11483 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

11484 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

11487 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


11488 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

11489 #ifde‡
GL_GLEXT_PROTOTYPES


11490 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

11492 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

11495 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


11496 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

11497 #ifde‡
GL_GLEXT_PROTOTYPES


11498 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

11499 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

11501 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

11502 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

11505 #i‚de‡
GL_NV_¥e£¡_video


11506 
	#GL_NV_¥e£¡_video
 1

	)

11507 #ifde‡
GL_GLEXT_PROTOTYPES


11508 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

11509 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

11510 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11511 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11512 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

11513 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

11515 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

11516 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

11517 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11518 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11519 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

11520 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

11523 #i‚de‡
GL_EXT_å™sf‹m_„edback


11524 
	#GL_EXT_å™sf‹m_„edback
 1

	)

11525 #ifde‡
GL_GLEXT_PROTOTYPES


11526 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

11527 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

11528 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

11529 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

11530 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

11531 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* *
v¨yögs
, 
GLíum
 
buf„rMode
);

11532 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

11534 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

11535 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

11536 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

11537 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

11538 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

11539 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

11540 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

11543 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


11544 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

11545 #ifde‡
GL_GLEXT_PROTOTYPES


11546 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

11547 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

11548 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11549 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11550 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11551 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11552 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

11553 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11554 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11555 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11556 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11557 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11558 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11559 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

11560 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

11561 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

11562 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

11563 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11564 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11565 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

11566 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

11567 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11568 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11569 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11570 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11571 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11572 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11573 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11574 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11575 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

11576 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

11577 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

11578 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11579 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

11580 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11581 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11582 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11583 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

11584 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11585 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11586 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11587 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11588 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11589 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11590 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11591 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11592 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11593 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11594 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11595 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

11596 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

11597 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

11598 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11599 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

11600 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11601 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11602 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11603 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

11604 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11605 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

11606 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

11607 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

11608 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

11609 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

11610 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

11611 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11612 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11613 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11614 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11615 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

11616 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11617 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11618 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11619 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11620 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11621 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11622 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11623 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11624 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11625 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11626 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

11627 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

11628 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLvoid
* *
d©a
);

11629 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11630 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11631 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11632 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11633 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11634 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11635 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
);

11636 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11637 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11638 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11639 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11640 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11641 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
bôs
);

11642 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
);

11643 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° 
GLvoid
 *
°rög
);

11644 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

11645 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

11646 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11647 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

11648 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

11649 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

11650 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11651 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 *
°rög
);

11652 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

11653 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11654 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

11655 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

11656 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11657 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

11658 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

11659 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

11660 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

11661 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11662 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

11663 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11664 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

11665 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11666 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

11667 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11668 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

11669 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

11670 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

11671 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

11672 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

11673 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

11674 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

11675 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

11676 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

11677 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11678 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11679 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11680 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

11681 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11682 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11683 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11684 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

11685 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11686 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11687 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11688 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11689 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11690 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11691 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11692 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11693 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

11694 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

11695 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

11696 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

11697 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

11698 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11699 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11700 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11701 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

11702 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, 
GLíum
 
ußge
);

11703 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

11704 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

11705 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

11706 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

11707 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

11708 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

11709 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11710 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

11711 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLvoid
 *
d©a
);

11712 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

11713 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

11714 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

11715 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11716 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

11717 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11718 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11719 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

11720 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

11721 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11722 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

11723 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

11724 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

11725 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

11726 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

11727 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11728 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11729 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

11730 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

11731 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

11732 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

11733 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

11734 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11735 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

11736 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

11737 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

11738 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

11739 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11740 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11741 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11742 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

11743 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11744 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11745 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11746 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11747 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11748 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11749 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11750 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11751 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

11753 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

11754 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

11755 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11756 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11757 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11758 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11759 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

11760 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11761 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11762 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11763 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11764 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11765 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11766 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

11767 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

11768 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

11769 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

11770 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11771 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11772 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

11773 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

11774 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11775 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11776 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11777 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11778 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11779 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11780 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11781 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11782 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

11783 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

11784 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11785 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11786 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

11787 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11788 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11789 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11790 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

11791 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11792 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11793 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11794 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11795 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11796 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11797 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11798 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11799 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11800 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11801 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11802 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

11803 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

11804 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11805 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11806 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

11807 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11808 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11809 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11810 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

11811 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11812 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

11813 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11814 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

11815 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

11816 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

11817 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

11818 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11819 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11820 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11821 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11822 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

11823 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11824 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11825 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11826 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11827 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11828 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11829 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11830 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11831 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11832 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11833 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

11834 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

11835 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
* *
	td©a
);

11836 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11837 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11838 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11839 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11840 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11841 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11842 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

11843 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11844 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11845 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11846 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11847 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11848 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

11849 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

11850 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

11851 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11852 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11853 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11854 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11855 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

11856 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

11857 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11858 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

11859 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11860 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11861 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11862 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11863 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11864 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

11865 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11866 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

11867 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

11868 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11869 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

11870 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11871 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

11872 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11873 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

11874 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11875 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

11876 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

11877 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

11878 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

11879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

11880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

11881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

11882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

11883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

11884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

11892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11896 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

11901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

11902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

11903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

11904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

11905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

11909 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, 
	tGLíum
 
	tußge
);

11910 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

11911 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

11912 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

11913 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

11914 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

11915 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

11916 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11917 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

11918 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

11919 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

11920 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

11921 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11922 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11923 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

11924 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11925 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11926 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

11927 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

11928 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11929 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

11930 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

11931 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

11932 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

11933 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

11934 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11935 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11936 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11937 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11938 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

11939 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

11940 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

11941 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11942 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

11943 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

11944 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11945 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11947 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11948 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11949 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11950 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11951 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11952 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11953 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11954 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11955 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11956 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11957 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11958 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

11961 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


11962 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

11965 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


11966 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

11969 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


11970 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

11971 #ifde‡
GL_GLEXT_PROTOTYPES


11972 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

11973 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

11974 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

11976 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

11977 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

11978 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11981 #i‚de‡
GL_NV_å™sf‹m_„edback2


11982 
	#GL_NV_å™sf‹m_„edback2
 1

	)

11983 #ifde‡
GL_GLEXT_PROTOTYPES


11984 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

11985 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

11986 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

11987 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

11988 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

11989 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

11990 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

11992 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

11993 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

11994 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

11995 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

11996 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

11997 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

11998 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

12001 #i‚de‡
GL_ATI_memöfo


12002 
	#GL_ATI_memöfo
 1

	)

12005 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


12006 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

12007 #ifde‡
GL_GLEXT_PROTOTYPES


12008 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

12009 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

12010 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

12011 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

12012 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

12013 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

12014 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

12015 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

12016 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

12017 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

12018 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

12020 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

12021 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

12022 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

12023 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

12024 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

12025 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

12026 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

12027 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

12028 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

12029 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

12030 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

12033 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


12034 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

12037 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


12038 
	#GL_AMD_vîãx_shadî_ãs£œt‹
 1

	)

12039 #ifde‡
GL_GLEXT_PROTOTYPES


12040 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

12041 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

12043 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

12044 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

12047 #i‚de‡
GL_EXT_¥ovokög_vîãx


12048 
	#GL_EXT_¥ovokög_vîãx
 1

	)

12049 #ifde‡
GL_GLEXT_PROTOTYPES


12050 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

12052 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

12055 #i‚de‡
GL_EXT_ãxtuª_¢‹m


12056 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

12059 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


12060 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

12061 #ifde‡
GL_GLEXT_PROTOTYPES


12062 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

12063 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

12064 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

12065 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

12067 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

12068 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

12069 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

12070 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

12073 #i‚de‡
GL_APPLE_ãxtuª_ønge


12074 
	#GL_APPLE_ãxtuª_ønge
 1

	)

12075 #ifde‡
GL_GLEXT_PROTOTYPES


12076 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
poöãr
);

12077 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
* *
∑øms
);

12079 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

12080 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

12083 #i‚de‡
GL_APPLE_Êﬂt_pixñs


12084 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

12087 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


12088 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

12089 #ifde‡
GL_GLEXT_PROTOTYPES


12090 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12091 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12092 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

12093 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

12094 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

12095 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

12096 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

12098 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12099 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12100 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

12101 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

12102 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

12103 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

12104 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

12107 #i‚de‡
GL_APPLE_aux_dïth_°ícû


12108 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

12111 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


12112 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

12113 #ifde‡
GL_GLEXT_PROTOTYPES


12114 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

12115 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

12116 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

12118 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

12119 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

12120 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12123 #i‚de‡
GL_APPLE_row_byãs


12124 
	#GL_APPLE_row_byãs
 1

	)

12127 #i‚de‡
GL_APPLE_rgb_422


12128 
	#GL_APPLE_rgb_422
 1

	)

12131 #i‚de‡
GL_NV_video_ˇ±uª


12132 
	#GL_NV_video_ˇ±uª
 1

	)

12133 #ifde‡
GL_GLEXT_PROTOTYPES


12134 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

12135 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

12136 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

12137 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

12138 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

12139 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

12140 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

12141 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

12142 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

12143 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

12144 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

12145 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

12147 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12148 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

12149 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

12150 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

12151 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12152 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

12153 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

12154 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

12155 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

12156 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

12157 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

12158 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

12161 #i‚de‡
GL_NV_c›y_image


12162 
	#GL_NV_c›y_image
 1

	)

12163 #ifde‡
GL_GLEXT_PROTOTYPES


12164 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

12166 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

12169 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


12170 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

12171 #ifde‡
GL_GLEXT_PROTOTYPES


12172 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

12173 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

12174 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

12176 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

12177 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

12178 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

12181 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


12182 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

12185 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


12186 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

12187 #ifde‡
GL_GLEXT_PROTOTYPES


12188 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

12189 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

12190 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

12191 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

12192 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

12193 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

12194 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12195 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12196 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

12197 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

12198 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12199 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

12200 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

12201 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12203 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

12204 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12205 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12206 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

12207 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12208 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12209 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12210 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12211 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

12212 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12213 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12214 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

12215 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12216 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12219 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


12220 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

12221 #ifde‡
GL_GLEXT_PROTOTYPES


12222 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

12223 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12224 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12225 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12226 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12227 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12228 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

12229 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12230 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12231 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

12232 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12233 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

12235 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

12236 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12237 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12238 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12239 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12240 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12241 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

12242 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12243 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12244 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

12245 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12246 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

12249 #i‚de‡
GL_NV_ãxtuª_b¨rõr


12250 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

12251 #ifde‡
GL_GLEXT_PROTOTYPES


12252 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

12254 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

12257 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


12258 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

12261 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


12262 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

12265 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


12266 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

12269 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


12270 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

12271 #ifde‡
GL_GLEXT_PROTOTYPES


12272 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

12273 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

12275 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

12276 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

12279 #i‚de‡
GL_EXT_vîãx_©åib_64bô


12280 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

12281 #ifde‡
GL_GLEXT_PROTOTYPES


12282 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

12283 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

12284 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

12285 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

12286 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12287 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12288 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12289 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

12290 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

12291 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

12292 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

12294 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

12295 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

12296 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

12297 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

12298 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12299 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12300 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12301 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

12302 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

12303 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

12304 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

12307 #i‚de‡
GL_NV_gpu_¥ogøm5


12308 
	#GL_NV_gpu_¥ogøm5
 1

	)

12309 #ifde‡
GL_GLEXT_PROTOTYPES


12310 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

12311 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

12313 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

12314 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

12317 #i‚de‡
GL_NV_gpu_shadî5


12318 
	#GL_NV_gpu_shadî5
 1

	)

12319 #ifde‡
GL_GLEXT_PROTOTYPES


12320 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

12321 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12322 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12323 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12324 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12325 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12326 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12327 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12328 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

12329 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12330 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12331 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12332 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12333 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12334 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12335 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12336 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

12337 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

12338 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12339 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12340 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12341 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12342 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12343 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12344 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

12345 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

12346 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12347 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12348 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12349 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12350 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12351 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12352 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

12354 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

12355 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12356 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12357 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12358 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12359 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12360 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12361 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12362 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

12363 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12364 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12365 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12366 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12367 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12368 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12369 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12370 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

12371 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

12372 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12373 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12374 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12375 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12376 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12377 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12378 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

12379 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

12380 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12381 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12382 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12383 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12384 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12385 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12386 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

12389 #i‚de‡
GL_NV_shadî_buf„r_°‹e


12390 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

12393 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


12394 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

12397 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


12398 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

12399 #ifde‡
GL_GLEXT_PROTOTYPES


12400 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

12401 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

12402 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

12403 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

12404 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12405 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12406 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12407 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

12408 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

12409 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

12410 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

12411 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

12412 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12413 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12414 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12415 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

12416 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

12417 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

12418 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

12420 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

12421 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

12422 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

12423 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

12424 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12425 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12426 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12427 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

12428 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

12429 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

12430 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

12431 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

12432 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12433 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12434 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12435 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

12436 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

12437 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

12438 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

12441 #i‚de‡
GL_NV_mu…ißm∂e_covîage


12442 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

12445 #i‚de‡
GL_AMD_«me_gí_dñëe


12446 
	#GL_AMD_«me_gí_dñëe
 1

	)

12447 #ifde‡
GL_GLEXT_PROTOTYPES


12448 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

12449 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

12450 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

12452 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

12453 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

12454 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

12457 #i‚de‡
GL_AMD_debug_ouçut


12458 
	#GL_AMD_debug_ouçut
 1

	)

12459 #ifde‡
GL_GLEXT_PROTOTYPES


12460 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

12461 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

12462 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, 
GLvoid
 *
u£rP¨am
);

12463 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

12465 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

12466 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

12467 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, 
	tGLvoid
 *
	tu£rP¨am
);

12468 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

12471 #i‚de‡
GL_NV_vd∑u_öãr›


12472 
	#GL_NV_vd∑u_öãr›
 1

	)

12473 #ifde‡
GL_GLEXT_PROTOTYPES


12474 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° 
GLvoid
 *
vdpDevi˚
, c⁄° GLvoid *
gëProcAddªss
);

12475 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

12476 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° 
GLvoid
 *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

12477 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (
GLvoid
 *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

12478 
GLAPI
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

12479 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

12480 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

12481 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

12482 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

12483 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

12485 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° 
	tGLvoid
 *
	tvdpDevi˚
, c⁄° GLvoid *
	tgëProcAddªss
);

12486 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

12487 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° 
	tGLvoid
 *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12488 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(
	tGLvoid
 *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

12489 (
APIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12490 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

12491 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

12492 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

12493 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

12494 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

12497 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


12498 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

12501 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


12502 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

12505 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


12506 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

12509 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


12510 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

12511 #ifde‡
GL_GLEXT_PROTOTYPES


12512 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12513 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12514 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12515 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12516 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12517 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

12519 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12520 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12521 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12522 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12523 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12524 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12527 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


12528 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

12531 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


12532 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

12533 #ifde‡
GL_GLEXT_PROTOTYPES


12534 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

12536 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

12539 #i‚de‡
GL_EXT_x11_sync_obje˘


12540 
	#GL_EXT_x11_sync_obje˘
 1

	)

12541 #ifde‡
GL_GLEXT_PROTOTYPES


12542 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

12544 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

12547 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


12548 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

12549 #ifde‡
GL_GLEXT_PROTOTYPES


12550 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° 
GLvoid
 *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

12551 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

12553 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

12554 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

12557 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


12558 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

12561 #i‚de‡
GL_NV_∑th_ªndîög


12562 
	#GL_NV_∑th_ªndîög
 1

	)

12563 #ifde‡
GL_GLEXT_PROTOTYPES


12564 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

12565 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

12566 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

12567 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12568 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12569 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12570 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° 
GLvoid
 *
co‹ds
);

12571 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° 
GLvoid
 *
∑thSåög
);

12572 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° 
GLvoid
 *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° GLvoid *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

12573 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° 
GLvoid
 *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

12574 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

12575 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

12576 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

12577 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12578 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

12579 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

12580 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

12581 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

12582 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

12583 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

12584 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

12585 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

12586 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

12587 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12588 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12589 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

12590 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

12591 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

12592 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

12593 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

12594 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

12595 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12596 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

12597 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

12598 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12599 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

12600 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

12601 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

12602 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

12603 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

12604 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° 
GLvoid
 *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

12605 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

12606 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12607 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

12608 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

12609 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12610 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12611 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

12612 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

12614 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

12615 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

12616 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

12617 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12618 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12619 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12620 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
 *
	tco‹ds
);

12621 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	t∑thSåög
);

12622 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° 
	tGLvoid
 *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° GLvoid *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12623 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° 
	tGLvoid
 *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12624 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

12625 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

12626 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

12627 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12628 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

12629 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

12630 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

12631 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

12632 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

12633 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

12634 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

12635 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

12636 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

12637 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12638 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12639 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

12640 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

12641 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

12642 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

12643 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12644 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12645 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12646 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12647 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12648 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12649 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

12650 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

12651 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

12652 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12653 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12654 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° 
	tGLvoid
 *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

12655 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12656 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12657 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

12658 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

12659 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12660 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12661 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

12662 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

12665 #i‚de‡
GL_AMD_pö√d_mem‹y


12666 
	#GL_AMD_pö√d_mem‹y
 1

	)

12669 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


12670 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

12671 #ifde‡
GL_GLEXT_PROTOTYPES


12672 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

12674 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

12677 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


12678 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

12681 #i‚de‡
GL_AMD_vîãx_shadî_œyî


12682 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

12685 #i‚de‡
GL_NV_bödÀss_ãxtuª


12686 
	#GL_NV_bödÀss_ãxtuª
 1

	)

12687 #ifde‡
GL_GLEXT_PROTOTYPES


12688 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

12689 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

12690 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12691 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

12692 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

12693 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

12694 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

12695 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

12696 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

12697 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

12698 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

12699 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12700 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

12702 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

12703 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

12704 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12705 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12706 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

12707 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

12708 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12709 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

12710 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

12711 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

12712 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

12713 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12714 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

12717 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


12718 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

12721 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


12722 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

12725 #i‚de‡
GL_AMD_•¨£_ãxtuª


12726 
	#GL_AMD_•¨£_ãxtuª
 1

	)

12727 #ifde‡
GL_GLEXT_PROTOTYPES


12728 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

12729 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

12731 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

12732 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

12736 #ifde‡
__˝lu•lus


	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚def 
_FCNTL_H


23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_GNU


25 
	~<bôs/uio.h
>

31 
	#O_ACCMODE
 0003

	)

32 
	#O_RDONLY
 00

	)

33 
	#O_WRONLY
 01

	)

34 
	#O_RDWR
 02

	)

35 
	#O_CREAT
 0100

	)

36 
	#O_EXCL
 0200

	)

37 
	#O_NOCTTY
 0400

	)

38 
	#O_TRUNC
 01000

	)

39 
	#O_APPEND
 02000

	)

40 
	#O_NONBLOCK
 04000

	)

41 
	#O_NDELAY
 
O_NONBLOCK


	)

42 
	#O_SYNC
 04010000

	)

43 
	#O_FSYNC
 
O_SYNC


	)

44 
	#O_ASYNC
 020000

	)

46 #ifde‡
__USE_XOPEN2K8


47 
	#O_DIRECTORY
 0200000

	)

48 
	#O_NOFOLLOW
 0400000

	)

49 
	#O_CLOEXEC
 02000000

	)

51 #ifde‡
__USE_GNU


52 
	#O_DIRECT
 040000

	)

53 
	#O_NOATIME
 01000000

	)

54 
	#O_PATH
 010000000

	)

60 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


61 
	#O_DSYNC
 010000

	)

62 
	#O_RSYNC
 
O_SYNC


	)

65 #ifde‡
__USE_LARGEFILE64


66 #ifde‡
__x86_64__


67 
	#O_LARGEFILE
 0

	)

69 
	#O_LARGEFILE
 0100000

	)

74 
	#F_DUPFD
 0

	)

75 
	#F_GETFD
 1

	)

76 
	#F_SETFD
 2

	)

77 
	#F_GETFL
 3

	)

78 
	#F_SETFL
 4

	)

79 #ifde‡
__x86_64__


80 
	#F_GETLK
 5

	)

81 
	#F_SETLK
 6

	)

82 
	#F_SETLKW
 7

	)

84 
	#F_GETLK64
 5

	)

85 
	#F_SETLK64
 6

	)

86 
	#F_SETLKW64
 7

	)

88 #i‚de‡
__USE_FILE_OFFSET64


89 
	#F_GETLK
 5

	)

90 
	#F_SETLK
 6

	)

91 
	#F_SETLKW
 7

	)

93 
	#F_GETLK
 
F_GETLK64


	)

94 
	#F_SETLK
 
F_SETLK64


	)

95 
	#F_SETLKW
 
F_SETLKW64


	)

97 
	#F_GETLK64
 12

	)

98 
	#F_SETLK64
 13

	)

99 
	#F_SETLKW64
 14

	)

102 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


103 
	#F_SETOWN
 8

	)

104 
	#F_GETOWN
 9

	)

107 #ifde‡
__USE_GNU


108 
	#F_SETSIG
 10

	)

109 
	#F_GETSIG
 11

	)

110 
	#F_SETOWN_EX
 15

	)

111 
	#F_GETOWN_EX
 16

	)

114 #ifde‡
__USE_GNU


115 
	#F_SETLEASE
 1024

	)

116 
	#F_GETLEASE
 1025

	)

117 
	#F_NOTIFY
 1026

	)

118 
	#F_SETPIPE_SZ
 1031

	)

119 
	#F_GETPIPE_SZ
 1032

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

251 
	sfûe_h™dÀ


253 
	mh™dÀ_byãs
;

254 
	mh™dÀ_ty≥
;

256 
	mf_h™dÀ
[0];

260 
	#MAX_HANDLE_SZ
 128

	)

263 
	g__BEGIN_DECLS


265 #ifde‡
__USE_GNU


268 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

269 
__THROW
;

276 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

277 
__Êags
);

284 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

285 
size_t
 
__cou¡
, 
__Êags
);

291 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

292 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

293 
__Êags
);

299 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

300 
__Êags
);

306 #i‚de‡
__USE_FILE_OFFSET64


307 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

309 #ifde‡
__REDIRECT


310 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

311 
__off64_t
 
__Àn
),

312 
ÁŒoˇã64
);

314 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

317 #ifde‡
__USE_LARGEFILE64


318 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

319 
__off64_t
 
__Àn
);

324 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

325 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

326 
__Êags
Ë
__THROW
;

332 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

333 
__Êags
);

337 
__END_DECLS


	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VAL
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

36 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

40 
	~<ídün.h
>

42 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

44 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

51 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

52 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VALF
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7f800000UL }).
__d
)

	)

40 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

49 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

50 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

27 #ñi‡
__GNUC_PREREQ
(2,96)

28 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

31 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

33 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

34 #ifde‡
__GNUC__


35 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

36 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

38 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

39 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

116 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

342 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__MATH_INLINE
 

202 
__NTH
 (
	$Œrötf
 (
__x
))

204 
__ªs
;

209 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

210  
__ªs
;

211 
	}
}

212 
__MATH_INLINE
 

213 
__NTH
 (
	$Œröt
 (
__x
))

215 
__ªs
;

220 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

221  
__ªs
;

222 
	}
}

225 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

226 && 
deföed
 
__SSE2_MATH__


228 
__MATH_INLINE
 

229 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

231 #ifde‡
__AVX__


232 
__ªs
;

233 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

234  
__ªs
;

236 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

237  
__x
;

239 
	}
}

240 
__MATH_INLINE
 

241 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

243 #ifde‡
__AVX__


244 
__ªs
;

245 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

246  
__ªs
;

248 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

249  
__x
;

251 
	}
}

254 
__MATH_INLINE
 

255 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

257 #ifde‡
__AVX__


258 
__ªs
;

259 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

260  
__ªs
;

262 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

263  
__x
;

265 
	}
}

266 
__MATH_INLINE
 

267 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

269 #ifde‡
__AVX__


270 
__ªs
;

271 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

272  
__ªs
;

274 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

275  
__x
;

277 
	}
}

280 
	g__END_NAMESPACE_C99


283 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


285 
__BEGIN_NAMESPACE_C99


288 
__MATH_INLINE
 

289 
__NTH
 (
	$röt
 (
__x
))

291 
__ªs
;

296 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

297  
__ªs
;

298 
	}
}

299 
__MATH_INLINE
 

300 
__NTH
 (
	$rötf
 (
__x
))

302 
__ªs
;

307 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

308  
__ªs
;

309 
	}
}

311 #ifde‡
__USE_ISOC99


313 
__MATH_INLINE
 

314 
__NTH
 (
	$√¨byöt
 (
__x
))

316 
__ªs
;

321 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

322  
__ªs
;

323 
	}
}

324 
__MATH_INLINE
 

325 
__NTH
 (
	$√¨byötf
 (
__x
))

327 
__ªs
;

332 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

333  
__ªs
;

334 
	}
}

337 
	g__END_NAMESPACE_C99


340 
__BEGIN_NAMESPACE_STD


342 
__MATH_INLINE
 

343 
__NTH
 (
	$˚û
 (
__x
))

345 
__ªs
;

346 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

347  
__ªs
;

348 
	}
}

349 
__END_NAMESPACE_STD


351 
__BEGIN_NAMESPACE_C99


352 
__MATH_INLINE
 

353 
__NTH
 (
	$˚ûf
 (
__x
))

355 
__ªs
;

356 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

357  
__ªs
;

358 
	}
}

359 
__END_NAMESPACE_C99


361 
__BEGIN_NAMESPACE_STD


363 
__MATH_INLINE
 

364 
__NTH
 (
	$Êo‹
 (
__x
))

366 
__ªs
;

367 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

368  
__ªs
;

369 
	}
}

370 
__END_NAMESPACE_STD


372 
__BEGIN_NAMESPACE_C99


373 
__MATH_INLINE
 

374 
__NTH
 (
	$Êo‹f
 (
__x
))

376 
__ªs
;

377 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

378  
__ªs
;

379 
	}
}

380 
	g__END_NAMESPACE_C99


385 #i‚de‡
__x86_64__


386 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

387 && 
deföed
 
	g__OPTIMIZE__
)

391 #unde‡
m©h_îrh™dlög


400 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


401 
	#__ölöe_m©h›
(
func
, 
›
) \

402 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

403 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

404 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

405 
	#__ölöe_m©h›NP
(
func
, 
›
) \

406 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

407 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›
(
func
, 
›
) \

411 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

412 
	#__ölöe_m©h›NP
(
func
, 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

416 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

417 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

418 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

422 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


423 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

424 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

425 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

426 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

427 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

428 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

429 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

438 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

439 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

440 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

442 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

443 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

445 
Êﬂt_ty≥
 
__ªsu…
; \

446 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

447  
__ªsu…
; \

448 }

	)

451 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


452 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

453 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

454 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

456 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

457 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

460 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

461 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

462 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

464 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

468 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

469 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

470 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

472 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

478 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

479 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

482 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

483 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

486 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

487 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

491 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

492 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

493 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

495 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

496 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

498 
code
; \

499 }

	)

502 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

503 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

504 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

506 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

507 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

509 
code
; \

510 }

	)

512 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

513 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

514 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

516 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

517 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

518 
Êﬂt_ty≥
 
¨g3
)) \

520 
code
; \

521 }

	)

525 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


529 #ifde‡
__FAST_MATH__


530 #ifde‡
__USE_GNU


531 
	#__söcos_code
 \

532 
__co§
; \

533 
__sör
; \

534 
__swtmp
; \

535 
__asm
 
__vﬁ©ûe__
 \

550 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

551 *
__söx
 = 
__sör
; \

552 *
__cosx
 = 
__co§


	)

554 
__MATH_INLINE
 

555 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

557 
__söcos_code
;

558 
	}
}

560 
__MATH_INLINE
 

561 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

563 
__söcos_code
;

564 
	}
}

566 
__MATH_INLINE
 

567 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

569 
__söcos_code
;

570 
	}
}

577 #i‡
__GNUC_PREREQ
 (3, 5)

578 
	#__expm1_code
 \

579 
__ãmp
; \

580 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

581  
__ãmp
 ? __ãm∞: 
__x


	)

583 
	#__expm1_code
 \

584 
__vÆue
; \

585 
__exp⁄ít
; \

586 
__ãmp
; \

587 
__asm
 
__vﬁ©ûe__
 \

596 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

597 
__asm
 
__vﬁ©ûe__
 \

599 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

600 
__ãmp
 -= 1.0; \

601 
__ãmp
 +
__vÆue
; \

602  
__ãmp
 ? __ãm∞: 
__x


	)

604 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

606 #i‡
	`__GNUC_PREREQ
 (3, 4)

607 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

609 
	#__exp_code
 \

610 
__vÆue
; \

611 
__exp⁄ít
; \

612 
__asm
 
__vﬁ©ûe__
 \

620 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

621 
__vÆue
 += 1.0; \

622 
__asm
 
__vﬁ©ûe__
 \

624 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

625  
__vÆue


	)

626 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

627 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

631 #i‡!
	`__GNUC_PREREQ
 (3, 5)

632 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

633 
__vÆue
; \

634 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

635 
__asm
 
__vﬁ©ûe__
 \

637 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

638  
__vÆue
)

643 #i‡
	`__GNUC_PREREQ
 (3, 4)

644 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

645  
	$__buûtö_©™2l
 (
__y
, 
__x
))

647 
	#__©™2_code
 \

648 
__vÆue
; \

649 
__asm
 
__vﬁ©ûe__
 \

651 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

652  
__vÆue


	)

653 #ifde‡
__FAST_MATH__


654 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

656 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

660 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

661 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

662 
__vÆue
; \

663 
__asm
 
__vﬁ©ûe__
 \

668 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

669  
__vÆue
)

673 #ifde‡
__FAST_MATH__


674 #i‡!
	`__GNUC_PREREQ
 (3,3)

675 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

676 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

677 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

679 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

683 #i‡
	`__GNUC_PREREQ
 (2, 8)

684 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

685 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


686 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

687 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

692 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

695 #ifde‡
__FAST_MATH__


696 #i‡!
	`__GNUC_PREREQ
 (3, 4)

698 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

700 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

702 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

705 #i‡!
	`__GNUC_PREREQ
 (3, 5)

706 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

708 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

709 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

712 #i‡!
	`__GNUC_PREREQ
 (3, 4)

713 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

717 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

718 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

719 { 
__xld
: 
__x
 
	}
}; \

720 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

721 
	g__n
.
	g__xi
[1] = 0x80000000; \

722 
	g__n
.
	g__xi
[0] = 0; \

723  
	g__n
.
	g__xld
)

726 #ifde‡
__FAST_MATH__


728 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

729 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

730  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

732 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

733 
__ex
 = 
	`__ex∂
 (
__x
); \

734  0.5 * (
__ex
 + 1.0 / __ex))

736 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

737 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

738  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

741 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

742 
__vÆue
; \

743 
__ign‹e
; \

744 
__cw
; \

745 
__cwtmp
; \

746 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

754 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

755 "=m" (
__cw
) \

756 : "0" (
__x
)); \

757  
__vÆue
)

759 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

760 
__vÆue
; \

761 
__ign‹e
; \

762 
__cw
; \

763 
__cwtmp
; \

764 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

772 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

773 "=m" (
__cw
) \

774 : "0" (
__x
)); \

775  
__vÆue
)

777 #ifde‡
__FAST_MATH__


778 
	#__ldexp_code
 \

779 
__vÆue
; \

780 
__asm
 
__vﬁ©ûe__
 \

782 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

783  
__vÆue


	)

785 
__MATH_INLINE
 

786 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

788 
__ldexp_code
;

789 
	}
}

794 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


796 #ifde‡
__FAST_MATH__


797 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

801 
	#__M_SQRT2
 1.41421356237309504880L

	)

803 #i‡!
	`__GNUC_PREREQ
 (3, 5)

804 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

805 
__vÆue
; \

806 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

807 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

809 
__asm
 
__vﬁ©ûe__
 \

813 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

814  
__vÆue
)

819 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

820 
__y
 = 
	`__Áb¶
 (
__x
); \

821  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

822 * 
	$__sgn1l
 (
__x
)))

824 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

825  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

827 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

828 
__y
 = 
	`__Áb¶
 (
__x
); \

829  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

832 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

833  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

835 #i‡!
	`__GNUC_PREREQ
 (3, 5)

836 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

837 
__vÆue
; \

838 
__junk
; \

839 
__asm
 
__vﬁ©ûe__
 \

841 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

842  
__vÆue
)

848 #ifde‡
__USE_ISOC99


849 #ifde‡
__FAST_MATH__


851 #i‡!
	`__GNUC_PREREQ
 (3, 5)

852 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

855 
__MATH_INLINE
 

856 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

858 
__ldexp_code
;

859 
	}
}

861 
__MATH_INLINE
 

862 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

864 
__ldexp_code
;

865 
	}
}

867 
__ölöe_m©h›NP
 (
röt
, "frndint")

870 
	#__Ãöt_code
 \

871 
__Ãöåes
; \

872 
__asm__
 
__vﬁ©ûe__
 \

874 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

875  
__Ãöåes


	)

876 
__MATH_INLINE
 

877 
__NTH
 (
	$Ãötf
 (
__x
))

879 
__Ãöt_code
;

880 
	}
}

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãöt
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöé
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 #unde‡
__Ãöt_code


893 
	#__Œröt_code
 \

894 
__Œröåes
; \

895 
__asm__
 
__vﬁ©ûe__
 \

897 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

898  
__Œröåes


	)

899 
__MATH_INLINE
 

900 
__NTH
 (
	$Œrötf
 (
__x
))

902 
__Œröt_code
;

903 
	}
}

904 
__MATH_INLINE
 

905 
__NTH
 (
	$Œröt
 (
__x
))

907 
__Œröt_code
;

908 
	}
}

909 
__MATH_INLINE
 

910 
__NTH
 (
	$Œröé
 (
__x
))

912 
__Œröt_code
;

913 
	}
}

914 #unde‡
__Œröt_code


919 #ifde‡
__USE_MISC


921 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

922 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

923 
__vÆue
; \

924 
__˛obbîed
; \

925 
__asm
 
__vﬁ©ûe__
 \

930 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

931  
__vÆue
)

936 
__MATH_INLINE
 

937 
__NTH
 (
	$__föôe
 (
__x
))

939  (
__exãnsi⁄__


940 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

942 
	}
}

947 #unde‡
__©™2_code


948 #ifde‡
__FAST_MATH__


949 #unde‡
__expm1_code


950 #unde‡
__exp_code


951 #unde‡
__söcos_code


958 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


959 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

960 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

961 
__vÆue
;

962 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

963 : "Ò" (
__vÆue
)

964 : "0" (
__x
), "u" (
__y
) : "st(1)");

965  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


49 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

50 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 
	#_POSIX_TZNAME_MAX
 6

	)

139 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


141 
	#_POSIX_QLIMIT
 1

	)

145 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

148 
	#_POSIX_UIO_MAXIOV
 16

	)

152 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

156 
	~<bôs/loˇl_lim.h
>

159 #i‚def 
SSIZE_MAX


160 
	#SSIZE_MAX
 
LONG_MAX


	)

167 #i‚def 
NGROUPS_MAX


168 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

154 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

157 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

160 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

163 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

168 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

169 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

172 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

173 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

176 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

177 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

185 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

187 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

191 
__off64_t
 
	t__loff_t
;

192 
__quad_t
 *
	t__qaddr_t
;

193 *
	t__ˇddr_t
;

196 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

199 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

202 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 16

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

46 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


48 #i‡
__WORDSIZE
 == 64

49 
	#__PRI64_PREFIX
 "l"

	)

50 
	#__PRIPTR_PREFIX
 "l"

	)

52 
	#__PRI64_PREFIX
 "Œ"

	)

53 
	#__PRIPTR_PREFIX


	)

59 
	#PRId8
 "d"

	)

60 
	#PRId16
 "d"

	)

61 
	#PRId32
 "d"

	)

62 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdLEAST8
 "d"

	)

65 
	#PRIdLEAST16
 "d"

	)

66 
	#PRIdLEAST32
 "d"

	)

67 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

69 
	#PRIdFAST8
 "d"

	)

70 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

71 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

75 
	#PRIi8
 "i"

	)

76 
	#PRIi16
 "i"

	)

77 
	#PRIi32
 "i"

	)

78 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiLEAST8
 "i"

	)

81 
	#PRIiLEAST16
 "i"

	)

82 
	#PRIiLEAST32
 "i"

	)

83 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

85 
	#PRIiFAST8
 "i"

	)

86 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

87 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

91 
	#PRIo8
 "o"

	)

92 
	#PRIo16
 "o"

	)

93 
	#PRIo32
 "o"

	)

94 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoLEAST8
 "o"

	)

97 
	#PRIoLEAST16
 "o"

	)

98 
	#PRIoLEAST32
 "o"

	)

99 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

101 
	#PRIoFAST8
 "o"

	)

102 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

103 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

107 
	#PRIu8
 "u"

	)

108 
	#PRIu16
 "u"

	)

109 
	#PRIu32
 "u"

	)

110 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuLEAST8
 "u"

	)

113 
	#PRIuLEAST16
 "u"

	)

114 
	#PRIuLEAST32
 "u"

	)

115 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

117 
	#PRIuFAST8
 "u"

	)

118 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

119 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

123 
	#PRIx8
 "x"

	)

124 
	#PRIx16
 "x"

	)

125 
	#PRIx32
 "x"

	)

126 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxLEAST8
 "x"

	)

129 
	#PRIxLEAST16
 "x"

	)

130 
	#PRIxLEAST32
 "x"

	)

131 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

133 
	#PRIxFAST8
 "x"

	)

134 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

135 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

139 
	#PRIX8
 "X"

	)

140 
	#PRIX16
 "X"

	)

141 
	#PRIX32
 "X"

	)

142 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXLEAST8
 "X"

	)

145 
	#PRIXLEAST16
 "X"

	)

146 
	#PRIXLEAST32
 "X"

	)

147 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

149 
	#PRIXFAST8
 "X"

	)

150 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

151 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

156 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

157 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

158 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

159 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

160 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

161 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

165 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

166 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

167 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

168 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

169 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

170 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

176 
	#SCNd8
 "hhd"

	)

177 
	#SCNd16
 "hd"

	)

178 
	#SCNd32
 "d"

	)

179 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdLEAST8
 "hhd"

	)

182 
	#SCNdLEAST16
 "hd"

	)

183 
	#SCNdLEAST32
 "d"

	)

184 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

186 
	#SCNdFAST8
 "hhd"

	)

187 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

188 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

192 
	#SCNi8
 "hhi"

	)

193 
	#SCNi16
 "hi"

	)

194 
	#SCNi32
 "i"

	)

195 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiLEAST8
 "hhi"

	)

198 
	#SCNiLEAST16
 "hi"

	)

199 
	#SCNiLEAST32
 "i"

	)

200 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

202 
	#SCNiFAST8
 "hhi"

	)

203 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

204 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

208 
	#SCNu8
 "hhu"

	)

209 
	#SCNu16
 "hu"

	)

210 
	#SCNu32
 "u"

	)

211 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuLEAST8
 "hhu"

	)

214 
	#SCNuLEAST16
 "hu"

	)

215 
	#SCNuLEAST32
 "u"

	)

216 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

218 
	#SCNuFAST8
 "hhu"

	)

219 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

220 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

224 
	#SCNo8
 "hho"

	)

225 
	#SCNo16
 "ho"

	)

226 
	#SCNo32
 "o"

	)

227 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoLEAST8
 "hho"

	)

230 
	#SCNoLEAST16
 "ho"

	)

231 
	#SCNoLEAST32
 "o"

	)

232 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

234 
	#SCNoFAST8
 "hho"

	)

235 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

236 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

240 
	#SCNx8
 "hhx"

	)

241 
	#SCNx16
 "hx"

	)

242 
	#SCNx32
 "x"

	)

243 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxLEAST8
 "hhx"

	)

246 
	#SCNxLEAST16
 "hx"

	)

247 
	#SCNxLEAST32
 "x"

	)

248 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

250 
	#SCNxFAST8
 "hhx"

	)

251 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

252 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

257 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

258 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

259 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

260 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

261 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

264 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

265 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

266 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

267 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

268 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

273 
	g__BEGIN_DECLS


275 #i‡
__WORDSIZE
 == 64

280 
	mquŸ
;

281 
	mªm
;

282 } 
	timaxdiv_t
;

289 
	mquŸ
;

290 
	mªm
;

291 } 
	timaxdiv_t
;

297 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

300 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

301 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

304 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

308 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

309 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

312 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

313 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

314 
__THROW
;

317 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

318 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

319 
__THROW
;

321 #ifde‡
__USE_EXTERN_INLINES


323 #i‡
__WORDSIZE
 == 64

325 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

326 **
__ª°ri˘
 
__íd±r
,

327 
__ba£
, 
__group
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

330 
__exã∫_ölöe
 
ötmax_t


331 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

332 
ba£
))

334  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

335 
	}
}

337 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 ** 
__ª°ri˘
 
__íd±r
,

339 
__ba£
, 
__group
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

342 
__exã∫_ölöe
 
uötmax_t


343 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

344 
ba£
))

346  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

347 
	}
}

349 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

350 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

351 
__ba£
, 
__group
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

354 
__exã∫_ölöe
 
ötmax_t


355 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

356 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

358  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

359 
	}
}

361 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

362 
__ª°ri˘
 
__≈å
,

363 
__gwch¨_t
 **

364 
__ª°ri˘
 
__íd±r
,

365 
__ba£
, 
__group
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

368 
__exã∫_ölöe
 
uötmax_t


369 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

370 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

372  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

373 
	}
}

377 
__exãnsi⁄__


378 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

379 **
__ª°ri˘
 
__íd±r
,

380 
__ba£
, 
__group
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

383 
__exã∫_ölöe
 
ötmax_t


384 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

385 
ba£
))

387  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

388 
	}
}

390 
__exãnsi⁄__


391 
	$__°πouŒ_öã∫Æ
 (const *

392 
__ª°ri˘
 
__≈å
,

394 
__ª°ri˘
 
__íd±r
,

395 
__ba£
,

396 
__group
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

399 
__exã∫_ölöe
 
uötmax_t


400 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

401 
ba£
))

403  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

404 
	}
}

406 
__exãnsi⁄__


407 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

409 
__ba£
, 
__group
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

412 
__exã∫_ölöe
 
ötmax_t


413 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

414 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

416  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

417 
	}
}

420 
__exãnsi⁄__


421 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

422 
__ª°ri˘
 
__≈å
,

423 
__gwch¨_t
 **

424 
__ª°ri˘
 
__íd±r
,

425 
__ba£
,

426 
__group
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

429 
__exã∫_ölöe
 
uötmax_t


430 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

431 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

433  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

434 
	}
}

439 
	g__END_DECLS


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 
	~<sys/cdefs.h
>

64 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

65 #i‚de‡
_G_HAVE_PRINTF_FP


66 
	#_IO_USE_DTOA
 1

	)

69 #i‚de‡
EOF


70 
	#EOF
 (-1)

	)

72 #i‚de‡
NULL


73 #i‡
deföed
 
__GNUG__
 && \

74 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

75 
	#NULL
 (
__nuŒ
)

	)

77 #i‡!
deföed
(
__˝lu•lus
)

78 
	#NULL
 ((*)0)

	)

80 
	#NULL
 (0)

	)

85 
	#_IOS_INPUT
 1

	)

86 
	#_IOS_OUTPUT
 2

	)

87 
	#_IOS_ATEND
 4

	)

88 
	#_IOS_APPEND
 8

	)

89 
	#_IOS_TRUNC
 16

	)

90 
	#_IOS_NOCREATE
 32

	)

91 
	#_IOS_NOREPLACE
 64

	)

92 
	#_IOS_BIN
 128

	)

100 
	#_IO_MAGIC
 0xFBAD0000

	)

101 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

102 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

103 
	#_IO_USER_BUF
 1

	)

104 
	#_IO_UNBUFFERED
 2

	)

105 
	#_IO_NO_READS
 4

	)

106 
	#_IO_NO_WRITES
 8

	)

107 
	#_IO_EOF_SEEN
 0x10

	)

108 
	#_IO_ERR_SEEN
 0x20

	)

109 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

110 
	#_IO_LINKED
 0x80

	)

111 
	#_IO_IN_BACKUP
 0x100

	)

112 
	#_IO_LINE_BUF
 0x200

	)

113 
	#_IO_TIED_PUT_GET
 0x400

	)

114 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

115 
	#_IO_IS_APPENDING
 0x1000

	)

116 
	#_IO_IS_FILEBUF
 0x2000

	)

117 
	#_IO_BAD_SEEN
 0x4000

	)

118 
	#_IO_USER_LOCK
 0x8000

	)

120 
	#_IO_FLAGS2_MMAP
 1

	)

121 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

122 #ifde‡
_LIBC


123 
	#_IO_FLAGS2_FORTIFY
 4

	)

125 
	#_IO_FLAGS2_USER_WBUF
 8

	)

126 #ifde‡
_LIBC


127 
	#_IO_FLAGS2_SCANF_STD
 16

	)

128 
	#_IO_FLAGS2_NOCLOSE
 32

	)

129 
	#_IO_FLAGS2_CLOEXEC
 64

	)

133 
	#_IO_SKIPWS
 01

	)

134 
	#_IO_LEFT
 02

	)

135 
	#_IO_RIGHT
 04

	)

136 
	#_IO_INTERNAL
 010

	)

137 
	#_IO_DEC
 020

	)

138 
	#_IO_OCT
 040

	)

139 
	#_IO_HEX
 0100

	)

140 
	#_IO_SHOWBASE
 0200

	)

141 
	#_IO_SHOWPOINT
 0400

	)

142 
	#_IO_UPPERCASE
 01000

	)

143 
	#_IO_SHOWPOS
 02000

	)

144 
	#_IO_SCIENTIFIC
 04000

	)

145 
	#_IO_FIXED
 010000

	)

146 
	#_IO_UNITBUF
 020000

	)

147 
	#_IO_STDIO
 040000

	)

148 
	#_IO_DONT_CLOSE
 0100000

	)

149 
	#_IO_BOOLALPHA
 0200000

	)

152 
_IO_jump_t
; 
	g_IO_FILE
;

155 #ifde‡
_IO_MTSAFE_IO


156 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

157 
	~<bôs/°dio-lock.h
>

162 
	t_IO_lock_t
;

168 
	s_IO_m¨kî
 {

169 
_IO_m¨kî
 *
	m_√xt
;

170 
_IO_FILE
 *
	m_sbuf
;

174 
	m_pos
;

176 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

177 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

178 
	mpublic
:

179 
°ªamm¨kî
(
°ªambuf
 *
sb
);

180 ~
°ªamm¨kî
();

181 
ßvög
(Ë{  
	m_•os
 == -2; }

182 
dñè
(
°ªamm¨kî
&);

183 
dñè
();

188 
	e__codecvt_ªsu…


190 
	m__codecvt_ok
,

191 
	m__codecvt_∑πül
,

192 
	m__codecvt_îr‹
,

193 
	m__codecvt_noc⁄v


196 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


199 
	s_IO_codecvt


201 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

202 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

203 
	m__mb°©e_t
 *,

204 c⁄° 
	mwch¨_t
 *,

205 c⁄° 
	mwch¨_t
 *,

206 c⁄° 
	mwch¨_t
 **, *,

208 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

209 
	m__mb°©e_t
 *, *,

211 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

212 
	m__mb°©e_t
 *,

214 c⁄° **, 
	mwch¨_t
 *,

215 
	mwch¨_t
 *, wchar_t **);

216 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

217 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

218 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

219 c⁄° *, c⁄° *, 
	m_IO_size_t
);

220 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

222 
_IO_ic⁄v_t
 
	m__cd_ö
;

223 
_IO_ic⁄v_t
 
	m__cd_out
;

227 
	s_IO_wide_d©a


229 
wch¨_t
 *
	m_IO_ªad_±r
;

230 
wch¨_t
 *
	m_IO_ªad_íd
;

231 
wch¨_t
 *
	m_IO_ªad_ba£
;

232 
wch¨_t
 *
	m_IO_wrôe_ba£
;

233 
wch¨_t
 *
	m_IO_wrôe_±r
;

234 
wch¨_t
 *
	m_IO_wrôe_íd
;

235 
wch¨_t
 *
	m_IO_buf_ba£
;

236 
wch¨_t
 *
	m_IO_buf_íd
;

238 
wch¨_t
 *
	m_IO_ßve_ba£
;

239 
wch¨_t
 *
	m_IO_backup_ba£
;

241 
wch¨_t
 *
	m_IO_ßve_íd
;

243 
__mb°©e_t
 
	m_IO_°©e
;

244 
__mb°©e_t
 
	m_IO_œ°_°©e
;

245 
_IO_codecvt
 
	m_codecvt
;

247 
wch¨_t
 
	m_sh‹tbuf
[1];

249 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

253 
	s_IO_FILE
 {

254 
	m_Êags
;

255 
	#_IO_fûe_Êags
 
_Êags


	)

259 * 
	m_IO_ªad_±r
;

260 * 
	m_IO_ªad_íd
;

261 * 
	m_IO_ªad_ba£
;

262 * 
	m_IO_wrôe_ba£
;

263 * 
	m_IO_wrôe_±r
;

264 * 
	m_IO_wrôe_íd
;

265 * 
	m_IO_buf_ba£
;

266 * 
	m_IO_buf_íd
;

268 *
	m_IO_ßve_ba£
;

269 *
	m_IO_backup_ba£
;

270 *
	m_IO_ßve_íd
;

272 
_IO_m¨kî
 *
	m_m¨kîs
;

274 
_IO_FILE
 *
	m_chaö
;

276 
	m_fûío
;

278 
	m_blksize
;

280 
	m_Êags2
;

282 
_IO_off_t
 
	m_ﬁd_off£t
;

284 
	#__HAVE_COLUMN


	)

286 
	m_cur_cﬁumn
;

287 sig√d 
	m_vèbÀ_off£t
;

288 
	m_sh‹tbuf
[1];

292 
_IO_lock_t
 *
	m_lock
;

293 #ifde‡
_IO_USE_OLD_IO_FILE


296 
	s_IO_FILE_com∂ëe


298 
_IO_FILE
 
	m_fûe
;

300 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

301 
_IO_off64_t
 
	m_off£t
;

302 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


304 
_IO_codecvt
 *
	m_codecvt
;

305 
_IO_wide_d©a
 *
	m_wide_d©a
;

306 
_IO_FILE
 *
	m_‰ìªs_li°
;

307 *
	m_‰ìªs_buf
;

308 
size_t
 
	m_‰ìªs_size
;

310 *
	m__∑d1
;

311 *
	m__∑d2
;

312 *
	m__∑d3
;

313 *
	m__∑d4
;

314 
size_t
 
	m__∑d5
;

316 
	m_mode
;

318 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

322 #i‚de‡
__˝lu•lus


323 
_IO_FILE
 
	t_IO_FILE
;

326 
	g_IO_FILE_∂us
;

328 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

329 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

330 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

331 #i‚de‡
_LIBC


332 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

333 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

334 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

336 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

337 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

338 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

346 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

354 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

355 
	tsize_t
 
	t__n
);

363 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

366 
	t__io_˛o£_‚
 (*
	t__cookõ
);

369 #ifde‡
_GNU_SOURCE


371 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

372 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

373 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

374 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

379 
__io_ªad_‚
 *
	mªad
;

380 
__io_wrôe_‚
 *
	mwrôe
;

381 
__io_£ek_‚
 *
	m£ek
;

382 
__io_˛o£_‚
 *
	m˛o£
;

383 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

384 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

386 
	g_IO_cookõ_fûe
;

389 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

390 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

394 #ifde‡
__˝lu•lus


398 
__undîÊow
 (
_IO_FILE
 *);

399 
__uÊow
 (
_IO_FILE
 *);

400 
__ovîÊow
 (
_IO_FILE
 *, );

401 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


402 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

403 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

404 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

407 #i‡ 
__GNUC__
 >= 3

408 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

410 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

413 
	#_IO_gëc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

415 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

416 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

417 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

418 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

419 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

420 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

421 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

422 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

423 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

425 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


426 
	#_IO_gëwc_u∆ocked
(
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

428 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

429 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

430 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

431 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

433 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

434 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

435 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

436 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

439 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

440 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

442 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

443 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

444 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

445 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

447 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

450 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

451 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

453 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

454 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

455 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

457 #ifde‡
_IO_MTSAFE_IO


458 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

459 
	#_IO_Êockfûe
(
_Â
) \

460 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

461 
	#_IO_fu∆ockfûe
(
_Â
) \

462 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

464 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

465 
	#_IO_Êockfûe
(
_Â
Ë

	)

466 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

467 
	#_IO_·rylockfûe
(
_Â
Ë

	)

468 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

469 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

472 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

473 
_IO_va_li°
, *
__ª°ri˘
);

474 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

475 
_IO_va_li°
);

476 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

477 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

479 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

480 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

482 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

484 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


485 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

486 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

487 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

488 #i‡
__GNUC__
 >= 2

491 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


492 
	~<shlib-com∑t.h
>

493 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

494 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

495 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

496 c⁄° 
_IO_°dö_u£d
;

497 
wók_exã∫
 (
_IO_°dö_u£d
);

500 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


501 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

505 
	#_IO_fwide
(
__Â
, 
__mode
) \

506 ({ 
__ªsu…
 = (
__mode
); \

507 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

509 i‡((
__Â
)->
_mode
 == 0) \

511 (
__Â
)->
_mode
 = -1; \

512 
__ªsu…
 = (
__Â
)->
_mode
; \

514 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

515 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

517 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

518 
__ªsu…
; })

	)

521 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

522 
_IO_va_li°
, *
__ª°ri˘
);

523 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

524 
_IO_va_li°
);

525 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

526 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

529 #ifde‡
__LDBL_COMPAT


530 
	~<bôs/libio-ldbl.h
>

533 #ifde‡
__˝lu•lus


	@/usr/include/luaconf.h

8 #i‚de‡
lc⁄fig_h


9 
	#lc⁄fig_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

27 #i‡
deföed
(
__STRICT_ANSI__
)

28 
	#LUA_ANSI


	)

32 #i‡!
deföed
(
LUA_ANSI
Ë&& deföed(
_WIN32
)

33 
	#LUA_WIN


	)

36 #i‡
deföed
(
LUA_USE_LINUX
)

37 
	#LUA_USE_POSIX


	)

38 
	#LUA_USE_DLOPEN


	)

39 
	#LUA_USE_READLINE


	)

42 #i‡
deföed
(
LUA_USE_MACOSX
)

43 
	#LUA_USE_POSIX


	)

44 
	#LUA_DL_DYLD


	)

54 #i‡
deföed
(
LUA_USE_POSIX
)

55 
	#LUA_USE_MKSTEMP


	)

56 
	#LUA_USE_ISATTY


	)

57 
	#LUA_USE_POPEN


	)

58 
	#LUA_USE_ULONGJMP


	)

69 
	#LUA_PATH
 "LUA_PATH"

	)

70 
	#LUA_CPATH
 "LUA_CPATH"

	)

71 
	#LUA_INIT
 "LUA_INIT"

	)

83 #i‡
deföed
(
_WIN32
)

88 
	#LUA_LDIR
 "!\\lua\\"

	)

89 
	#LUA_CDIR
 "!\\"

	)

90 
	#LUA_PATH_DEFAULT
 \

91 ".\\?.lua;" 
LUA_LDIR
"?.lua;" LUA_LDIR"?\\init.lua;" \

92 
LUA_CDIR
"?.lua;" LUA_CDIR"?\\öô.lua"

	)

93 
	#LUA_CPATH_DEFAULT
 \

94 ".\\?.dŒ;" 
LUA_CDIR
"?.dŒ;" LUA_CDIR"lﬂdÆl.dŒ"

	)

97 
	#LUA_ROOT
 "/u§/"

	)

98 
	#LUA_LDIR
 
LUA_ROOT
 "sh¨e/lua/5.1/"

	)

99 
	#LUA_CDIR
 
LUA_ROOT
 "lib/lua/5.1/"

	)

100 
	#LUA_PATH_DEFAULT
 \

101 "./?.lua;" 
LUA_LDIR
"?.lua;" LUA_LDIR"?/init.lua;" \

102 
LUA_CDIR
"?.lua;" LUA_CDIR"?/öô.lua"

	)

103 
	#LUA_CPATH_DEFAULT
 \

104 "./?.so;" 
LUA_CDIR
"?.so;" LUA_CDIR"lﬂdÆl.so"

	)

113 #i‡
deföed
(
_WIN32
)

114 
	#LUA_DIRSEP
 "\\"

	)

116 
	#LUA_DIRSEP
 "/"

	)

132 
	#LUA_PATHSEP
 ";"

	)

133 
	#LUA_PATH_MARK
 "?"

	)

134 
	#LUA_EXECDIR
 "!"

	)

135 
	#LUA_IGMARK
 "-"

	)

143 
	#LUA_INTEGER
 
±rdiff_t


	)

154 #i‡
deföed
(
LUA_BUILD_AS_DLL
)

156 #i‡
deföed
(
LUA_CORE
Ë|| deföed(
LUA_LIB
)

157 
	#LUA_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

159 
	#LUA_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

164 
	#LUA_API
 

	)

169 
	#LUALIB_API
 
LUA_API


	)

181 #i‡
deföed
(
luØŒ_c
)

182 
	#LUAI_FUNC
 

	)

183 
	#LUAI_DATA


	)

185 #ñi‡
deföed
(
__GNUC__
Ë&& ((__GNUC__*100 + 
__GNUC_MINOR__
) >= 302) && \

186 
	$deföed
(
__ELF__
)

187 
	#LUAI_FUNC
 
	`__©åibuã__
((
	`visibûôy
("hiddí"))Ë

	)

188 
	#LUAI_DATA
 
LUAI_FUNC


	)

191 
	#LUAI_FUNC
 

	)

192 
	#LUAI_DATA
 

	)

201 
	#LUA_QL
(
x
Ë"'" x "'"

	)

202 
	#LUA_QS
 
	`LUA_QL
("%s")

	)

210 
	#LUA_IDSIZE
 60

	)

219 #i‡
	`deföed
(
lua_c
Ë|| deföed(
luØŒ_c
)

227 #i‡
	`deföed
(
LUA_USE_ISATTY
)

228 
	~<uni°d.h
>

229 
	#lua_°dö_is_ây
(Ë
	`ißây
(0)

	)

230 #ñi‡
	`deföed
(
LUA_WIN
)

231 
	~<io.h
>

232 
	~<°dio.h
>

233 
	#lua_°dö_is_ây
(Ë
	`_ißây
(
	`_fûío
(
°dö
))

	)

235 
	#lua_°dö_is_ây
(Ë1

	)

245 
	#LUA_PROMPT
 "> "

	)

246 
	#LUA_PROMPT2
 ">> "

	)

254 
	#LUA_PROGNAME
 "lua"

	)

262 
	#LUA_MAXINPUT
 512

	)

273 #i‡
	`deföed
(
LUA_USE_READLINE
)

274 
	~<°dio.h
>

275 
	~<ªadlöe/ªadlöe.h
>

276 
	~<ªadlöe/hi°‹y.h
>

277 
	#lua_ªadlöe
(
L
,
b
,
p
Ë(()L, ((b)=
	`ªadlöe
’)Ë!
NULL
)

	)

278 
	#lua_ßvñöe
(
L
,
idx
) \

279 i‡(
	`lua_°æí
(
L
,
idx
) > 0) \

280 
	`add_hi°‹y
(
	`lua_to°rög
(
L
, 
idx
));

	)

281 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

283 
	#lua_ªadlöe
(
L
,
b
,
p
) \

284 (()
L
, 
	`Âuts
(
p
, 
°dout
), 
	`fÊush
(stdout), \

285 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
°dö
Ë!
NULL
Ë

	)

286 
	#lua_ßvñöe
(
L
,
idx
Ë{ ()L; ()idx; 
	}

	)
}

287 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

302 
	#LUAI_GCPAUSE
 200

	)

313 
	#LUAI_GCMUL
 200

	)

322 #unde‡
LUA_COMPAT_GETN


329 #unde‡
LUA_COMPAT_LOADLIB


336 
	#LUA_COMPAT_VARARG


	)

343 
	#LUA_COMPAT_MOD


	)

351 
	#LUA_COMPAT_LSTR
 1

	)

358 
	#LUA_COMPAT_GFIND


	)

366 
	#LUA_COMPAT_OPENLIB


	)

377 #i‡
deföed
(
LUA_USE_APICHECK
)

378 
	~<as£π.h
>

379 
	#luai_≠icheck
(
L
,
o
Ë{ ()L; 
	`as£π
(o); }

	)

381 
	#luai_≠icheck
(
L
,
o
Ë{ ()L; }

	)

391 #i‡
INT_MAX
-20 < 32760

392 
	#LUAI_BITSINT
 16

	)

393 #ñi‡
INT_MAX
 > 2147483640L

395 
	#LUAI_BITSINT
 32

	)

413 #i‡
LUAI_BITSINT
 >= 32

414 
	#LUAI_UINT32
 

	)

415 
	#LUAI_INT32
 

	)

416 
	#LUAI_MAXINT32
 
INT_MAX


	)

417 
	#LUAI_UMEM
 
size_t


	)

418 
	#LUAI_MEM
 
±rdiff_t


	)

421 
	#LUAI_UINT32
 

	)

422 
	#LUAI_INT32
 

	)

423 
	#LUAI_MAXINT32
 
LONG_MAX


	)

424 
	#LUAI_UMEM
 

	)

425 
	#LUAI_MEM
 

	)

435 
	#LUAI_MAXCALLS
 20000

	)

446 
	#LUAI_MAXCSTACK
 8000

	)

468 
	#LUAI_MAXCCALLS
 200

	)

475 
	#LUAI_MAXVARS
 200

	)

482 
	#LUAI_MAXUPVALUES
 60

	)

488 
	#LUAL_BUFFERSIZE
 
BUFSIZ


	)

504 
	#LUA_NUMBER_DOUBLE


	)

505 
	#LUA_NUMBER
 

	)

511 
	#LUAI_UACNUMBER
 

	)

521 
	#LUA_NUMBER_SCAN
 "%lf"

	)

522 
	#LUA_NUMBER_FMT
 "%.14g"

	)

523 
	#lua_numbî2°r
(
s
,
n
Ë
	`•rötf
((s), 
LUA_NUMBER_FMT
, (n))

	)

524 
	#LUAI_MAXNUMBER2STR
 32

	)

525 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πod
((s), (p))

	)

531 #i‡
deföed
(
LUA_CORE
)

532 
	~<m©h.h
>

533 
	#luai_numadd
(
a
,
b
Ë(◊)+(b))

	)

534 
	#luai_numsub
(
a
,
b
Ë(◊)-(b))

	)

535 
	#luai_nummul
(
a
,
b
Ë(◊)*(b))

	)

536 
	#luai_numdiv
(
a
,
b
Ë(◊)/(b))

	)

537 
	#luai_nummod
(
a
,
b
Ë(◊Ë- 
	`Êo‹
(◊)/(b))*(b))

	)

538 
	#luai_numpow
(
a
,
b
Ë(
	`pow
◊,b))

	)

539 
	#luai_numunm
(
a
Ë(-◊))

	)

540 
	#luai_numeq
(
a
,
b
Ë(◊)==(b))

	)

541 
	#luai_num…
(
a
,
b
Ë(◊)<(b))

	)

542 
	#luai_numÀ
(
a
,
b
Ë(◊)<=(b))

	)

543 
	#luai_numi¢™
(
a
Ë(!
	`luai_numeq
(◊), (a)))

	)

557 #i‡
deföed
(
LUA_NUMBER_DOUBLE
Ë&& !deföed(
LUA_ANSI
Ë&& !deföed(
__SSE2__
) && \

558 (
deföed
(
__i386
Ë|| deföed (
_M_IX86
Ë|| 
	$deföed
(
__i386__
))

561 #i‡
	`deföed
(
_MSC_VER
)

563 
	#lua_numbî2öt
(
i
,
d
Ë
__asm
 
Êd
 d __asm 
fi°p
 
	)
i

564 
	#lua_numbî2öãgî
(
i
,
n
Ë
	`lua_numbî2öt
(i,Ç)

	)

570 
	uluai_Ca°
 { 
l_d
; 
l_l
; };

571 
	#lua_numbî2öt
(
i
,
d
) \

572 { vﬁ©ûê
luai_Ca°
 
u
; u.
l_d
 = (
d
Ë+ 6755399441055744.0; (
i
Ëu.
l_l
; 
	}

	)
}

573 
	#lua_numbî2öãgî
(
i
,
n
Ë
	`lua_numbî2öt
(i,Ç)

	)

580 
	#lua_numbî2öt
(
i
,
d
Ë((i)=()(d))

	)

581 
	#lua_numbî2öãgî
(
i
,
d
Ë((i)=(
lua_I¡egî
)(d))

	)

595 
	#LUAI_USER_ALIGNMENT_T
 uni⁄ { 
u
; *
s
; 
l
; }

	)

606 #i‡
deföed
(
__˝lu•lus
)

608 
	#LUAI_THROW
(
L
,
c
Ë
	`throw
(c)

	)

609 
	#LUAI_TRY
(
L
,
c
,
a
Ë
åy
 {á } 
	`ˇtch
(...) \

610 { i‡((
c
)->
°©us
 =0Ë(c)->°©u†-1; }

	)

611 
	#luai_jmpbuf
 

	)

613 #ñi‡
deföed
(
LUA_USE_ULONGJMP
)

615 
	#LUAI_THROW
(
L
,
c
Ë
	`_l⁄gjmp
((c)->
b
, 1)

	)

616 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`_£tjmp
((c)->
b
Ë=0Ë{á }

	)

617 
	#luai_jmpbuf
 
jmp_buf


	)

621 
	#LUAI_THROW
(
L
,
c
Ë
	`l⁄gjmp
((c)->
b
, 1)

	)

622 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`£tjmp
((c)->
b
Ë=0Ë{á }

	)

623 
	#luai_jmpbuf
 
jmp_buf


	)

633 
	#LUA_MAXCAPTURES
 32

	)

644 #i‡
deföed
(
lo¶ib_c
Ë|| deföed(
luØŒ_c
)

646 #i‡
deföed
(
LUA_USE_MKSTEMP
)

647 
	~<uni°d.h
>

648 
	#LUA_TMPNAMBUFSIZE
 32

	)

649 
	#lua_tm≤am
(
b
,
e
) { \

650 
	`°r˝y
(
b
, "/tmp/lua_XXXXXX"); \

651 
e
 = 
	`mk°emp
(
b
); \

652 i‡(
e
 !-1Ë
	`˛o£
(e); \

653 
e
 = (ê=-1); }

	)

656 
	#LUA_TMPNAMBUFSIZE
 
L_tm≤am


	)

657 
	#lua_tm≤am
(
b
,
e
Ë{É = (
	`tm≤am
(bË=
NULL
); }

	)

668 #i‡
deföed
(
LUA_USE_POPEN
)

670 
	#lua_p›í
(
L
,
c
,
m
Ë(()L, 
	`fÊush
(
NULL
), 
	`p›í
(c,m))

	)

671 
	#lua_p˛o£
(
L
,
fûe
Ë(()L, (
	`p˛o£
(fûeË!-1))

	)

673 #ñi‡
deföed
(
LUA_WIN
)

675 
	#lua_p›í
(
L
,
c
,
m
Ë(()L, 
	`_p›í
(c,m))

	)

676 
	#lua_p˛o£
(
L
,
fûe
Ë(()L, (
	`_p˛o£
(fûeË!-1))

	)

680 
	#lua_p›í
(
L
,
c
,
m
) (()(()c, m), \

681 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("p›í"Ë"ÇŸ suµ‹ãd"), (
FILE
*)0)

	)

682 
	#lua_p˛o£
(
L
,
fûe
Ë(()(()L, fûe), 0)

	)

700 #i‡
deföed
(
LUA_USE_DLOPEN
)

701 
	#LUA_DL_DLOPEN


	)

704 #i‡
deföed
(
LUA_WIN
)

705 
	#LUA_DL_DLL


	)

715 
	#LUAI_EXTRASPACE
 0

	)

723 
	#luai_u£r°©e›í
(
L
Ë(()L)

	)

724 
	#luai_u£r°©e˛o£
(
L
Ë(()L)

	)

725 
	#luai_u£r°©ëhªad
(
L
,
L1
Ë(()L)

	)

726 
	#luai_u£r°©e‰ì
(
L
Ë(()L)

	)

727 
	#luai_u£r°©îesume
(
L
,
n
Ë(()L)

	)

728 
	#luai_u£r°©eyõld
(
L
,
n
Ë(()L)

	)

739 #i‡
deföed
(
LUA_USELONGLONG
)

741 
	#LUA_INTFRMLEN
 "Œ"

	)

742 
	#LUA_INTFRM_T
 

	)

746 
	#LUA_INTFRMLEN
 "l"

	)

747 
	#LUA_INTFRM_T
 

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_WAIT
 1

	)

64 
	#_G_NEED_STDARG_H
 1

	)

65 
	#_G_va_li°
 
__gnuc_va_li°


	)

67 
	#_G_HAVE_PRINTF_FP
 1

	)

68 
	#_G_HAVE_MMAP
 1

	)

69 
	#_G_HAVE_MREMAP
 1

	)

70 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

71 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

72 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

74 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

76 
	#_G_OPEN64
 
__›í64


	)

77 
	#_G_LSEEK64
 
__l£ek64


	)

78 
	#_G_MMAP64
 
__mm≠64


	)

79 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

82 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

84 
	#_G_BUFSIZ
 8192

	)

87 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

88 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

89 
	#_G_USING_THUNKS
 1

	)

90 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

91 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
__±hªad_li°_t
 
	m__li°
;

106 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	m__nu£rs
;

109 
__exãnsi⁄__
 union

111 
	m__•ös
;

112 
__±hªad_¶i°_t
 
	m__li°
;

115 } 
	m__d©a
;

116 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

117 
	m__Æign
;

118 } 
	t±hªad_muãx_t
;

122 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

123 
	m__Æign
;

124 } 
	t±hªad_muãx©å_t
;

133 
	m__lock
;

134 
	m__fuãx
;

135 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

136 
__exãnsi⁄__
 
	m__wakeup_£q
;

137 
__exãnsi⁄__
 
	m__wokí_£q
;

138 *
	m__muãx
;

139 
	m__nwaôîs
;

140 
	m__brﬂdˇ°_£q
;

141 } 
	m__d©a
;

142 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

143 
__exãnsi⁄__
 
	m__Æign
;

144 } 
	t±hªad_c⁄d_t
;

148 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

149 
	m__Æign
;

150 } 
	t±hªad_c⁄d©å_t
;

154 
	t±hªad_key_t
;

158 
	t±hªad_⁄˚_t
;

161 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


166 #ifde‡
__x86_64__


169 
	m__lock
;

170 
	m__ƒ_ªadîs
;

171 
	m__ªadîs_wakeup
;

172 
	m__wrôî_wakeup
;

173 
	m__ƒ_ªadîs_queued
;

174 
	m__ƒ_wrôîs_queued
;

175 
	m__wrôî
;

176 
	m__sh¨ed
;

177 
	m__∑d1
;

178 
	m__∑d2
;

181 
	m__Êags
;

182 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

183 } 
	m__d©a
;

187 
	m__lock
;

188 
	m__ƒ_ªadîs
;

189 
	m__ªadîs_wakeup
;

190 
	m__wrôî_wakeup
;

191 
	m__ƒ_ªadîs_queued
;

192 
	m__ƒ_wrôîs_queued
;

195 
	m__Êags
;

196 
	m__sh¨ed
;

197 
	m__∑d1
;

198 
	m__∑d2
;

199 
	m__wrôî
;

200 } 
	m__d©a
;

202 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

203 
	m__Æign
;

204 } 
	t±hªad_rwlock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

209 
	m__Æign
;

210 } 
	t±hªad_rwlock©å_t
;

214 #ifde‡
__USE_XOPEN2K


216 vﬁ©ûê
	t±hªad_•ölock_t
;

223 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

224 
	m__Æign
;

225 } 
	t±hªad_b¨rõr_t
;

229 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

230 
	m__Æign
;

231 } 
	t±hªad_b¨rõøâr_t
;

235 #i‚de‡
__x86_64__


237 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__SWBLK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

77 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/readline/history.h

22 #i‚de‡
_HISTORY_H_


23 
	#_HISTORY_H_


	)

25 #ifde‡
__˝lu•lus


29 
	~<time.h
>

31 #i‡
deföed
 
READLINE_LIBRARY


32 
	~"æ°dc.h
"

33 
	~"æty≥defs.h
"

35 
	~<ªadlöe/æ°dc.h
>

36 
	~<ªadlöe/æty≥defs.h
>

39 #ifde‡
__STDC__


40 *
	thi°d©a_t
;

42 *
	thi°d©a_t
;

46 
	s_hi°_íåy
 {

47 *
löe
;

48 *
time°amp
;

49 
hi°d©a_t
 
d©a
;

50 } 
	tHIST_ENTRY
;

53 
	#HISTENT_BYTES
(
hs
Ë(
	`°æí
 ((hs)->
löe
Ë+ såÀ¿((hs)->
time°amp
))

	)

56 
	s_hi°_°©e
 {

57 
HIST_ENTRY
 **
íåõs
;

58 
off£t
;

59 
Àngth
;

60 
size
;

61 
Êags
;

62 } 
	tHISTORY_STATE
;

65 
	#HS_STIFLED
 0x01

	)

71 
usög_hi°‹y
 
PARAMS
(());

74 
HISTORY_STATE
 *
hi°‹y_gë_hi°‹y_°©e
 
PARAMS
(());

77 
hi°‹y_£t_hi°‹y_°©e
 
PARAMS
((
HISTORY_STATE
 *));

83 
add_hi°‹y
 
PARAMS
((const *));

87 
add_hi°‹y_time
 
PARAMS
((const *));

92 
HIST_ENTRY
 *
ªmove_hi°‹y
 
PARAMS
(());

96 
hi°d©a_t
 
‰ì_hi°‹y_íåy
 
PARAMS
((
HIST_ENTRY
 *));

101 
HIST_ENTRY
 *
ª∂a˚_hi°‹y_íåy
 
PARAMS
((, c⁄° *, 
hi°d©a_t
));

104 
˛ór_hi°‹y
 
PARAMS
(());

107 
°iÊe_hi°‹y
 
PARAMS
(());

112 
un°iÊe_hi°‹y
 
PARAMS
(());

115 
hi°‹y_is_°iÊed
 
PARAMS
(());

122 
HIST_ENTRY
 **
hi°‹y_li°
 
PARAMS
(());

126 
whîe_hi°‹y
 
PARAMS
(());

130 
HIST_ENTRY
 *
cuºít_hi°‹y
 
PARAMS
(());

134 
HIST_ENTRY
 *
hi°‹y_gë
 
PARAMS
(());

138 
time_t
 
hi°‹y_gë_time
 
PARAMS
((
HIST_ENTRY
 *));

142 
hi°‹y_tŸÆ_byãs
 
PARAMS
(());

147 
hi°‹y_£t_pos
 
PARAMS
(());

152 
HIST_ENTRY
 *
¥evious_hi°‹y
 
PARAMS
(());

157 
HIST_ENTRY
 *
√xt_hi°‹y
 
PARAMS
(());

167 
hi°‹y_£¨ch
 
PARAMS
((const *, ));

172 
hi°‹y_£¨ch_¥efix
 
PARAMS
((const *, ));

179 
hi°‹y_£¨ch_pos
 
PARAMS
((const *, , ));

186 
ªad_hi°‹y
 
PARAMS
((const *));

193 
ªad_hi°‹y_ønge
 
PARAMS
((const *, , ));

198 
wrôe_hi°‹y
 
PARAMS
((const *));

202 
≠≥nd_hi°‹y
 
PARAMS
((, const *));

205 
hi°‹y_åunˇã_fûe
 
PARAMS
((const *, ));

221 
hi°‹y_ex∑nd
 
PARAMS
((*, **));

226 *
hi°‹y_¨g_exåa˘
 
PARAMS
((, , const *));

234 *
gë_hi°‹y_evít
 
PARAMS
((const *, *, ));

238 **
hi°‹y_tokíize
 
PARAMS
((const *));

241 
hi°‹y_ba£
;

242 
hi°‹y_Àngth
;

243 
hi°‹y_max_íåõs
;

244 
hi°‹y_ex∑nsi⁄_ch¨
;

245 
hi°‹y_sub°_ch¨
;

246 *
hi°‹y_w‹d_dñimôîs
;

247 
hi°‹y_commít_ch¨
;

248 *
hi°‹y_no_ex∑nd_ch¨s
;

249 *
hi°‹y_£¨ch_dñimôî_ch¨s
;

250 
hi°‹y_quŸes_öhibô_ex∑nsi⁄
;

252 
hi°‹y_wrôe_time°amps
;

255 
max_öput_hi°‹y
;

260 
æ_löebuf_func_t
 *
hi°‹y_öhibô_ex∑nsi⁄_fun˘i⁄
;

262 #ifde‡
__˝lu•lus


	@/usr/include/readline/readline.h

22 #i‡!
deföed
 (
_READLINE_H_
)

23 
	#_READLINE_H_


	)

25 #ifde‡
__˝lu•lus


29 #i‡
deföed
 (
READLINE_LIBRARY
)

30 
	~"æ°dc.h
"

31 
	~"æty≥defs.h
"

32 
	~"keym≠s.h
"

33 
	~"tûde.h
"

35 
	~<ªadlöe/æ°dc.h
>

36 
	~<ªadlöe/æty≥defs.h
>

37 
	~<ªadlöe/keym≠s.h
>

38 
	~<ªadlöe/tûde.h
>

42 
	#RL_READLINE_VERSION
 0x0602

	)

43 
	#RL_VERSION_MAJOR
 6

	)

44 
	#RL_VERSION_MINOR
 2

	)

54 
	eundo_code
 { 
UNDO_DELETE
, 
UNDO_INSERT
, 
UNDO_BEGIN
, 
UNDO_END
 };

57 
	sundo_li°
 {

58 
undo_li°
 *
√xt
;

59 
°¨t
, 
íd
;

60 *
ãxt
;

61 
undo_code
 
wh©
;

62 } 
	tUNDO_LIST
;

65 
UNDO_LIST
 *
æ_undo_li°
;

68 
	s_funm≠
 {

69 c⁄° *
	g«me
;

70 
æ_comm™d_func_t
 *
	gfun˘i⁄
;

71 } 
	tFUNMAP
;

73 
FUNMAP
 **
funm≠
;

82 
æ_digô_¨gumít
 
PARAMS
((, ));

83 
æ_univîßl_¨gumít
 
PARAMS
((, ));

86 
æ_f‹w¨d_byã
 
PARAMS
((, ));

87 
æ_f‹w¨d_ch¨
 
PARAMS
((, ));

88 
æ_f‹w¨d
 
PARAMS
((, ));

89 
æ_backw¨d_byã
 
PARAMS
((, ));

90 
æ_backw¨d_ch¨
 
PARAMS
((, ));

91 
æ_backw¨d
 
PARAMS
((, ));

92 
æ_beg_of_löe
 
PARAMS
((, ));

93 
æ_íd_of_löe
 
PARAMS
((, ));

94 
æ_f‹w¨d_w‹d
 
PARAMS
((, ));

95 
æ_backw¨d_w‹d
 
PARAMS
((, ));

96 
æ_ª‰esh_löe
 
PARAMS
((, ));

97 
æ_˛ór_s¸ìn
 
PARAMS
((, ));

98 
æ_skù_csi_£quí˚
 
PARAMS
((, ));

99 
æ_¨row_keys
 
PARAMS
((, ));

102 
æ_ö£π
 
PARAMS
((, ));

103 
æ_quŸed_ö£π
 
PARAMS
((, ));

104 
æ_èb_ö£π
 
PARAMS
((, ));

105 
æ_√wlöe
 
PARAMS
((, ));

106 
æ_do_lowîˇ£_vîsi⁄
 
PARAMS
((, ));

107 
æ_rubout
 
PARAMS
((, ));

108 
æ_dñëe
 
PARAMS
((, ));

109 
æ_rubout_‹_dñëe
 
PARAMS
((, ));

110 
æ_dñëe_h‹iz⁄èl_•a˚
 
PARAMS
((, ));

111 
æ_dñëe_‹_show_com∂ëi⁄s
 
PARAMS
((, ));

112 
æ_ö£π_commít
 
PARAMS
((, ));

115 
æ_upˇ£_w‹d
 
PARAMS
((, ));

116 
æ_downˇ£_w‹d
 
PARAMS
((, ));

117 
æ_ˇpôÆize_w‹d
 
PARAMS
((, ));

120 
æ_å™•o£_w‹ds
 
PARAMS
((, ));

121 
æ_å™•o£_ch¨s
 
PARAMS
((, ));

124 
æ_ch¨_£¨ch
 
PARAMS
((, ));

125 
æ_backw¨d_ch¨_£¨ch
 
PARAMS
((, ));

128 
æ_begönög_of_hi°‹y
 
PARAMS
((, ));

129 
æ_íd_of_hi°‹y
 
PARAMS
((, ));

130 
æ_gë_√xt_hi°‹y
 
PARAMS
((, ));

131 
æ_gë_¥evious_hi°‹y
 
PARAMS
((, ));

134 
æ_£t_m¨k
 
PARAMS
((, ));

135 
æ_exch™ge_poöt_™d_m¨k
 
PARAMS
((, ));

138 
æ_vi_edôög_mode
 
PARAMS
((, ));

139 
æ_emacs_edôög_mode
 
PARAMS
((, ));

142 
æ_ovîwrôe_mode
 
PARAMS
((, ));

145 
æ_ª_ªad_öô_fûe
 
PARAMS
((, ));

146 
æ_dump_fun˘i⁄s
 
PARAMS
((, ));

147 
æ_dump_ma¸os
 
PARAMS
((, ));

148 
æ_dump_v¨übÀs
 
PARAMS
((, ));

151 
æ_com∂ëe
 
PARAMS
((, ));

152 
æ_possibÀ_com∂ëi⁄s
 
PARAMS
((, ));

153 
æ_ö£π_com∂ëi⁄s
 
PARAMS
((, ));

154 
æ_ﬁd_míu_com∂ëe
 
PARAMS
((, ));

155 
æ_míu_com∂ëe
 
PARAMS
((, ));

156 
æ_backw¨d_míu_com∂ëe
 
PARAMS
((, ));

159 
æ_kûl_w‹d
 
PARAMS
((, ));

160 
æ_backw¨d_kûl_w‹d
 
PARAMS
((, ));

161 
æ_kûl_löe
 
PARAMS
((, ));

162 
æ_backw¨d_kûl_löe
 
PARAMS
((, ));

163 
æ_kûl_fuŒ_löe
 
PARAMS
((, ));

164 
æ_unix_w‹d_rubout
 
PARAMS
((, ));

165 
æ_unix_fûíame_rubout
 
PARAMS
((, ));

166 
æ_unix_löe_disˇrd
 
PARAMS
((, ));

167 
æ_c›y_ªgi⁄_to_kûl
 
PARAMS
((, ));

168 
æ_kûl_ªgi⁄
 
PARAMS
((, ));

169 
æ_c›y_f‹w¨d_w‹d
 
PARAMS
((, ));

170 
æ_c›y_backw¨d_w‹d
 
PARAMS
((, ));

171 
æ_y™k
 
PARAMS
((, ));

172 
æ_y™k_p›
 
PARAMS
((, ));

173 
æ_y™k_¡h_¨g
 
PARAMS
((, ));

174 
æ_y™k_œ°_¨g
 
PARAMS
((, ));

176 #ifde‡
__CYGWIN__


177 
æ_∑°e_‰om_˛ùbﬂrd
 
PARAMS
((, ));

181 
æ_ªvî£_£¨ch_hi°‹y
 
PARAMS
((, ));

182 
æ_f‹w¨d_£¨ch_hi°‹y
 
PARAMS
((, ));

185 
æ_°¨t_kbd_ma¸o
 
PARAMS
((, ));

186 
æ_íd_kbd_ma¸o
 
PARAMS
((, ));

187 
æ_ˇŒ_œ°_kbd_ma¸o
 
PARAMS
((, ));

190 
æ_ªvît_löe
 
PARAMS
((, ));

191 
æ_undo_comm™d
 
PARAMS
((, ));

194 
æ_tûde_ex∑nd
 
PARAMS
((, ));

197 
æ_ª°¨t_ouçut
 
PARAMS
((, ));

198 
æ_°›_ouçut
 
PARAMS
((, ));

201 
æ_ab‹t
 
PARAMS
((, ));

202 
æ_ây_°©us
 
PARAMS
((, ));

205 
æ_hi°‹y_£¨ch_f‹w¨d
 
PARAMS
((, ));

206 
æ_hi°‹y_£¨ch_backw¨d
 
PARAMS
((, ));

207 
æ_n⁄öc_f‹w¨d_£¨ch
 
PARAMS
((, ));

208 
æ_n⁄öc_ªvî£_£¨ch
 
PARAMS
((, ));

209 
æ_n⁄öc_f‹w¨d_£¨ch_agaö
 
PARAMS
((, ));

210 
æ_n⁄öc_ªvî£_£¨ch_agaö
 
PARAMS
((, ));

213 
æ_ö£π_˛o£
 
PARAMS
((, ));

216 
æ_ˇŒback_h™dÀr_ö°Æl
 
PARAMS
((c⁄° *, 
æ_v˝func_t
 *));

217 
æ_ˇŒback_ªad_ch¨
 
PARAMS
(());

218 
æ_ˇŒback_h™dÀr_ªmove
 
PARAMS
(());

222 
æ_vi_ªdo
 
PARAMS
((, ));

223 
æ_vi_undo
 
PARAMS
((, ));

224 
æ_vi_y™k_¨g
 
PARAMS
((, ));

225 
æ_vi_„tch_hi°‹y
 
PARAMS
((, ));

226 
æ_vi_£¨ch_agaö
 
PARAMS
((, ));

227 
æ_vi_£¨ch
 
PARAMS
((, ));

228 
æ_vi_com∂ëe
 
PARAMS
((, ));

229 
æ_vi_tûde_ex∑nd
 
PARAMS
((, ));

230 
æ_vi_¥ev_w‹d
 
PARAMS
((, ));

231 
æ_vi_√xt_w‹d
 
PARAMS
((, ));

232 
æ_vi_íd_w‹d
 
PARAMS
((, ));

233 
æ_vi_ö£π_beg
 
PARAMS
((, ));

234 
æ_vi_≠≥nd_mode
 
PARAMS
((, ));

235 
æ_vi_≠≥nd_eﬁ
 
PARAMS
((, ));

236 
æ_vi_eof_maybe
 
PARAMS
((, ));

237 
æ_vi_ö£πi⁄_mode
 
PARAMS
((, ));

238 
æ_vi_ö£π_mode
 
PARAMS
((, ));

239 
æ_vi_movemít_mode
 
PARAMS
((, ));

240 
æ_vi_¨g_digô
 
PARAMS
((, ));

241 
æ_vi_ch™ge_ˇ£
 
PARAMS
((, ));

242 
æ_vi_put
 
PARAMS
((, ));

243 
æ_vi_cﬁumn
 
PARAMS
((, ));

244 
æ_vi_dñëe_to
 
PARAMS
((, ));

245 
æ_vi_ch™ge_to
 
PARAMS
((, ));

246 
æ_vi_y™k_to
 
PARAMS
((, ));

247 
æ_vi_rubout
 
PARAMS
((, ));

248 
æ_vi_dñëe
 
PARAMS
((, ));

249 
æ_vi_back_to_ödít
 
PARAMS
((, ));

250 
æ_vi_fú°_¥öt
 
PARAMS
((, ));

251 
æ_vi_ch¨_£¨ch
 
PARAMS
((, ));

252 
æ_vi_m©ch
 
PARAMS
((, ));

253 
æ_vi_ch™ge_ch¨
 
PARAMS
((, ));

254 
æ_vi_sub°
 
PARAMS
((, ));

255 
æ_vi_ovî°rike
 
PARAMS
((, ));

256 
æ_vi_ovî°rike_dñëe
 
PARAMS
((, ));

257 
æ_vi_ª∂a˚
 
PARAMS
((, ));

258 
æ_vi_£t_m¨k
 
PARAMS
((, ));

259 
æ_vi_gŸo_m¨k
 
PARAMS
((, ));

262 
æ_vi_check
 
PARAMS
(());

263 
æ_vi_domove
 
PARAMS
((, *));

264 
æ_vi_bøckty≥
 
PARAMS
(());

266 
æ_vi_°¨t_ö£πög
 
PARAMS
((, , ));

269 
æ_vi_fW‹d
 
PARAMS
((, ));

270 
æ_vi_bW‹d
 
PARAMS
((, ));

271 
æ_vi_eW‹d
 
PARAMS
((, ));

272 
æ_vi_fw‹d
 
PARAMS
((, ));

273 
æ_vi_bw‹d
 
PARAMS
((, ));

274 
æ_vi_ew‹d
 
PARAMS
((, ));

284 *
ªadlöe
 
PARAMS
((const *));

286 
æ_£t_¥om±
 
PARAMS
((const *));

287 
æ_ex∑nd_¥om±
 
PARAMS
((*));

289 
æ_öôülize
 
PARAMS
(());

292 
æ_disˇrd_¨gumít
 
PARAMS
(());

295 
æ_add_defun
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, ));

296 
æ_böd_key
 
PARAMS
((, 
æ_comm™d_func_t
 *));

297 
æ_böd_key_ö_m≠
 
PARAMS
((, 
æ_comm™d_func_t
 *, 
Keym≠
));

298 
æ_unböd_key
 
PARAMS
(());

299 
æ_unböd_key_ö_m≠
 
PARAMS
((, 
Keym≠
));

300 
æ_böd_key_if_unbound
 
PARAMS
((, 
æ_comm™d_func_t
 *));

301 
æ_böd_key_if_unbound_ö_m≠
 
PARAMS
((, 
æ_comm™d_func_t
 *, 
Keym≠
));

302 
æ_unböd_fun˘i⁄_ö_m≠
 
PARAMS
((
æ_comm™d_func_t
 *, 
Keym≠
));

303 
æ_unböd_comm™d_ö_m≠
 
PARAMS
((c⁄° *, 
Keym≠
));

304 
æ_böd_key£q
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

305 
æ_böd_key£q_ö_m≠
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

306 
æ_böd_key£q_if_unbound
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

307 
æ_böd_key£q_if_unbound_ö_m≠
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

308 
æ_gíîic_böd
 
PARAMS
((, c⁄° *, *, 
Keym≠
));

310 *
æ_v¨übÀ_vÆue
 
PARAMS
((const *));

311 
æ_v¨übÀ_böd
 
PARAMS
((const *, const *));

314 
æ_£t_key
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

317 
æ_ma¸o_böd
 
PARAMS
((c⁄° *, c⁄° *, 
Keym≠
));

320 
æ_å™¶©e_key£q
 
PARAMS
((const *, *, *));

321 *
æ_u¡øn¶©e_key£q
 
PARAMS
(());

323 
æ_comm™d_func_t
 *
æ_«med_fun˘i⁄
 
PARAMS
((const *));

324 
æ_comm™d_func_t
 *
æ_fun˘i⁄_of_key£q
 
PARAMS
((c⁄° *, 
Keym≠
, *));

326 
æ_li°_funm≠_«mes
 
PARAMS
(());

327 **
æ_övokög_key£qs_ö_m≠
 
PARAMS
((
æ_comm™d_func_t
 *, 
Keym≠
));

328 **
æ_övokög_key£qs
 
PARAMS
((
æ_comm™d_func_t
 *));

330 
æ_fun˘i⁄_dum≥r
 
PARAMS
(());

331 
æ_ma¸o_dum≥r
 
PARAMS
(());

332 
æ_v¨übÀ_dum≥r
 
PARAMS
(());

334 
æ_ªad_öô_fûe
 
PARAMS
((const *));

335 
æ_∑r£_™d_böd
 
PARAMS
((*));

338 
Keym≠
 
æ_make_b¨e_keym≠
 
PARAMS
(());

339 
Keym≠
 
æ_c›y_keym≠
 
PARAMS
((Keymap));

340 
Keym≠
 
æ_make_keym≠
 
PARAMS
(());

341 
æ_disˇrd_keym≠
 
PARAMS
((
Keym≠
));

343 
Keym≠
 
æ_gë_keym≠_by_«me
 
PARAMS
((const *));

344 *
æ_gë_keym≠_«me
 
PARAMS
((
Keym≠
));

345 
æ_£t_keym≠
 
PARAMS
((
Keym≠
));

346 
Keym≠
 
æ_gë_keym≠
 
PARAMS
(());

348 
æ_£t_keym≠_‰om_edô_mode
 
PARAMS
(());

349 *
æ_gë_keym≠_«me_‰om_edô_mode
 
PARAMS
(());

352 
æ_add_funm≠_íåy
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

353 c⁄° **
æ_funm≠_«mes
 
PARAMS
(());

356 
æ_öôülize_funm≠
 
PARAMS
(());

359 
æ_push_ma¸o_öput
 
PARAMS
((*));

362 
æ_add_undo
 
PARAMS
((
undo_code
, , , *));

363 
æ_‰ì_undo_li°
 
PARAMS
(());

364 
æ_do_undo
 
PARAMS
(());

365 
æ_begö_undo_group
 
PARAMS
(());

366 
æ_íd_undo_group
 
PARAMS
(());

367 
æ_modifyög
 
PARAMS
((, ));

370 
æ_ªdi•œy
 
PARAMS
(());

371 
æ_⁄_√w_löe
 
PARAMS
(());

372 
æ_⁄_√w_löe_wôh_¥om±
 
PARAMS
(());

373 
æ_f‹˚d_upd©e_di•œy
 
PARAMS
(());

374 
æ_˛ór_mesßge
 
PARAMS
(());

375 
æ_ª£t_löe_°©e
 
PARAMS
(());

376 
æ_¸lf
 
PARAMS
(());

378 #i‡
deföed
 (
USE_VARARGS
Ë&& deföed (
PREFER_STDARG
)

379 
æ_mesßge
 (c⁄° *, ...Ë
__©åibuã__
((
__f‹m©__
 (
¥ötf
, 1, 2)));

381 
æ_mesßge
 ();

384 
æ_show_ch¨
 
PARAMS
(());

387 
æ_ch¨a˘î_Àn
 
PARAMS
((, ));

390 
æ_ßve_¥om±
 
PARAMS
(());

391 
æ_ª°‹e_¥om±
 
PARAMS
(());

394 
æ_ª∂a˚_löe
 
PARAMS
((const *, ));

395 
æ_ö£π_ãxt
 
PARAMS
((const *));

396 
æ_dñëe_ãxt
 
PARAMS
((, ));

397 
æ_kûl_ãxt
 
PARAMS
((, ));

398 *
æ_c›y_ãxt
 
PARAMS
((, ));

401 
æ_¥ï_ãrmöÆ
 
PARAMS
(());

402 
æ_dïªp_ãrmöÆ
 
PARAMS
(());

403 
æ_ây_£t_deÁu…_bödögs
 
PARAMS
((
Keym≠
));

404 
æ_ây_un£t_deÁu…_bödögs
 
PARAMS
((
Keym≠
));

406 
æ_ª£t_ãrmöÆ
 
PARAMS
((const *));

407 
æ_ªsize_ãrmöÆ
 
PARAMS
(());

408 
æ_£t_s¸ìn_size
 
PARAMS
((, ));

409 
æ_gë_s¸ìn_size
 
PARAMS
((*, *));

410 
æ_ª£t_s¸ìn_size
 
PARAMS
(());

412 *
æ_gë_ãrmˇp
 
PARAMS
((const *));

415 
æ_°uff_ch¨
 
PARAMS
(());

416 
æ_execuã_√xt
 
PARAMS
(());

417 
æ_˛ór_≥ndög_öput
 
PARAMS
(());

418 
æ_ªad_key
 
PARAMS
(());

419 
æ_gëc
 
PARAMS
((
FILE
 *));

420 
æ_£t_keybﬂrd_öput_timeout
 
PARAMS
(());

423 
æ_exãnd_löe_buf„r
 
PARAMS
(());

424 
æ_dög
 
PARAMS
(());

425 
æ_Æphabëic
 
PARAMS
(());

426 
æ_‰ì
 
PARAMS
((*));

429 
æ_£t_sig«ls
 
PARAMS
(());

430 
æ_˛ór_sig«ls
 
PARAMS
(());

431 
æ_˛ónup_a·î_sig«l
 
PARAMS
(());

432 
æ_ª£t_a·î_sig«l
 
PARAMS
(());

433 
æ_‰ì_löe_°©e
 
PARAMS
(());

435 
æ_echo_sig«l_ch¨
 
PARAMS
(());

437 
æ_£t_∑ªn_blök_timeout
 
PARAMS
(());

440 
æ_maybe_ßve_löe
 
PARAMS
(());

441 
æ_maybe_unßve_löe
 
PARAMS
(());

442 
æ_maybe_ª∂a˚_löe
 
PARAMS
(());

445 
æ_com∂ëe_öã∫Æ
 
PARAMS
(());

446 
æ_di•œy_m©ch_li°
 
PARAMS
((**, , ));

448 **
æ_com∂ëi⁄_m©ches
 
PARAMS
((c⁄° *, 
æ_com≥¡ry_func_t
 *));

449 *
æ_u£∫ame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

450 *
æ_fûíame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

452 
æ_com∂ëi⁄_mode
 
PARAMS
((
æ_comm™d_func_t
 *));

456 
‰ì_undo_li°
 
PARAMS
(());

457 
maybe_ßve_löe
 
PARAMS
(());

458 
maybe_unßve_löe
 
PARAMS
(());

459 
maybe_ª∂a˚_löe
 
PARAMS
(());

461 
dög
 
PARAMS
(());

462 
Æphabëic
 
PARAMS
(());

463 
¸lf
 
PARAMS
(());

465 **
com∂ëi⁄_m©ches
 
PARAMS
((*, 
æ_com≥¡ry_func_t
 *));

466 *
u£∫ame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

467 *
fûíame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

477 c⁄° *
æ_libøry_vîsi⁄
;

478 
æ_ªadlöe_vîsi⁄
;

481 
æ_gnu_ªadlöe_p
;

484 
æ_ªadlöe_°©e
;

488 
æ_edôög_mode
;

492 
æ_ö£π_mode
;

496 c⁄° *
æ_ªadlöe_«me
;

500 *
æ_¥om±
;

504 *
æ_di•œy_¥om±
;

507 *
æ_löe_buf„r
;

510 
æ_poöt
;

511 
æ_íd
;

514 
æ_m¨k
;

518 
æ_d⁄e
;

521 
æ_≥ndög_öput
;

526 
æ_di•©chög
;

530 
æ_ex∂icô_¨g
;

533 
æ_numîic_¨g
;

536 
æ_comm™d_func_t
 *
æ_œ°_func
;

539 c⁄° *
æ_ãrmöÆ_«me
;

542 
FILE
 *
æ_ö°ªam
;

543 
FILE
 *
æ_out°ªam
;

548 
æ_¥e„r_ív_wösize
;

552 
æ_hook_func_t
 *
æ_°¨tup_hook
;

557 
æ_hook_func_t
 *
æ_¥e_öput_hook
;

561 
æ_hook_func_t
 *
æ_evít_hook
;

565 
æ_gëc_func_t
 *
æ_gëc_fun˘i⁄
;

567 
æ_voidfunc_t
 *
æ_ªdi•œy_fun˘i⁄
;

569 
æ_vötfunc_t
 *
æ_¥ï_ãrm_fun˘i⁄
;

570 
æ_voidfunc_t
 *
æ_dïªp_ãrm_fun˘i⁄
;

573 
Keym≠
 
æ_executög_keym≠
;

574 
Keym≠
 
æ_bödög_keym≠
;

580 
æ_îa£_em±y_löe
;

585 
æ_Æªady_¥om±ed
;

589 
æ_num_ch¨s_to_ªad
;

592 *
æ_executög_ma¸o
;

597 
æ_ˇtch_sig«ls
;

604 
æ_ˇtch_sigwöch
;

610 
æ_com≥¡ry_func_t
 *
æ_com∂ëi⁄_íåy_fun˘i⁄
;

614 
æ_com≥¡ry_func_t
 *
æ_míu_com∂ëi⁄_íåy_fun˘i⁄
;

622 
æ_compign‹e_func_t
 *
æ_ign‹e_some_com∂ëi⁄s_fun˘i⁄
;

631 
æ_com∂ëi⁄_func_t
 *
æ_©ãm±ed_com∂ëi⁄_fun˘i⁄
;

636 c⁄° *
æ_basic_w‹d_bªak_ch¨a˘îs
;

641 *
æ_com∂ëî_w‹d_bªak_ch¨a˘îs
;

646 
æ_˝vfunc_t
 *
æ_com∂ëi⁄_w‹d_bªak_hook
;

652 c⁄° *
æ_com∂ëî_quŸe_ch¨a˘îs
;

655 c⁄° *
æ_basic_quŸe_ch¨a˘îs
;

658 c⁄° *
æ_fûíame_quŸe_ch¨a˘îs
;

663 c⁄° *
æ_•ecül_¥efixes
;

674 
æ_i˝pfunc_t
 *
æ_dúe˘‹y_com∂ëi⁄_hook
;

687 
æ_i˝pfunc_t
 *
æ_dúe˘‹y_ªwrôe_hook
;

698 
æ_dequŸe_func_t
 *
æ_fûíame_ªwrôe_hook
;

701 
	#æ_symbﬁic_lök_hook
 
æ_dúe˘‹y_com∂ëi⁄_hook


	)

710 
æ_compdi•_func_t
 *
æ_com∂ëi⁄_di•œy_m©ches_hook
;

715 
æ_fûíame_com∂ëi⁄_desúed
;

722 
æ_fûíame_quŸög_desúed
;

728 
æ_quŸe_func_t
 *
æ_fûíame_quŸög_fun˘i⁄
;

733 
æ_dequŸe_func_t
 *
æ_fûíame_dequŸög_fun˘i⁄
;

738 
æ_löebuf_func_t
 *
æ_ch¨_is_quŸed_p
;

742 
æ_©ãm±ed_com∂ëi⁄_ovî
;

747 
æ_com∂ëi⁄_ty≥
;

750 
æ_com∂ëi⁄_övokög_key
;

755 
æ_com∂ëi⁄_quîy_ôems
;

759 
æ_com∂ëi⁄_≠≥nd_ch¨a˘î
;

763 
æ_com∂ëi⁄_suµªss_≠≥nd
;

767 
æ_com∂ëi⁄_quŸe_ch¨a˘î
;

771 
æ_com∂ëi⁄_found_quŸe
;

776 
æ_com∂ëi⁄_suµªss_quŸe
;

779 
æ_s‹t_com∂ëi⁄_m©ches
;

790 
æ_com∂ëi⁄_m¨k_symlök_dús
;

793 
æ_ign‹e_com∂ëi⁄_du∂iˇãs
;

797 
æ_öhibô_com∂ëi⁄
;

801 
	#READERR
 (-2)

	)

804 
	#RL_PROMPT_START_IGNORE
 '\001'

	)

805 
	#RL_PROMPT_END_IGNORE
 '\002'

	)

809 
	#NO_MATCH
 0

	)

810 
	#SINGLE_MATCH
 1

	)

811 
	#MULT_MATCH
 2

	)

814 
	#RL_STATE_NONE
 0x000000

	)

816 
	#RL_STATE_INITIALIZING
 0x0000001

	)

817 
	#RL_STATE_INITIALIZED
 0x0000002

	)

818 
	#RL_STATE_TERMPREPPED
 0x0000004

	)

819 
	#RL_STATE_READCMD
 0x0000008

	)

820 
	#RL_STATE_METANEXT
 0x0000010

	)

821 
	#RL_STATE_DISPATCHING
 0x0000020

	)

822 
	#RL_STATE_MOREINPUT
 0x0000040

	)

823 
	#RL_STATE_ISEARCH
 0x0000080

	)

824 
	#RL_STATE_NSEARCH
 0x0000100

	)

825 
	#RL_STATE_SEARCH
 0x0000200

	)

826 
	#RL_STATE_NUMERICARG
 0x0000400

	)

827 
	#RL_STATE_MACROINPUT
 0x0000800

	)

828 
	#RL_STATE_MACRODEF
 0x0001000

	)

829 
	#RL_STATE_OVERWRITE
 0x0002000

	)

830 
	#RL_STATE_COMPLETING
 0x0004000

	)

831 
	#RL_STATE_SIGHANDLER
 0x0008000

	)

832 
	#RL_STATE_UNDOING
 0x0010000

	)

833 
	#RL_STATE_INPUTPENDING
 0x0020000

	)

834 
	#RL_STATE_TTYCSAVED
 0x0040000

	)

835 
	#RL_STATE_CALLBACK
 0x0080000

	)

836 
	#RL_STATE_VIMOTION
 0x0100000

	)

837 
	#RL_STATE_MULTIKEY
 0x0200000

	)

838 
	#RL_STATE_VICMDONCE
 0x0400000

	)

839 
	#RL_STATE_REDISPLAYING
 0x0800000

	)

841 
	#RL_STATE_DONE
 0x1000000

	)

843 
	#RL_SETSTATE
(
x
Ë(
æ_ªadlöe_°©e
 |(x))

	)

844 
	#RL_UNSETSTATE
(
x
Ë(
æ_ªadlöe_°©e
 &~(x))

	)

845 
	#RL_ISSTATE
(
x
Ë(
æ_ªadlöe_°©e
 & (x))

	)

847 
	sªadlöe_°©e
 {

849 
	gpoöt
;

850 
	gíd
;

851 
	gm¨k
;

852 *
	gbuf„r
;

853 
	gbuÊí
;

854 
UNDO_LIST
 *
	gul
;

855 *
	g¥om±
;

858 
	gæ°©e
;

859 
	gd⁄e
;

860 
Keym≠
 
	gkm≠
;

863 
æ_comm™d_func_t
 *
	gœ°func
;

864 
	gösmode
;

865 
	gedmode
;

866 
	gk£qÀn
;

867 
FILE
 *
	göf
;

868 
FILE
 *
	goutf
;

869 
	g≥ndögö
;

870 *
	gma¸o
;

873 
	gˇtchsigs
;

874 
	gˇtchsigwöch
;

883 
	gª£rved
[64];

886 
æ_ßve_°©e
 
PARAMS
((
ªadlöe_°©e
 *));

887 
æ_ª°‹e_°©e
 
PARAMS
((
ªadlöe_°©e
 *));

889 #ifde‡
__˝lu•lus


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

143 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

145 #i‡
__GNUC_PREREQ
 (4,3)

146 
	#__w¨nde˛
(
«me
, 
msg
) \

147 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

148 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

149 
	#__îr‹de˛
(
«me
, 
msg
) \

150 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

152 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

153 
	#__w¨«âr
(
msg
)

	)

154 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

158 #i‡
__GNUC_PREREQ
 (2,97)

160 
	#__Êex¨r
 []

	)

162 #ifde‡
__GNUC__


163 
	#__Êex¨r
 [0]

	)

165 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

166 
	#__Êex¨r
 []

	)

169 
	#__Êex¨r
 [1]

	)

185 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

187 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

188 #ifde‡
__˝lu•lus


189 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

190 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

191 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

192 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

194 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

196 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

197 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

199 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

200 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

213 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

214 
	#__©åibuã__
(
xyz
Ë

	)

220 #i‡
__GNUC_PREREQ
 (2,96)

221 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

223 
	#__©åibuã_mÆloc__


	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

323 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

324 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


325 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

329 
	#__exã∫_ölöe
 
__ölöe


	)

330 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

336 #i‡
__GNUC_PREREQ
 (4,3)

337 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

338 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

345 #i‡!
__GNUC_PREREQ
 (2,8)

346 
	#__exãnsi⁄__


	)

350 #i‡!
__GNUC_PREREQ
 (2,92)

351 
	#__ª°ri˘


	)

357 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


358 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

360 #ifde‡
__GNUC__


361 
	#__ª°ri˘_¨r


	)

363 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

364 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

367 
	#__ª°ri˘_¨r


	)

372 #i‡
__GNUC__
 >= 3

373 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

375 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 
	~<bôs/byãsw≠-16.h
>

37 
	#__bsw≠_c⁄°™t_32
(
x
) \

38 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

39 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

41 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 2)

43 
__ölöe
 

44 
	$__bsw≠_32
 (
__bsx
)

46  
	`__buûtö_bsw≠32
 (
__bsx
);

47 
	}
}

48 #ñi‡
__GNUC__
 >= 2

49 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

50 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

51 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

52 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

53 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

54 || 
deföed
 
	g__amdÁm10__
)

57 
	#__bsw≠_32
(
x
) \

58 (
__exãnsi⁄__
 \

59 ({ 
__v
, 
__x
 = (
x
); \

60 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

61 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

63 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

64 
__v
; }))

	)

66 
	#__bsw≠_32
(
x
) \

67 (
__exãnsi⁄__
 \

68 ({ 
__v
, 
__x
 = (
x
); \

69 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

70 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

72 
	`__asm__
 ("rorw $8, %w0;" \

75 : "Ù" (
__v
) \

76 : "0" (
__x
) \

78 
__v
; }))

	)

81 
	#__bsw≠_32
(
x
) \

82 (
__exãnsi⁄__
 \

83 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

86 
__ölöe
 

87 
	$__bsw≠_32
 (
__bsx
)

89  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

90 
	}
}

94 #i‡
__GNUC_PREREQ
 (2, 0)

96 
	#__bsw≠_c⁄°™t_64
(
x
) \

97 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

98 | (((
x
) & 0x00ff000000000000ull) >> 40) \

99 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

100 | (((
x
) & 0x000000ff00000000ull) >> 8) \

101 | (((
x
) & 0x00000000ff000000ull) << 8) \

102 | (((
x
) & 0x0000000000ff0000ull) << 24) \

103 | (((
x
) & 0x000000000000ff00ull) << 40) \

104 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

106 #i‡
__GNUC_PREREQ
 (4, 2)

107 
__ölöe
 

108 
	$__bsw≠_64
 (
__bsx
)

110  
	`__buûtö_bsw≠64
 (
__bsx
);

111 
	}
}

112 #ñi‡
__WORDSIZE
 == 64

113 
	#__bsw≠_64
(
x
) \

114 (
__exãnsi⁄__
 \

115 ({ 
__v
, 
__x
 = (
x
); \

116 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

117 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

119 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

120 
__v
; }))

	)

122 
	#__bsw≠_64
(
x
) \

123 (
__exãnsi⁄__
 \

124 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

125 
__l
[2]; } 
__w
, 
__r
; \

126 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

127 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

130 
__w
.
__Œ
 = (
x
); \

131 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

132 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

134 
__r
.
__Œ
; }))

	)

136 #ñi‡
__GLIBC_HAVE_LONG_LONG


137 
	#__bsw≠_c⁄°™t_64
(
x
) \

138 ((((
x
) & 0xff00000000000000ull) >> 56) \

139 | (((
x
) & 0x00ff000000000000ull) >> 40) \

140 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

141 | (((
x
) & 0x000000ff00000000ull) >> 8) \

142 | (((
x
) & 0x00000000ff000000ull) << 8) \

143 | (((
x
) & 0x0000000000ff0000ull) << 24) \

144 | (((
x
) & 0x000000000000ff00ull) << 40) \

145 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

147 
__ölöe
 

148 
	$__bsw≠_64
 (
__bsx
)

150  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

151 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

28 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


29 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


30 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

32 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

35 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

45 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

46 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

50 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

51 #i‡
LLL_LOCK_INITIALIZER
 == 0

52 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

55 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

56 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

58 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

59 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

61 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

62 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

63 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

64 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

68 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

69 
	#__libc_lock_öô_ªcursive
(
NAME
) \

70 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

72 
	#__libc_lock_öô_ªcursive
(
NAME
) \

74 i‡(
__±hªad_muãx_öô
 !
NULL
) \

76 
±hªad_muãx©å_t
 
__©å
; \

77 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

78 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

79 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

80 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

82 } 0)

	)

86 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

87 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

89 
	#__libc_lock_föi_ªcursive
(
NAME
) \

90 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_lock_ªcursive
(
NAME
) \

97 *
£lf
 = 
THREAD_SELF
; \

98 i‡((
NAME
).
ow√r
 !
£lf
) \

100 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

101 (
NAME
).
ow√r
 = 
£lf
; \

103 ++(
NAME
).
˙t
; \

104 } 0)

	)

106 
	#__libc_lock_lock_ªcursive
(
NAME
) \

107 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

111 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

112 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

114 
ªsu…
 = 0; \

115 *
£lf
 = 
THREAD_SELF
; \

116 i‡((
NAME
).
ow√r
 !
£lf
) \

118 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

120 (
NAME
).
ow√r
 = 
£lf
; \

121 (
NAME
).
˙t
 = 1; \

124 
ªsu…
 = 
EBUSY
; \

127 ++(
NAME
).
˙t
; \

128 
ªsu…
; \

129 })

	)

131 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

132 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

136 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

138 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

140 i‡(--(
NAME
).
˙t
 == 0) \

142 (
NAME
).
ow√r
 = 
NULL
; \

143 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

145 } 0)

	)

147 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

148 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

155 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

156 (*
routöe
Ë(*), *
¨g
);

157 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

158 
execuã
);

161 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

162 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

163 
_avaû
; \

164 i‡(
DOIT
) { \

165 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

166 i‡(
_avaû
) { \

167 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

168 
ARG
)); \

170 
_buf„r
.
__routöe
 = (
FCT
); \

171 
_buf„r
.
__¨g
 = (
ARG
); \

174 
_avaû
 = 0; \

175 }

	)

178 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

179 i‡(
_avaû
) { \

180 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

181 } i‡(
DOIT
) \

182 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

183 
	}

	)
}

188 #ifde‡
_LIBC


189 
	~"libc-lockP.h
"

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/readline/keymaps.h

22 #i‚de‡
_KEYMAPS_H_


23 
	#_KEYMAPS_H_


	)

25 #ifde‡
__˝lu•lus


29 #i‡
deföed
 (
READLINE_LIBRARY
)

30 
	~"æ°dc.h
"

31 
	~"ch¨defs.h
"

32 
	~"æty≥defs.h
"

34 
	~<ªadlöe/æ°dc.h
>

35 
	~<ªadlöe/ch¨defs.h
>

36 
	~<ªadlöe/æty≥defs.h
>

44 
	s_keym≠_íåy
 {

45 
ty≥
;

46 
æ_comm™d_func_t
 *
fun˘i⁄
;

47 } 
	tKEYMAP_ENTRY
;

52 
	#KEYMAP_SIZE
 257

	)

53 
	#ANYOTHERKEY
 
KEYMAP_SIZE
-1

	)

55 
KEYMAP_ENTRY
 
	tKEYMAP_ENTRY_ARRAY
[
KEYMAP_SIZE
];

56 
KEYMAP_ENTRY
 *
	tKeym≠
;

59 
	#ISFUNC
 0

	)

60 
	#ISKMAP
 1

	)

61 
	#ISMACR
 2

	)

63 
KEYMAP_ENTRY_ARRAY
 
emacs_°™d¨d_keym≠
, 
emacs_mëa_keym≠
, 
emacs_˘lx_keym≠
;

64 
KEYMAP_ENTRY_ARRAY
 
vi_ö£πi⁄_keym≠
, 
vi_movemít_keym≠
;

68 
Keym≠
 
æ_make_b¨e_keym≠
 
PARAMS
(());

71 
Keym≠
 
æ_c›y_keym≠
 
PARAMS
((Keymap));

76 
Keym≠
 
æ_make_keym≠
 
PARAMS
(());

79 
æ_disˇrd_keym≠
 
PARAMS
((
Keym≠
));

85 
Keym≠
 
æ_gë_keym≠_by_«me
 
PARAMS
((const *));

88 
Keym≠
 
æ_gë_keym≠
 
PARAMS
(());

91 
æ_£t_keym≠
 
PARAMS
((
Keym≠
));

93 #ifde‡
__˝lu•lus


	@/usr/include/readline/rlstdc.h

22 #i‡!
deföed
 (
_RL_STDC_H_
)

23 
	#_RL_STDC_H_


	)

31 #i‡!
deföed
 (
PARAMS
)

32 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__GNUC__
Ë|| deföed (
__˝lu•lus
)

33 
	#PARAMS
(
¥Ÿos
Ë
	)
protos

35 
	#PARAMS
(
¥Ÿos
Ë()

	)

39 #i‚de‡
__©åibuã__


40 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 8)

41 
	#__©åibuã__
(
x
)

	)

	@/usr/include/readline/rltypedefs.h

22 #i‚de‡
_RL_TYPEDEFS_H_


23 
	#_RL_TYPEDEFS_H_


	)

25 #ifde‡
__˝lu•lus


31 #i‡!
deföed
 (
_FUNCTION_DEF
)

32 
	#_FUNCTION_DEF


	)

34 
	tFun˘i⁄
 ();

35 
	tVFun˘i⁄
 ();

36 *
	tCPFun˘i⁄
 ();

37 **
	tCPPFun˘i⁄
 ();

43 #i‡!
deföed
 (
_RL_FUNCTION_TYPEDEF
)

44 
	#_RL_FUNCTION_TYPEDEF


	)

47 
	tæ_comm™d_func_t
 
	tPARAMS
((, ));

50 *
	tæ_com≥¡ry_func_t
 
	tPARAMS
((const *, ));

51 **
	tæ_com∂ëi⁄_func_t
 
	tPARAMS
((const *, , ));

53 *
	tæ_quŸe_func_t
 
	tPARAMS
((*, , *));

54 *
	tæ_dequŸe_func_t
 
	tPARAMS
((*, ));

56 
	tæ_compign‹e_func_t
 
	tPARAMS
((**));

58 
	tæ_compdi•_func_t
 
	tPARAMS
((**, , ));

61 
	tæ_hook_func_t
 
	tPARAMS
(());

64 
	tæ_gëc_func_t
 
	tPARAMS
((
	tFILE
 *));

69 
	tæ_löebuf_func_t
 
	tPARAMS
((*, ));

72 
	tæ_ötfunc_t
 
	tPARAMS
(());

73 
	#æ_ivoidfunc_t
 
æ_hook_func_t


	)

74 
	tæ_i˝func_t
 
	tPARAMS
((*));

75 
	tæ_i˝pfunc_t
 
	tPARAMS
((**));

77 
	tæ_voidfunc_t
 
	tPARAMS
(());

78 
	tæ_vötfunc_t
 
	tPARAMS
(());

79 
	tæ_v˝func_t
 
	tPARAMS
((*));

80 
	tæ_v˝pfunc_t
 
	tPARAMS
((**));

82 *
	tæ_˝vfunc_t
 
	tPARAMS
(());

83 *
	tæ_˝ifunc_t
 
	tPARAMS
(());

84 *
	tæ_˝˝func_t
 
	tPARAMS
((*));

85 *
	tæ_˝˝pfunc_t
 
	tPARAMS
((**));

89 #ifde‡
__˝lu•lus


	@/usr/include/readline/tilde.h

23 #i‡!
deföed
 (
_TILDE_H_
)

24 
	#_TILDE_H_


	)

26 #ifde‡
__˝lu•lus


34 #i‡!
deföed
 (
PARAMS
)

35 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__GNUC__
Ë|| deföed (
__˝lu•lus
)

36 
	#PARAMS
(
¥Ÿos
Ë
	)
protos

38 
	#PARAMS
(
¥Ÿos
Ë()

	)

42 *
	ttûde_hook_func_t
 
	tPARAMS
((*));

48 
tûde_hook_func_t
 *
tûde_ex∑nsi⁄_¥ìx∑nsi⁄_hook
;

54 
tûde_hook_func_t
 *
tûde_ex∑nsi⁄_Áûuª_hook
;

59 **
tûde_addôi⁄Æ_¥efixes
;

64 **
tûde_addôi⁄Æ_suffixes
;

67 *
tûde_ex∑nd
 
PARAMS
((const *));

71 *
tûde_ex∑nd_w‹d
 
PARAMS
((const *));

74 *
tûde_föd_w‹d
 
PARAMS
((const *, , *));

76 #ifde‡
__˝lu•lus


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


125 #i‡
__WORDSIZE
 == 64

126 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

131 
	#PTHREAD_RWLOCK_INITIALIZER
 \

132 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

133 #ifde‡
__USE_GNU


134 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

141 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

142 0, 0, 0, 0 } }

	)

144 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

145 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

146 0 } }

	)

156 
	mPTHREAD_INHERIT_SCHED
,

157 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

158 
	mPTHREAD_EXPLICIT_SCHED


159 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

166 
	mPTHREAD_SCOPE_SYSTEM
,

167 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

168 
	mPTHREAD_SCOPE_PROCESS


169 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

176 
	mPTHREAD_PROCESS_PRIVATE
,

177 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

178 
	mPTHREAD_PROCESS_SHARED


179 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

185 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

189 
	s_±hªad_˛ónup_buf„r


191 (*
	m__routöe
) (*);

192 *
	m__¨g
;

193 
	m__ˇn˚…y≥
;

194 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

200 
	mPTHREAD_CANCEL_ENABLE
,

201 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

202 
	mPTHREAD_CANCEL_DISABLE


203 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

207 
	mPTHREAD_CANCEL_DEFERRED
,

208 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

209 
	mPTHREAD_CANCEL_ASYNCHRONOUS


210 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

212 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

216 
	#PTHREAD_ONCE_INIT
 0

	)

219 #ifde‡
__USE_XOPEN2K


223 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

227 
__BEGIN_DECLS


232 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

233 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

234 *(*
__°¨t_routöe
) (*),

235 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

241 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

249 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

251 #ifde‡
__USE_GNU


254 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

262 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

263 c⁄° 
time•ec
 *
__ab°ime
);

270 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

274 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

277 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

278 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

286 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

293 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

294 *
__dëach°©e
)

295 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

298 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

299 
__dëach°©e
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

304 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

305 
size_t
 *
__gu¨dsize
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

309 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

310 
size_t
 
__gu¨dsize
)

311 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

317 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

321 c⁄° 
sched_∑øm
 *
__ª°ri˘


322 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


326 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

330 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1));

334 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


335 
__©å
, *
__ª°ri˘
 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

339 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

340 
__öhîô
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1));

345 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

346 *
__ª°ri˘
 
__sc›e
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

350 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


355 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

363 *
__°ackaddr
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

367 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


368 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

374 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

375 
size_t
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1));

378 #ifde‡
__USE_XOPEN2K


380 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

381 **
__ª°ri˘
 
__°ackaddr
,

382 
size_t
 *
__ª°ri˘
 
__°acksize
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

388 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

389 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_GNU


395 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 c⁄° 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

402 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

403 
size_t
 
__˝u£tsize
,

404 
˝u_£t_t
 *
__˝u£t
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((2));

420 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

421 c⁄° 
sched_∑øm
 *
__∑øm
)

422 
__THROW
 
	`__n⁄nuŒ
 ((3));

425 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

426 *
__ª°ri˘
 
__pﬁicy
,

427 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

431 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

432 
__THROW
;

435 #ifde‡
__USE_GNU


437 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

438 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

442 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2));

447 #ifde‡
__USE_UNIX98


449 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

452 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

455 #ifde‡
__USE_GNU


460 
	$±hªad_yõld
 (Ë
__THROW
;

465 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

466 c⁄° 
˝u_£t_t
 *
__˝u£t
)

467 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

471 
˝u_£t_t
 *
__˝u£t
)

472 
__THROW
 
	`__n⁄nuŒ
 ((3));

485 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

486 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

497 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

501 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

504 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

509 
	`±hªad_ã°ˇn˚l
 ();

518 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

519 
__mask_was_ßved
;

520 } 
__ˇn˚l_jmp_buf
[1];

521 *
__∑d
[4];

522 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

525 #i‚de‡
__˛ónup_f˘_©åibuã


526 
	#__˛ónup_f˘_©åibuã


	)

531 
	s__±hªad_˛ónup_‰ame


533 (*
__ˇn˚l_routöe
) (*);

534 *
__ˇn˚l_¨g
;

535 
__do_ô
;

536 
__ˇn˚l_ty≥
;

539 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


540 #ifde‡
__˝lu•lus


542 ˛as†
	c__±hªad_˛ónup_˛ass


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

549 
public
:

550 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

551 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

552 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

553 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

554 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

555 &
__ˇn˚l_ty≥
); 
	}
}

556 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

566 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

568 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

572 
	#±hªad_˛ónup_p›
(
execuã
) \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

576 #ifde‡
__USE_GNU


580 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

582 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

583 
__˛‰ame
.
	`__de„r
 ()

	)

588 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

589 
__˛‰ame
.
	`__ª°‹e
 (); \

590 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

591 } 0)

	)

598 
__exã∫_ölöe
 

599 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

601 i‡(
__‰ame
->
__do_ô
)

602 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

603 
	}
}

612 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 };

	)

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
__˛‰ame
.
__do_ô
 = (
execuã
); \

623 } 0)

	)

625 #ifde‡
__USE_GNU


629 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

631 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

632 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

633 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

634 .
__do_ô
 = 1 }; \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

636 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

641 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

642 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

643 
__˛‰ame
.
__do_ô
 = (
execuã
); \

644 } 0)

	)

655 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

657 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

658 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

659 *
__ˇn˚l_¨g
 = (
¨g
); \

660 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

661 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

662 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

669 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

670 dÿ{

	)

671 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

672 
__˛ónup_f˘_©åibuã
;

676 
	#±hªad_˛ónup_p›
(
execuã
) \

679 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 i‡(
execuã
) \

681 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

682 } 0)

	)

683 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

684 
__˛ónup_f˘_©åibuã
;

686 #ifde‡
__USE_GNU


690 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

692 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

693 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

694 *
__ˇn˚l_¨g
 = (
¨g
); \

695 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

696 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

697 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

699 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

700 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

704 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

705 dÿ{

	)

706 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

707 
__˛ónup_f˘_©åibuã
;

712 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

715 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

716 i‡(
execuã
) \

717 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

718 
	}
} 0)

	)

719 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

720 
__˛ónup_f˘_©åibuã
;

724 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

725 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

726 #i‚de‡
SHARED


727 
	`__©åibuã__
 ((
__wók__
))

733 
__jmp_buf_èg
;

734 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

740 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

741 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

742 
__THROW
 
	`__n⁄nuŒ
 ((1));

745 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

750 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

753 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

754 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 #ifde‡
__USE_XOPEN2K


758 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 c⁄° 
time•ec
 *
__ª°ri˘


760 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

764 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

770 
__ª°ri˘
 
__muãx
,

771 *
__ª°ri˘
 
__¥io˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

776 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

777 
__¥io˚ûög
,

778 *
__ª°ri˘
 
__ﬁd_˚ûög
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

782 #ifde‡
__USE_XOPEN2K8


784 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 #ifde‡
__USE_GNU


787 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

801 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

802 
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

806 
__ª°ri˘
 
__©å
,

807 *
__ª°ri˘
 
__psh¨ed
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__psh¨ed
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


817 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


818 
__©å
, *
__ª°ri˘
 
__köd
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

824 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

830 
__ª°ri˘
 
__©å
,

831 *
__ª°ri˘
 
__¥Ÿocﬁ
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

836 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

837 
__¥Ÿocﬁ
)

838 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

842 
__ª°ri˘
 
__©å
,

843 *
__ª°ri˘
 
__¥io˚ûög
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥io˚ûög
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_XOPEN2K


853 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

854 *
__robu°√ss
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 #ifde‡
__USE_GNU


857 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

858 *
__robu°√ss
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

863 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

864 
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

880 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


881 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 c⁄° 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

907 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

908 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2K


912 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

913 c⁄° 
time•ec
 *
__ª°ri˘


914 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

918 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

934 
__ª°ri˘
 
__©å
,

935 *
__ª°ri˘
 
__psh¨ed
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

939 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

940 
__psh¨ed
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__¥ef
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

959 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

960 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

965 
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

969 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

973 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

981 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

982 
	`__n⁄nuŒ
 ((1, 2));

991 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

994 
	`__n⁄nuŒ
 ((1, 2, 3));

999 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1000 
__THROW
 
	`__n⁄nuŒ
 ((1));

1003 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1008 
__ª°ri˘
 
__©å
,

1009 *
__ª°ri˘
 
__psh¨ed
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1013 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1014 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 #ifde‡
__USE_XOPEN2K


1018 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__˛ockid_t
 
__˛ock_id
)

1026 
__THROW
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1035 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1040 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1044 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1048 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1052 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1060 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1061 
__©å
, 
__cou¡
)

1062 
__THROW
 
	`__n⁄nuŒ
 ((1));

1065 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1066 
__THROW
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1070 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1083 
__ª°ri˘
 
__©å
,

1084 *
__ª°ri˘
 
__psh¨ed
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1088 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1089 
__psh¨ed
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1103 (*
__de°r_fun˘i⁄
) (*))

1104 
__THROW
 
	`__n⁄nuŒ
 ((1));

1107 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1110 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1114 c⁄° *
__poöãr
Ë
__THROW
 ;

1117 #ifde‡
__USE_XOPEN2K


1119 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1120 
__˛ockid_t
 *
__˛ock_id
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((2));

1136 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1137 (*
__∑ª¡
) (),

1138 (*
__chûd
Ë()Ë
__THROW
;

1141 #ifde‡
__USE_EXTERN_INLINES


1143 
__exã∫_ölöe
 

1144 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1146  
__thªad1
 =
__thªad2
;

1147 
	}
}

1150 
	g__END_DECLS


	@/usr/include/readline/chardefs.h

22 #i‚de‡
_CHARDEFS_H_


23 
	#_CHARDEFS_H_


	)

25 
	~<˘y≥.h
>

27 #i‡
deföed
 (
HAVE_CONFIG_H
)

28 #i‡
deföed
 (
HAVE_STRING_H
)

29 #i‡! 
deföed
 (
STDC_HEADERS
Ë&& deföed (
HAVE_MEMORY_H
)

30 
	~<mem‹y.h
>

32 
	~<°rög.h
>

34 #i‡
deföed
 (
HAVE_STRINGS_H
)

35 
	~<°rögs.h
>

38 
	~<°rög.h
>

41 #i‚de‡
whôe•a˚


42 
	#whôe•a˚
(
c
Ë(((cË=' 'Ë|| ((cË='\t'))

	)

45 #ifde‡
CTRL


46 #unde‡
CTRL


48 #ifde‡
UNCTRL


49 #unde‡
UNCTRL


53 
	#c⁄åﬁ_ch¨a˘î_thªshﬁd
 0x020

	)

54 
	#c⁄åﬁ_ch¨a˘î_mask
 0x1‡

	)

55 
	#mëa_ch¨a˘î_thªshﬁd
 0x07‡

	)

56 
	#c⁄åﬁ_ch¨a˘î_bô
 0x40

	)

57 
	#mëa_ch¨a˘î_bô
 0x080

	)

58 
	#œrge°_ch¨
 255

	)

60 
	#CTRL_CHAR
(
c
Ë((cË< 
c⁄åﬁ_ch¨a˘î_thªshﬁd
 && (((cË& 0x80Ë=0))

	)

61 
	#META_CHAR
(
c
Ë((cË> 
mëa_ch¨a˘î_thªshﬁd
 && (cË<
œrge°_ch¨
)

	)

63 
	#CTRL
(
c
Ë((cË& 
c⁄åﬁ_ch¨a˘î_mask
)

	)

64 
	#META
(
c
Ë((cË| 
mëa_ch¨a˘î_bô
)

	)

66 
	#UNMETA
(
c
Ë((cË& (~
mëa_ch¨a˘î_bô
))

	)

67 
	#UNCTRL
(
c
Ë
	`_æ_to_uµî
(((c)|
c⁄åﬁ_ch¨a˘î_bô
))

	)

69 #i‡
deföed
 
STDC_HEADERS
 || (!deföed (
ißscii
Ë&& !deföed (
HAVE_ISASCII
))

70 
	#IN_CTYPE_DOMAIN
(
c
Ë1

	)

72 
	#IN_CTYPE_DOMAIN
(
c
Ë
	`ißscii
(c)

	)

75 #i‡!
deföed
 (
isxdigô
Ë&& !deföed (
HAVE_ISXDIGIT
)

76 
	#isxdigô
(
c
Ë(
	`isdigô
((c)Ë|| ((cË>'a' && (cË<'f'Ë|| ((cË>'A' && (cË<'F'))

	)

79 #i‡
deföed
 (
CTYPE_NON_ASCII
)

80 
	#NON_NEGATIVE
(
c
Ë1

	)

82 
	#NON_NEGATIVE
(
c
Ë(()(cË=(c))

	)

86 #unde‡
ISPRINT


90 
	#ISALNUM
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`iß um
 (c))

	)

91 
	#ISALPHA
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`ißÕha
 (c))

	)

92 
	#ISDIGIT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isdigô
 (c))

	)

93 
	#ISLOWER
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`i¶owî
 (c))

	)

94 
	#ISPRINT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`i•röt
 (c))

	)

95 
	#ISUPPER
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isuµî
 (c))

	)

96 
	#ISXDIGIT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isxdigô
 (c))

	)

98 
	#_æ_lowîˇ£_p
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISLOWER
(c))

	)

99 
	#_æ_uµîˇ£_p
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISUPPER
(c))

	)

100 
	#_æ_digô_p
(
c
Ë((cË>'0' && (cË<'9')

	)

102 
	#_æ_puª_Æphabëic
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISALPHA
(c))

	)

103 
	#ALPHABETIC
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISALNUM
(c))

	)

105 #i‚de‡
_æ_to_uµî


106 
	#_æ_to_uµî
(
c
Ë(
	`_æ_lowîˇ£_p
(cË? 
	`touµî
(()cË: (c))

	)

107 
	#_æ_to_lowî
(
c
Ë(
	`_æ_uµîˇ£_p
(cË? 
	`tﬁowî
(()cË: (c))

	)

110 #i‚de‡
_æ_digô_vÆue


111 
	#_æ_digô_vÆue
(
x
Ë((xË- '0')

	)

114 #i‚de‡
_æ_isidít


115 
	#_æ_isidít
(
c
Ë(
	`ISALNUM
(cË|| (cË='_')

	)

118 #i‚de‡
ISOCTAL


119 
	#ISOCTAL
(
c
Ë((cË>'0' && (cË<'7')

	)

121 
	#OCTVALUE
(
c
Ë((cË- '0')

	)

123 
	#HEXVALUE
(
c
) \

124 (((
c
) >= 'a' && (c) <= 'f') \

125 ? (
c
)-'a'+10 \

126 : (
c
Ë>'A' && (cË<'F' ? (c)-'A'+10 : (c)-'0')

	)

128 #i‚de‡
NEWLINE


129 
	#NEWLINE
 '\n'

	)

132 #i‚de‡
RETURN


133 
	#RETURN
 
	`CTRL
('M')

	)

136 #i‚de‡
RUBOUT


137 
	#RUBOUT
 0x7f

	)

140 #i‚de‡
TAB


141 
	#TAB
 '\t'

	)

144 #ifde‡
ABORT_CHAR


145 #unde‡
ABORT_CHAR


147 
	#ABORT_CHAR
 
	`CTRL
('G')

	)

149 #ifde‡
PAGE


150 #unde‡
PAGE


152 
	#PAGE
 
	`CTRL
('L')

	)

154 #ifde‡
SPACE


155 #unde‡
SPACE


157 
	#SPACE
 ' '

	)

159 #ifde‡
ESC


160 #unde‡
ESC


162 
	#ESC
 
	`CTRL
('[')

	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

32 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

33 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

36 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


40 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

41 
__THROW
 
__©åibuã_puª__
;

44 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

47 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

50 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


53 *
	`ödex
 (*
__s
, 
__c
)

54 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

55 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

56 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


59 
__exã∫_Æways_ölöe
 *

60 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


62  
	`__buûtö_ödex
 (
__s
, 
__c
);

65 
__exã∫_Æways_ölöe
 const *

66 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


68  
	`__buûtö_ödex
 (
__s
, 
__c
);

71 
	}
}

73 *
	$ödex
 (c⁄° *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


81 *
	`rödex
 (*
__s
, 
__c
)

82 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

83 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

84 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


87 
__exã∫_Æways_ölöe
 *

88 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


90  
	`__buûtö_rödex
 (
__s
, 
__c
);

93 
__exã∫_Æways_ölöe
 const *

94 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


96  
	`__buûtö_rödex
 (
__s
, 
__c
);

99 
	}
}

101 *
	$rödex
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


109 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

113 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

114 
__THROW
 
__©åibuã_puª__
;

117 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
;

120 #ifdef 
__USE_XOPEN2K8


124 
	~<xloˇÀ.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

131 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

132 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

133 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

136 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@
1
.
1
/usr/include
193
4715
src/glsl/deferred.fs
src/io/file.c
src/io/file.h
src/io/gl/color.h
src/io/gl/cubemap.c
src/io/gl/cubemap.h
src/io/gl/framebuffer.c
src/io/gl/framebuffer.h
src/io/gl/fvmesh.c
src/io/gl/fvmesh.h
src/io/gl/gl.c
src/io/gl/gl.h
src/io/gl/mesh.c
src/io/gl/mesh.h
src/io/gl/shader.c
src/io/gl/shader.h
src/io/gl/texture.c
src/io/gl/texture.h
src/io/tga.c
src/io/tga.h
src/util/algo/bits.c
src/util/algo/bits.h
src/util/algo/search.c
src/util/algo/search.h
src/util/algo/sort.c
src/util/algo/sort.h
src/util/hash.c
src/util/hash.h
src/util/math/angles.c
src/util/math/angles.h
src/util/math/const.h
src/util/math/convert.c
src/util/math/convert.h
src/util/math/geom/ball.c
src/util/math/geom/ball.h
src/util/math/geom/box.h
src/util/math/geom/line.c
src/util/math/geom/line.h
src/util/math/geom/obox.h
src/util/math/geom/spline.c
src/util/math/geom/spline.h
src/util/math/geom/tri.c
src/util/math/geom/tri.h
src/util/math/matrix.c
src/util/math/matrix.h
src/util/math/raster.c
src/util/math/raster.h
src/util/math/scalar.c
src/util/math/scalar.h
src/util/math/sequence.c
src/util/math/sequence.h
src/util/math/stats.c
src/util/math/stats.h
src/util/math/vec.c
src/util/math/vec.h
src/util/noise.c
src/util/noise.h
src/util/random.c
src/util/random.h
src/util/script/luaapi.c
src/util/script/luaapi.h
src/util/str.c
src/util/str.h
src/util/struct/iterator.c
src/util/struct/iterator.h
src/util/struct/kdtree.c
src/util/struct/kdtree.h
src/util/struct/list.c
src/util/struct/list.h
src/util/struct/octgrid.c
src/util/struct/octgrid.h
src/util/struct/octree.c
src/util/struct/octree.h
src/util/struct/rtree.c
src/util/struct/rtree.h
src/util/struct/tmesh.c
src/util/struct/tmesh.h
src/util/struct/varray.c
src/util/struct/varray.h
src/util/time.c
src/util/time.h
test/main.c
/usr/include/GL/gl.h
/usr/include/GL/glew.h
/usr/include/alloca.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/lauxlib.h
/usr/include/limits.h
/usr/include/lua.h
/usr/include/lualib.h
/usr/include/math.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/GL/glext.h
/usr/include/GL/glu.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libio.h
/usr/include/luaconf.h
/usr/include/sys/select.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/readline/history.h
/usr/include/readline/readline.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/sysmacros.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
/usr/include/readline/keymaps.h
/usr/include/readline/rlstdc.h
/usr/include/readline/rltypedefs.h
/usr/include/readline/tilde.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/readline/chardefs.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/setjmp.h
/usr/include/memory.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/bits/sched.h
