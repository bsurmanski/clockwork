import os
import os.path
import platform
import shutil

libbuilddir="build/"
srcdir="src/"
libdir="lib/"
libname="cw"

libs = ["GLEW", "GL", "m", "lua"]
win32_libs = ["mingw32", "glew32", "opengl32", "m", "pthreadGC2", "lua"]
gcclibdir = []

debugflags = ["-std=c99", "-D DEBUG", "-O0", "-g", "-ftrapv",\
"-Winit-self", "-Wimplicit", "-Wreturn-type", "-Wuninitialized",\
"-Wtrampolines", "-Wfloat-equal", "-Waddress", "-Wall", "-Wno-unused", "-pedantic",
"-Wshadow", "-Wstrict-prototypes", "-Wmissing-prototypes", "-Wno-pointer-to-int-cast", "-Wno-int-to-pointer-cast", "-Wunused-function"]

releaseflags = ["-std=c99", "-O3", "-ftrapv",\
"-Winit-self", "-Wimplicit", "-Wreturn-type", "-Wuninitialized",\
"-Wtrampolines", "-Wfloat-equal", "-Waddress", "-Wall", "-Wno-unused", "-pedantic",
"-Wshadow", "-Wstrict-prototypes", "-Wmissing-prototypes", "-Wno-pointer-to-int-cast", "-Wno-int-to-pointer-cast",\
"-ftree-vectorize"]

sources = \
[\
"util/hash.c", \
"util/str.c", \
"util/noise.c", \
"util/random.c", \
"util/time.c", \
"util/algo/sort.c", \
"util/algo/bits.c", \
"util/math/matrix.c", \
"util/math/scalar.c", \
"util/math/stats.c", \
"util/math/vec.c", \
"util/math/convert.c", \
"util/math/angles.c", \
"util/math/geom/line.c", \
"util/math/geom/spline.c", \
"util/math/geom/tri.c", \
"util/math/geom/ball.c", \
"util/script/luaapi.c", \
"util/struct/kdtree.c", \
"util/struct/octree.c", \
"util/struct/iterator.c", \
"util/struct/list.c", \
"util/struct/varray.c", \
"io/file.c", \
"io/tga.c", \
"io/gl/gl.c", \
"io/gl/mesh.c", \
"io/gl/fvmesh.c", \
"io/gl/shader.c", \
"io/gl/texture.c", \
"io/gl/cubemap.c", \
"io/gl/framebuffer.c", \
]

if GetOption('count'):
    os.system('find '+ srcdir + ' -regex ".*\(c\|h\|lua\|frag\|vert\|glsl\)" | xargs wc')

if GetOption('doc'):
    os.system("doxygen doc/Doxyfile")

if not GetOption('count') and not GetOption('doc'):
    env = Environment(ENV=os.environ, \
            CCFLAGS=(releaseflags if GetOption('release') else debugflags), \
            CPPPATH=srcdir)

    #if on windows
    if env['PLATFORM'] == 'win32':
        env['CCFLAGS'] += ["-mwindows"]
        libs = win32_libs
        gcclibdir += ["C:\\MinGW\\lib\\"]
        Tool('mingw')(env)
        Tool('gcc')(env)
    else: #not on windows, linux
        env['CCFLAGS'] += ['-pthread']
        libs += ["pthread"]

    env.Repository(srcdir)

    for i in range(0,len(sources)):
        sources[i] = srcdir + sources[i]

    objects = [env.SharedObject(libbuilddir + os.path.splitext(os.path.basename(source))[0], source) for source in sources]

    if not GetOption('clean'):
        f = open("cscope.files", "w")
        [f.write(source + "\n") for source in sources]
        f.close()

    libprog = env.SharedLibrary(target=(libdir+libname), LIBS=libs, LIBPATH=gcclibdir, source=objects)
    Default(libprog)
